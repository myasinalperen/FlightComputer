
RMII.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eec4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bbc  0800f164  0800f164  00010164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011d20  08011d20  00012d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011d28  08011d28  00012d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011d2c  08011d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  24000000  08011d30  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .Rx_PoolSection 00004983  2400008c  08011dbc  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .RxDecripSection 00000060  24004a10  0801673f  00017a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .TxDecripSection 00000060  24004a70  0801679f  00017a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00003344  24004ad0  080167ff  00017ad0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  24007e14  080167ff  00017e14  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00017ad0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3b0  00000000  00000000  00017afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f08  00000000  00000000  00033eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b8  00000000  00000000  00038db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9c  00000000  00000000  0003a170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00041aac  00000000  00000000  0003b10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023fee  00000000  00000000  0007cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001678ea  00000000  00000000  000a0ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00208490  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005728  00000000  00000000  002084d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005e  00000000  00000000  0020dbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24004ad0 	.word	0x24004ad0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f14c 	.word	0x0800f14c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24004ad4 	.word	0x24004ad4
 80002dc:	0800f14c 	.word	0x0800f14c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 f937 	bl	80005f8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b39      	ldr	r3, [pc, #228]	@ (8000470 <main+0xf0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b33      	ldr	r3, [pc, #204]	@ (8000470 <main+0xf0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000470 <main+0xf0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000470 <main+0xf0>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b27      	ldr	r3, [pc, #156]	@ (8000470 <main+0xf0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b24      	ldr	r3, [pc, #144]	@ (8000470 <main+0xf0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b21      	ldr	r3, [pc, #132]	@ (8000470 <main+0xf0>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80003f0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4916      	ldr	r1, [pc, #88]	@ (8000470 <main+0xf0>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	607a      	str	r2, [r7, #4]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60ba      	str	r2, [r7, #8]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <main+0xf0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <main+0xf0>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 fbd2 	bl	8000bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f810 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 f878 	bl	800054c <MX_GPIO_Init>
  MX_LWIP_Init();
 800045c:	f003 fb64 	bl	8003b28 <MX_LWIP_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <main+0xf4>)
 8000462:	f003 fdcd 	bl	8004000 <ethernetif_input>
	  sys_check_timeouts();
 8000466:	f00b f97f 	bl	800b768 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 800046a:	bf00      	nop
 800046c:	e7f8      	b.n	8000460 <main+0xe0>
 800046e:	bf00      	nop
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	24004af4 	.word	0x24004af4

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09c      	sub	sp, #112	@ 0x70
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000482:	224c      	movs	r2, #76	@ 0x4c
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f00d ffbb 	bl	800e402 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	1d3b      	adds	r3, r7, #4
 800048e:	2220      	movs	r2, #32
 8000490:	2100      	movs	r1, #0
 8000492:	4618      	mov	r0, r3
 8000494:	f00d ffb5 	bl	800e402 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000498:	2002      	movs	r0, #2
 800049a:	f002 fb51 	bl	8002b40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800049e:	2300      	movs	r3, #0
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <SystemClock_Config+0xcc>)
 80004a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004a6:	4a27      	ldr	r2, [pc, #156]	@ (8000544 <SystemClock_Config+0xcc>)
 80004a8:	f023 0301 	bic.w	r3, r3, #1
 80004ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004ae:	4b25      	ldr	r3, [pc, #148]	@ (8000544 <SystemClock_Config+0xcc>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	4b23      	ldr	r3, [pc, #140]	@ (8000548 <SystemClock_Config+0xd0>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80004c0:	4a21      	ldr	r2, [pc, #132]	@ (8000548 <SystemClock_Config+0xd0>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <SystemClock_Config+0xd0>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004d4:	bf00      	nop
 80004d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000548 <SystemClock_Config+0xd0>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004e2:	d1f8      	bne.n	80004d6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e4:	2302      	movs	r3, #2
 80004e6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004e8:	2301      	movs	r3, #1
 80004ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2340      	movs	r3, #64	@ 0x40
 80004ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004f0:	2300      	movs	r3, #0
 80004f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f002 fb5b 	bl	8002bb4 <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000504:	f000 f8a5 	bl	8000652 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	233f      	movs	r3, #63	@ 0x3f
 800050a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800050c:	2300      	movs	r3, #0
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2101      	movs	r1, #1
 800052c:	4618      	mov	r0, r3
 800052e:	f002 ff9b 	bl	8003468 <HAL_RCC_ClockConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000538:	f000 f88b 	bl	8000652 <Error_Handler>
  }
}
 800053c:	bf00      	nop
 800053e:	3770      	adds	r7, #112	@ 0x70
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	58000400 	.word	0x58000400
 8000548:	58024800 	.word	0x58024800

0800054c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b087      	sub	sp, #28
 8000550:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000552:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 800055a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800055e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000562:	4b24      	ldr	r3, [pc, #144]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000570:	4b20      	ldr	r3, [pc, #128]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000576:	4a1f      	ldr	r2, [pc, #124]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000580:	4b1c      	ldr	r3, [pc, #112]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b19      	ldr	r3, [pc, #100]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000594:	4a17      	ldr	r2, [pc, #92]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800059e:	4b15      	ldr	r3, [pc, #84]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a4:	f003 0301 	and.w	r3, r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005b2:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d0:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <MX_GPIO_Init+0xa8>)
 80005dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005e8:	bf00      	nop
 80005ea:	371c      	adds	r7, #28
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr
 80005f4:	58024400 	.word	0x58024400

080005f8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800060a:	f000 fc8b 	bl	8000f24 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800060e:	2301      	movs	r3, #1
 8000610:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000612:	2300      	movs	r3, #0
 8000614:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000616:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800061a:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800061c:	230e      	movs	r3, #14
 800061e:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000620:	2300      	movs	r3, #0
 8000622:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000624:	2301      	movs	r3, #1
 8000626:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000628:	2303      	movs	r3, #3
 800062a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800062c:	2301      	movs	r3, #1
 800062e:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000630:	2301      	movs	r3, #1
 8000632:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800063c:	463b      	mov	r3, r7
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fca8 	bl	8000f94 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000644:	2004      	movs	r0, #4
 8000646:	f000 fc85 	bl	8000f54 <HAL_MPU_Enable>

}
 800064a:	bf00      	nop
 800064c:	3710      	adds	r7, #16
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000656:	b672      	cpsid	i
}
 8000658:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800065a:	bf00      	nop
 800065c:	e7fd      	b.n	800065a <Error_Handler+0x8>
	...

08000660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000666:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <HAL_MspInit+0x30>)
 8000668:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800066c:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <HAL_MspInit+0x30>)
 800066e:	f043 0302 	orr.w	r3, r3, #2
 8000672:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <HAL_MspInit+0x30>)
 8000678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800067c:	f003 0302 	and.w	r3, r3, #2
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	58024400 	.word	0x58024400

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr

080006d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr

080006e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ea:	f000 faf7 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  return 1;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
	...

08000704 <_kill>:

int _kill(int pid, int sig)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800070e:	4b05      	ldr	r3, [pc, #20]	@ (8000724 <_kill+0x20>)
 8000710:	2216      	movs	r2, #22
 8000712:	601a      	str	r2, [r3, #0]
  return -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000718:	4618      	mov	r0, r3
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	24007e04 	.word	0x24007e04

08000728 <_exit>:

void _exit (int status)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ffe5 	bl	8000704 <_kill>
  while (1) {}    /* Make sure we hang here */
 800073a:	bf00      	nop
 800073c:	e7fd      	b.n	800073a <_exit+0x12>

0800073e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	e00a      	b.n	8000766 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000750:	f3af 8000 	nop.w
 8000754:	4601      	mov	r1, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1c5a      	adds	r2, r3, #1
 800075a:	60ba      	str	r2, [r7, #8]
 800075c:	b2ca      	uxtb	r2, r1
 800075e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	3301      	adds	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697a      	ldr	r2, [r7, #20]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	429a      	cmp	r2, r3
 800076c:	dbf0      	blt.n	8000750 <_read+0x12>
  }

  return len;
 800076e:	687b      	ldr	r3, [r7, #4]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e009      	b.n	800079e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	1c5a      	adds	r2, r3, #1
 800078e:	60ba      	str	r2, [r7, #8]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	3301      	adds	r3, #1
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	dbf1      	blt.n	800078a <_write+0x12>
  }
  return len;
 80007a6:	687b      	ldr	r3, [r7, #4]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <_close>:

int _close(int file)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007bc:	4618      	mov	r0, r3
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr

080007c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007d8:	605a      	str	r2, [r3, #4]
  return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	370c      	adds	r7, #12
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <_isatty>:

int _isatty(int file)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007f0:	2301      	movs	r3, #1
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007fe:	b480      	push	{r7}
 8000800:	b085      	sub	sp, #20
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800080a:	2300      	movs	r3, #0
}
 800080c:	4618      	mov	r0, r3
 800080e:	3714      	adds	r7, #20
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000818:	b480      	push	{r7}
 800081a:	b087      	sub	sp, #28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000820:	4a14      	ldr	r2, [pc, #80]	@ (8000874 <_sbrk+0x5c>)
 8000822:	4b15      	ldr	r3, [pc, #84]	@ (8000878 <_sbrk+0x60>)
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	4b13      	ldr	r3, [pc, #76]	@ (800087c <_sbrk+0x64>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d102      	bne.n	800083a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000834:	4b11      	ldr	r3, [pc, #68]	@ (800087c <_sbrk+0x64>)
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <_sbrk+0x68>)
 8000838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <_sbrk+0x64>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4413      	add	r3, r2
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	429a      	cmp	r2, r3
 8000846:	d205      	bcs.n	8000854 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000848:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <_sbrk+0x6c>)
 800084a:	220c      	movs	r2, #12
 800084c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800084e:	f04f 33ff 	mov.w	r3, #4294967295
 8000852:	e009      	b.n	8000868 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <_sbrk+0x64>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <_sbrk+0x64>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4413      	add	r3, r2
 8000862:	4a06      	ldr	r2, [pc, #24]	@ (800087c <_sbrk+0x64>)
 8000864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000866:	68fb      	ldr	r3, [r7, #12]
}
 8000868:	4618      	mov	r0, r3
 800086a:	371c      	adds	r7, #28
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr
 8000874:	24080000 	.word	0x24080000
 8000878:	00000400 	.word	0x00000400
 800087c:	24004aec 	.word	0x24004aec
 8000880:	24007e18 	.word	0x24007e18
 8000884:	24007e04 	.word	0x24007e04

08000888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800088c:	4b37      	ldr	r3, [pc, #220]	@ (800096c <SystemInit+0xe4>)
 800088e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000892:	4a36      	ldr	r2, [pc, #216]	@ (800096c <SystemInit+0xe4>)
 8000894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800089c:	4b34      	ldr	r3, [pc, #208]	@ (8000970 <SystemInit+0xe8>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f003 030f 	and.w	r3, r3, #15
 80008a4:	2b06      	cmp	r3, #6
 80008a6:	d807      	bhi.n	80008b8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <SystemInit+0xe8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f023 030f 	bic.w	r3, r3, #15
 80008b0:	4a2f      	ldr	r2, [pc, #188]	@ (8000970 <SystemInit+0xe8>)
 80008b2:	f043 0307 	orr.w	r3, r3, #7
 80008b6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80008b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000974 <SystemInit+0xec>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a2d      	ldr	r2, [pc, #180]	@ (8000974 <SystemInit+0xec>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	@ (8000974 <SystemInit+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <SystemInit+0xec>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4929      	ldr	r1, [pc, #164]	@ (8000974 <SystemInit+0xec>)
 80008d0:	4b29      	ldr	r3, [pc, #164]	@ (8000978 <SystemInit+0xf0>)
 80008d2:	4013      	ands	r3, r2
 80008d4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008d6:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <SystemInit+0xe8>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d007      	beq.n	80008f2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008e2:	4b23      	ldr	r3, [pc, #140]	@ (8000970 <SystemInit+0xe8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f023 030f 	bic.w	r3, r3, #15
 80008ea:	4a21      	ldr	r2, [pc, #132]	@ (8000970 <SystemInit+0xe8>)
 80008ec:	f043 0307 	orr.w	r3, r3, #7
 80008f0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008f2:	4b20      	ldr	r3, [pc, #128]	@ (8000974 <SystemInit+0xec>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000974 <SystemInit+0xec>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <SystemInit+0xec>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000904:	4b1b      	ldr	r3, [pc, #108]	@ (8000974 <SystemInit+0xec>)
 8000906:	4a1d      	ldr	r2, [pc, #116]	@ (800097c <SystemInit+0xf4>)
 8000908:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800090a:	4b1a      	ldr	r3, [pc, #104]	@ (8000974 <SystemInit+0xec>)
 800090c:	4a1c      	ldr	r2, [pc, #112]	@ (8000980 <SystemInit+0xf8>)
 800090e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000910:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <SystemInit+0xec>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	@ (8000984 <SystemInit+0xfc>)
 8000914:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000916:	4b17      	ldr	r3, [pc, #92]	@ (8000974 <SystemInit+0xec>)
 8000918:	2200      	movs	r2, #0
 800091a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800091c:	4b15      	ldr	r3, [pc, #84]	@ (8000974 <SystemInit+0xec>)
 800091e:	4a19      	ldr	r2, [pc, #100]	@ (8000984 <SystemInit+0xfc>)
 8000920:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000922:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <SystemInit+0xec>)
 8000924:	2200      	movs	r2, #0
 8000926:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <SystemInit+0xec>)
 800092a:	4a16      	ldr	r2, [pc, #88]	@ (8000984 <SystemInit+0xfc>)
 800092c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <SystemInit+0xec>)
 8000930:	2200      	movs	r2, #0
 8000932:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000934:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <SystemInit+0xec>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <SystemInit+0xec>)
 800093a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800093e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000940:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <SystemInit+0xec>)
 8000942:	2200      	movs	r2, #0
 8000944:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000946:	4b10      	ldr	r3, [pc, #64]	@ (8000988 <SystemInit+0x100>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b10      	ldr	r3, [pc, #64]	@ (800098c <SystemInit+0x104>)
 800094c:	4013      	ands	r3, r2
 800094e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000952:	d202      	bcs.n	800095a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <SystemInit+0x108>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <SystemInit+0x10c>)
 800095c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000960:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	e000ed00 	.word	0xe000ed00
 8000970:	52002000 	.word	0x52002000
 8000974:	58024400 	.word	0x58024400
 8000978:	eaf6ed7f 	.word	0xeaf6ed7f
 800097c:	02020200 	.word	0x02020200
 8000980:	01ff0000 	.word	0x01ff0000
 8000984:	01010280 	.word	0x01010280
 8000988:	5c001000 	.word	0x5c001000
 800098c:	ffff0000 	.word	0xffff0000
 8000990:	51008108 	.word	0x51008108
 8000994:	52004000 	.word	0x52004000

08000998 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000998:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800099c:	f7ff ff74 	bl	8000888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009a2:	490d      	ldr	r1, [pc, #52]	@ (80009d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009a4:	4a0d      	ldr	r2, [pc, #52]	@ (80009dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009a8:	e002      	b.n	80009b0 <LoopCopyDataInit>

080009aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ae:	3304      	adds	r3, #4

080009b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b4:	d3f9      	bcc.n	80009aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009b8:	4c0a      	ldr	r4, [pc, #40]	@ (80009e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009bc:	e001      	b.n	80009c2 <LoopFillZerobss>

080009be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c0:	3204      	adds	r2, #4

080009c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c4:	d3fb      	bcc.n	80009be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009c6:	f00d fd6b 	bl	800e4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ca:	f7ff fcd9 	bl	8000380 <main>
  bx  lr
 80009ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80009d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009d8:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 80009dc:	08011d30 	.word	0x08011d30
  ldr r2, =_sbss
 80009e0:	24004ad0 	.word	0x24004ad0
  ldr r4, =_ebss
 80009e4:	24007e14 	.word	0x24007e14

080009e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009e8:	e7fe      	b.n	80009e8 <ADC3_IRQHandler>

080009ea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b083      	sub	sp, #12
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <LAN8742_RegisterBusIO+0x28>
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	68db      	ldr	r3, [r3, #12]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d007      	beq.n	8000a12 <LAN8742_RegisterBusIO+0x28>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d003      	beq.n	8000a12 <LAN8742_RegisterBusIO+0x28>
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d102      	bne.n	8000a18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000a12:	f04f 33ff 	mov.w	r3, #4294967295
 8000a16:	e014      	b.n	8000a42 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	691a      	ldr	r2, [r3, #16]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d139      	bne.n	8000ade <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2220      	movs	r2, #32
 8000a7c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	e01c      	b.n	8000abe <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f107 020c 	add.w	r2, r7, #12
 8000a8c:	2112      	movs	r1, #18
 8000a8e:	6978      	ldr	r0, [r7, #20]
 8000a90:	4798      	blx	r3
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	da03      	bge.n	8000aa0 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000a98:	f06f 0304 	mvn.w	r3, #4
 8000a9c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000a9e:	e00b      	b.n	8000ab8 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d105      	bne.n	8000ab8 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
         break;
 8000ab6:	e005      	b.n	8000ac4 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	3301      	adds	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b1f      	cmp	r3, #31
 8000ac2:	d9df      	bls.n	8000a84 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b1f      	cmp	r3, #31
 8000aca:	d902      	bls.n	8000ad2 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000acc:	f06f 0302 	mvn.w	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d102      	bne.n	8000ade <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000ade:	693b      	ldr	r3, [r7, #16]
 }
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	687a      	ldr	r2, [r7, #4]
 8000afa:	6810      	ldr	r0, [r2, #0]
 8000afc:	f107 020c 	add.w	r2, r7, #12
 8000b00:	2101      	movs	r1, #1
 8000b02:	4798      	blx	r3
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	da02      	bge.n	8000b10 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b0a:	f06f 0304 	mvn.w	r3, #4
 8000b0e:	e06e      	b.n	8000bee <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6810      	ldr	r0, [r2, #0]
 8000b18:	f107 020c 	add.w	r2, r7, #12
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4798      	blx	r3
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da02      	bge.n	8000b2c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b26:	f06f 0304 	mvn.w	r3, #4
 8000b2a:	e060      	b.n	8000bee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e059      	b.n	8000bee <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	6810      	ldr	r0, [r2, #0]
 8000b42:	f107 020c 	add.w	r2, r7, #12
 8000b46:	2100      	movs	r1, #0
 8000b48:	4798      	blx	r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	da02      	bge.n	8000b56 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000b50:	f06f 0304 	mvn.w	r3, #4
 8000b54:	e04b      	b.n	8000bee <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11b      	bne.n	8000b98 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d006      	beq.n	8000b78 <LAN8742_GetLinkState+0x90>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000b74:	2302      	movs	r3, #2
 8000b76:	e03a      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e033      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000b90:	2304      	movs	r3, #4
 8000b92:	e02c      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000b94:	2305      	movs	r3, #5
 8000b96:	e02a      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	6810      	ldr	r0, [r2, #0]
 8000ba0:	f107 020c 	add.w	r2, r7, #12
 8000ba4:	211f      	movs	r1, #31
 8000ba6:	4798      	blx	r3
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	da02      	bge.n	8000bb4 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000bae:	f06f 0304 	mvn.w	r3, #4
 8000bb2:	e01c      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d101      	bne.n	8000bc2 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	e015      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f003 031c 	and.w	r3, r3, #28
 8000bc8:	2b18      	cmp	r3, #24
 8000bca:	d101      	bne.n	8000bd0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	e00e      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f003 031c 	and.w	r3, r3, #28
 8000bd6:	2b08      	cmp	r3, #8
 8000bd8:	d101      	bne.n	8000bde <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	e007      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f003 031c 	and.w	r3, r3, #28
 8000be4:	2b14      	cmp	r3, #20
 8000be6:	d101      	bne.n	8000bec <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000be8:	2304      	movs	r3, #4
 8000bea:	e000      	b.n	8000bee <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000bec:	2305      	movs	r3, #5
    }
  }
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfe:	2003      	movs	r0, #3
 8000c00:	f000 f95e 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c04:	f002 fde6 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_Init+0x68>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4913      	ldr	r1, [pc, #76]	@ (8000c64 <HAL_Init+0x6c>)
 8000c16:	5ccb      	ldrb	r3, [r1, r3]
 8000c18:	f003 031f 	and.w	r3, r3, #31
 8000c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_Init+0x68>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	f003 030f 	and.w	r3, r3, #15
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_Init+0x6c>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	f003 031f 	and.w	r3, r3, #31
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <HAL_Init+0x70>)
 8000c3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000c6c <HAL_Init+0x74>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 f814 	bl	8000c70 <HAL_InitTick>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e002      	b.n	8000c58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c52:	f7ff fd05 	bl	8000660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	58024400 	.word	0x58024400
 8000c64:	08011b44 	.word	0x08011b44
 8000c68:	24000004 	.word	0x24000004
 8000c6c:	24000000 	.word	0x24000000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c78:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d101      	bne.n	8000c84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c80:	2301      	movs	r3, #1
 8000c82:	e021      	b.n	8000cc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c84:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <HAL_InitTick+0x64>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <HAL_InitTick+0x60>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 f935 	bl	8000f0a <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 f90d 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x68>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2400000c 	.word	0x2400000c
 8000cd4:	24000000 	.word	0x24000000
 8000cd8:	24000008 	.word	0x24000008

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	2400000c 	.word	0x2400000c
 8000d00:	24004af0 	.word	0x24004af0

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	24004af0 	.word	0x24004af0

08000d1c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetREVID+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0c1b      	lsrs	r3, r3, #16
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	5c001000 	.word	0x5c001000

08000d34 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000d3c:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000d44:	4904      	ldr	r1, [pc, #16]	@ (8000d58 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	604b      	str	r3, [r1, #4]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	58000400 	.word	0x58000400

08000d5c <__NVIC_SetPriorityGrouping>:
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d84:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	@ (8000d9c <__NVIC_SetPriorityGrouping+0x40>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00
 8000da0:	05fa0000 	.word	0x05fa0000

08000da4 <__NVIC_GetPriorityGrouping>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da8:	4b04      	ldr	r3, [pc, #16]	@ (8000dbc <__NVIC_GetPriorityGrouping+0x18>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	0a1b      	lsrs	r3, r3, #8
 8000dae:	f003 0307 	and.w	r3, r3, #7
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <__NVIC_SetPriority>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	@ (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	@ (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	88fb      	ldrh	r3, [r7, #6]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	@ (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff47 	bl	8000d5c <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff5e 	bl	8000da4 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff90 	bl	8000e14 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5f 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffb2 	bl	8000e7c <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f28:	f3bf 8f5f 	dmb	sy
}
 8000f2c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	@ (8000f4c <HAL_MPU_Disable+0x28>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_MPU_Disable+0x28>)
 8000f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f38:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f3a:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_MPU_Disable+0x2c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	e000ed90 	.word	0xe000ed90

08000f54 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f8c <HAL_MPU_Enable+0x38>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_MPU_Enable+0x3c>)
 8000f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <HAL_MPU_Enable+0x3c>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f70:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f72:	f3bf 8f4f 	dsb	sy
}
 8000f76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f78:	f3bf 8f6f 	isb	sy
}
 8000f7c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed90 	.word	0xe000ed90
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	785a      	ldrb	r2, [r3, #1]
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_MPU_ConfigRegion+0x7c>)
 8000fa2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_MPU_ConfigRegion+0x7c>)
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4a19      	ldr	r2, [pc, #100]	@ (8001010 <HAL_MPU_ConfigRegion+0x7c>)
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fb0:	4a17      	ldr	r2, [pc, #92]	@ (8001010 <HAL_MPU_ConfigRegion+0x7c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7b1b      	ldrb	r3, [r3, #12]
 8000fbc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7adb      	ldrb	r3, [r3, #11]
 8000fc2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fc4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7a9b      	ldrb	r3, [r3, #10]
 8000fca:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fcc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7b5b      	ldrb	r3, [r3, #13]
 8000fd2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7b9b      	ldrb	r3, [r3, #14]
 8000fda:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7bdb      	ldrb	r3, [r3, #15]
 8000fe2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fe4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7a5b      	ldrb	r3, [r3, #9]
 8000fea:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7a1b      	ldrb	r3, [r3, #8]
 8000ff2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ff4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ffe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001000:	6113      	str	r3, [r2, #16]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed90 	.word	0xe000ed90

08001014 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e0e3      	b.n	80011ee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800102c:	2b00      	cmp	r3, #0
 800102e:	d106      	bne.n	800103e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2223      	movs	r2, #35	@ 0x23
 8001034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f003 f851 	bl	80040e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103e:	4b6e      	ldr	r3, [pc, #440]	@ (80011f8 <HAL_ETH_Init+0x1e4>)
 8001040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001044:	4a6c      	ldr	r2, [pc, #432]	@ (80011f8 <HAL_ETH_Init+0x1e4>)
 8001046:	f043 0302 	orr.w	r3, r3, #2
 800104a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800104e:	4b6a      	ldr	r3, [pc, #424]	@ (80011f8 <HAL_ETH_Init+0x1e4>)
 8001050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	7a1b      	ldrb	r3, [r3, #8]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d103      	bne.n	800106c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fe65 	bl	8000d34 <HAL_SYSCFG_ETHInterfaceSelect>
 800106a:	e003      	b.n	8001074 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800106c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001070:	f7ff fe60 	bl	8000d34 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001074:	4b61      	ldr	r3, [pc, #388]	@ (80011fc <HAL_ETH_Init+0x1e8>)
 8001076:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	6812      	ldr	r2, [r2, #0]
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800108e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001090:	f7ff fe38 	bl	8000d04 <HAL_GetTick>
 8001094:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001096:	e011      	b.n	80010bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001098:	f7ff fe34 	bl	8000d04 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010a6:	d909      	bls.n	80010bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2204      	movs	r2, #4
 80010ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	22e0      	movs	r2, #224	@ 0xe0
 80010b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e098      	b.n	80011ee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1e4      	bne.n	8001098 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 fdb4 	bl	8001c3c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80010d4:	f002 fcf8 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a49      	ldr	r2, [pc, #292]	@ (8001200 <HAL_ETH_Init+0x1ec>)
 80010dc:	fba2 2303 	umull	r2, r3, r2, r3
 80010e0:	0c9a      	lsrs	r2, r3, #18
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3a01      	subs	r2, #1
 80010e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f000 ff97 	bl	8002020 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80010fe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800110a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800110e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d009      	beq.n	8001132 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2201      	movs	r2, #1
 8001122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	22e0      	movs	r2, #224	@ 0xe0
 800112a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e05d      	b.n	80011ee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800113a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <HAL_ETH_Init+0x1f0>)
 8001140:	4013      	ands	r3, r2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6952      	ldr	r2, [r2, #20]
 8001146:	0051      	lsls	r1, r2, #1
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	430b      	orrs	r3, r1
 800114e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001152:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 ffff 	bl	800215a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f001 f845 	bl	80021ec <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	3305      	adds	r3, #5
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	021a      	lsls	r2, r3, #8
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	430a      	orrs	r2, r1
 800117c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	3303      	adds	r3, #3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	061a      	lsls	r2, r3, #24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	041b      	lsls	r3, r3, #16
 8001194:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	3301      	adds	r3, #1
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80011ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80011b0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_ETH_Init+0x1f4>)
 80011c2:	430b      	orrs	r3, r1
 80011c4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b0d      	ldr	r3, [pc, #52]	@ (800120c <HAL_ETH_Init+0x1f8>)
 80011d6:	430b      	orrs	r3, r1
 80011d8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2200      	movs	r2, #0
 80011e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2210      	movs	r2, #16
 80011e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58000400 	.word	0x58000400
 8001200:	431bde83 	.word	0x431bde83
 8001204:	ffff8001 	.word	0xffff8001
 8001208:	0c020060 	.word	0x0c020060
 800120c:	0c20c000 	.word	0x0c20c000

08001210 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800121e:	2b10      	cmp	r3, #16
 8001220:	d153      	bne.n	80012ca <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2223      	movs	r2, #35	@ 0x23
 8001226:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2204      	movs	r2, #4
 800122e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f9f3 	bl	800161c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 0202 	orr.w	r2, r2, #2
 8001244:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001272:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	f043 0301 	orr.w	r3, r3, #1
 800127e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001282:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800128e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800129e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012aa:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80012b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80012ba:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2223      	movs	r2, #35	@ 0x23
 80012c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
  }
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012e2:	2b23      	cmp	r3, #35	@ 0x23
 80012e4:	d13f      	bne.n	8001366 <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2223      	movs	r2, #35	@ 0x23
 80012ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f023 0301 	bic.w	r3, r3, #1
 8001302:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001306:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001312:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001322:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f042 0201 	orr.w	r2, r2, #1
 8001346:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 0202 	bic.w	r2, r2, #2
 8001358:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2210      	movs	r2, #16
 800135e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
  }
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138c:	f043 0201 	orr.w	r2, r3, #1
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e07f      	b.n	800149a <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013a0:	2b23      	cmp	r3, #35	@ 0x23
 80013a2:	d179      	bne.n	8001498 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80013a4:	2200      	movs	r2, #0
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f000 ff7d 	bl	80022a8 <ETH_Prepare_Tx_Descriptors>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013ba:	f043 0202 	orr.w	r2, r3, #2
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e068      	b.n	800149a <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80013c8:	f3bf 8f4f 	dsb	sy
}
 80013cc:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3206      	adds	r2, #6
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d904      	bls.n	80013f8 <HAL_ETH_Transmit+0x84>
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f2:	1f1a      	subs	r2, r3, #4
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3106      	adds	r1, #6
 8001404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001408:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800140c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001410:	f7ff fc78 	bl	8000d04 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001416:	e039      	b.n	800148c <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001420:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d012      	beq.n	8001452 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001432:	f043 0208 	orr.w	r2, r3, #8
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001444:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e023      	b.n	800149a <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d018      	beq.n	800148c <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800145a:	f7ff fc53 	bl	8000d04 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	429a      	cmp	r2, r3
 8001468:	d302      	bcc.n	8001470 <HAL_ETH_Transmit+0xfc>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10d      	bne.n	800148c <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001476:	f043 0204 	orr.w	r2, r3, #4
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001486:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e006      	b.n	800149a <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	dbc1      	blt.n	8001418 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	e000      	b.n	800149a <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
  }
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b088      	sub	sp, #32
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d109      	bne.n	80014ce <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0a2      	b.n	8001614 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014d4:	2b23      	cmp	r3, #35	@ 0x23
 80014d6:	d001      	beq.n	80014dc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e09b      	b.n	8001614 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	3212      	adds	r2, #18
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014f2:	f1c3 0304 	rsb	r3, r3, #4
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80014f8:	e064      	b.n	80015c4 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d007      	beq.n	8001516 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d103      	bne.n	800152a <HAL_ETH_ReadData+0x88>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d03a      	beq.n	80015a0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8001566:	2301      	movs	r3, #1
 8001568:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800157a:	461a      	mov	r2, r3
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	b29b      	uxth	r3, r3
 8001580:	f002 ff86 	bl	8004490 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	441a      	add	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	3301      	adds	r3, #1
 80015a4:	61fb      	str	r3, [r7, #28]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d902      	bls.n	80015b2 <HAL_ETH_ReadData+0x110>
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3b04      	subs	r3, #4
 80015b0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69fa      	ldr	r2, [r7, #28]
 80015b6:	3212      	adds	r2, #18
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db06      	blt.n	80015da <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d202      	bcs.n	80015da <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d08f      	beq.n	80014fa <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	441a      	add	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d002      	beq.n	80015f4 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f000 f814 	bl	800161c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d108      	bne.n	8001612 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001628:	2301      	movs	r3, #1
 800162a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001630:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	3212      	adds	r2, #18
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001642:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001644:	e038      	b.n	80016b8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d112      	bne.n	8001674 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4618      	mov	r0, r3
 8001654:	f002 feec 	bl	8004430 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800165e:	2300      	movs	r3, #0
 8001660:	74fb      	strb	r3, [r7, #19]
 8001662:	e007      	b.n	8001674 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	461a      	mov	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	461a      	mov	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8001674:	7cfb      	ldrb	r3, [r7, #19]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01e      	beq.n	80016b8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e003      	b.n	8001694 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 8001692:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3301      	adds	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	2b03      	cmp	r3, #3
 800169e:	d902      	bls.n	80016a6 <ETH_UpdateDescriptor+0x8a>
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	3b04      	subs	r3, #4
 80016a4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	3212      	adds	r2, #18
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	617b      	str	r3, [r7, #20]
      desccount--;
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <ETH_UpdateDescriptor+0xa8>
 80016be:	7cfb      	ldrb	r3, [r7, #19]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1c0      	bne.n	8001646 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d01b      	beq.n	8001706 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3301      	adds	r3, #1
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80016d8:	f3bf 8f5f 	dmb	sy
}
 80016dc:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6919      	ldr	r1, [r3, #16]
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4613      	mov	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	4413      	add	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	18ca      	adds	r2, r1, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016f6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69fa      	ldr	r2, [r7, #28]
 80016fe:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e03e      	b.n	80017ae <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001738:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	055b      	lsls	r3, r3, #21
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	4313      	orrs	r3, r2
 8001754:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f043 030c 	orr.w	r3, r3, #12
 800175c:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001770:	f7ff fac8 	bl	8000d04 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001776:	e009      	b.n	800178c <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8001778:	f7ff fac4 	bl	8000d04 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001786:	d901      	bls.n	800178c <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e010      	b.n	80017ae <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ed      	bne.n	8001778 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e03c      	b.n	8001854 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017e2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	055b      	lsls	r3, r3, #21
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	041b      	lsls	r3, r3, #16
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f023 030c 	bic.w	r3, r3, #12
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_ETH_WritePHYRegister+0xa4>)
 800181a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800181e:	4a0f      	ldr	r2, [pc, #60]	@ (800185c <HAL_ETH_WritePHYRegister+0xa4>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001826:	f7ff fa6d 	bl	8000d04 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800182c:	e009      	b.n	8001842 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800182e:	f7ff fa69 	bl	8000d04 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800183c:	d901      	bls.n	8001842 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e008      	b.n	8001854 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800184a:	f003 0301 	and.w	r3, r3, #1
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ed      	bne.n	800182e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40028000 	.word	0x40028000

08001860 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e1c3      	b.n	8001bfc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 020c 	and.w	r2, r3, #12
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0310 	and.w	r3, r3, #16
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	461a      	mov	r2, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	bf14      	ite	ne
 80018d6:	2301      	movne	r3, #1
 80018d8:	2300      	moveq	r3, #0
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	461a      	mov	r2, r3
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001906:	2b00      	cmp	r3, #0
 8001908:	bf14      	ite	ne
 800190a:	2301      	movne	r3, #1
 800190c:	2300      	moveq	r3, #0
 800190e:	b2db      	uxtb	r3, r3
 8001910:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001920:	2b00      	cmp	r3, #0
 8001922:	bf14      	ite	ne
 8001924:	2301      	movne	r3, #1
 8001926:	2300      	moveq	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	461a      	mov	r2, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	bf14      	ite	ne
 80019a8:	2301      	movne	r3, #1
 80019aa:	2300      	moveq	r3, #0
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	461a      	mov	r2, r3
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bf14      	ite	ne
 80019c2:	2301      	movne	r3, #1
 80019c4:	2300      	moveq	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	461a      	mov	r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80019ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	bf14      	ite	ne
 8001a1e:	2301      	movne	r3, #1
 8001a20:	2300      	moveq	r3, #0
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	bf0c      	ite	eq
 8001a54:	2301      	moveq	r3, #1
 8001a56:	2300      	movne	r3, #0
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001a84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf14      	ite	ne
 8001a8c:	2301      	movne	r3, #1
 8001a8e:	2300      	moveq	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	0e5b      	lsrs	r3, r3, #25
 8001abe:	f003 021f 	and.w	r2, r3, #31
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	bf14      	ite	ne
 8001ad4:	2301      	movne	r3, #1
 8001ad6:	2300      	moveq	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bf14      	ite	ne
 8001afe:	2301      	movne	r3, #1
 8001b00:	2300      	moveq	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	bf0c      	ite	eq
 8001b1a:	2301      	moveq	r3, #1
 8001b1c:	2300      	movne	r3, #0
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6a:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b88:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b98:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001bc6:	f003 0310 	and.w	r3, r3, #16
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	bf0c      	ite	eq
 8001bec:	2301      	moveq	r3, #1
 8001bee:	2300      	movne	r3, #0
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e00b      	b.n	8001c34 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d105      	bne.n	8001c32 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001c26:	6839      	ldr	r1, [r7, #0]
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f857 	bl	8001cdc <ETH_SetMACConfig>

    return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
  }
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c56:	f001 ff37 	bl	8003ac8 <HAL_RCC_GetHCLKFreq>
 8001c5a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8001cc8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d804      	bhi.n	8001c6e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e022      	b.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_ETH_SetMDIOClockRange+0x90>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d204      	bcs.n	8001c80 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e019      	b.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4a13      	ldr	r2, [pc, #76]	@ (8001cd0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d915      	bls.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d804      	bhi.n	8001c9a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	e00c      	b.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001cd8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d804      	bhi.n	8001cac <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	e003      	b.n	8001cb4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	02160ebf 	.word	0x02160ebf
 8001ccc:	03938700 	.word	0x03938700
 8001cd0:	05f5e0ff 	.word	0x05f5e0ff
 8001cd4:	08f0d17f 	.word	0x08f0d17f
 8001cd8:	0ee6b27f 	.word	0x0ee6b27f

08001cdc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001cf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	7b1b      	ldrb	r3, [r3, #12]
 8001cfc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7b5b      	ldrb	r3, [r3, #13]
 8001d04:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001d06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7b9b      	ldrb	r3, [r3, #14]
 8001d0c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001d0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	7bdb      	ldrb	r3, [r3, #15]
 8001d14:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001d16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	7c12      	ldrb	r2, [r2, #16]
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	d102      	bne.n	8001d26 <ETH_SetMACConfig+0x4a>
 8001d20:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0x4c>
 8001d26:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001d28:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	7c52      	ldrb	r2, [r2, #17]
 8001d2e:	2a00      	cmp	r2, #0
 8001d30:	d102      	bne.n	8001d38 <ETH_SetMACConfig+0x5c>
 8001d32:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d36:	e000      	b.n	8001d3a <ETH_SetMACConfig+0x5e>
 8001d38:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001d3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7c9b      	ldrb	r3, [r3, #18]
 8001d40:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001d42:	431a      	orrs	r2, r3
               macconf->Speed |
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001d48:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001d4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	7f1b      	ldrb	r3, [r3, #28]
 8001d54:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001d56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	7f5b      	ldrb	r3, [r3, #29]
 8001d5c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001d5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	7f92      	ldrb	r2, [r2, #30]
 8001d64:	2a00      	cmp	r2, #0
 8001d66:	d102      	bne.n	8001d6e <ETH_SetMACConfig+0x92>
 8001d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6c:	e000      	b.n	8001d70 <ETH_SetMACConfig+0x94>
 8001d6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001d70:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	7fdb      	ldrb	r3, [r3, #31]
 8001d76:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001d78:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d102      	bne.n	8001d8a <ETH_SetMACConfig+0xae>
 8001d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d88:	e000      	b.n	8001d8c <ETH_SetMACConfig+0xb0>
 8001d8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001d8c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001d92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d9a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001d9c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b56      	ldr	r3, [pc, #344]	@ (8001f08 <ETH_SetMACConfig+0x22c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dbe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001dc6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001dc8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001dd0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001dda:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001ddc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001de4:	2a00      	cmp	r2, #0
 8001de6:	d102      	bne.n	8001dee <ETH_SetMACConfig+0x112>
 8001de8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001dec:	e000      	b.n	8001df0 <ETH_SetMACConfig+0x114>
 8001dee:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001df0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <ETH_SetMACConfig+0x230>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	68f9      	ldr	r1, [r7, #12]
 8001e0a:	430b      	orrs	r3, r1
 8001e0c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e14:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <ETH_SetMACConfig+0x234>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001e38:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001e46:	2a00      	cmp	r2, #0
 8001e48:	d101      	bne.n	8001e4e <ETH_SetMACConfig+0x172>
 8001e4a:	2280      	movs	r2, #128	@ 0x80
 8001e4c:	e000      	b.n	8001e50 <ETH_SetMACConfig+0x174>
 8001e4e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001e50:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e56:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e62:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001e66:	4013      	ands	r3, r2
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	68f9      	ldr	r1, [r7, #12]
 8001e6e:	430b      	orrs	r3, r1
 8001e70:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001e78:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001e80:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8e:	f023 0103 	bic.w	r1, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ea6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ec2:	2a00      	cmp	r2, #0
 8001ec4:	d101      	bne.n	8001eca <ETH_SetMACConfig+0x1ee>
 8001ec6:	2240      	movs	r2, #64	@ 0x40
 8001ec8:	e000      	b.n	8001ecc <ETH_SetMACConfig+0x1f0>
 8001eca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ecc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ed4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ed6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001ede:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001eec:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	00048083 	.word	0x00048083
 8001f0c:	c0f88000 	.word	0xc0f88000
 8001f10:	fffffef0 	.word	0xfffffef0

08001f14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b38      	ldr	r3, [pc, #224]	@ (800200c <ETH_SetDMAConfig+0xf8>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6812      	ldr	r2, [r2, #0]
 8001f34:	430b      	orrs	r3, r1
 8001f36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f3a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	791b      	ldrb	r3, [r3, #4]
 8001f40:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	7b1b      	ldrb	r3, [r3, #12]
 8001f4c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8002010 <ETH_SetDMAConfig+0xfc>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	430b      	orrs	r3, r1
 8001f68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f6c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7b5b      	ldrb	r3, [r3, #13]
 8001f72:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f84:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <ETH_SetDMAConfig+0x100>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	68f9      	ldr	r1, [r7, #12]
 8001f92:	430b      	orrs	r3, r1
 8001f94:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001f98:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	7d1b      	ldrb	r3, [r3, #20]
 8001fa4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001fa6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	7f5b      	ldrb	r3, [r3, #29]
 8001fac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fba:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <ETH_SetDMAConfig+0x104>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	68f9      	ldr	r1, [r7, #12]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fce:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	7f1b      	ldrb	r3, [r3, #28]
 8001fd6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fe8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001fec:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <ETH_SetDMAConfig+0x108>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	68f9      	ldr	r1, [r7, #12]
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ffc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	ffff87fd 	.word	0xffff87fd
 8002010:	ffff2ffe 	.word	0xffff2ffe
 8002014:	fffec000 	.word	0xfffec000
 8002018:	ffc0efef 	.word	0xffc0efef
 800201c:	7fc0ffff 	.word	0x7fc0ffff

08002020 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0a4      	sub	sp, #144	@ 0x90
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800202e:	2300      	movs	r3, #0
 8002030:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800203e:	2301      	movs	r3, #1
 8002040:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800205c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002060:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002068:	2300      	movs	r3, #0
 800206a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002078:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800207c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800209a:	2300      	movs	r3, #0
 800209c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80020a2:	2300      	movs	r3, #0
 80020a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80020b8:	2320      	movs	r3, #32
 80020ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80020be:	2301      	movs	r3, #1
 80020c0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80020ca:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80020d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80020d4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020fa:	2300      	movs	r3, #0
 80020fc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020fe:	2301      	movs	r3, #1
 8002100:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002104:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002108:	4619      	mov	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff fde6 	bl	8001cdc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002110:	2301      	movs	r3, #1
 8002112:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002114:	2301      	movs	r3, #1
 8002116:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002118:	2300      	movs	r3, #0
 800211a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800212a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800212e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002130:	2300      	movs	r3, #0
 8002132:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002134:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002138:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002140:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002144:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fee1 	bl	8001f14 <ETH_SetDMAConfig>
}
 8002152:	bf00      	nop
 8002154:	3790      	adds	r7, #144	@ 0x90
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	e01d      	b.n	80021a4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68d9      	ldr	r1, [r3, #12]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	3206      	adds	r2, #6
 800219a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d9de      	bls.n	8002168 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021b8:	461a      	mov	r2, r3
 80021ba:	2303      	movs	r3, #3
 80021bc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021cc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021dc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e023      	b.n	8002242 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6919      	ldr	r1, [r3, #16]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2200      	movs	r2, #0
 8002216:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	3212      	adds	r2, #18
 8002238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3301      	adds	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d9d8      	bls.n	80021fa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2200      	movs	r2, #0
 800225e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800226e:	461a      	mov	r2, r3
 8002270:	2303      	movs	r3, #3
 8002272:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002282:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002296:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800229a:	bf00      	nop
 800229c:	3714      	adds	r7, #20
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b091      	sub	sp, #68	@ 0x44
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3318      	adds	r3, #24
 80022b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80022c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80022ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022ea:	d007      	beq.n	80022fc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80022ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022f0:	3304      	adds	r3, #4
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022fc:	2302      	movs	r3, #2
 80022fe:	e266      	b.n	80027ce <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d044      	beq.n	8002396 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800230c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	4b75      	ldr	r3, [pc, #468]	@ (80024e8 <ETH_Prepare_Tx_Descriptors+0x240>)
 8002312:	4013      	ands	r3, r2
 8002314:	68ba      	ldr	r2, [r7, #8]
 8002316:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002318:	431a      	orrs	r2, r3
 800231a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800231c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800231e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002328:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002338:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b00      	cmp	r3, #0
 8002344:	d027      	beq.n	8002396 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	b29a      	uxth	r2, r3
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	041b      	lsls	r3, r3, #16
 8002352:	431a      	orrs	r2, r3
 8002354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002356:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002362:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	431a      	orrs	r2, r3
 8002372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002374:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002384:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002394:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00e      	beq.n	80023c0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80023a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	4b51      	ldr	r3, [pc, #324]	@ (80024ec <ETH_Prepare_Tx_Descriptors+0x244>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	6992      	ldr	r2, [r2, #24]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80023b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80023bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023be:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0310 	and.w	r3, r3, #16
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d036      	beq.n	8002446 <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80023d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80023e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023e2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80023e4:	f3bf 8f5f 	dmb	sy
}
 80023e8:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80023ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023f4:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80023f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f8:	3301      	adds	r3, #1
 80023fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d902      	bls.n	8002408 <ETH_Prepare_Tx_Descriptors+0x160>
 8002402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002404:	3b04      	subs	r3, #4
 8002406:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8002412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002414:	3301      	adds	r3, #1
 8002416:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002424:	d10f      	bne.n	8002446 <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002430:	f3bf 8f5f 	dmb	sy
}
 8002434:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800243e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002440:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002442:	2302      	movs	r3, #2
 8002444:	e1c3      	b.n	80027ce <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002448:	3301      	adds	r3, #1
 800244a:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800244c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <ETH_Prepare_Tx_Descriptors+0x244>)
 800245c:	4013      	ands	r3, r2
 800245e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002460:	6852      	ldr	r2, [r2, #4]
 8002462:	431a      	orrs	r2, r3
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <ETH_Prepare_Tx_Descriptors+0x248>)
 8002486:	4013      	ands	r3, r2
 8002488:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800248a:	6852      	ldr	r2, [r2, #4]
 800248c:	0412      	lsls	r2, r2, #16
 800248e:	431a      	orrs	r2, r3
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e008      	b.n	80024a8 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002498:	2200      	movs	r2, #0
 800249a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <ETH_Prepare_Tx_Descriptors+0x248>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a6:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0310 	and.w	r3, r3, #16
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d021      	beq.n	80024f8 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80024b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	04db      	lsls	r3, r3, #19
 80024c2:	431a      	orrs	r2, r3
 80024c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c6:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	69d2      	ldr	r2, [r2, #28]
 80024d4:	431a      	orrs	r2, r3
 80024d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d8:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80024da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	e02e      	b.n	8002546 <ETH_Prepare_Tx_Descriptors+0x29e>
 80024e8:	ffff0000 	.word	0xffff0000
 80024ec:	ffffc000 	.word	0xffffc000
 80024f0:	c000ffff 	.word	0xc000ffff
 80024f4:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	4b7b      	ldr	r3, [pc, #492]	@ (80026ec <ETH_Prepare_Tx_Descriptors+0x444>)
 80024fe:	4013      	ands	r3, r2
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	6852      	ldr	r2, [r2, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002508:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d008      	beq.n	8002528 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	431a      	orrs	r2, r3
 8002524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002526:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0320 	and.w	r3, r3, #32
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	431a      	orrs	r2, r3
 8002542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002544:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	431a      	orrs	r2, r3
 8002560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002562:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800256c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256e:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800257c:	f3bf 8f5f 	dmb	sy
}
 8002580:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80da 	beq.w	8002750 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	431a      	orrs	r2, r3
 80025aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ac:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80025ae:	e0cf      	b.n	8002750 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80025b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80025b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ba:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80025bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025be:	3301      	adds	r3, #1
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025c4:	2b03      	cmp	r3, #3
 80025c6:	d902      	bls.n	80025ce <ETH_Prepare_Tx_Descriptors+0x326>
 80025c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025ca:	3b04      	subs	r3, #4
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80025d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80025d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80025e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e2:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025f0:	d007      	beq.n	8002602 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80025f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025f6:	3304      	adds	r3, #4
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d029      	beq.n	8002656 <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800260a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800260e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002610:	2300      	movs	r3, #0
 8002612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002614:	e019      	b.n	800264a <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8002616:	f3bf 8f5f 	dmb	sy
}
 800261a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800261c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002626:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800262a:	3301      	adds	r3, #1
 800262c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002630:	2b03      	cmp	r3, #3
 8002632:	d902      	bls.n	800263a <ETH_Prepare_Tx_Descriptors+0x392>
 8002634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002636:	3b04      	subs	r3, #4
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002646:	3301      	adds	r3, #1
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800264a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800264c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800264e:	429a      	cmp	r2, r3
 8002650:	d3e1      	bcc.n	8002616 <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	e0bb      	b.n	80027ce <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 8002656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002658:	3301      	adds	r3, #1
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800265c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800266c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b1f      	ldr	r3, [pc, #124]	@ (80026f0 <ETH_Prepare_Tx_Descriptors+0x448>)
 8002672:	4013      	ands	r3, r2
 8002674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002676:	6852      	ldr	r2, [r2, #4]
 8002678:	431a      	orrs	r2, r3
 800267a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267c:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002694:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800269c:	4013      	ands	r3, r2
 800269e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026a0:	6852      	ldr	r2, [r2, #4]
 80026a2:	0412      	lsls	r2, r2, #16
 80026a4:	431a      	orrs	r2, r3
 80026a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e008      	b.n	80026be <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80026ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ae:	2200      	movs	r2, #0
 80026b0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80026b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026bc:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80026ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <ETH_Prepare_Tx_Descriptors+0x450>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	69d2      	ldr	r2, [r2, #28]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e020      	b.n	800272c <ETH_Prepare_Tx_Descriptors+0x484>
 80026ea:	bf00      	nop
 80026ec:	ffff8000 	.word	0xffff8000
 80026f0:	ffffc000 	.word	0xffffc000
 80026f4:	c000ffff 	.word	0xc000ffff
 80026f8:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80026fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026fe:	68da      	ldr	r2, [r3, #12]
 8002700:	4b36      	ldr	r3, [pc, #216]	@ (80027dc <ETH_Prepare_Tx_Descriptors+0x534>)
 8002702:	4013      	ands	r3, r2
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	6852      	ldr	r2, [r2, #4]
 8002708:	431a      	orrs	r2, r3
 800270a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270c:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272a:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272e:	3301      	adds	r3, #1
 8002730:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002732:	f3bf 8f5f 	dmb	sy
}
 8002736:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002742:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800274c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800274e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2b00      	cmp	r3, #0
 8002756:	f47f af2b 	bne.w	80025b0 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	e005      	b.n	800277a <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800276e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002778:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800277a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002784:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002788:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800278a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800278c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278e:	3304      	adds	r3, #4
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	440b      	add	r3, r1
 8002794:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800279a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800279c:	f3ef 8310 	mrs	r3, PRIMASK
 80027a0:	613b      	str	r3, [r7, #16]
  return(result);
 80027a2:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	2301      	movs	r3, #1
 80027a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f383 8810 	msr	PRIMASK, r3
}
 80027b0:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	4413      	add	r3, r2
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f383 8810 	msr	PRIMASK, r3
}
 80027ca:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3744      	adds	r7, #68	@ 0x44
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	ffff8000 	.word	0xffff8000

080027e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	@ 0x24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027ee:	4b89      	ldr	r3, [pc, #548]	@ (8002a14 <HAL_GPIO_Init+0x234>)
 80027f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027f2:	e194      	b.n	8002b1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2101      	movs	r1, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8186 	beq.w	8002b18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d005      	beq.n	8002824 <HAL_GPIO_Init+0x44>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d130      	bne.n	8002886 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800285a:	2201      	movs	r2, #1
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	091b      	lsrs	r3, r3, #4
 8002870:	f003 0201 	and.w	r2, r3, #1
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b03      	cmp	r3, #3
 8002890:	d017      	beq.n	80028c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d123      	bne.n	8002916 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	220f      	movs	r2, #15
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	08da      	lsrs	r2, r3, #3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3208      	adds	r2, #8
 8002910:	69b9      	ldr	r1, [r7, #24]
 8002912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2203      	movs	r2, #3
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0203 	and.w	r2, r3, #3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80e0 	beq.w	8002b18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 800295a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800295e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 8002960:	f043 0302 	orr.w	r3, r3, #2
 8002964:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <HAL_GPIO_Init+0x238>)
 800296a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002976:	4a29      	ldr	r2, [pc, #164]	@ (8002a1c <HAL_GPIO_Init+0x23c>)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	089b      	lsrs	r3, r3, #2
 800297c:	3302      	adds	r3, #2
 800297e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	220f      	movs	r2, #15
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a20      	ldr	r2, [pc, #128]	@ (8002a20 <HAL_GPIO_Init+0x240>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d052      	beq.n	8002a48 <HAL_GPIO_Init+0x268>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a24 <HAL_GPIO_Init+0x244>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_GPIO_Init+0x22e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002a28 <HAL_GPIO_Init+0x248>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02b      	beq.n	8002a0a <HAL_GPIO_Init+0x22a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a2c <HAL_GPIO_Init+0x24c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d025      	beq.n	8002a06 <HAL_GPIO_Init+0x226>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002a30 <HAL_GPIO_Init+0x250>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d01f      	beq.n	8002a02 <HAL_GPIO_Init+0x222>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a34 <HAL_GPIO_Init+0x254>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d019      	beq.n	80029fe <HAL_GPIO_Init+0x21e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a38 <HAL_GPIO_Init+0x258>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_GPIO_Init+0x21a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_GPIO_Init+0x25c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00d      	beq.n	80029f6 <HAL_GPIO_Init+0x216>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_GPIO_Init+0x260>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <HAL_GPIO_Init+0x212>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a17      	ldr	r2, [pc, #92]	@ (8002a44 <HAL_GPIO_Init+0x264>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_GPIO_Init+0x20e>
 80029ea:	2309      	movs	r3, #9
 80029ec:	e02d      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029ee:	230a      	movs	r3, #10
 80029f0:	e02b      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029f2:	2308      	movs	r3, #8
 80029f4:	e029      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029f6:	2307      	movs	r3, #7
 80029f8:	e027      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029fa:	2306      	movs	r3, #6
 80029fc:	e025      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 80029fe:	2305      	movs	r3, #5
 8002a00:	e023      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a02:	2304      	movs	r3, #4
 8002a04:	e021      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a06:	2303      	movs	r3, #3
 8002a08:	e01f      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e01d      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e01b      	b.n	8002a4a <HAL_GPIO_Init+0x26a>
 8002a12:	bf00      	nop
 8002a14:	58000080 	.word	0x58000080
 8002a18:	58024400 	.word	0x58024400
 8002a1c:	58000400 	.word	0x58000400
 8002a20:	58020000 	.word	0x58020000
 8002a24:	58020400 	.word	0x58020400
 8002a28:	58020800 	.word	0x58020800
 8002a2c:	58020c00 	.word	0x58020c00
 8002a30:	58021000 	.word	0x58021000
 8002a34:	58021400 	.word	0x58021400
 8002a38:	58021800 	.word	0x58021800
 8002a3c:	58021c00 	.word	0x58021c00
 8002a40:	58022000 	.word	0x58022000
 8002a44:	58022400 	.word	0x58022400
 8002a48:	2300      	movs	r3, #0
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	f002 0203 	and.w	r2, r2, #3
 8002a50:	0092      	lsls	r2, r2, #2
 8002a52:	4093      	lsls	r3, r2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a5a:	4938      	ldr	r1, [pc, #224]	@ (8002b3c <HAL_GPIO_Init+0x35c>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4013      	ands	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa22 f303 	lsr.w	r3, r2, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f ae63 	bne.w	80027f4 <HAL_GPIO_Init+0x14>
  }
}
 8002b2e:	bf00      	nop
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	@ 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	58000400 	.word	0x58000400

08002b40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d00a      	beq.n	8002b6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b54:	4b16      	ldr	r3, [pc, #88]	@ (8002bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e01f      	b.n	8002ba6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e01d      	b.n	8002ba6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f023 0207 	bic.w	r2, r3, #7
 8002b72:	490f      	ldr	r1, [pc, #60]	@ (8002bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b7a:	f7fe f8c3 	bl	8000d04 <HAL_GetTick>
 8002b7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b80:	e009      	b.n	8002b96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b82:	f7fe f8bf 	bl	8000d04 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b90:	d901      	bls.n	8002b96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e007      	b.n	8002ba6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b96:	4b06      	ldr	r3, [pc, #24]	@ (8002bb0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba2:	d1ee      	bne.n	8002b82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	58024800 	.word	0x58024800

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08c      	sub	sp, #48	@ 0x30
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d102      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f000 bc48 	b.w	8003458 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8088 	beq.w	8002ce6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bd6:	4b99      	ldr	r3, [pc, #612]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002be0:	4b96      	ldr	r3, [pc, #600]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d007      	beq.n	8002bfc <HAL_RCC_OscConfig+0x48>
 8002bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bee:	2b18      	cmp	r3, #24
 8002bf0:	d111      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62>
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	f003 0303 	and.w	r3, r3, #3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d06d      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x130>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d169      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	f000 bc21 	b.w	8003458 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x7a>
 8002c20:	4b86      	ldr	r3, [pc, #536]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a85      	ldr	r2, [pc, #532]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	e02e      	b.n	8002c8c <HAL_RCC_OscConfig+0xd8>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x9c>
 8002c36:	4b81      	ldr	r3, [pc, #516]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a80      	ldr	r2, [pc, #512]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	4b7e      	ldr	r3, [pc, #504]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a7d      	ldr	r2, [pc, #500]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xd8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0xc0>
 8002c5a:	4b78      	ldr	r3, [pc, #480]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b75      	ldr	r3, [pc, #468]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a74      	ldr	r2, [pc, #464]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xd8>
 8002c74:	4b71      	ldr	r3, [pc, #452]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a70      	ldr	r2, [pc, #448]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b6e      	ldr	r3, [pc, #440]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6d      	ldr	r2, [pc, #436]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7fe f836 	bl	8000d04 <HAL_GetTick>
 8002c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7fe f832 	bl	8000d04 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	@ 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e3d4      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cae:	4b63      	ldr	r3, [pc, #396]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xe8>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe f822 	bl	8000d04 <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7fe f81e 	bl	8000d04 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	@ 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e3c0      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cd6:	4b59      	ldr	r3, [pc, #356]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x110>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80ca 	beq.w	8002e88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf4:	4b51      	ldr	r3, [pc, #324]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002cfe:	4b4f      	ldr	r3, [pc, #316]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_RCC_OscConfig+0x166>
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	2b18      	cmp	r3, #24
 8002d0e:	d156      	bne.n	8002dbe <HAL_RCC_OscConfig+0x20a>
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d151      	bne.n	8002dbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d1a:	4b48      	ldr	r3, [pc, #288]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0304 	and.w	r3, r3, #4
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <HAL_RCC_OscConfig+0x17e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e392      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d32:	4b42      	ldr	r3, [pc, #264]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 0219 	bic.w	r2, r3, #25
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	493f      	ldr	r1, [pc, #252]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7fd ffde 	bl	8000d04 <HAL_GetTick>
 8002d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4c:	f7fd ffda 	bl	8000d04 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e37c      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6a:	f7fd ffd7 	bl	8000d1c <HAL_GetREVID>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d817      	bhi.n	8002da8 <HAL_RCC_OscConfig+0x1f4>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b40      	cmp	r3, #64	@ 0x40
 8002d7e:	d108      	bne.n	8002d92 <HAL_RCC_OscConfig+0x1de>
 8002d80:	4b2e      	ldr	r3, [pc, #184]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002d88:	4a2c      	ldr	r2, [pc, #176]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d90:	e07a      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b2a      	ldr	r3, [pc, #168]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	031b      	lsls	r3, r3, #12
 8002da0:	4926      	ldr	r1, [pc, #152]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da6:	e06f      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	061b      	lsls	r3, r3, #24
 8002db6:	4921      	ldr	r1, [pc, #132]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dbc:	e064      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d047      	beq.n	8002e56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f023 0219 	bic.w	r2, r3, #25
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	491a      	ldr	r1, [pc, #104]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7fd ff94 	bl	8000d04 <HAL_GetTick>
 8002ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de0:	f7fd ff90 	bl	8000d04 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e332      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df2:	4b12      	ldr	r3, [pc, #72]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	f7fd ff8d 	bl	8000d1c <HAL_GetREVID>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d819      	bhi.n	8002e40 <HAL_RCC_OscConfig+0x28c>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d108      	bne.n	8002e26 <HAL_RCC_OscConfig+0x272>
 8002e14:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e1c:	4a07      	ldr	r2, [pc, #28]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002e1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e22:	6053      	str	r3, [r2, #4]
 8002e24:	e030      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	031b      	lsls	r3, r3, #12
 8002e34:	4901      	ldr	r1, [pc, #4]	@ (8002e3c <HAL_RCC_OscConfig+0x288>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	604b      	str	r3, [r1, #4]
 8002e3a:	e025      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	4b9a      	ldr	r3, [pc, #616]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	061b      	lsls	r3, r3, #24
 8002e4e:	4997      	ldr	r1, [pc, #604]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
 8002e54:	e018      	b.n	8002e88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b95      	ldr	r3, [pc, #596]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a94      	ldr	r2, [pc, #592]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e5c:	f023 0301 	bic.w	r3, r3, #1
 8002e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e62:	f7fd ff4f 	bl	8000d04 <HAL_GetTick>
 8002e66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fd ff4b 	bl	8000d04 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e2ed      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e7c:	4b8b      	ldr	r3, [pc, #556]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1f0      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 80a9 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e96:	4b85      	ldr	r3, [pc, #532]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ea0:	4b82      	ldr	r3, [pc, #520]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	2b08      	cmp	r3, #8
 8002eaa:	d007      	beq.n	8002ebc <HAL_RCC_OscConfig+0x308>
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	2b18      	cmp	r3, #24
 8002eb0:	d13a      	bne.n	8002f28 <HAL_RCC_OscConfig+0x374>
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d135      	bne.n	8002f28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ebc:	4b7b      	ldr	r3, [pc, #492]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x320>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b80      	cmp	r3, #128	@ 0x80
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e2c1      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ed4:	f7fd ff22 	bl	8000d1c <HAL_GetREVID>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d817      	bhi.n	8002f12 <HAL_RCC_OscConfig+0x35e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d108      	bne.n	8002efc <HAL_RCC_OscConfig+0x348>
 8002eea:	4b70      	ldr	r3, [pc, #448]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ef8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002efa:	e075      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002efc:	4b6b      	ldr	r3, [pc, #428]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	069b      	lsls	r3, r3, #26
 8002f0a:	4968      	ldr	r1, [pc, #416]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f10:	e06a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f12:	4b66      	ldr	r3, [pc, #408]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	061b      	lsls	r3, r3, #24
 8002f20:	4962      	ldr	r1, [pc, #392]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f26:	e05f      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	69db      	ldr	r3, [r3, #28]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d042      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f30:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5d      	ldr	r2, [pc, #372]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fd fee2 	bl	8000d04 <HAL_GetTick>
 8002f40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f44:	f7fd fede 	bl	8000d04 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e280      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f56:	4b55      	ldr	r3, [pc, #340]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f62:	f7fd fedb 	bl	8000d1c <HAL_GetREVID>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d817      	bhi.n	8002fa0 <HAL_RCC_OscConfig+0x3ec>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d108      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3d6>
 8002f78:	4b4c      	ldr	r3, [pc, #304]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f80:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f86:	6053      	str	r3, [r2, #4]
 8002f88:	e02e      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
 8002f8a:	4b48      	ldr	r3, [pc, #288]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	069b      	lsls	r3, r3, #26
 8002f98:	4944      	ldr	r1, [pc, #272]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e023      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
 8002fa0:	4b42      	ldr	r3, [pc, #264]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	061b      	lsls	r3, r3, #24
 8002fae:	493f      	ldr	r1, [pc, #252]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60cb      	str	r3, [r1, #12]
 8002fb4:	e018      	b.n	8002fe8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a3c      	ldr	r2, [pc, #240]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc2:	f7fd fe9f 	bl	8000d04 <HAL_GetTick>
 8002fc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002fca:	f7fd fe9b 	bl	8000d04 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e23d      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002fdc:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f0      	bne.n	8002fca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d036      	beq.n	8003062 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d019      	beq.n	8003030 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8002ffe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003000:	4a2a      	ldr	r2, [pc, #168]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003002:	f043 0301 	orr.w	r3, r3, #1
 8003006:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fd fe7c 	bl	8000d04 <HAL_GetTick>
 800300c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fd fe78 	bl	8000d04 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e21a      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003022:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003024:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x45c>
 800302e:	e018      	b.n	8003062 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003030:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003034:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003036:	f023 0301 	bic.w	r3, r3, #1
 800303a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fd fe62 	bl	8000d04 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fd fe5e 	bl	8000d04 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e200      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003056:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d039      	beq.n	80030e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01c      	beq.n	80030b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003076:	4b0d      	ldr	r3, [pc, #52]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a0c      	ldr	r2, [pc, #48]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 800307c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003080:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003082:	f7fd fe3f 	bl	8000d04 <HAL_GetTick>
 8003086:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308a:	f7fd fe3b 	bl	8000d04 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1dd      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800309c:	4b03      	ldr	r3, [pc, #12]	@ (80030ac <HAL_RCC_OscConfig+0x4f8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x4d6>
 80030a8:	e01b      	b.n	80030e2 <HAL_RCC_OscConfig+0x52e>
 80030aa:	bf00      	nop
 80030ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a9a      	ldr	r2, [pc, #616]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80030b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030bc:	f7fd fe22 	bl	8000d04 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030c4:	f7fd fe1e 	bl	8000d04 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e1c0      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030d6:	4b92      	ldr	r3, [pc, #584]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 8081 	beq.w	80031f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030f0:	4b8c      	ldr	r3, [pc, #560]	@ (8003324 <HAL_RCC_OscConfig+0x770>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a8b      	ldr	r2, [pc, #556]	@ (8003324 <HAL_RCC_OscConfig+0x770>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fc:	f7fd fe02 	bl	8000d04 <HAL_GetTick>
 8003100:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fd fdfe 	bl	8000d04 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b64      	cmp	r3, #100	@ 0x64
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e1a0      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003116:	4b83      	ldr	r3, [pc, #524]	@ (8003324 <HAL_RCC_OscConfig+0x770>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <HAL_RCC_OscConfig+0x584>
 800312a:	4b7d      	ldr	r3, [pc, #500]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800312c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312e:	4a7c      	ldr	r2, [pc, #496]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6713      	str	r3, [r2, #112]	@ 0x70
 8003136:	e02d      	b.n	8003194 <HAL_RCC_OscConfig+0x5e0>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d10c      	bne.n	800315a <HAL_RCC_OscConfig+0x5a6>
 8003140:	4b77      	ldr	r3, [pc, #476]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a76      	ldr	r2, [pc, #472]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b74      	ldr	r3, [pc, #464]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a73      	ldr	r2, [pc, #460]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
 8003158:	e01c      	b.n	8003194 <HAL_RCC_OscConfig+0x5e0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0x5c8>
 8003162:	4b6f      	ldr	r3, [pc, #444]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	4a6e      	ldr	r2, [pc, #440]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6713      	str	r3, [r2, #112]	@ 0x70
 800316e:	4b6c      	ldr	r3, [pc, #432]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a6b      	ldr	r2, [pc, #428]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0x5e0>
 800317c:	4b68      	ldr	r3, [pc, #416]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a67      	ldr	r2, [pc, #412]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	4b65      	ldr	r3, [pc, #404]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a64      	ldr	r2, [pc, #400]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800318e:	f023 0304 	bic.w	r3, r3, #4
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fd fdb2 	bl	8000d04 <HAL_GetTick>
 80031a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031a2:	e00a      	b.n	80031ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd fdae 	bl	8000d04 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e14e      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ba:	4b59      	ldr	r3, [pc, #356]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80031bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0ee      	beq.n	80031a4 <HAL_RCC_OscConfig+0x5f0>
 80031c6:	e014      	b.n	80031f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c8:	f7fd fd9c 	bl	8000d04 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031ce:	e00a      	b.n	80031e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d0:	f7fd fd98 	bl	8000d04 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e138      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031e6:	4b4e      	ldr	r3, [pc, #312]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1ee      	bne.n	80031d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 812d 	beq.w	8003456 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031fc:	4b48      	ldr	r3, [pc, #288]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003204:	2b18      	cmp	r3, #24
 8003206:	f000 80bd 	beq.w	8003384 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	2b02      	cmp	r3, #2
 8003210:	f040 809e 	bne.w	8003350 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b42      	ldr	r3, [pc, #264]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a41      	ldr	r2, [pc, #260]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800321a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800321e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd fd70 	bl	8000d04 <HAL_GetTick>
 8003224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003228:	f7fd fd6c 	bl	8000d04 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e10e      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800323a:	4b39      	ldr	r3, [pc, #228]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003246:	4b36      	ldr	r3, [pc, #216]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003248:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324a:	4b37      	ldr	r3, [pc, #220]	@ (8003328 <HAL_RCC_OscConfig+0x774>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003256:	0112      	lsls	r2, r2, #4
 8003258:	430a      	orrs	r2, r1
 800325a:	4931      	ldr	r1, [pc, #196]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	3b01      	subs	r3, #1
 8003266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326e:	3b01      	subs	r3, #1
 8003270:	025b      	lsls	r3, r3, #9
 8003272:	b29b      	uxth	r3, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327a:	3b01      	subs	r3, #1
 800327c:	041b      	lsls	r3, r3, #16
 800327e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	3b01      	subs	r3, #1
 800328a:	061b      	lsls	r3, r3, #24
 800328c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003290:	4923      	ldr	r1, [pc, #140]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003296:	4b22      	ldr	r3, [pc, #136]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329a:	4a21      	ldr	r2, [pc, #132]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032a6:	4b21      	ldr	r3, [pc, #132]	@ (800332c <HAL_RCC_OscConfig+0x778>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032ae:	00d2      	lsls	r2, r2, #3
 80032b0:	491b      	ldr	r1, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ba:	f023 020c 	bic.w	r2, r3, #12
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4917      	ldr	r1, [pc, #92]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032c8:	4b15      	ldr	r3, [pc, #84]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032cc:	f023 0202 	bic.w	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d4:	4912      	ldr	r1, [pc, #72]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032da:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032de:	4a10      	ldr	r2, [pc, #64]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 80032f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032fe:	4b08      	ldr	r3, [pc, #32]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003302:	4a07      	ldr	r2, [pc, #28]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330a:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a04      	ldr	r2, [pc, #16]	@ (8003320 <HAL_RCC_OscConfig+0x76c>)
 8003310:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003316:	f7fd fcf5 	bl	8000d04 <HAL_GetTick>
 800331a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800331c:	e011      	b.n	8003342 <HAL_RCC_OscConfig+0x78e>
 800331e:	bf00      	nop
 8003320:	58024400 	.word	0x58024400
 8003324:	58024800 	.word	0x58024800
 8003328:	fffffc0c 	.word	0xfffffc0c
 800332c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fd fce8 	bl	8000d04 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e08a      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003342:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x77c>
 800334e:	e082      	b.n	8003456 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003350:	4b43      	ldr	r3, [pc, #268]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a42      	ldr	r2, [pc, #264]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003356:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800335a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fd fcd2 	bl	8000d04 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fd fcce 	bl	8000d04 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e070      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003376:	4b3a      	ldr	r3, [pc, #232]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1f0      	bne.n	8003364 <HAL_RCC_OscConfig+0x7b0>
 8003382:	e068      	b.n	8003456 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003384:	4b36      	ldr	r3, [pc, #216]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800338a:	4b35      	ldr	r3, [pc, #212]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003394:	2b01      	cmp	r3, #1
 8003396:	d031      	beq.n	80033fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0203 	and.w	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d12a      	bne.n	80033fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d122      	bne.n	80033fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d11a      	bne.n	80033fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0a5b      	lsrs	r3, r3, #9
 80033ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d111      	bne.n	80033fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	0c1b      	lsrs	r3, r3, #16
 80033dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0e1b      	lsrs	r3, r3, #24
 80033ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d001      	beq.n	8003400 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e02b      	b.n	8003458 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003400:	4b17      	ldr	r3, [pc, #92]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800340a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	429a      	cmp	r2, r3
 8003414:	d01f      	beq.n	8003456 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003416:	4b12      	ldr	r3, [pc, #72]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	4a11      	ldr	r2, [pc, #68]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003422:	f7fd fc6f 	bl	8000d04 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003428:	bf00      	nop
 800342a:	f7fd fc6b 	bl	8000d04 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	4293      	cmp	r3, r2
 8003434:	d0f9      	beq.n	800342a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003436:	4b0a      	ldr	r3, [pc, #40]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003438:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800343a:	4b0a      	ldr	r3, [pc, #40]	@ (8003464 <HAL_RCC_OscConfig+0x8b0>)
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003442:	00d2      	lsls	r2, r2, #3
 8003444:	4906      	ldr	r1, [pc, #24]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003446:	4313      	orrs	r3, r2
 8003448:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	4a04      	ldr	r2, [pc, #16]	@ (8003460 <HAL_RCC_OscConfig+0x8ac>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3730      	adds	r7, #48	@ 0x30
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	58024400 	.word	0x58024400
 8003464:	ffff0007 	.word	0xffff0007

08003468 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e19c      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800347c:	4b8a      	ldr	r3, [pc, #552]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d910      	bls.n	80034ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800348a:	4b87      	ldr	r3, [pc, #540]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f023 020f 	bic.w	r2, r3, #15
 8003492:	4985      	ldr	r1, [pc, #532]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349a:	4b83      	ldr	r3, [pc, #524]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	683a      	ldr	r2, [r7, #0]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d001      	beq.n	80034ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e184      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d010      	beq.n	80034da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	4b7b      	ldr	r3, [pc, #492]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d908      	bls.n	80034da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034c8:	4b78      	ldr	r3, [pc, #480]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	4975      	ldr	r1, [pc, #468]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d010      	beq.n	8003508 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695a      	ldr	r2, [r3, #20]
 80034ea:	4b70      	ldr	r3, [pc, #448]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d908      	bls.n	8003508 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034f6:	4b6d      	ldr	r3, [pc, #436]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	496a      	ldr	r1, [pc, #424]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003504:	4313      	orrs	r3, r2
 8003506:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d010      	beq.n	8003536 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699a      	ldr	r2, [r3, #24]
 8003518:	4b64      	ldr	r3, [pc, #400]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003520:	429a      	cmp	r2, r3
 8003522:	d908      	bls.n	8003536 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003524:	4b61      	ldr	r3, [pc, #388]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	495e      	ldr	r1, [pc, #376]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003532:	4313      	orrs	r3, r2
 8003534:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d010      	beq.n	8003564 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69da      	ldr	r2, [r3, #28]
 8003546:	4b59      	ldr	r3, [pc, #356]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800354e:	429a      	cmp	r2, r3
 8003550:	d908      	bls.n	8003564 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003552:	4b56      	ldr	r3, [pc, #344]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	4953      	ldr	r1, [pc, #332]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003560:	4313      	orrs	r3, r2
 8003562:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	4b4d      	ldr	r3, [pc, #308]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	429a      	cmp	r2, r3
 800357e:	d908      	bls.n	8003592 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b4a      	ldr	r3, [pc, #296]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f023 020f 	bic.w	r2, r3, #15
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4947      	ldr	r1, [pc, #284]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 800358e:	4313      	orrs	r3, r2
 8003590:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d055      	beq.n	800364a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800359e:	4b43      	ldr	r3, [pc, #268]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	4940      	ldr	r1, [pc, #256]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d107      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035b8:	4b3c      	ldr	r3, [pc, #240]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d121      	bne.n	8003608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0f6      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035d0:	4b36      	ldr	r3, [pc, #216]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d115      	bne.n	8003608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0ea      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035e8:	4b30      	ldr	r3, [pc, #192]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d109      	bne.n	8003608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0de      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f8:	4b2c      	ldr	r3, [pc, #176]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0d6      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003608:	4b28      	ldr	r3, [pc, #160]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	4925      	ldr	r1, [pc, #148]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003616:	4313      	orrs	r3, r2
 8003618:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800361a:	f7fd fb73 	bl	8000d04 <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003620:	e00a      	b.n	8003638 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003622:	f7fd fb6f 	bl	8000d04 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003630:	4293      	cmp	r3, r2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0be      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003638:	4b1c      	ldr	r3, [pc, #112]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	429a      	cmp	r2, r3
 8003648:	d1eb      	bne.n	8003622 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d010      	beq.n	8003678 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	429a      	cmp	r2, r3
 8003664:	d208      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f023 020f 	bic.w	r2, r3, #15
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	490e      	ldr	r1, [pc, #56]	@ (80036ac <HAL_RCC_ClockConfig+0x244>)
 8003674:	4313      	orrs	r3, r2
 8003676:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b0b      	ldr	r3, [pc, #44]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 030f 	and.w	r3, r3, #15
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d214      	bcs.n	80036b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b08      	ldr	r3, [pc, #32]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f023 020f 	bic.w	r2, r3, #15
 800368e:	4906      	ldr	r1, [pc, #24]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003696:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <HAL_RCC_ClockConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e086      	b.n	80037b6 <HAL_RCC_ClockConfig+0x34e>
 80036a8:	52002000 	.word	0x52002000
 80036ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	4b3f      	ldr	r3, [pc, #252]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d208      	bcs.n	80036de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036cc:	4b3c      	ldr	r3, [pc, #240]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4939      	ldr	r1, [pc, #228]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695a      	ldr	r2, [r3, #20]
 80036ee:	4b34      	ldr	r3, [pc, #208]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d208      	bcs.n	800370c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036fa:	4b31      	ldr	r3, [pc, #196]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	492e      	ldr	r1, [pc, #184]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003708:	4313      	orrs	r3, r2
 800370a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d010      	beq.n	800373a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003724:	429a      	cmp	r2, r3
 8003726:	d208      	bcs.n	800373a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003728:	4b25      	ldr	r3, [pc, #148]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	4922      	ldr	r1, [pc, #136]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003736:	4313      	orrs	r3, r2
 8003738:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d010      	beq.n	8003768 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69da      	ldr	r2, [r3, #28]
 800374a:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003752:	429a      	cmp	r2, r3
 8003754:	d208      	bcs.n	8003768 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003756:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4917      	ldr	r1, [pc, #92]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003764:	4313      	orrs	r3, r2
 8003766:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003768:	f000 f834 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 030f 	and.w	r3, r3, #15
 8003778:	4912      	ldr	r1, [pc, #72]	@ (80037c4 <HAL_RCC_ClockConfig+0x35c>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
 8003784:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003786:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_RCC_ClockConfig+0x358>)
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 030f 	and.w	r3, r3, #15
 800378e:	4a0d      	ldr	r2, [pc, #52]	@ (80037c4 <HAL_RCC_ClockConfig+0x35c>)
 8003790:	5cd3      	ldrb	r3, [r2, r3]
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	fa22 f303 	lsr.w	r3, r2, r3
 800379c:	4a0a      	ldr	r2, [pc, #40]	@ (80037c8 <HAL_RCC_ClockConfig+0x360>)
 800379e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037a0:	4a0a      	ldr	r2, [pc, #40]	@ (80037cc <HAL_RCC_ClockConfig+0x364>)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	@ (80037d0 <HAL_RCC_ClockConfig+0x368>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd fa60 	bl	8000c70 <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
 80037c4:	08011b44 	.word	0x08011b44
 80037c8:	24000004 	.word	0x24000004
 80037cc:	24000000 	.word	0x24000000
 80037d0:	24000008 	.word	0x24000008

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037da:	4bb3      	ldr	r3, [pc, #716]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037e2:	2b18      	cmp	r3, #24
 80037e4:	f200 8155 	bhi.w	8003a92 <HAL_RCC_GetSysClockFreq+0x2be>
 80037e8:	a201      	add	r2, pc, #4	@ (adr r2, 80037f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80037ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ee:	bf00      	nop
 80037f0:	08003855 	.word	0x08003855
 80037f4:	08003a93 	.word	0x08003a93
 80037f8:	08003a93 	.word	0x08003a93
 80037fc:	08003a93 	.word	0x08003a93
 8003800:	08003a93 	.word	0x08003a93
 8003804:	08003a93 	.word	0x08003a93
 8003808:	08003a93 	.word	0x08003a93
 800380c:	08003a93 	.word	0x08003a93
 8003810:	0800387b 	.word	0x0800387b
 8003814:	08003a93 	.word	0x08003a93
 8003818:	08003a93 	.word	0x08003a93
 800381c:	08003a93 	.word	0x08003a93
 8003820:	08003a93 	.word	0x08003a93
 8003824:	08003a93 	.word	0x08003a93
 8003828:	08003a93 	.word	0x08003a93
 800382c:	08003a93 	.word	0x08003a93
 8003830:	08003881 	.word	0x08003881
 8003834:	08003a93 	.word	0x08003a93
 8003838:	08003a93 	.word	0x08003a93
 800383c:	08003a93 	.word	0x08003a93
 8003840:	08003a93 	.word	0x08003a93
 8003844:	08003a93 	.word	0x08003a93
 8003848:	08003a93 	.word	0x08003a93
 800384c:	08003a93 	.word	0x08003a93
 8003850:	08003887 	.word	0x08003887
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003854:	4b94      	ldr	r3, [pc, #592]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d009      	beq.n	8003874 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003860:	4b91      	ldr	r3, [pc, #580]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	08db      	lsrs	r3, r3, #3
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	4a90      	ldr	r2, [pc, #576]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
 8003870:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003872:	e111      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003874:	4b8d      	ldr	r3, [pc, #564]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003876:	61bb      	str	r3, [r7, #24]
      break;
 8003878:	e10e      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800387a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800387c:	61bb      	str	r3, [r7, #24]
      break;
 800387e:	e10b      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003880:	4b8c      	ldr	r3, [pc, #560]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003882:	61bb      	str	r3, [r7, #24]
      break;
 8003884:	e108      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003886:	4b88      	ldr	r3, [pc, #544]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003890:	4b85      	ldr	r3, [pc, #532]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800389a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800389c:	4b82      	ldr	r3, [pc, #520]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800389e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038a6:	4b80      	ldr	r3, [pc, #512]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80e1 	beq.w	8003a8c <HAL_RCC_GetSysClockFreq+0x2b8>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	f000 8083 	beq.w	80039d8 <HAL_RCC_GetSysClockFreq+0x204>
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f200 80a1 	bhi.w	8003a1c <HAL_RCC_GetSysClockFreq+0x248>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x114>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d056      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0x1c0>
 80038e6:	e099      	b.n	8003a1c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e8:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02d      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038f4:	4b6c      	ldr	r3, [pc, #432]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	4a6b      	ldr	r2, [pc, #428]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	ee07 3a90 	vmov	s15, r3
 800390c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b62      	ldr	r3, [pc, #392]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003932:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800394e:	e087      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003abc <HAL_RCC_GetSysClockFreq+0x2e8>
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b51      	ldr	r3, [pc, #324]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a02 	vldr	s12, [r7, #8]
 8003976:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003992:	e065      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b40      	ldr	r3, [pc, #256]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039d6:	e043      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003ac4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b2f      	ldr	r3, [pc, #188]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80039fe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a1a:	e021      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ac0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a60:	4b11      	ldr	r3, [pc, #68]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	0a5b      	lsrs	r3, r3, #9
 8003a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a84:	ee17 3a90 	vmov	r3, s15
 8003a88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a8a:	e005      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
      break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a92:	4b07      	ldr	r3, [pc, #28]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a94:	61bb      	str	r3, [r7, #24]
      break;
 8003a96:	bf00      	nop
  }

  return sysclockfreq;
 8003a98:	69bb      	ldr	r3, [r7, #24]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	@ 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
 8003aac:	03d09000 	.word	0x03d09000
 8003ab0:	003d0900 	.word	0x003d0900
 8003ab4:	007a1200 	.word	0x007a1200
 8003ab8:	46000000 	.word	0x46000000
 8003abc:	4c742400 	.word	0x4c742400
 8003ac0:	4a742400 	.word	0x4a742400
 8003ac4:	4af42400 	.word	0x4af42400

08003ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003ace:	f7ff fe81 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	490f      	ldr	r1, [pc, #60]	@ (8003b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ae0:	5ccb      	ldrb	r3, [r1, r3]
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <HAL_RCC_GetHCLKFreq+0x50>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	4a09      	ldr	r2, [pc, #36]	@ (8003b1c <HAL_RCC_GetHCLKFreq+0x54>)
 8003af6:	5cd3      	ldrb	r3, [r2, r3]
 8003af8:	f003 031f 	and.w	r3, r3, #31
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	fa22 f303 	lsr.w	r3, r2, r3
 8003b02:	4a07      	ldr	r2, [pc, #28]	@ (8003b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b06:	4a07      	ldr	r2, [pc, #28]	@ (8003b24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	58024400 	.word	0x58024400
 8003b1c:	08011b44 	.word	0x08011b44
 8003b20:	24000004 	.word	0x24000004
 8003b24:	24000000 	.word	0x24000000

08003b28 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003b2e:	4b87      	ldr	r3, [pc, #540]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b30:	22c0      	movs	r2, #192	@ 0xc0
 8003b32:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003b34:	4b85      	ldr	r3, [pc, #532]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b36:	22a8      	movs	r2, #168	@ 0xa8
 8003b38:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8003b3a:	4b84      	ldr	r3, [pc, #528]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b3c:	2264      	movs	r2, #100	@ 0x64
 8003b3e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8003b40:	4b82      	ldr	r3, [pc, #520]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b42:	2264      	movs	r2, #100	@ 0x64
 8003b44:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003b46:	4b82      	ldr	r3, [pc, #520]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003b48:	22ff      	movs	r2, #255	@ 0xff
 8003b4a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003b4c:	4b80      	ldr	r3, [pc, #512]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003b4e:	22ff      	movs	r2, #255	@ 0xff
 8003b50:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003b52:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003b54:	22ff      	movs	r2, #255	@ 0xff
 8003b56:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003b58:	4b7d      	ldr	r3, [pc, #500]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8003b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003b60:	22c0      	movs	r2, #192	@ 0xc0
 8003b62:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8003b64:	4b7b      	ldr	r3, [pc, #492]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003b66:	22a8      	movs	r2, #168	@ 0xa8
 8003b68:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8003b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003b6c:	2264      	movs	r2, #100	@ 0x64
 8003b6e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003b70:	4b78      	ldr	r3, [pc, #480]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003b72:	2201      	movs	r2, #1
 8003b74:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 8003b76:	f000 fddd 	bl	8004734 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003b7a:	4b74      	ldr	r3, [pc, #464]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	061a      	lsls	r2, r3, #24
 8003b80:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	041b      	lsls	r3, r3, #16
 8003b86:	431a      	orrs	r2, r3
 8003b88:	4b70      	ldr	r3, [pc, #448]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b8a:	789b      	ldrb	r3, [r3, #2]
 8003b8c:	021b      	lsls	r3, r3, #8
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	4a6e      	ldr	r2, [pc, #440]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b92:	78d2      	ldrb	r2, [r2, #3]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	061a      	lsls	r2, r3, #24
 8003b98:	4b6c      	ldr	r3, [pc, #432]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	0619      	lsls	r1, r3, #24
 8003b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003ba0:	785b      	ldrb	r3, [r3, #1]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	4319      	orrs	r1, r3
 8003ba6:	4b69      	ldr	r3, [pc, #420]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003ba8:	789b      	ldrb	r3, [r3, #2]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	430b      	orrs	r3, r1
 8003bae:	4967      	ldr	r1, [pc, #412]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bb0:	78c9      	ldrb	r1, [r1, #3]
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	4b63      	ldr	r3, [pc, #396]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	0619      	lsls	r1, r3, #24
 8003bc2:	4b62      	ldr	r3, [pc, #392]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	041b      	lsls	r3, r3, #16
 8003bc8:	4319      	orrs	r1, r3
 8003bca:	4b60      	ldr	r3, [pc, #384]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bcc:	789b      	ldrb	r3, [r3, #2]
 8003bce:	021b      	lsls	r3, r3, #8
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	495e      	ldr	r1, [pc, #376]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bd4:	78c9      	ldrb	r1, [r1, #3]
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003bde:	431a      	orrs	r2, r3
 8003be0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	0619      	lsls	r1, r3, #24
 8003be6:	4b59      	ldr	r3, [pc, #356]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003be8:	785b      	ldrb	r3, [r3, #1]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	4319      	orrs	r1, r3
 8003bee:	4b57      	ldr	r3, [pc, #348]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bf0:	789b      	ldrb	r3, [r3, #2]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	4955      	ldr	r1, [pc, #340]	@ (8003d4c <MX_LWIP_Init+0x224>)
 8003bf8:	78c9      	ldrb	r1, [r1, #3]
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	4a55      	ldr	r2, [pc, #340]	@ (8003d58 <MX_LWIP_Init+0x230>)
 8003c02:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003c04:	4b52      	ldr	r3, [pc, #328]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	061a      	lsls	r2, r3, #24
 8003c0a:	4b51      	ldr	r3, [pc, #324]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
 8003c12:	4b4f      	ldr	r3, [pc, #316]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c14:	789b      	ldrb	r3, [r3, #2]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c1c:	78d2      	ldrb	r2, [r2, #3]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	061a      	lsls	r2, r3, #24
 8003c22:	4b4b      	ldr	r3, [pc, #300]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	0619      	lsls	r1, r3, #24
 8003c28:	4b49      	ldr	r3, [pc, #292]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c2a:	785b      	ldrb	r3, [r3, #1]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	4319      	orrs	r1, r3
 8003c30:	4b47      	ldr	r3, [pc, #284]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c32:	789b      	ldrb	r3, [r3, #2]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	430b      	orrs	r3, r1
 8003c38:	4945      	ldr	r1, [pc, #276]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c3a:	78c9      	ldrb	r1, [r1, #3]
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003c44:	431a      	orrs	r2, r3
 8003c46:	4b42      	ldr	r3, [pc, #264]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	0619      	lsls	r1, r3, #24
 8003c4c:	4b40      	ldr	r3, [pc, #256]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c4e:	785b      	ldrb	r3, [r3, #1]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4319      	orrs	r1, r3
 8003c54:	4b3e      	ldr	r3, [pc, #248]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c56:	789b      	ldrb	r3, [r3, #2]
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	430b      	orrs	r3, r1
 8003c5c:	493c      	ldr	r1, [pc, #240]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c5e:	78c9      	ldrb	r1, [r1, #3]
 8003c60:	430b      	orrs	r3, r1
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	4b39      	ldr	r3, [pc, #228]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0619      	lsls	r1, r3, #24
 8003c70:	4b37      	ldr	r3, [pc, #220]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	4319      	orrs	r1, r3
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c7a:	789b      	ldrb	r3, [r3, #2]
 8003c7c:	021b      	lsls	r3, r3, #8
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	4933      	ldr	r1, [pc, #204]	@ (8003d50 <MX_LWIP_Init+0x228>)
 8003c82:	78c9      	ldrb	r1, [r1, #3]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	0e1b      	lsrs	r3, r3, #24
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	4a34      	ldr	r2, [pc, #208]	@ (8003d5c <MX_LWIP_Init+0x234>)
 8003c8c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	061a      	lsls	r2, r3, #24
 8003c94:	4b2f      	ldr	r3, [pc, #188]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003c96:	785b      	ldrb	r3, [r3, #1]
 8003c98:	041b      	lsls	r3, r3, #16
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003c9e:	789b      	ldrb	r3, [r3, #2]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003ca6:	78d2      	ldrb	r2, [r2, #3]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	061a      	lsls	r2, r3, #24
 8003cac:	4b29      	ldr	r3, [pc, #164]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	0619      	lsls	r1, r3, #24
 8003cb2:	4b28      	ldr	r3, [pc, #160]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	041b      	lsls	r3, r3, #16
 8003cb8:	4319      	orrs	r1, r3
 8003cba:	4b26      	ldr	r3, [pc, #152]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cbc:	789b      	ldrb	r3, [r3, #2]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	4924      	ldr	r1, [pc, #144]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cc4:	78c9      	ldrb	r1, [r1, #3]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	021b      	lsls	r3, r3, #8
 8003cca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0619      	lsls	r1, r3, #24
 8003cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cd8:	785b      	ldrb	r3, [r3, #1]
 8003cda:	041b      	lsls	r3, r3, #16
 8003cdc:	4319      	orrs	r1, r3
 8003cde:	4b1d      	ldr	r3, [pc, #116]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003ce0:	789b      	ldrb	r3, [r3, #2]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	430b      	orrs	r3, r1
 8003ce6:	491b      	ldr	r1, [pc, #108]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003ce8:	78c9      	ldrb	r1, [r1, #3]
 8003cea:	430b      	orrs	r3, r1
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	4b17      	ldr	r3, [pc, #92]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	0619      	lsls	r1, r3, #24
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003cfc:	785b      	ldrb	r3, [r3, #1]
 8003cfe:	041b      	lsls	r3, r3, #16
 8003d00:	4319      	orrs	r1, r3
 8003d02:	4b14      	ldr	r3, [pc, #80]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	4912      	ldr	r1, [pc, #72]	@ (8003d54 <MX_LWIP_Init+0x22c>)
 8003d0c:	78c9      	ldrb	r1, [r1, #3]
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	0e1b      	lsrs	r3, r3, #24
 8003d12:	4313      	orrs	r3, r2
 8003d14:	4a12      	ldr	r2, [pc, #72]	@ (8003d60 <MX_LWIP_Init+0x238>)
 8003d16:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8003d18:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <MX_LWIP_Init+0x23c>)
 8003d1a:	9302      	str	r3, [sp, #8]
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <MX_LWIP_Init+0x240>)
 8003d1e:	9301      	str	r3, [sp, #4]
 8003d20:	2300      	movs	r3, #0
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4b0e      	ldr	r3, [pc, #56]	@ (8003d60 <MX_LWIP_Init+0x238>)
 8003d26:	4a0d      	ldr	r2, [pc, #52]	@ (8003d5c <MX_LWIP_Init+0x234>)
 8003d28:	490b      	ldr	r1, [pc, #44]	@ (8003d58 <MX_LWIP_Init+0x230>)
 8003d2a:	4810      	ldr	r0, [pc, #64]	@ (8003d6c <MX_LWIP_Init+0x244>)
 8003d2c:	f001 f9ea 	bl	8005104 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003d30:	480e      	ldr	r0, [pc, #56]	@ (8003d6c <MX_LWIP_Init+0x244>)
 8003d32:	f001 fb99 	bl	8005468 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003d36:	480d      	ldr	r0, [pc, #52]	@ (8003d6c <MX_LWIP_Init+0x244>)
 8003d38:	f001 fba6 	bl	8005488 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003d3c:	490c      	ldr	r1, [pc, #48]	@ (8003d70 <MX_LWIP_Init+0x248>)
 8003d3e:	480b      	ldr	r0, [pc, #44]	@ (8003d6c <MX_LWIP_Init+0x244>)
 8003d40:	f001 fca4 	bl	800568c <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	24004b34 	.word	0x24004b34
 8003d50:	24004b38 	.word	0x24004b38
 8003d54:	24004b3c 	.word	0x24004b3c
 8003d58:	24004b28 	.word	0x24004b28
 8003d5c:	24004b2c 	.word	0x24004b2c
 8003d60:	24004b30 	.word	0x24004b30
 8003d64:	0800df8d 	.word	0x0800df8d
 8003d68:	08004041 	.word	0x08004041
 8003d6c:	24004af4 	.word	0x24004af4
 8003d70:	08003d75 	.word	0x08003d75

08003d74 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003d94:	4b44      	ldr	r3, [pc, #272]	@ (8003ea8 <low_level_init+0x120>)
 8003d96:	4a45      	ldr	r2, [pc, #276]	@ (8003eac <low_level_init+0x124>)
 8003d98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003da2:	23e1      	movs	r3, #225	@ 0xe1
 8003da4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003da6:	2300      	movs	r3, #0
 8003da8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003daa:	2300      	movs	r3, #0
 8003dac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003dae:	2300      	movs	r3, #0
 8003db0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003db2:	4a3d      	ldr	r2, [pc, #244]	@ (8003ea8 <low_level_init+0x120>)
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003dba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <low_level_init+0x120>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003dc0:	4b39      	ldr	r3, [pc, #228]	@ (8003ea8 <low_level_init+0x120>)
 8003dc2:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb0 <low_level_init+0x128>)
 8003dc4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003dc6:	4b38      	ldr	r3, [pc, #224]	@ (8003ea8 <low_level_init+0x120>)
 8003dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb4 <low_level_init+0x12c>)
 8003dca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003dcc:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <low_level_init+0x120>)
 8003dce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8003dd2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003dd4:	4834      	ldr	r0, [pc, #208]	@ (8003ea8 <low_level_init+0x120>)
 8003dd6:	f7fd f91d 	bl	8001014 <HAL_ETH_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003dde:	2238      	movs	r2, #56	@ 0x38
 8003de0:	2100      	movs	r1, #0
 8003de2:	4835      	ldr	r0, [pc, #212]	@ (8003eb8 <low_level_init+0x130>)
 8003de4:	f00a fb0d 	bl	800e402 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003de8:	4b33      	ldr	r3, [pc, #204]	@ (8003eb8 <low_level_init+0x130>)
 8003dea:	2221      	movs	r2, #33	@ 0x21
 8003dec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003dee:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <low_level_init+0x130>)
 8003df0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003df4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003df6:	4b30      	ldr	r3, [pc, #192]	@ (8003eb8 <low_level_init+0x130>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003dfc:	482f      	ldr	r0, [pc, #188]	@ (8003ebc <low_level_init+0x134>)
 8003dfe:	f001 f849 	bl	8004e94 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2206      	movs	r2, #6
 8003e06:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003e0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <low_level_init+0x120>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	781a      	ldrb	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003e16:	4b24      	ldr	r3, [pc, #144]	@ (8003ea8 <low_level_init+0x120>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	785a      	ldrb	r2, [r3, #1]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003e22:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <low_level_init+0x120>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	789a      	ldrb	r2, [r3, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <low_level_init+0x120>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	78da      	ldrb	r2, [r3, #3]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <low_level_init+0x120>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	791a      	ldrb	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003e46:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <low_level_init+0x120>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	795a      	ldrb	r2, [r3, #5]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003e58:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003e60:	f043 030a 	orr.w	r3, r3, #10
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003e6c:	4914      	ldr	r1, [pc, #80]	@ (8003ec0 <low_level_init+0x138>)
 8003e6e:	4815      	ldr	r0, [pc, #84]	@ (8003ec4 <low_level_init+0x13c>)
 8003e70:	f7fc fdbb 	bl	80009ea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003e74:	4813      	ldr	r0, [pc, #76]	@ (8003ec4 <low_level_init+0x13c>)
 8003e76:	f7fc fdea 	bl	8000a4e <LAN8742_Init>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d006      	beq.n	8003e8e <low_level_init+0x106>
  {
    netif_set_link_down(netif);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f001 fbd3 	bl	800562c <netif_set_link_down>
    netif_set_down(netif);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f001 fb6a 	bl	8005560 <netif_set_down>
 8003e8c:	e008      	b.n	8003ea0 <low_level_init+0x118>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <low_level_init+0x114>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f000 fa3f 	bl	8004318 <ethernet_link_check_state>
 8003e9a:	e001      	b.n	8003ea0 <low_level_init+0x118>
  }
  else
  {
    Error_Handler();
 8003e9c:	f7fc fbd9 	bl	8000652 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	24004b48 	.word	0x24004b48
 8003eac:	40028000 	.word	0x40028000
 8003eb0:	24004a70 	.word	0x24004a70
 8003eb4:	24004a10 	.word	0x24004a10
 8003eb8:	24004bf8 	.word	0x24004bf8
 8003ebc:	08011b54 	.word	0x08011b54
 8003ec0:	24000010 	.word	0x24000010
 8003ec4:	24004c30 	.word	0x24004c30

08003ec8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b092      	sub	sp, #72	@ 0x48
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	2230      	movs	r2, #48	@ 0x30
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f00a fa8a 	bl	800e402 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2230      	movs	r2, #48	@ 0x30
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f00a fa83 	bl	800e402 <memset>

  for(q = p; q != NULL; q = q->next)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f00:	e045      	b.n	8003f8e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003f02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d902      	bls.n	8003f0e <low_level_output+0x46>
      return ERR_IF;
 8003f08:	f06f 030b 	mvn.w	r3, #11
 8003f0c:	e055      	b.n	8003fba <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f10:	6859      	ldr	r1, [r3, #4]
 8003f12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	3348      	adds	r3, #72	@ 0x48
 8003f1e:	443b      	add	r3, r7
 8003f20:	3b3c      	subs	r3, #60	@ 0x3c
 8003f22:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003f24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f26:	895b      	ldrh	r3, [r3, #10]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3348      	adds	r3, #72	@ 0x48
 8003f36:	443b      	add	r3, r7
 8003f38:	3b38      	subs	r3, #56	@ 0x38
 8003f3a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d011      	beq.n	8003f66 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f44:	1e5a      	subs	r2, r3, #1
 8003f46:	f107 000c 	add.w	r0, r7, #12
 8003f4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	005b      	lsls	r3, r3, #1
 8003f50:	440b      	add	r3, r1
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	18c1      	adds	r1, r0, r3
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	3348      	adds	r3, #72	@ 0x48
 8003f60:	443b      	add	r3, r7
 8003f62:	3b34      	subs	r3, #52	@ 0x34
 8003f64:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003f6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f70:	4613      	mov	r3, r2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	4413      	add	r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	3348      	adds	r3, #72	@ 0x48
 8003f7a:	443b      	add	r3, r7
 8003f7c:	3b34      	subs	r3, #52	@ 0x34
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f84:	3301      	adds	r3, #1
 8003f86:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1b6      	bne.n	8003f02 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	891b      	ldrh	r3, [r3, #8]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc4 <low_level_output+0xfc>)
 8003f9c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003f9e:	4a09      	ldr	r2, [pc, #36]	@ (8003fc4 <low_level_output+0xfc>)
 8003fa0:	f107 030c 	add.w	r3, r7, #12
 8003fa4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003fa6:	4a07      	ldr	r2, [pc, #28]	@ (8003fc4 <low_level_output+0xfc>)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003fac:	2214      	movs	r2, #20
 8003fae:	4905      	ldr	r1, [pc, #20]	@ (8003fc4 <low_level_output+0xfc>)
 8003fb0:	4805      	ldr	r0, [pc, #20]	@ (8003fc8 <low_level_output+0x100>)
 8003fb2:	f7fd f9df 	bl	8001374 <HAL_ETH_Transmit>

  return errval;
 8003fb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3748      	adds	r7, #72	@ 0x48
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	24004bf8 	.word	0x24004bf8
 8003fc8:	24004b48 	.word	0x24004b48

08003fcc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003fd8:	4b07      	ldr	r3, [pc, #28]	@ (8003ff8 <low_level_input+0x2c>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4805      	ldr	r0, [pc, #20]	@ (8003ffc <low_level_input+0x30>)
 8003fe8:	f7fd fa5b 	bl	80014a2 <HAL_ETH_ReadData>
  }

  return p;
 8003fec:	68fb      	ldr	r3, [r7, #12]
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	24004b44 	.word	0x24004b44
 8003ffc:	24004b48 	.word	0x24004b48

08004000 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff ffdd 	bl	8003fcc <low_level_input>
 8004012:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	4798      	blx	r3
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f001 feae 	bl	8005d8c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ea      	bne.n	800400c <ethernetif_input+0xc>
}
 8004036:	bf00      	nop
 8004038:	bf00      	nop
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <ethernetif_init+0x1c>
 800404e:	4b0e      	ldr	r3, [pc, #56]	@ (8004088 <ethernetif_init+0x48>)
 8004050:	f44f 72c6 	mov.w	r2, #396	@ 0x18c
 8004054:	490d      	ldr	r1, [pc, #52]	@ (800408c <ethernetif_init+0x4c>)
 8004056:	480e      	ldr	r0, [pc, #56]	@ (8004090 <ethernetif_init+0x50>)
 8004058:	f00a f96e 	bl	800e338 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2273      	movs	r2, #115	@ 0x73
 8004060:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2274      	movs	r2, #116	@ 0x74
 8004068:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a09      	ldr	r2, [pc, #36]	@ (8004094 <ethernetif_init+0x54>)
 8004070:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a08      	ldr	r2, [pc, #32]	@ (8004098 <ethernetif_init+0x58>)
 8004076:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7ff fe85 	bl	8003d88 <low_level_init>

  return ERR_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	0800f164 	.word	0x0800f164
 800408c:	0800f180 	.word	0x0800f180
 8004090:	0800f190 	.word	0x0800f190
 8004094:	0800c3f9 	.word	0x0800c3f9
 8004098:	08003ec9 	.word	0x08003ec9

0800409c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	4807      	ldr	r0, [pc, #28]	@ (80040c8 <pbuf_free_custom+0x2c>)
 80040ac:	f000 ffd4 	bl	8005058 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80040b0:	4b06      	ldr	r3, [pc, #24]	@ (80040cc <pbuf_free_custom+0x30>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d102      	bne.n	80040be <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80040b8:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <pbuf_free_custom+0x30>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	701a      	strb	r2, [r3, #0]
  }
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	08011b54 	.word	0x08011b54
 80040cc:	24004b44 	.word	0x24004b44

080040d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80040d4:	f7fc fe16 	bl	8000d04 <HAL_GetTick>
 80040d8:	4603      	mov	r3, r0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	@ 0x38
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	605a      	str	r2, [r3, #4]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	60da      	str	r2, [r3, #12]
 80040f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a59      	ldr	r2, [pc, #356]	@ (8004264 <HAL_ETH_MspInit+0x184>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	f040 80ab 	bne.w	800425a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004104:	4b58      	ldr	r3, [pc, #352]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004106:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800410a:	4a57      	ldr	r2, [pc, #348]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 800410c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004110:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004114:	4b54      	ldr	r3, [pc, #336]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004116:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800411a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800411e:	623b      	str	r3, [r7, #32]
 8004120:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004122:	4b51      	ldr	r3, [pc, #324]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004124:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004128:	4a4f      	ldr	r2, [pc, #316]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 800412a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800412e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004132:	4b4d      	ldr	r3, [pc, #308]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004134:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004140:	4b49      	ldr	r3, [pc, #292]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004146:	4a48      	ldr	r2, [pc, #288]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004150:	4b45      	ldr	r3, [pc, #276]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004152:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800415e:	4b42      	ldr	r3, [pc, #264]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004164:	4a40      	ldr	r2, [pc, #256]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004166:	f043 0304 	orr.w	r3, r3, #4
 800416a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800416e:	4b3e      	ldr	r3, [pc, #248]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800417c:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 800417e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004182:	4a39      	ldr	r2, [pc, #228]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800418c:	4b36      	ldr	r3, [pc, #216]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 800418e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	613b      	str	r3, [r7, #16]
 8004198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800419a:	4b33      	ldr	r3, [pc, #204]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 800419c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a0:	4a31      	ldr	r2, [pc, #196]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 80041a2:	f043 0302 	orr.w	r3, r3, #2
 80041a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 80041ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80041b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 80041ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041be:	4a2a      	ldr	r2, [pc, #168]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 80041c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041c8:	4b27      	ldr	r3, [pc, #156]	@ (8004268 <HAL_ETH_MspInit+0x188>)
 80041ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d2:	60bb      	str	r3, [r7, #8]
 80041d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80041d6:	2332      	movs	r3, #50	@ 0x32
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041da:	2302      	movs	r3, #2
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041e2:	2300      	movs	r3, #0
 80041e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80041e6:	230b      	movs	r3, #11
 80041e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80041ee:	4619      	mov	r1, r3
 80041f0:	481e      	ldr	r0, [pc, #120]	@ (800426c <HAL_ETH_MspInit+0x18c>)
 80041f2:	f7fe faf5 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80041f6:	2386      	movs	r3, #134	@ 0x86
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fa:	2302      	movs	r3, #2
 80041fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fe:	2300      	movs	r3, #0
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004202:	2300      	movs	r3, #0
 8004204:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004206:	230b      	movs	r3, #11
 8004208:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800420a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800420e:	4619      	mov	r1, r3
 8004210:	4817      	ldr	r0, [pc, #92]	@ (8004270 <HAL_ETH_MspInit+0x190>)
 8004212:	f7fe fae5 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004216:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800421a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421c:	2302      	movs	r3, #2
 800421e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004220:	2300      	movs	r3, #0
 8004222:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004224:	2300      	movs	r3, #0
 8004226:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004228:	230b      	movs	r3, #11
 800422a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800422c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004230:	4619      	mov	r1, r3
 8004232:	4810      	ldr	r0, [pc, #64]	@ (8004274 <HAL_ETH_MspInit+0x194>)
 8004234:	f7fe fad4 	bl	80027e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004238:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800423c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423e:	2302      	movs	r3, #2
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004242:	2300      	movs	r3, #0
 8004244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800424a:	230b      	movs	r3, #11
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800424e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004252:	4619      	mov	r1, r3
 8004254:	4808      	ldr	r0, [pc, #32]	@ (8004278 <HAL_ETH_MspInit+0x198>)
 8004256:	f7fe fac3 	bl	80027e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800425a:	bf00      	nop
 800425c:	3738      	adds	r7, #56	@ 0x38
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	40028000 	.word	0x40028000
 8004268:	58024400 	.word	0x58024400
 800426c:	58020800 	.word	0x58020800
 8004270:	58020000 	.word	0x58020000
 8004274:	58020400 	.word	0x58020400
 8004278:	58021800 	.word	0x58021800

0800427c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004280:	4802      	ldr	r0, [pc, #8]	@ (800428c <ETH_PHY_IO_Init+0x10>)
 8004282:	f7fd fcdb 	bl	8001c3c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	bd80      	pop	{r7, pc}
 800428c:	24004b48 	.word	0x24004b48

08004290 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return 0;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	68f9      	ldr	r1, [r7, #12]
 80042b2:	4807      	ldr	r0, [pc, #28]	@ (80042d0 <ETH_PHY_IO_ReadReg+0x30>)
 80042b4:	f7fd fa2b 	bl	800170e <HAL_ETH_ReadPHYRegister>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80042be:	f04f 33ff 	mov.w	r3, #4294967295
 80042c2:	e000      	b.n	80042c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	24004b48 	.word	0x24004b48

080042d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4807      	ldr	r0, [pc, #28]	@ (8004304 <ETH_PHY_IO_WriteReg+0x30>)
 80042e8:	f7fd fa66 	bl	80017b8 <HAL_ETH_WritePHYRegister>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80042f2:	f04f 33ff 	mov.w	r3, #4294967295
 80042f6:	e000      	b.n	80042fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	24004b48 	.word	0x24004b48

08004308 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800430c:	f7fc fcfa 	bl	8000d04 <HAL_GetTick>
 8004310:	4603      	mov	r3, r0
}
 8004312:	4618      	mov	r0, r3
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b0a0      	sub	sp, #128	@ 0x80
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004320:	f107 030c 	add.w	r3, r7, #12
 8004324:	2264      	movs	r2, #100	@ 0x64
 8004326:	2100      	movs	r1, #0
 8004328:	4618      	mov	r0, r3
 800432a:	f00a f86a 	bl	800e402 <memset>
  int32_t PHYLinkState = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004336:	2300      	movs	r3, #0
 8004338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800433a:	2300      	movs	r3, #0
 800433c:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800433e:	483a      	ldr	r0, [pc, #232]	@ (8004428 <ethernet_link_check_state+0x110>)
 8004340:	f7fc fbd2 	bl	8000ae8 <LAN8742_GetLinkState>
 8004344:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800434c:	089b      	lsrs	r3, r3, #2
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00c      	beq.n	8004372 <ethernet_link_check_state+0x5a>
 8004358:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800435a:	2b01      	cmp	r3, #1
 800435c:	dc09      	bgt.n	8004372 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800435e:	4833      	ldr	r0, [pc, #204]	@ (800442c <ethernet_link_check_state+0x114>)
 8004360:	f7fc ffb8 	bl	80012d4 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f001 f8fb 	bl	8005560 <netif_set_down>
    netif_set_link_down(netif);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f001 f95e 	bl	800562c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004370:	e055      	b.n	800441e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d14e      	bne.n	800441e <ethernet_link_check_state+0x106>
 8004380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004382:	2b01      	cmp	r3, #1
 8004384:	dd4b      	ble.n	800441e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004386:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004388:	3b02      	subs	r3, #2
 800438a:	2b03      	cmp	r3, #3
 800438c:	d82a      	bhi.n	80043e4 <ethernet_link_check_state+0xcc>
 800438e:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <ethernet_link_check_state+0x7c>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b7 	.word	0x080043b7
 800439c:	080043c7 	.word	0x080043c7
 80043a0:	080043d7 	.word	0x080043d7
      duplex = ETH_FULLDUPLEX_MODE;
 80043a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80043aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043b0:	2301      	movs	r3, #1
 80043b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043b4:	e017      	b.n	80043e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 80043ba:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80043be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043c0:	2301      	movs	r3, #1
 80043c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043c4:	e00f      	b.n	80043e6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80043c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043ca:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80043cc:	2300      	movs	r3, #0
 80043ce:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043d0:	2301      	movs	r3, #1
 80043d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043d4:	e007      	b.n	80043e6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80043da:	2300      	movs	r3, #0
 80043dc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80043e2:	e000      	b.n	80043e6 <ethernet_link_check_state+0xce>
      break;
 80043e4:	bf00      	nop
    if(linkchanged)
 80043e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d018      	beq.n	800441e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4619      	mov	r1, r3
 80043f2:	480e      	ldr	r0, [pc, #56]	@ (800442c <ethernet_link_check_state+0x114>)
 80043f4:	f7fd fa34 	bl	8001860 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80043f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 80043fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80043fe:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4619      	mov	r1, r3
 8004406:	4809      	ldr	r0, [pc, #36]	@ (800442c <ethernet_link_check_state+0x114>)
 8004408:	f7fd fbfe 	bl	8001c08 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800440c:	4807      	ldr	r0, [pc, #28]	@ (800442c <ethernet_link_check_state+0x114>)
 800440e:	f7fc feff 	bl	8001210 <HAL_ETH_Start>
      netif_set_up(netif);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f001 f838 	bl	8005488 <netif_set_up>
      netif_set_link_up(netif);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f001 f8d3 	bl	80055c4 <netif_set_link_up>
}
 800441e:	bf00      	nop
 8004420:	3780      	adds	r7, #128	@ 0x80
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	24004c30 	.word	0x24004c30
 800442c:	24004b48 	.word	0x24004b48

08004430 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004438:	4812      	ldr	r0, [pc, #72]	@ (8004484 <HAL_ETH_RxAllocateCallback+0x54>)
 800443a:	f000 fd9f 	bl	8004f7c <memp_malloc_pool>
 800443e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d014      	beq.n	8004470 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f103 0220 	add.w	r2, r3, #32
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_ETH_RxAllocateCallback+0x58>)
 8004454:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800445e:	9201      	str	r2, [sp, #4]
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2241      	movs	r2, #65	@ 0x41
 8004466:	2100      	movs	r1, #0
 8004468:	2000      	movs	r0, #0
 800446a:	f001 fad5 	bl	8005a18 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800446e:	e005      	b.n	800447c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004470:	4b06      	ldr	r3, [pc, #24]	@ (800448c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004472:	2201      	movs	r2, #1
 8004474:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	08011b54 	.word	0x08011b54
 8004488:	0800409d 	.word	0x0800409d
 800448c:	24004b44 	.word	0x24004b44

08004490 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004490:	b480      	push	{r7}
 8004492:	b08d      	sub	sp, #52	@ 0x34
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3b20      	subs	r3, #32
 80044ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 80044b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b2:	2200      	movs	r2, #0
 80044b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	2200      	movs	r2, #0
 80044ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80044c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d103      	bne.n	80044d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80044ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	e003      	b.n	80044da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80044d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e6:	e009      	b.n	80044fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80044e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ea:	891a      	ldrh	r2, [r3, #8]
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	4413      	add	r3, r2
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f2      	bne.n	80044e8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8004502:	887b      	ldrh	r3, [r7, #2]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	623a      	str	r2, [r7, #32]
 8004508:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	dd1d      	ble.n	800454c <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f003 021f 	and.w	r2, r3, #31
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	4413      	add	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004520:	f3bf 8f4f 	dsb	sy
}
 8004524:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004526:	4a0d      	ldr	r2, [pc, #52]	@ (800455c <HAL_ETH_RxLinkCallback+0xcc>)
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	3320      	adds	r3, #32
 8004532:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	3b20      	subs	r3, #32
 8004538:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	dcf2      	bgt.n	8004526 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8004540:	f3bf 8f4f 	dsb	sy
}
 8004544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004546:	f3bf 8f6f 	isb	sy
}
 800454a:	bf00      	nop
}
 800454c:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800454e:	bf00      	nop
 8004550:	3734      	adds	r7, #52	@ 0x34
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	e000ed00 	.word	0xe000ed00

08004560 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800456a:	88fb      	ldrh	r3, [r7, #6]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	b21a      	sxth	r2, r3
 8004570:	88fb      	ldrh	r3, [r7, #6]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b21b      	sxth	r3, r3
 8004578:	4313      	orrs	r3, r2
 800457a:	b21b      	sxth	r3, r3
 800457c:	b29b      	uxth	r3, r3
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	061a      	lsls	r2, r3, #24
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0a1b      	lsrs	r3, r3, #8
 80045a4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	0e1b      	lsrs	r3, r3, #24
 80045ae:	4313      	orrs	r3, r2
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80045bc:	b480      	push	{r7}
 80045be:	b089      	sub	sp, #36	@ 0x24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <lwip_standard_chksum+0x40>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	dd0a      	ble.n	80045fc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80045e6:	69fa      	ldr	r2, [r7, #28]
 80045e8:	1c53      	adds	r3, r2, #1
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	f107 030e 	add.w	r3, r7, #14
 80045f0:	3301      	adds	r3, #1
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
    len--;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	3b01      	subs	r3, #1
 80045fa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8004600:	e00a      	b.n	8004618 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	61ba      	str	r2, [r7, #24]
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	4413      	add	r3, r2
 8004610:	617b      	str	r3, [r7, #20]
    len -= 2;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	3b02      	subs	r3, #2
 8004616:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	dcf1      	bgt.n	8004602 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	dd04      	ble.n	800462e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8004624:	f107 030e 	add.w	r3, r7, #14
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800462e:	89fb      	ldrh	r3, [r7, #14]
 8004630:	461a      	mov	r2, r3
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	0c1a      	lsrs	r2, r3, #16
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	b29b      	uxth	r3, r3
 8004640:	4413      	add	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	0c1a      	lsrs	r2, r3, #16
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	b29b      	uxth	r3, r3
 800464c:	4413      	add	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	021b      	lsls	r3, r3, #8
 800465a:	b29a      	uxth	r2, r3
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b2db      	uxtb	r3, r3
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	b29b      	uxth	r3, r3
}
 800466a:	4618      	mov	r0, r3
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	4619      	mov	r1, r3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ff98 	bl	80045bc <lwip_standard_chksum>
 800468c:	4603      	mov	r3, r0
 800468e:	43db      	mvns	r3, r3
 8004690:	b29b      	uxth	r3, r3
}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b086      	sub	sp, #24
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	613b      	str	r3, [r7, #16]
 80046ae:	e02b      	b.n	8004708 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	895b      	ldrh	r3, [r3, #10]
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7ff ff7e 	bl	80045bc <lwip_standard_chksum>
 80046c0:	4603      	mov	r3, r0
 80046c2:	461a      	mov	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	0c1a      	lsrs	r2, r3, #16
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	895b      	ldrh	r3, [r3, #10]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	b29b      	uxth	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00e      	beq.n	8004702 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	613b      	str	r3, [r7, #16]
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1d0      	bne.n	80046b0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	b29a      	uxth	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	0a1b      	lsrs	r3, r3, #8
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	b29b      	uxth	r3, r3
 8004728:	43db      	mvns	r3, r3
 800472a:	b29b      	uxth	r3, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800473e:	f000 f8d5 	bl	80048ec <mem_init>
  memp_init();
 8004742:	f000 fbd7 	bl	8004ef4 <memp_init>
  pbuf_init();
  netif_init();
 8004746:	f000 fcd5 	bl	80050f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800474a:	f007 f84f 	bl	800b7ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800474e:	f001 fdab 	bl	80062a8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004752:	f006 ffc1 	bl	800b6d8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800476a:	4b05      	ldr	r3, [pc, #20]	@ (8004780 <ptr_to_mem+0x20>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	4413      	add	r3, r2
}
 8004772:	4618      	mov	r0, r3
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	24004c68 	.word	0x24004c68

08004784 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <mem_to_ptr+0x20>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	b29b      	uxth	r3, r3
}
 8004796:	4618      	mov	r0, r3
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	24004c68 	.word	0x24004c68

080047a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80047a8:	b590      	push	{r4, r7, lr}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80047b0:	4b45      	ldr	r3, [pc, #276]	@ (80048c8 <plug_holes+0x120>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d206      	bcs.n	80047c8 <plug_holes+0x20>
 80047ba:	4b44      	ldr	r3, [pc, #272]	@ (80048cc <plug_holes+0x124>)
 80047bc:	f240 12df 	movw	r2, #479	@ 0x1df
 80047c0:	4943      	ldr	r1, [pc, #268]	@ (80048d0 <plug_holes+0x128>)
 80047c2:	4844      	ldr	r0, [pc, #272]	@ (80048d4 <plug_holes+0x12c>)
 80047c4:	f009 fdb8 	bl	800e338 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80047c8:	4b43      	ldr	r3, [pc, #268]	@ (80048d8 <plug_holes+0x130>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d306      	bcc.n	80047e0 <plug_holes+0x38>
 80047d2:	4b3e      	ldr	r3, [pc, #248]	@ (80048cc <plug_holes+0x124>)
 80047d4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80047d8:	4940      	ldr	r1, [pc, #256]	@ (80048dc <plug_holes+0x134>)
 80047da:	483e      	ldr	r0, [pc, #248]	@ (80048d4 <plug_holes+0x12c>)
 80047dc:	f009 fdac 	bl	800e338 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	791b      	ldrb	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <plug_holes+0x4e>
 80047e8:	4b38      	ldr	r3, [pc, #224]	@ (80048cc <plug_holes+0x124>)
 80047ea:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80047ee:	493c      	ldr	r1, [pc, #240]	@ (80048e0 <plug_holes+0x138>)
 80047f0:	4838      	ldr	r0, [pc, #224]	@ (80048d4 <plug_holes+0x12c>)
 80047f2:	f009 fda1 	bl	800e338 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80047fe:	d906      	bls.n	800480e <plug_holes+0x66>
 8004800:	4b32      	ldr	r3, [pc, #200]	@ (80048cc <plug_holes+0x124>)
 8004802:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8004806:	4937      	ldr	r1, [pc, #220]	@ (80048e4 <plug_holes+0x13c>)
 8004808:	4832      	ldr	r0, [pc, #200]	@ (80048d4 <plug_holes+0x12c>)
 800480a:	f009 fd95 	bl	800e338 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ffa4 	bl	8004760 <ptr_to_mem>
 8004818:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d024      	beq.n	800486c <plug_holes+0xc4>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	791b      	ldrb	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d120      	bne.n	800486c <plug_holes+0xc4>
 800482a:	4b2b      	ldr	r3, [pc, #172]	@ (80048d8 <plug_holes+0x130>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	d01b      	beq.n	800486c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004834:	4b2c      	ldr	r3, [pc, #176]	@ (80048e8 <plug_holes+0x140>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	429a      	cmp	r2, r3
 800483c:	d102      	bne.n	8004844 <plug_holes+0x9c>
      lfree = mem;
 800483e:	4a2a      	ldr	r2, [pc, #168]	@ (80048e8 <plug_holes+0x140>)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	881a      	ldrh	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004854:	d00a      	beq.n	800486c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7ff ff80 	bl	8004760 <ptr_to_mem>
 8004860:	4604      	mov	r4, r0
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff8e 	bl	8004784 <mem_to_ptr>
 8004868:	4603      	mov	r3, r0
 800486a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	885b      	ldrh	r3, [r3, #2]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff75 	bl	8004760 <ptr_to_mem>
 8004876:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d01f      	beq.n	80048c0 <plug_holes+0x118>
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	791b      	ldrb	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d11b      	bne.n	80048c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8004888:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <plug_holes+0x140>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	429a      	cmp	r2, r3
 8004890:	d102      	bne.n	8004898 <plug_holes+0xf0>
      lfree = pmem;
 8004892:	4a15      	ldr	r2, [pc, #84]	@ (80048e8 <plug_holes+0x140>)
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	881a      	ldrh	r2, [r3, #0]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 80048a8:	d00a      	beq.n	80048c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ff56 	bl	8004760 <ptr_to_mem>
 80048b4:	4604      	mov	r4, r0
 80048b6:	68b8      	ldr	r0, [r7, #8]
 80048b8:	f7ff ff64 	bl	8004784 <mem_to_ptr>
 80048bc:	4603      	mov	r3, r0
 80048be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80048c0:	bf00      	nop
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd90      	pop	{r4, r7, pc}
 80048c8:	24004c68 	.word	0x24004c68
 80048cc:	0800f1b8 	.word	0x0800f1b8
 80048d0:	0800f1e8 	.word	0x0800f1e8
 80048d4:	0800f200 	.word	0x0800f200
 80048d8:	24004c6c 	.word	0x24004c6c
 80048dc:	0800f228 	.word	0x0800f228
 80048e0:	0800f244 	.word	0x0800f244
 80048e4:	0800f260 	.word	0x0800f260
 80048e8:	24004c70 	.word	0x24004c70

080048ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80048f2:	4b16      	ldr	r3, [pc, #88]	@ (800494c <mem_init+0x60>)
 80048f4:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <mem_init+0x64>)
 80048f6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80048f8:	4b14      	ldr	r3, [pc, #80]	@ (800494c <mem_init+0x60>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8004904:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8004912:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 8004916:	f7ff ff23 	bl	8004760 <ptr_to_mem>
 800491a:	4603      	mov	r3, r0
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <mem_init+0x68>)
 800491e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <mem_init+0x68>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2201      	movs	r2, #1
 8004926:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <mem_init+0x68>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8004930:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <mem_init+0x68>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800493a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800493c:	4b03      	ldr	r3, [pc, #12]	@ (800494c <mem_init+0x60>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a05      	ldr	r2, [pc, #20]	@ (8004958 <mem_init+0x6c>)
 8004942:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	24004c68 	.word	0x24004c68
 8004950:	30002000 	.word	0x30002000
 8004954:	24004c6c 	.word	0x24004c6c
 8004958:	24004c70 	.word	0x24004c70

0800495c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff0d 	bl	8004784 <mem_to_ptr>
 800496a:	4603      	mov	r3, r0
 800496c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fef4 	bl	8004760 <ptr_to_mem>
 8004978:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	885b      	ldrh	r3, [r3, #2]
 800497e:	4618      	mov	r0, r3
 8004980:	f7ff feee 	bl	8004760 <ptr_to_mem>
 8004984:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800498e:	d818      	bhi.n	80049c2 <mem_link_valid+0x66>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	885b      	ldrh	r3, [r3, #2]
 8004994:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004998:	d813      	bhi.n	80049c2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800499e:	8afa      	ldrh	r2, [r7, #22]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d004      	beq.n	80049ae <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	8afa      	ldrh	r2, [r7, #22]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d109      	bne.n	80049c2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049ae:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <mem_link_valid+0x74>)
 80049b0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d006      	beq.n	80049c6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	885b      	ldrh	r3, [r3, #2]
 80049bc:	8afa      	ldrh	r2, [r7, #22]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d001      	beq.n	80049c6 <mem_link_valid+0x6a>
    return 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <mem_link_valid+0x6c>
  }
  return 1;
 80049c6:	2301      	movs	r3, #1
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	24004c6c 	.word	0x24004c6c

080049d4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d04c      	beq.n	8004a7c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f003 0303 	and.w	r3, r3, #3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80049ec:	4b25      	ldr	r3, [pc, #148]	@ (8004a84 <mem_free+0xb0>)
 80049ee:	f240 2273 	movw	r2, #627	@ 0x273
 80049f2:	4925      	ldr	r1, [pc, #148]	@ (8004a88 <mem_free+0xb4>)
 80049f4:	4825      	ldr	r0, [pc, #148]	@ (8004a8c <mem_free+0xb8>)
 80049f6:	f009 fc9f 	bl	800e338 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80049fa:	e040      	b.n	8004a7e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3b08      	subs	r3, #8
 8004a00:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8004a02:	4b23      	ldr	r3, [pc, #140]	@ (8004a90 <mem_free+0xbc>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d306      	bcc.n	8004a1a <mem_free+0x46>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f103 020c 	add.w	r2, r3, #12
 8004a12:	4b20      	ldr	r3, [pc, #128]	@ (8004a94 <mem_free+0xc0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d907      	bls.n	8004a2a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <mem_free+0xb0>)
 8004a1c:	f240 227f 	movw	r2, #639	@ 0x27f
 8004a20:	491d      	ldr	r1, [pc, #116]	@ (8004a98 <mem_free+0xc4>)
 8004a22:	481a      	ldr	r0, [pc, #104]	@ (8004a8c <mem_free+0xb8>)
 8004a24:	f009 fc88 	bl	800e338 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a28:	e029      	b.n	8004a7e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	791b      	ldrb	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d107      	bne.n	8004a42 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <mem_free+0xb0>)
 8004a34:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8004a38:	4918      	ldr	r1, [pc, #96]	@ (8004a9c <mem_free+0xc8>)
 8004a3a:	4814      	ldr	r0, [pc, #80]	@ (8004a8c <mem_free+0xb8>)
 8004a3c:	f009 fc7c 	bl	800e338 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a40:	e01d      	b.n	8004a7e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f7ff ff8a 	bl	800495c <mem_link_valid>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d107      	bne.n	8004a5e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a84 <mem_free+0xb0>)
 8004a50:	f240 2295 	movw	r2, #661	@ 0x295
 8004a54:	4912      	ldr	r1, [pc, #72]	@ (8004aa0 <mem_free+0xcc>)
 8004a56:	480d      	ldr	r0, [pc, #52]	@ (8004a8c <mem_free+0xb8>)
 8004a58:	f009 fc6e 	bl	800e338 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004a5c:	e00f      	b.n	8004a7e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004a64:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa4 <mem_free+0xd0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d202      	bcs.n	8004a74 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	@ (8004aa4 <mem_free+0xd0>)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f7ff fe97 	bl	80047a8 <plug_holes>
 8004a7a:	e000      	b.n	8004a7e <mem_free+0xaa>
    return;
 8004a7c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	0800f1b8 	.word	0x0800f1b8
 8004a88:	0800f28c 	.word	0x0800f28c
 8004a8c:	0800f200 	.word	0x0800f200
 8004a90:	24004c68 	.word	0x24004c68
 8004a94:	24004c6c 	.word	0x24004c6c
 8004a98:	0800f2b0 	.word	0x0800f2b0
 8004a9c:	0800f2cc 	.word	0x0800f2cc
 8004aa0:	0800f2f4 	.word	0x0800f2f4
 8004aa4:	24004c70 	.word	0x24004c70

08004aa8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004ab4:	887b      	ldrh	r3, [r7, #2]
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004ac0:	8bfb      	ldrh	r3, [r7, #30]
 8004ac2:	2b0b      	cmp	r3, #11
 8004ac4:	d801      	bhi.n	8004aca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004ac6:	230c      	movs	r3, #12
 8004ac8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8004aca:	8bfb      	ldrh	r3, [r7, #30]
 8004acc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004ad0:	d803      	bhi.n	8004ada <mem_trim+0x32>
 8004ad2:	8bfa      	ldrh	r2, [r7, #30]
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d201      	bcs.n	8004ade <mem_trim+0x36>
    return NULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e0cc      	b.n	8004c78 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8004ade:	4b68      	ldr	r3, [pc, #416]	@ (8004c80 <mem_trim+0x1d8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d304      	bcc.n	8004af2 <mem_trim+0x4a>
 8004ae8:	4b66      	ldr	r3, [pc, #408]	@ (8004c84 <mem_trim+0x1dc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d306      	bcc.n	8004b00 <mem_trim+0x58>
 8004af2:	4b65      	ldr	r3, [pc, #404]	@ (8004c88 <mem_trim+0x1e0>)
 8004af4:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8004af8:	4964      	ldr	r1, [pc, #400]	@ (8004c8c <mem_trim+0x1e4>)
 8004afa:	4865      	ldr	r0, [pc, #404]	@ (8004c90 <mem_trim+0x1e8>)
 8004afc:	f009 fc1c 	bl	800e338 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8004b00:	4b5f      	ldr	r3, [pc, #380]	@ (8004c80 <mem_trim+0x1d8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d304      	bcc.n	8004b14 <mem_trim+0x6c>
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	@ (8004c84 <mem_trim+0x1dc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d301      	bcc.n	8004b18 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	e0af      	b.n	8004c78 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3b08      	subs	r3, #8
 8004b1c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8004b1e:	69b8      	ldr	r0, [r7, #24]
 8004b20:	f7ff fe30 	bl	8004784 <mem_to_ptr>
 8004b24:	4603      	mov	r3, r0
 8004b26:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	8afb      	ldrh	r3, [r7, #22]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b08      	subs	r3, #8
 8004b34:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004b36:	8bfa      	ldrh	r2, [r7, #30]
 8004b38:	8abb      	ldrh	r3, [r7, #20]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d906      	bls.n	8004b4c <mem_trim+0xa4>
 8004b3e:	4b52      	ldr	r3, [pc, #328]	@ (8004c88 <mem_trim+0x1e0>)
 8004b40:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8004b44:	4953      	ldr	r1, [pc, #332]	@ (8004c94 <mem_trim+0x1ec>)
 8004b46:	4852      	ldr	r0, [pc, #328]	@ (8004c90 <mem_trim+0x1e8>)
 8004b48:	f009 fbf6 	bl	800e338 <iprintf>
  if (newsize > size) {
 8004b4c:	8bfa      	ldrh	r2, [r7, #30]
 8004b4e:	8abb      	ldrh	r3, [r7, #20]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d901      	bls.n	8004b58 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e08f      	b.n	8004c78 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004b58:	8bfa      	ldrh	r2, [r7, #30]
 8004b5a:	8abb      	ldrh	r3, [r7, #20]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d101      	bne.n	8004b64 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	e089      	b.n	8004c78 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff fdf9 	bl	8004760 <ptr_to_mem>
 8004b6e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	791b      	ldrb	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d13f      	bne.n	8004bf8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004b80:	d106      	bne.n	8004b90 <mem_trim+0xe8>
 8004b82:	4b41      	ldr	r3, [pc, #260]	@ (8004c88 <mem_trim+0x1e0>)
 8004b84:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8004b88:	4943      	ldr	r1, [pc, #268]	@ (8004c98 <mem_trim+0x1f0>)
 8004b8a:	4841      	ldr	r0, [pc, #260]	@ (8004c90 <mem_trim+0x1e8>)
 8004b8c:	f009 fbd4 	bl	800e338 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004b96:	8afa      	ldrh	r2, [r7, #22]
 8004b98:	8bfb      	ldrh	r3, [r7, #30]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004ba2:	4b3e      	ldr	r3, [pc, #248]	@ (8004c9c <mem_trim+0x1f4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d106      	bne.n	8004bba <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fdd6 	bl	8004760 <ptr_to_mem>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4a39      	ldr	r2, [pc, #228]	@ (8004c9c <mem_trim+0x1f4>)
 8004bb8:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8004bba:	89fb      	ldrh	r3, [r7, #14]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7ff fdcf 	bl	8004760 <ptr_to_mem>
 8004bc2:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	89ba      	ldrh	r2, [r7, #12]
 8004bce:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	89fa      	ldrh	r2, [r7, #14]
 8004bda:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004be4:	d047      	beq.n	8004c76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fdb8 	bl	8004760 <ptr_to_mem>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	8053      	strh	r3, [r2, #2]
 8004bf6:	e03e      	b.n	8004c76 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004bf8:	8bfb      	ldrh	r3, [r7, #30]
 8004bfa:	f103 0214 	add.w	r2, r3, #20
 8004bfe:	8abb      	ldrh	r3, [r7, #20]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d838      	bhi.n	8004c76 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004c04:	8afa      	ldrh	r2, [r7, #22]
 8004c06:	8bfb      	ldrh	r3, [r7, #30]
 8004c08:	4413      	add	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3308      	adds	r3, #8
 8004c0e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004c18:	d106      	bne.n	8004c28 <mem_trim+0x180>
 8004c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <mem_trim+0x1e0>)
 8004c1c:	f240 3216 	movw	r2, #790	@ 0x316
 8004c20:	491d      	ldr	r1, [pc, #116]	@ (8004c98 <mem_trim+0x1f0>)
 8004c22:	481b      	ldr	r0, [pc, #108]	@ (8004c90 <mem_trim+0x1e8>)
 8004c24:	f009 fb88 	bl	800e338 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004c28:	89fb      	ldrh	r3, [r7, #14]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fd98 	bl	8004760 <ptr_to_mem>
 8004c30:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8004c32:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <mem_trim+0x1f4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d202      	bcs.n	8004c42 <mem_trim+0x19a>
      lfree = mem2;
 8004c3c:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <mem_trim+0x1f4>)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2200      	movs	r2, #0
 8004c46:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	881a      	ldrh	r2, [r3, #0]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	8afa      	ldrh	r2, [r7, #22]
 8004c54:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	89fa      	ldrh	r2, [r7, #14]
 8004c5a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004c64:	d007      	beq.n	8004c76 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff fd78 	bl	8004760 <ptr_to_mem>
 8004c70:	4602      	mov	r2, r0
 8004c72:	89fb      	ldrh	r3, [r7, #14]
 8004c74:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004c76:	687b      	ldr	r3, [r7, #4]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3720      	adds	r7, #32
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	24004c68 	.word	0x24004c68
 8004c84:	24004c6c 	.word	0x24004c6c
 8004c88:	0800f1b8 	.word	0x0800f1b8
 8004c8c:	0800f328 	.word	0x0800f328
 8004c90:	0800f200 	.word	0x0800f200
 8004c94:	0800f340 	.word	0x0800f340
 8004c98:	0800f360 	.word	0x0800f360
 8004c9c:	24004c70 	.word	0x24004c70

08004ca0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b088      	sub	sp, #32
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <mem_malloc+0x14>
    return NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e0d9      	b.n	8004e68 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f023 0303 	bic.w	r3, r3, #3
 8004cbe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004cc0:	8bbb      	ldrh	r3, [r7, #28]
 8004cc2:	2b0b      	cmp	r3, #11
 8004cc4:	d801      	bhi.n	8004cca <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8004cca:	8bbb      	ldrh	r3, [r7, #28]
 8004ccc:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004cd0:	d803      	bhi.n	8004cda <mem_malloc+0x3a>
 8004cd2:	8bba      	ldrh	r2, [r7, #28]
 8004cd4:	88fb      	ldrh	r3, [r7, #6]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d201      	bcs.n	8004cde <mem_malloc+0x3e>
    return NULL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e0c4      	b.n	8004e68 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004cde:	4b64      	ldr	r3, [pc, #400]	@ (8004e70 <mem_malloc+0x1d0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fd4e 	bl	8004784 <mem_to_ptr>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	83fb      	strh	r3, [r7, #30]
 8004cec:	e0b4      	b.n	8004e58 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8004cee:	8bfb      	ldrh	r3, [r7, #30]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fd35 	bl	8004760 <ptr_to_mem>
 8004cf6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	791b      	ldrb	r3, [r3, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 80a4 	bne.w	8004e4a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f1a3 0208 	sub.w	r2, r3, #8
 8004d10:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8004d12:	429a      	cmp	r2, r3
 8004d14:	f0c0 8099 	bcc.w	8004e4a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	8bfb      	ldrh	r3, [r7, #30]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	f1a3 0208 	sub.w	r2, r3, #8
 8004d26:	8bbb      	ldrh	r3, [r7, #28]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d333      	bcc.n	8004d96 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004d2e:	8bfa      	ldrh	r2, [r7, #30]
 8004d30:	8bbb      	ldrh	r3, [r7, #28]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3308      	adds	r3, #8
 8004d38:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004d3a:	8a7b      	ldrh	r3, [r7, #18]
 8004d3c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004d40:	d106      	bne.n	8004d50 <mem_malloc+0xb0>
 8004d42:	4b4c      	ldr	r3, [pc, #304]	@ (8004e74 <mem_malloc+0x1d4>)
 8004d44:	f240 3287 	movw	r2, #903	@ 0x387
 8004d48:	494b      	ldr	r1, [pc, #300]	@ (8004e78 <mem_malloc+0x1d8>)
 8004d4a:	484c      	ldr	r0, [pc, #304]	@ (8004e7c <mem_malloc+0x1dc>)
 8004d4c:	f009 faf4 	bl	800e338 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004d50:	8a7b      	ldrh	r3, [r7, #18]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7ff fd04 	bl	8004760 <ptr_to_mem>
 8004d58:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8bfa      	ldrh	r2, [r7, #30]
 8004d6c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	8a7a      	ldrh	r2, [r7, #18]
 8004d72:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2201      	movs	r2, #1
 8004d78:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8004d82:	d00b      	beq.n	8004d9c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fce9 	bl	8004760 <ptr_to_mem>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	8a7b      	ldrh	r3, [r7, #18]
 8004d92:	8053      	strh	r3, [r2, #2]
 8004d94:	e002      	b.n	8004d9c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004d9c:	4b34      	ldr	r3, [pc, #208]	@ (8004e70 <mem_malloc+0x1d0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	697a      	ldr	r2, [r7, #20]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d127      	bne.n	8004df6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004da6:	4b32      	ldr	r3, [pc, #200]	@ (8004e70 <mem_malloc+0x1d0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8004dac:	e005      	b.n	8004dba <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fcd4 	bl	8004760 <ptr_to_mem>
 8004db8:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	791b      	ldrb	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d004      	beq.n	8004dcc <mem_malloc+0x12c>
 8004dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8004e80 <mem_malloc+0x1e0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d1f0      	bne.n	8004dae <mem_malloc+0x10e>
          }
          lfree = cur;
 8004dcc:	4a28      	ldr	r2, [pc, #160]	@ (8004e70 <mem_malloc+0x1d0>)
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004dd2:	4b27      	ldr	r3, [pc, #156]	@ (8004e70 <mem_malloc+0x1d0>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e80 <mem_malloc+0x1e0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d00b      	beq.n	8004df6 <mem_malloc+0x156>
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <mem_malloc+0x1d0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	791b      	ldrb	r3, [r3, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d006      	beq.n	8004df6 <mem_malloc+0x156>
 8004de8:	4b22      	ldr	r3, [pc, #136]	@ (8004e74 <mem_malloc+0x1d4>)
 8004dea:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8004dee:	4925      	ldr	r1, [pc, #148]	@ (8004e84 <mem_malloc+0x1e4>)
 8004df0:	4822      	ldr	r0, [pc, #136]	@ (8004e7c <mem_malloc+0x1dc>)
 8004df2:	f009 faa1 	bl	800e338 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004df6:	8bba      	ldrh	r2, [r7, #28]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3308      	adds	r3, #8
 8004dfe:	4a20      	ldr	r2, [pc, #128]	@ (8004e80 <mem_malloc+0x1e0>)
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d906      	bls.n	8004e14 <mem_malloc+0x174>
 8004e06:	4b1b      	ldr	r3, [pc, #108]	@ (8004e74 <mem_malloc+0x1d4>)
 8004e08:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8004e0c:	491e      	ldr	r1, [pc, #120]	@ (8004e88 <mem_malloc+0x1e8>)
 8004e0e:	481b      	ldr	r0, [pc, #108]	@ (8004e7c <mem_malloc+0x1dc>)
 8004e10:	f009 fa92 	bl	800e338 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d006      	beq.n	8004e2c <mem_malloc+0x18c>
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <mem_malloc+0x1d4>)
 8004e20:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8004e24:	4919      	ldr	r1, [pc, #100]	@ (8004e8c <mem_malloc+0x1ec>)
 8004e26:	4815      	ldr	r0, [pc, #84]	@ (8004e7c <mem_malloc+0x1dc>)
 8004e28:	f009 fa86 	bl	800e338 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d006      	beq.n	8004e44 <mem_malloc+0x1a4>
 8004e36:	4b0f      	ldr	r3, [pc, #60]	@ (8004e74 <mem_malloc+0x1d4>)
 8004e38:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8004e3c:	4914      	ldr	r1, [pc, #80]	@ (8004e90 <mem_malloc+0x1f0>)
 8004e3e:	480f      	ldr	r0, [pc, #60]	@ (8004e7c <mem_malloc+0x1dc>)
 8004e40:	f009 fa7a 	bl	800e338 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3308      	adds	r3, #8
 8004e48:	e00e      	b.n	8004e68 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004e4a:	8bfb      	ldrh	r3, [r7, #30]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fc87 	bl	8004760 <ptr_to_mem>
 8004e52:	4603      	mov	r3, r0
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004e58:	8bfa      	ldrh	r2, [r7, #30]
 8004e5a:	8bbb      	ldrh	r3, [r7, #28]
 8004e5c:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 8004e60:	429a      	cmp	r2, r3
 8004e62:	f4ff af44 	bcc.w	8004cee <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	24004c70 	.word	0x24004c70
 8004e74:	0800f1b8 	.word	0x0800f1b8
 8004e78:	0800f360 	.word	0x0800f360
 8004e7c:	0800f200 	.word	0x0800f200
 8004e80:	24004c6c 	.word	0x24004c6c
 8004e84:	0800f374 	.word	0x0800f374
 8004e88:	0800f390 	.word	0x0800f390
 8004e8c:	0800f3c0 	.word	0x0800f3c0
 8004e90:	0800f3f0 	.word	0x0800f3f0

08004e94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	3303      	adds	r3, #3
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e011      	b.n	8004eda <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	885b      	ldrh	r3, [r3, #2]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	dbe7      	blt.n	8004eb6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004ee6:	bf00      	nop
 8004ee8:	bf00      	nop
 8004eea:	3714      	adds	r7, #20
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004efa:	2300      	movs	r3, #0
 8004efc:	80fb      	strh	r3, [r7, #6]
 8004efe:	e009      	b.n	8004f14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8004f00:	88fb      	ldrh	r3, [r7, #6]
 8004f02:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <memp_init+0x30>)
 8004f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff ffc3 	bl	8004e94 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004f0e:	88fb      	ldrh	r3, [r7, #6]
 8004f10:	3301      	adds	r3, #1
 8004f12:	80fb      	strh	r3, [r7, #6]
 8004f14:	88fb      	ldrh	r3, [r7, #6]
 8004f16:	2b08      	cmp	r3, #8
 8004f18:	d9f2      	bls.n	8004f00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	08011bcc 	.word	0x08011bcc

08004f28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d012      	beq.n	8004f64 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d006      	beq.n	8004f60 <do_memp_malloc_pool+0x38>
 8004f52:	4b07      	ldr	r3, [pc, #28]	@ (8004f70 <do_memp_malloc_pool+0x48>)
 8004f54:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004f58:	4906      	ldr	r1, [pc, #24]	@ (8004f74 <do_memp_malloc_pool+0x4c>)
 8004f5a:	4807      	ldr	r0, [pc, #28]	@ (8004f78 <do_memp_malloc_pool+0x50>)
 8004f5c:	f009 f9ec 	bl	800e338 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	e000      	b.n	8004f66 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800f414 	.word	0x0800f414
 8004f74:	0800f444 	.word	0x0800f444
 8004f78:	0800f468 	.word	0x0800f468

08004f7c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <memp_malloc_pool+0x1c>
 8004f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <memp_malloc_pool+0x38>)
 8004f8c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8004f90:	4909      	ldr	r1, [pc, #36]	@ (8004fb8 <memp_malloc_pool+0x3c>)
 8004f92:	480a      	ldr	r0, [pc, #40]	@ (8004fbc <memp_malloc_pool+0x40>)
 8004f94:	f009 f9d0 	bl	800e338 <iprintf>
  if (desc == NULL) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <memp_malloc_pool+0x26>
    return NULL;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e003      	b.n	8004faa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ffc0 	bl	8004f28 <do_memp_malloc_pool>
 8004fa8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	0800f414 	.word	0x0800f414
 8004fb8:	0800f490 	.word	0x0800f490
 8004fbc:	0800f468 	.word	0x0800f468

08004fc0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d908      	bls.n	8004fe2 <memp_malloc+0x22>
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <memp_malloc+0x3c>)
 8004fd2:	f240 1257 	movw	r2, #343	@ 0x157
 8004fd6:	490a      	ldr	r1, [pc, #40]	@ (8005000 <memp_malloc+0x40>)
 8004fd8:	480a      	ldr	r0, [pc, #40]	@ (8005004 <memp_malloc+0x44>)
 8004fda:	f009 f9ad 	bl	800e338 <iprintf>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e008      	b.n	8004ff4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	4a08      	ldr	r2, [pc, #32]	@ (8005008 <memp_malloc+0x48>)
 8004fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff ff9c 	bl	8004f28 <do_memp_malloc_pool>
 8004ff0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	0800f414 	.word	0x0800f414
 8005000:	0800f4a4 	.word	0x0800f4a4
 8005004:	0800f468 	.word	0x0800f468
 8005008:	08011bcc 	.word	0x08011bcc

0800500c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d006      	beq.n	800502e <do_memp_free_pool+0x22>
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <do_memp_free_pool+0x40>)
 8005022:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8005026:	490a      	ldr	r1, [pc, #40]	@ (8005050 <do_memp_free_pool+0x44>)
 8005028:	480a      	ldr	r0, [pc, #40]	@ (8005054 <do_memp_free_pool+0x48>)
 800502a:	f009 f985 	bl	800e338 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	0800f414 	.word	0x0800f414
 8005050:	0800f4c4 	.word	0x0800f4c4
 8005054:	0800f468 	.word	0x0800f468

08005058 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d106      	bne.n	8005076 <memp_free_pool+0x1e>
 8005068:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <memp_free_pool+0x3c>)
 800506a:	f240 1295 	movw	r2, #405	@ 0x195
 800506e:	490a      	ldr	r1, [pc, #40]	@ (8005098 <memp_free_pool+0x40>)
 8005070:	480a      	ldr	r0, [pc, #40]	@ (800509c <memp_free_pool+0x44>)
 8005072:	f009 f961 	bl	800e338 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d007      	beq.n	800508c <memp_free_pool+0x34>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff ffc1 	bl	800500c <do_memp_free_pool>
 800508a:	e000      	b.n	800508e <memp_free_pool+0x36>
    return;
 800508c:	bf00      	nop
}
 800508e:	3708      	adds	r7, #8
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	0800f414 	.word	0x0800f414
 8005098:	0800f490 	.word	0x0800f490
 800509c:	0800f468 	.word	0x0800f468

080050a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	6039      	str	r1, [r7, #0]
 80050aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80050ac:	79fb      	ldrb	r3, [r7, #7]
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d907      	bls.n	80050c2 <memp_free+0x22>
 80050b2:	4b0c      	ldr	r3, [pc, #48]	@ (80050e4 <memp_free+0x44>)
 80050b4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 80050b8:	490b      	ldr	r1, [pc, #44]	@ (80050e8 <memp_free+0x48>)
 80050ba:	480c      	ldr	r0, [pc, #48]	@ (80050ec <memp_free+0x4c>)
 80050bc:	f009 f93c 	bl	800e338 <iprintf>
 80050c0:	e00c      	b.n	80050dc <memp_free+0x3c>

  if (mem == NULL) {
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	4a09      	ldr	r2, [pc, #36]	@ (80050f0 <memp_free+0x50>)
 80050cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ff9a 	bl	800500c <do_memp_free_pool>
 80050d8:	e000      	b.n	80050dc <memp_free+0x3c>
    return;
 80050da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80050dc:	3708      	adds	r7, #8
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	0800f414 	.word	0x0800f414
 80050e8:	0800f4e4 	.word	0x0800f4e4
 80050ec:	0800f468 	.word	0x0800f468
 80050f0:	08011bcc 	.word	0x08011bcc

080050f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d108      	bne.n	800512a <netif_add+0x26>
 8005118:	4b57      	ldr	r3, [pc, #348]	@ (8005278 <netif_add+0x174>)
 800511a:	f240 1227 	movw	r2, #295	@ 0x127
 800511e:	4957      	ldr	r1, [pc, #348]	@ (800527c <netif_add+0x178>)
 8005120:	4857      	ldr	r0, [pc, #348]	@ (8005280 <netif_add+0x17c>)
 8005122:	f009 f909 	bl	800e338 <iprintf>
 8005126:	2300      	movs	r3, #0
 8005128:	e0a2      	b.n	8005270 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d108      	bne.n	8005142 <netif_add+0x3e>
 8005130:	4b51      	ldr	r3, [pc, #324]	@ (8005278 <netif_add+0x174>)
 8005132:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8005136:	4953      	ldr	r1, [pc, #332]	@ (8005284 <netif_add+0x180>)
 8005138:	4851      	ldr	r0, [pc, #324]	@ (8005280 <netif_add+0x17c>)
 800513a:	f009 f8fd 	bl	800e338 <iprintf>
 800513e:	2300      	movs	r3, #0
 8005140:	e096      	b.n	8005270 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d101      	bne.n	800514c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005148:	4b4f      	ldr	r3, [pc, #316]	@ (8005288 <netif_add+0x184>)
 800514a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005152:	4b4d      	ldr	r3, [pc, #308]	@ (8005288 <netif_add+0x184>)
 8005154:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800515c:	4b4a      	ldr	r3, [pc, #296]	@ (8005288 <netif_add+0x184>)
 800515e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a45      	ldr	r2, [pc, #276]	@ (800528c <netif_add+0x188>)
 8005176:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a3a      	ldr	r2, [r7, #32]
 8005190:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005192:	4b3f      	ldr	r3, [pc, #252]	@ (8005290 <netif_add+0x18c>)
 8005194:	781a      	ldrb	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	68b9      	ldr	r1, [r7, #8]
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f913 	bl	80053d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	4798      	blx	r3
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <netif_add+0xba>
    return NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e058      	b.n	8005270 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80051c4:	2bff      	cmp	r3, #255	@ 0xff
 80051c6:	d103      	bne.n	80051d0 <netif_add+0xcc>
        netif->num = 0;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80051d4:	4b2f      	ldr	r3, [pc, #188]	@ (8005294 <netif_add+0x190>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e02b      	b.n	8005234 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d106      	bne.n	80051f2 <netif_add+0xee>
 80051e4:	4b24      	ldr	r3, [pc, #144]	@ (8005278 <netif_add+0x174>)
 80051e6:	f240 128b 	movw	r2, #395	@ 0x18b
 80051ea:	492b      	ldr	r1, [pc, #172]	@ (8005298 <netif_add+0x194>)
 80051ec:	4824      	ldr	r0, [pc, #144]	@ (8005280 <netif_add+0x17c>)
 80051ee:	f009 f8a3 	bl	800e338 <iprintf>
        num_netifs++;
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	3301      	adds	r3, #1
 80051f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	2bff      	cmp	r3, #255	@ 0xff
 80051fc:	dd06      	ble.n	800520c <netif_add+0x108>
 80051fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005278 <netif_add+0x174>)
 8005200:	f240 128d 	movw	r2, #397	@ 0x18d
 8005204:	4925      	ldr	r1, [pc, #148]	@ (800529c <netif_add+0x198>)
 8005206:	481e      	ldr	r0, [pc, #120]	@ (8005280 <netif_add+0x17c>)
 8005208:	f009 f896 	bl	800e338 <iprintf>
        if (netif2->num == netif->num) {
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005218:	429a      	cmp	r2, r3
 800521a:	d108      	bne.n	800522e <netif_add+0x12a>
          netif->num++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005222:	3301      	adds	r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800522c:	e005      	b.n	800523a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	617b      	str	r3, [r7, #20]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1d0      	bne.n	80051dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1be      	bne.n	80051be <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005246:	2bfe      	cmp	r3, #254	@ 0xfe
 8005248:	d103      	bne.n	8005252 <netif_add+0x14e>
    netif_num = 0;
 800524a:	4b11      	ldr	r3, [pc, #68]	@ (8005290 <netif_add+0x18c>)
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e006      	b.n	8005260 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005258:	3301      	adds	r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	4b0c      	ldr	r3, [pc, #48]	@ (8005290 <netif_add+0x18c>)
 800525e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <netif_add+0x190>)
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005268:	4a0a      	ldr	r2, [pc, #40]	@ (8005294 <netif_add+0x190>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	0800f500 	.word	0x0800f500
 800527c:	0800f594 	.word	0x0800f594
 8005280:	0800f550 	.word	0x0800f550
 8005284:	0800f5b0 	.word	0x0800f5b0
 8005288:	08011c30 	.word	0x08011c30
 800528c:	080056af 	.word	0x080056af
 8005290:	24007b68 	.word	0x24007b68
 8005294:	24007b60 	.word	0x24007b60
 8005298:	0800f5d4 	.word	0x0800f5d4
 800529c:	0800f5e8 	.word	0x0800f5e8

080052a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f002 fb45 	bl	800793c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f006 fc23 	bl	800bb00 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <netif_do_set_ipaddr+0x20>
 80052d6:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <netif_do_set_ipaddr+0x88>)
 80052d8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80052dc:	491c      	ldr	r1, [pc, #112]	@ (8005350 <netif_do_set_ipaddr+0x8c>)
 80052de:	481d      	ldr	r0, [pc, #116]	@ (8005354 <netif_do_set_ipaddr+0x90>)
 80052e0:	f009 f82a 	bl	800e338 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <netif_do_set_ipaddr+0x34>
 80052ea:	4b18      	ldr	r3, [pc, #96]	@ (800534c <netif_do_set_ipaddr+0x88>)
 80052ec:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80052f0:	4917      	ldr	r1, [pc, #92]	@ (8005350 <netif_do_set_ipaddr+0x8c>)
 80052f2:	4818      	ldr	r0, [pc, #96]	@ (8005354 <netif_do_set_ipaddr+0x90>)
 80052f4:	f009 f820 	bl	800e338 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3304      	adds	r3, #4
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d01c      	beq.n	8005340 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3304      	adds	r3, #4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005316:	f107 0314 	add.w	r3, r7, #20
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ffbf 	bl	80052a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <netif_do_set_ipaddr+0x6a>
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	e000      	b.n	8005330 <netif_do_set_ipaddr+0x6c>
 800532e:	2300      	movs	r3, #0
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005334:	2101      	movs	r1, #1
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f8d2 	bl	80054e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	0800f500 	.word	0x0800f500
 8005350:	0800f618 	.word	0x0800f618
 8005354:	0800f550 	.word	0x0800f550

08005358 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3308      	adds	r3, #8
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d00a      	beq.n	8005388 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <netif_do_set_netmask+0x26>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	e000      	b.n	8005380 <netif_do_set_netmask+0x28>
 800537e:	2300      	movs	r3, #0
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	60f8      	str	r0, [r7, #12]
 800539e:	60b9      	str	r1, [r7, #8]
 80053a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	330c      	adds	r3, #12
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d00a      	beq.n	80053c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <netif_do_set_gw+0x26>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	e000      	b.n	80053be <netif_do_set_gw+0x28>
 80053bc:	2300      	movs	r3, #0
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80053c2:	2301      	movs	r3, #1
 80053c4:	e000      	b.n	80053c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80053f0:	4b1c      	ldr	r3, [pc, #112]	@ (8005464 <netif_set_addr+0x90>)
 80053f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80053fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005464 <netif_set_addr+0x90>)
 80053fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005404:	4b17      	ldr	r3, [pc, #92]	@ (8005464 <netif_set_addr+0x90>)
 8005406:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <netif_set_addr+0x42>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <netif_set_addr+0x46>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <netif_set_addr+0x48>
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	461a      	mov	r2, r3
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f7ff ff49 	bl	80052c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff ff8e 	bl	8005358 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f7ff ffa8 	bl	8005396 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d106      	bne.n	800545a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800544c:	f107 0310 	add.w	r3, r7, #16
 8005450:	461a      	mov	r2, r3
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff ff35 	bl	80052c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	08011c30 	.word	0x08011c30

08005468 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005470:	4a04      	ldr	r2, [pc, #16]	@ (8005484 <netif_set_default+0x1c>)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005476:	bf00      	nop
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	24007b64 	.word	0x24007b64

08005488 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b082      	sub	sp, #8
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d107      	bne.n	80054a6 <netif_set_up+0x1e>
 8005496:	4b0f      	ldr	r3, [pc, #60]	@ (80054d4 <netif_set_up+0x4c>)
 8005498:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800549c:	490e      	ldr	r1, [pc, #56]	@ (80054d8 <netif_set_up+0x50>)
 800549e:	480f      	ldr	r0, [pc, #60]	@ (80054dc <netif_set_up+0x54>)
 80054a0:	f008 ff4a 	bl	800e338 <iprintf>
 80054a4:	e013      	b.n	80054ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10c      	bne.n	80054ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80054c6:	2103      	movs	r1, #3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f809 	bl	80054e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	0800f500 	.word	0x0800f500
 80054d8:	0800f688 	.word	0x0800f688
 80054dc:	0800f550 	.word	0x0800f550

080054e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <netif_issue_reports+0x20>
 80054f2:	4b18      	ldr	r3, [pc, #96]	@ (8005554 <netif_issue_reports+0x74>)
 80054f4:	f240 326d 	movw	r2, #877	@ 0x36d
 80054f8:	4917      	ldr	r1, [pc, #92]	@ (8005558 <netif_issue_reports+0x78>)
 80054fa:	4818      	ldr	r0, [pc, #96]	@ (800555c <netif_issue_reports+0x7c>)
 80054fc:	f008 ff1c 	bl	800e338 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005506:	f003 0304 	and.w	r3, r3, #4
 800550a:	2b00      	cmp	r3, #0
 800550c:	d01e      	beq.n	800554c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005514:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005518:	2b00      	cmp	r3, #0
 800551a:	d017      	beq.n	800554c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	3304      	adds	r3, #4
 800552a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00e      	beq.n	800554e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005536:	f003 0308 	and.w	r3, r3, #8
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f007 fa45 	bl	800c9d4 <etharp_request>
 800554a:	e000      	b.n	800554e <netif_issue_reports+0x6e>
    return;
 800554c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	0800f500 	.word	0x0800f500
 8005558:	0800f6a4 	.word	0x0800f6a4
 800555c:	0800f550 	.word	0x0800f550

08005560 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <netif_set_down+0x1e>
 800556e:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <netif_set_down+0x58>)
 8005570:	f240 329b 	movw	r2, #923	@ 0x39b
 8005574:	4911      	ldr	r1, [pc, #68]	@ (80055bc <netif_set_down+0x5c>)
 8005576:	4812      	ldr	r0, [pc, #72]	@ (80055c0 <netif_set_down+0x60>)
 8005578:	f008 fede 	bl	800e338 <iprintf>
 800557c:	e019      	b.n	80055b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d012      	beq.n	80055b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005592:	f023 0301 	bic.w	r3, r3, #1
 8005596:	b2da      	uxtb	r2, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f006 fdcf 	bl	800c150 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	0800f500 	.word	0x0800f500
 80055bc:	0800f6c8 	.word	0x0800f6c8
 80055c0:	0800f550 	.word	0x0800f550

080055c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d107      	bne.n	80055e2 <netif_set_link_up+0x1e>
 80055d2:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <netif_set_link_up+0x5c>)
 80055d4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80055d8:	4912      	ldr	r1, [pc, #72]	@ (8005624 <netif_set_link_up+0x60>)
 80055da:	4813      	ldr	r0, [pc, #76]	@ (8005628 <netif_set_link_up+0x64>)
 80055dc:	f008 feac 	bl	800e338 <iprintf>
 80055e0:	e01b      	b.n	800561a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d114      	bne.n	800561a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005602:	2103      	movs	r1, #3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff ff6b 	bl	80054e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <netif_set_link_up+0x56>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0800f500 	.word	0x0800f500
 8005624:	0800f6e8 	.word	0x0800f6e8
 8005628:	0800f550 	.word	0x0800f550

0800562c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d107      	bne.n	800564a <netif_set_link_down+0x1e>
 800563a:	4b11      	ldr	r3, [pc, #68]	@ (8005680 <netif_set_link_down+0x54>)
 800563c:	f240 4206 	movw	r2, #1030	@ 0x406
 8005640:	4910      	ldr	r1, [pc, #64]	@ (8005684 <netif_set_link_down+0x58>)
 8005642:	4811      	ldr	r0, [pc, #68]	@ (8005688 <netif_set_link_down+0x5c>)
 8005644:	f008 fe78 	bl	800e338 <iprintf>
 8005648:	e017      	b.n	800567a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d010      	beq.n	800567a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800565e:	f023 0304 	bic.w	r3, r3, #4
 8005662:	b2da      	uxtb	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <netif_set_link_down+0x4e>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	0800f500 	.word	0x0800f500
 8005684:	0800f70c 	.word	0x0800f70c
 8005688:	0800f550 	.word	0x0800f550

0800568c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	683a      	ldr	r2, [r7, #0]
 80056a0:	61da      	str	r2, [r3, #28]
  }
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b085      	sub	sp, #20
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80056ba:	f06f 030b 	mvn.w	r3, #11
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d013      	beq.n	8005704 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80056dc:	4b0d      	ldr	r3, [pc, #52]	@ (8005714 <netif_get_by_index+0x48>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	60fb      	str	r3, [r7, #12]
 80056e2:	e00c      	b.n	80056fe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80056ea:	3301      	adds	r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	79fa      	ldrb	r2, [r7, #7]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d101      	bne.n	80056f8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	e006      	b.n	8005706 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ef      	bne.n	80056e4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	24007b60 	.word	0x24007b60

08005718 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800571e:	4b0c      	ldr	r3, [pc, #48]	@ (8005750 <pbuf_free_ooseq+0x38>)
 8005720:	2200      	movs	r2, #0
 8005722:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005724:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <pbuf_free_ooseq+0x3c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	e00a      	b.n	8005742 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005730:	2b00      	cmp	r3, #0
 8005732:	d003      	beq.n	800573c <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f002 f93f 	bl	80079b8 <tcp_free_ooseq>
      return;
 800573a:	e005      	b.n	8005748 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	607b      	str	r3, [r7, #4]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f1      	bne.n	800572c <pbuf_free_ooseq+0x14>
    }
  }
}
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	24007b69 	.word	0x24007b69
 8005754:	24007b78 	.word	0x24007b78

08005758 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800575c:	4b03      	ldr	r3, [pc, #12]	@ (800576c <pbuf_pool_is_empty+0x14>)
 800575e:	2201      	movs	r2, #1
 8005760:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8005762:	bf00      	nop
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	24007b69 	.word	0x24007b69

08005770 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	460b      	mov	r3, r1
 8005780:	80fb      	strh	r3, [r7, #6]
 8005782:	4613      	mov	r3, r2
 8005784:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88ba      	ldrh	r2, [r7, #4]
 800579c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800579e:	8b3b      	ldrh	r3, [r7, #24]
 80057a0:	b2da      	uxtb	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	7f3a      	ldrb	r2, [r7, #28]
 80057aa:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2200      	movs	r2, #0
 80057b6:	73da      	strb	r2, [r3, #15]
}
 80057b8:	bf00      	nop
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08c      	sub	sp, #48	@ 0x30
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	4603      	mov	r3, r0
 80057cc:	71fb      	strb	r3, [r7, #7]
 80057ce:	460b      	mov	r3, r1
 80057d0:	80bb      	strh	r3, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80057da:	887b      	ldrh	r3, [r7, #2]
 80057dc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80057e0:	d07f      	beq.n	80058e2 <pbuf_alloc+0x11e>
 80057e2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80057e6:	f300 80c8 	bgt.w	800597a <pbuf_alloc+0x1b6>
 80057ea:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80057ee:	d010      	beq.n	8005812 <pbuf_alloc+0x4e>
 80057f0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80057f4:	f300 80c1 	bgt.w	800597a <pbuf_alloc+0x1b6>
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d002      	beq.n	8005802 <pbuf_alloc+0x3e>
 80057fc:	2b41      	cmp	r3, #65	@ 0x41
 80057fe:	f040 80bc 	bne.w	800597a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	88bb      	ldrh	r3, [r7, #4]
 8005806:	4619      	mov	r1, r3
 8005808:	2000      	movs	r0, #0
 800580a:	f000 f8d1 	bl	80059b0 <pbuf_alloc_reference>
 800580e:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8005810:	e0bd      	b.n	800598e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8005816:	2300      	movs	r3, #0
 8005818:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800581a:	88bb      	ldrh	r3, [r7, #4]
 800581c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800581e:	2008      	movs	r0, #8
 8005820:	f7ff fbce 	bl	8004fc0 <memp_malloc>
 8005824:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800582c:	f7ff ff94 	bl	8005758 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d002      	beq.n	800583c <pbuf_alloc+0x78>
            pbuf_free(p);
 8005836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005838:	f000 faa8 	bl	8005d8c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800583c:	2300      	movs	r3, #0
 800583e:	e0a7      	b.n	8005990 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8005840:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005842:	3303      	adds	r3, #3
 8005844:	b29b      	uxth	r3, r3
 8005846:	f023 0303 	bic.w	r3, r3, #3
 800584a:	b29b      	uxth	r3, r3
 800584c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8005850:	b29b      	uxth	r3, r3
 8005852:	8b7a      	ldrh	r2, [r7, #26]
 8005854:	4293      	cmp	r3, r2
 8005856:	bf28      	it	cs
 8005858:	4613      	movcs	r3, r2
 800585a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800585c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800585e:	3310      	adds	r3, #16
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4413      	add	r3, r2
 8005864:	3303      	adds	r3, #3
 8005866:	f023 0303 	bic.w	r3, r3, #3
 800586a:	4618      	mov	r0, r3
 800586c:	89f9      	ldrh	r1, [r7, #14]
 800586e:	8b7a      	ldrh	r2, [r7, #26]
 8005870:	2300      	movs	r3, #0
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	887b      	ldrh	r3, [r7, #2]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	460b      	mov	r3, r1
 800587a:	4601      	mov	r1, r0
 800587c:	6938      	ldr	r0, [r7, #16]
 800587e:	f7ff ff77 	bl	8005770 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d006      	beq.n	800589c <pbuf_alloc+0xd8>
 800588e:	4b42      	ldr	r3, [pc, #264]	@ (8005998 <pbuf_alloc+0x1d4>)
 8005890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005894:	4941      	ldr	r1, [pc, #260]	@ (800599c <pbuf_alloc+0x1d8>)
 8005896:	4842      	ldr	r0, [pc, #264]	@ (80059a0 <pbuf_alloc+0x1dc>)
 8005898:	f008 fd4e 	bl	800e338 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800589c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800589e:	3303      	adds	r3, #3
 80058a0:	f023 0303 	bic.w	r3, r3, #3
 80058a4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80058a8:	d106      	bne.n	80058b8 <pbuf_alloc+0xf4>
 80058aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005998 <pbuf_alloc+0x1d4>)
 80058ac:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80058b0:	493c      	ldr	r1, [pc, #240]	@ (80059a4 <pbuf_alloc+0x1e0>)
 80058b2:	483b      	ldr	r0, [pc, #236]	@ (80059a0 <pbuf_alloc+0x1dc>)
 80058b4:	f008 fd40 	bl	800e338 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80058c2:	e002      	b.n	80058ca <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80058ce:	8b7a      	ldrh	r2, [r7, #26]
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80058da:	8b7b      	ldrh	r3, [r7, #26]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d19e      	bne.n	800581e <pbuf_alloc+0x5a>
      break;
 80058e0:	e055      	b.n	800598e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80058e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80058e4:	3303      	adds	r3, #3
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	f023 0303 	bic.w	r3, r3, #3
 80058ec:	b29a      	uxth	r2, r3
 80058ee:	88bb      	ldrh	r3, [r7, #4]
 80058f0:	3303      	adds	r3, #3
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	4413      	add	r3, r2
 80058fc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80058fe:	8b3b      	ldrh	r3, [r7, #24]
 8005900:	3310      	adds	r3, #16
 8005902:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005904:	8b3a      	ldrh	r2, [r7, #24]
 8005906:	88bb      	ldrh	r3, [r7, #4]
 8005908:	3303      	adds	r3, #3
 800590a:	f023 0303 	bic.w	r3, r3, #3
 800590e:	429a      	cmp	r2, r3
 8005910:	d306      	bcc.n	8005920 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8005912:	8afa      	ldrh	r2, [r7, #22]
 8005914:	88bb      	ldrh	r3, [r7, #4]
 8005916:	3303      	adds	r3, #3
 8005918:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800591c:	429a      	cmp	r2, r3
 800591e:	d201      	bcs.n	8005924 <pbuf_alloc+0x160>
        return NULL;
 8005920:	2300      	movs	r3, #0
 8005922:	e035      	b.n	8005990 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005924:	8afb      	ldrh	r3, [r7, #22]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff f9ba 	bl	8004ca0 <mem_malloc>
 800592c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800592e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <pbuf_alloc+0x174>
        return NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	e02b      	b.n	8005990 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005938:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800593a:	3310      	adds	r3, #16
 800593c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800593e:	4413      	add	r3, r2
 8005940:	3303      	adds	r3, #3
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	4618      	mov	r0, r3
 8005948:	88b9      	ldrh	r1, [r7, #4]
 800594a:	88ba      	ldrh	r2, [r7, #4]
 800594c:	2300      	movs	r3, #0
 800594e:	9301      	str	r3, [sp, #4]
 8005950:	887b      	ldrh	r3, [r7, #2]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	460b      	mov	r3, r1
 8005956:	4601      	mov	r1, r0
 8005958:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800595a:	f7ff ff09 	bl	8005770 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f003 0303 	and.w	r3, r3, #3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d010      	beq.n	800598c <pbuf_alloc+0x1c8>
 800596a:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <pbuf_alloc+0x1d4>)
 800596c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8005970:	490d      	ldr	r1, [pc, #52]	@ (80059a8 <pbuf_alloc+0x1e4>)
 8005972:	480b      	ldr	r0, [pc, #44]	@ (80059a0 <pbuf_alloc+0x1dc>)
 8005974:	f008 fce0 	bl	800e338 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005978:	e008      	b.n	800598c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <pbuf_alloc+0x1d4>)
 800597c:	f240 1227 	movw	r2, #295	@ 0x127
 8005980:	490a      	ldr	r1, [pc, #40]	@ (80059ac <pbuf_alloc+0x1e8>)
 8005982:	4807      	ldr	r0, [pc, #28]	@ (80059a0 <pbuf_alloc+0x1dc>)
 8005984:	f008 fcd8 	bl	800e338 <iprintf>
      return NULL;
 8005988:	2300      	movs	r3, #0
 800598a:	e001      	b.n	8005990 <pbuf_alloc+0x1cc>
      break;
 800598c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005990:	4618      	mov	r0, r3
 8005992:	3728      	adds	r7, #40	@ 0x28
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	0800f730 	.word	0x0800f730
 800599c:	0800f760 	.word	0x0800f760
 80059a0:	0800f790 	.word	0x0800f790
 80059a4:	0800f7b8 	.word	0x0800f7b8
 80059a8:	0800f7ec 	.word	0x0800f7ec
 80059ac:	0800f818 	.word	0x0800f818

080059b0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
 80059bc:	4613      	mov	r3, r2
 80059be:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80059c0:	883b      	ldrh	r3, [r7, #0]
 80059c2:	2b41      	cmp	r3, #65	@ 0x41
 80059c4:	d009      	beq.n	80059da <pbuf_alloc_reference+0x2a>
 80059c6:	883b      	ldrh	r3, [r7, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d006      	beq.n	80059da <pbuf_alloc_reference+0x2a>
 80059cc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a0c <pbuf_alloc_reference+0x5c>)
 80059ce:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80059d2:	490f      	ldr	r1, [pc, #60]	@ (8005a10 <pbuf_alloc_reference+0x60>)
 80059d4:	480f      	ldr	r0, [pc, #60]	@ (8005a14 <pbuf_alloc_reference+0x64>)
 80059d6:	f008 fcaf 	bl	800e338 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80059da:	2007      	movs	r0, #7
 80059dc:	f7ff faf0 	bl	8004fc0 <memp_malloc>
 80059e0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80059e8:	2300      	movs	r3, #0
 80059ea:	e00b      	b.n	8005a04 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80059ec:	8879      	ldrh	r1, [r7, #2]
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	2300      	movs	r3, #0
 80059f2:	9301      	str	r3, [sp, #4]
 80059f4:	883b      	ldrh	r3, [r7, #0]
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	460b      	mov	r3, r1
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff feb7 	bl	8005770 <pbuf_init_alloced_pbuf>
  return p;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	0800f730 	.word	0x0800f730
 8005a10:	0800f834 	.word	0x0800f834
 8005a14:	0800f790 	.word	0x0800f790

08005a18 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]
 8005a24:	460b      	mov	r3, r1
 8005a26:	81bb      	strh	r3, [r7, #12]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005a30:	8a7b      	ldrh	r3, [r7, #18]
 8005a32:	3303      	adds	r3, #3
 8005a34:	f023 0203 	bic.w	r2, r3, #3
 8005a38:	89bb      	ldrh	r3, [r7, #12]
 8005a3a:	441a      	add	r2, r3
 8005a3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d901      	bls.n	8005a46 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e018      	b.n	8005a78 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005a4c:	8a7b      	ldrh	r3, [r7, #18]
 8005a4e:	3303      	adds	r3, #3
 8005a50:	f023 0303 	bic.w	r3, r3, #3
 8005a54:	6a3a      	ldr	r2, [r7, #32]
 8005a56:	4413      	add	r3, r2
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e001      	b.n	8005a60 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	89b9      	ldrh	r1, [r7, #12]
 8005a64:	89ba      	ldrh	r2, [r7, #12]
 8005a66:	2302      	movs	r3, #2
 8005a68:	9301      	str	r3, [sp, #4]
 8005a6a:	897b      	ldrh	r3, [r7, #10]
 8005a6c:	9300      	str	r3, [sp, #0]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	6979      	ldr	r1, [r7, #20]
 8005a72:	f7ff fe7d 	bl	8005770 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005a76:	687b      	ldr	r3, [r7, #4]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <pbuf_realloc+0x20>
 8005a92:	4b3a      	ldr	r3, [pc, #232]	@ (8005b7c <pbuf_realloc+0xfc>)
 8005a94:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8005a98:	4939      	ldr	r1, [pc, #228]	@ (8005b80 <pbuf_realloc+0x100>)
 8005a9a:	483a      	ldr	r0, [pc, #232]	@ (8005b84 <pbuf_realloc+0x104>)
 8005a9c:	f008 fc4c 	bl	800e338 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	891b      	ldrh	r3, [r3, #8]
 8005aa4:	887a      	ldrh	r2, [r7, #2]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d263      	bcs.n	8005b72 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	891a      	ldrh	r2, [r3, #8]
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	817b      	strh	r3, [r7, #10]
  q = p;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005abc:	e018      	b.n	8005af0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	895b      	ldrh	r3, [r3, #10]
 8005ac2:	897a      	ldrh	r2, [r7, #10]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	891a      	ldrh	r2, [r3, #8]
 8005acc:	893b      	ldrh	r3, [r7, #8]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <pbuf_realloc+0x70>
 8005ae2:	4b26      	ldr	r3, [pc, #152]	@ (8005b7c <pbuf_realloc+0xfc>)
 8005ae4:	f240 12af 	movw	r2, #431	@ 0x1af
 8005ae8:	4927      	ldr	r1, [pc, #156]	@ (8005b88 <pbuf_realloc+0x108>)
 8005aea:	4826      	ldr	r0, [pc, #152]	@ (8005b84 <pbuf_realloc+0x104>)
 8005aec:	f008 fc24 	bl	800e338 <iprintf>
  while (rem_len > q->len) {
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	895b      	ldrh	r3, [r3, #10]
 8005af4:	897a      	ldrh	r2, [r7, #10]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d8e1      	bhi.n	8005abe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	7b1b      	ldrb	r3, [r3, #12]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d121      	bne.n	8005b4a <pbuf_realloc+0xca>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	895b      	ldrh	r3, [r3, #10]
 8005b0a:	897a      	ldrh	r2, [r7, #10]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d01c      	beq.n	8005b4a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	7b5b      	ldrb	r3, [r3, #13]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d116      	bne.n	8005b4a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	897b      	ldrh	r3, [r7, #10]
 8005b28:	4413      	add	r3, r2
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7fe ffba 	bl	8004aa8 <mem_trim>
 8005b34:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <pbuf_realloc+0xca>
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b7c <pbuf_realloc+0xfc>)
 8005b3e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8005b42:	4912      	ldr	r1, [pc, #72]	@ (8005b8c <pbuf_realloc+0x10c>)
 8005b44:	480f      	ldr	r0, [pc, #60]	@ (8005b84 <pbuf_realloc+0x104>)
 8005b46:	f008 fbf7 	bl	800e338 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	897a      	ldrh	r2, [r7, #10]
 8005b4e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	895a      	ldrh	r2, [r3, #10]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d004      	beq.n	8005b6a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f911 	bl	8005d8c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e000      	b.n	8005b74 <pbuf_realloc+0xf4>
    return;
 8005b72:	bf00      	nop

}
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	0800f730 	.word	0x0800f730
 8005b80:	0800f848 	.word	0x0800f848
 8005b84:	0800f790 	.word	0x0800f790
 8005b88:	0800f860 	.word	0x0800f860
 8005b8c:	0800f878 	.word	0x0800f878

08005b90 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d106      	bne.n	8005bb2 <pbuf_add_header_impl+0x22>
 8005ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8005c54 <pbuf_add_header_impl+0xc4>)
 8005ba6:	f240 12df 	movw	r2, #479	@ 0x1df
 8005baa:	492b      	ldr	r1, [pc, #172]	@ (8005c58 <pbuf_add_header_impl+0xc8>)
 8005bac:	482b      	ldr	r0, [pc, #172]	@ (8005c5c <pbuf_add_header_impl+0xcc>)
 8005bae:	f008 fbc3 	bl	800e338 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <pbuf_add_header_impl+0x30>
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbe:	d301      	bcc.n	8005bc4 <pbuf_add_header_impl+0x34>
    return 1;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e043      	b.n	8005c4c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <pbuf_add_header_impl+0x3e>
    return 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e03e      	b.n	8005c4c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	891a      	ldrh	r2, [r3, #8]
 8005bd6:	8a7b      	ldrh	r3, [r7, #18]
 8005bd8:	4413      	add	r3, r2
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	8a7a      	ldrh	r2, [r7, #18]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d901      	bls.n	8005be6 <pbuf_add_header_impl+0x56>
    return 1;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e032      	b.n	8005c4c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	7b1b      	ldrb	r3, [r3, #12]
 8005bea:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005bec:	8a3b      	ldrh	r3, [r7, #16]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	425b      	negs	r3, r3
 8005bfe:	4413      	add	r3, r2
 8005c00:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	3310      	adds	r3, #16
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d20d      	bcs.n	8005c28 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e01d      	b.n	8005c4c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d006      	beq.n	8005c24 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	4413      	add	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e001      	b.n	8005c28 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e011      	b.n	8005c4c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	697a      	ldr	r2, [r7, #20]
 8005c2c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	895a      	ldrh	r2, [r3, #10]
 8005c32:	8a7b      	ldrh	r3, [r7, #18]
 8005c34:	4413      	add	r3, r2
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	891a      	ldrh	r2, [r3, #8]
 8005c40:	8a7b      	ldrh	r3, [r7, #18]
 8005c42:	4413      	add	r3, r2
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	811a      	strh	r2, [r3, #8]


  return 0;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	0800f730 	.word	0x0800f730
 8005c58:	0800f894 	.word	0x0800f894
 8005c5c:	0800f790 	.word	0x0800f790

08005c60 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ff8e 	bl	8005b90 <pbuf_add_header_impl>
 8005c74:	4603      	mov	r3, r0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <pbuf_remove_header+0x1e>
 8005c90:	4b20      	ldr	r3, [pc, #128]	@ (8005d14 <pbuf_remove_header+0x94>)
 8005c92:	f240 224b 	movw	r2, #587	@ 0x24b
 8005c96:	4920      	ldr	r1, [pc, #128]	@ (8005d18 <pbuf_remove_header+0x98>)
 8005c98:	4820      	ldr	r0, [pc, #128]	@ (8005d1c <pbuf_remove_header+0x9c>)
 8005c9a:	f008 fb4d 	bl	800e338 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <pbuf_remove_header+0x2c>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005caa:	d301      	bcc.n	8005cb0 <pbuf_remove_header+0x30>
    return 1;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e02c      	b.n	8005d0a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <pbuf_remove_header+0x3a>
    return 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e027      	b.n	8005d0a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	895b      	ldrh	r3, [r3, #10]
 8005cc2:	89fa      	ldrh	r2, [r7, #14]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d908      	bls.n	8005cda <pbuf_remove_header+0x5a>
 8005cc8:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <pbuf_remove_header+0x94>)
 8005cca:	f240 2255 	movw	r2, #597	@ 0x255
 8005cce:	4914      	ldr	r1, [pc, #80]	@ (8005d20 <pbuf_remove_header+0xa0>)
 8005cd0:	4812      	ldr	r0, [pc, #72]	@ (8005d1c <pbuf_remove_header+0x9c>)
 8005cd2:	f008 fb31 	bl	800e338 <iprintf>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e017      	b.n	8005d0a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	441a      	add	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	895a      	ldrh	r2, [r3, #10]
 8005cf0:	89fb      	ldrh	r3, [r7, #14]
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	891a      	ldrh	r2, [r3, #8]
 8005cfe:	89fb      	ldrh	r3, [r7, #14]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	0800f730 	.word	0x0800f730
 8005d18:	0800f894 	.word	0x0800f894
 8005d1c:	0800f790 	.word	0x0800f790
 8005d20:	0800f8a0 	.word	0x0800f8a0

08005d24 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
 8005d30:	4613      	mov	r3, r2
 8005d32:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005d34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da08      	bge.n	8005d4e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005d3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d40:	425b      	negs	r3, r3
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7ff ff9b 	bl	8005c80 <pbuf_remove_header>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	e007      	b.n	8005d5e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005d4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d52:	787a      	ldrb	r2, [r7, #1]
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff ff1a 	bl	8005b90 <pbuf_add_header_impl>
 8005d5c:	4603      	mov	r3, r0
  }
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	460b      	mov	r3, r1
 8005d70:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8005d72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005d76:	2201      	movs	r2, #1
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff ffd2 	bl	8005d24 <pbuf_header_impl>
 8005d80:	4603      	mov	r3, r0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <pbuf_free+0x22>
 8005da0:	4b38      	ldr	r3, [pc, #224]	@ (8005e84 <pbuf_free+0xf8>)
 8005da2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8005da6:	4938      	ldr	r1, [pc, #224]	@ (8005e88 <pbuf_free+0xfc>)
 8005da8:	4838      	ldr	r0, [pc, #224]	@ (8005e8c <pbuf_free+0x100>)
 8005daa:	f008 fac5 	bl	800e338 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e063      	b.n	8005e7a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8005db2:	2300      	movs	r3, #0
 8005db4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005db6:	e05c      	b.n	8005e72 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	7b9b      	ldrb	r3, [r3, #14]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <pbuf_free+0x42>
 8005dc0:	4b30      	ldr	r3, [pc, #192]	@ (8005e84 <pbuf_free+0xf8>)
 8005dc2:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8005dc6:	4932      	ldr	r1, [pc, #200]	@ (8005e90 <pbuf_free+0x104>)
 8005dc8:	4830      	ldr	r0, [pc, #192]	@ (8005e8c <pbuf_free+0x100>)
 8005dca:	f008 fab5 	bl	800e338 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7b9b      	ldrb	r3, [r3, #14]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	739a      	strb	r2, [r3, #14]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7b9b      	ldrb	r3, [r3, #14]
 8005dde:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005de0:	7dbb      	ldrb	r3, [r7, #22]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d143      	bne.n	8005e6e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7b1b      	ldrb	r3, [r3, #12]
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	7b5b      	ldrb	r3, [r3, #13]
 8005dfa:	f003 0302 	and.w	r3, r3, #2
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <pbuf_free+0x90>
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005e84 <pbuf_free+0xf8>)
 8005e10:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8005e14:	491f      	ldr	r1, [pc, #124]	@ (8005e94 <pbuf_free+0x108>)
 8005e16:	481d      	ldr	r0, [pc, #116]	@ (8005e8c <pbuf_free+0x100>)
 8005e18:	f008 fa8e 	bl	800e338 <iprintf>
        pc->custom_free_function(p);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
 8005e24:	e01d      	b.n	8005e62 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d104      	bne.n	8005e36 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	2008      	movs	r0, #8
 8005e30:	f7ff f936 	bl	80050a0 <memp_free>
 8005e34:	e015      	b.n	8005e62 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005e36:	7bfb      	ldrb	r3, [r7, #15]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d104      	bne.n	8005e46 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	2007      	movs	r0, #7
 8005e40:	f7ff f92e 	bl	80050a0 <memp_free>
 8005e44:	e00d      	b.n	8005e62 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d103      	bne.n	8005e54 <pbuf_free+0xc8>
          mem_free(p);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7fe fdc1 	bl	80049d4 <mem_free>
 8005e52:	e006      	b.n	8005e62 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005e54:	4b0b      	ldr	r3, [pc, #44]	@ (8005e84 <pbuf_free+0xf8>)
 8005e56:	f240 320f 	movw	r2, #783	@ 0x30f
 8005e5a:	490f      	ldr	r1, [pc, #60]	@ (8005e98 <pbuf_free+0x10c>)
 8005e5c:	480b      	ldr	r0, [pc, #44]	@ (8005e8c <pbuf_free+0x100>)
 8005e5e:	f008 fa6b 	bl	800e338 <iprintf>
        }
      }
      count++;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	3301      	adds	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	e001      	b.n	8005e72 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d19f      	bne.n	8005db8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3718      	adds	r7, #24
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	0800f730 	.word	0x0800f730
 8005e88:	0800f894 	.word	0x0800f894
 8005e8c:	0800f790 	.word	0x0800f790
 8005e90:	0800f8c0 	.word	0x0800f8c0
 8005e94:	0800f8d8 	.word	0x0800f8d8
 8005e98:	0800f8fc 	.word	0x0800f8fc

08005e9c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005ea8:	e005      	b.n	8005eb6 <pbuf_clen+0x1a>
    ++len;
 8005eaa:	89fb      	ldrh	r3, [r7, #14]
 8005eac:	3301      	adds	r3, #1
 8005eae:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f6      	bne.n	8005eaa <pbuf_clen+0xe>
  }
  return len;
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
	...

08005ecc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d010      	beq.n	8005efc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7b9b      	ldrb	r3, [r3, #14]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	7b9b      	ldrb	r3, [r3, #14]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <pbuf_ref+0x30>
 8005eee:	4b05      	ldr	r3, [pc, #20]	@ (8005f04 <pbuf_ref+0x38>)
 8005ef0:	f240 3242 	movw	r2, #834	@ 0x342
 8005ef4:	4904      	ldr	r1, [pc, #16]	@ (8005f08 <pbuf_ref+0x3c>)
 8005ef6:	4805      	ldr	r0, [pc, #20]	@ (8005f0c <pbuf_ref+0x40>)
 8005ef8:	f008 fa1e 	bl	800e338 <iprintf>
  }
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	0800f730 	.word	0x0800f730
 8005f08:	0800f910 	.word	0x0800f910
 8005f0c:	0800f790 	.word	0x0800f790

08005f10 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <pbuf_cat+0x16>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d107      	bne.n	8005f36 <pbuf_cat+0x26>
 8005f26:	4b20      	ldr	r3, [pc, #128]	@ (8005fa8 <pbuf_cat+0x98>)
 8005f28:	f240 3259 	movw	r2, #857	@ 0x359
 8005f2c:	491f      	ldr	r1, [pc, #124]	@ (8005fac <pbuf_cat+0x9c>)
 8005f2e:	4820      	ldr	r0, [pc, #128]	@ (8005fb0 <pbuf_cat+0xa0>)
 8005f30:	f008 fa02 	bl	800e338 <iprintf>
 8005f34:	e034      	b.n	8005fa0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e00a      	b.n	8005f52 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	891a      	ldrh	r2, [r3, #8]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	891b      	ldrh	r3, [r3, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	891a      	ldrh	r2, [r3, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	895b      	ldrh	r3, [r3, #10]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d006      	beq.n	8005f74 <pbuf_cat+0x64>
 8005f66:	4b10      	ldr	r3, [pc, #64]	@ (8005fa8 <pbuf_cat+0x98>)
 8005f68:	f240 3262 	movw	r2, #866	@ 0x362
 8005f6c:	4911      	ldr	r1, [pc, #68]	@ (8005fb4 <pbuf_cat+0xa4>)
 8005f6e:	4810      	ldr	r0, [pc, #64]	@ (8005fb0 <pbuf_cat+0xa0>)
 8005f70:	f008 f9e2 	bl	800e338 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d006      	beq.n	8005f8a <pbuf_cat+0x7a>
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <pbuf_cat+0x98>)
 8005f7e:	f240 3263 	movw	r2, #867	@ 0x363
 8005f82:	490d      	ldr	r1, [pc, #52]	@ (8005fb8 <pbuf_cat+0xa8>)
 8005f84:	480a      	ldr	r0, [pc, #40]	@ (8005fb0 <pbuf_cat+0xa0>)
 8005f86:	f008 f9d7 	bl	800e338 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	891a      	ldrh	r2, [r3, #8]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	891b      	ldrh	r3, [r3, #8]
 8005f92:	4413      	add	r3, r2
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	0800f730 	.word	0x0800f730
 8005fac:	0800f924 	.word	0x0800f924
 8005fb0:	0800f790 	.word	0x0800f790
 8005fb4:	0800f95c 	.word	0x0800f95c
 8005fb8:	0800f98c 	.word	0x0800f98c

08005fbc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d008      	beq.n	8005fe6 <pbuf_copy+0x2a>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <pbuf_copy+0x2a>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	891a      	ldrh	r2, [r3, #8]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	891b      	ldrh	r3, [r3, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d209      	bcs.n	8005ffa <pbuf_copy+0x3e>
 8005fe6:	4b57      	ldr	r3, [pc, #348]	@ (8006144 <pbuf_copy+0x188>)
 8005fe8:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8005fec:	4956      	ldr	r1, [pc, #344]	@ (8006148 <pbuf_copy+0x18c>)
 8005fee:	4857      	ldr	r0, [pc, #348]	@ (800614c <pbuf_copy+0x190>)
 8005ff0:	f008 f9a2 	bl	800e338 <iprintf>
 8005ff4:	f06f 030f 	mvn.w	r3, #15
 8005ff8:	e09f      	b.n	800613a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	895b      	ldrh	r3, [r3, #10]
 8005ffe:	461a      	mov	r2, r3
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	1ad2      	subs	r2, r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	895b      	ldrh	r3, [r3, #10]
 8006008:	4619      	mov	r1, r3
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1acb      	subs	r3, r1, r3
 800600e:	429a      	cmp	r2, r3
 8006010:	d306      	bcc.n	8006020 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	895b      	ldrh	r3, [r3, #10]
 8006016:	461a      	mov	r2, r3
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e005      	b.n	800602c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	895b      	ldrh	r3, [r3, #10]
 8006024:	461a      	mov	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	18d0      	adds	r0, r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685a      	ldr	r2, [r3, #4]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	4413      	add	r3, r2
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4619      	mov	r1, r3
 8006040:	f008 fa55 	bl	800e4ee <memcpy>
    offset_to += len;
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4413      	add	r3, r2
 8006052:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	895b      	ldrh	r3, [r3, #10]
 8006058:	461a      	mov	r2, r3
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4293      	cmp	r3, r2
 800605e:	d906      	bls.n	800606e <pbuf_copy+0xb2>
 8006060:	4b38      	ldr	r3, [pc, #224]	@ (8006144 <pbuf_copy+0x188>)
 8006062:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8006066:	493a      	ldr	r1, [pc, #232]	@ (8006150 <pbuf_copy+0x194>)
 8006068:	4838      	ldr	r0, [pc, #224]	@ (800614c <pbuf_copy+0x190>)
 800606a:	f008 f965 	bl	800e338 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	895b      	ldrh	r3, [r3, #10]
 8006072:	461a      	mov	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4293      	cmp	r3, r2
 8006078:	d906      	bls.n	8006088 <pbuf_copy+0xcc>
 800607a:	4b32      	ldr	r3, [pc, #200]	@ (8006144 <pbuf_copy+0x188>)
 800607c:	f240 32da 	movw	r2, #986	@ 0x3da
 8006080:	4934      	ldr	r1, [pc, #208]	@ (8006154 <pbuf_copy+0x198>)
 8006082:	4832      	ldr	r0, [pc, #200]	@ (800614c <pbuf_copy+0x190>)
 8006084:	f008 f958 	bl	800e338 <iprintf>
    if (offset_from >= p_from->len) {
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	895b      	ldrh	r3, [r3, #10]
 800608c:	461a      	mov	r2, r3
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	4293      	cmp	r3, r2
 8006092:	d304      	bcc.n	800609e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	895b      	ldrh	r3, [r3, #10]
 80060a2:	461a      	mov	r2, r3
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d114      	bne.n	80060d4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <pbuf_copy+0x118>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <pbuf_copy+0x118>
 80060c0:	4b20      	ldr	r3, [pc, #128]	@ (8006144 <pbuf_copy+0x188>)
 80060c2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80060c6:	4924      	ldr	r1, [pc, #144]	@ (8006158 <pbuf_copy+0x19c>)
 80060c8:	4820      	ldr	r0, [pc, #128]	@ (800614c <pbuf_copy+0x190>)
 80060ca:	f008 f935 	bl	800e338 <iprintf>
 80060ce:	f06f 030f 	mvn.w	r3, #15
 80060d2:	e032      	b.n	800613a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d013      	beq.n	8006102 <pbuf_copy+0x146>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	895a      	ldrh	r2, [r3, #10]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	891b      	ldrh	r3, [r3, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d10d      	bne.n	8006102 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d009      	beq.n	8006102 <pbuf_copy+0x146>
 80060ee:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <pbuf_copy+0x188>)
 80060f0:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80060f4:	4919      	ldr	r1, [pc, #100]	@ (800615c <pbuf_copy+0x1a0>)
 80060f6:	4815      	ldr	r0, [pc, #84]	@ (800614c <pbuf_copy+0x190>)
 80060f8:	f008 f91e 	bl	800e338 <iprintf>
 80060fc:	f06f 0305 	mvn.w	r3, #5
 8006100:	e01b      	b.n	800613a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d013      	beq.n	8006130 <pbuf_copy+0x174>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	895a      	ldrh	r2, [r3, #10]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	891b      	ldrh	r3, [r3, #8]
 8006110:	429a      	cmp	r2, r3
 8006112:	d10d      	bne.n	8006130 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d009      	beq.n	8006130 <pbuf_copy+0x174>
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <pbuf_copy+0x188>)
 800611e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8006122:	490e      	ldr	r1, [pc, #56]	@ (800615c <pbuf_copy+0x1a0>)
 8006124:	4809      	ldr	r0, [pc, #36]	@ (800614c <pbuf_copy+0x190>)
 8006126:	f008 f907 	bl	800e338 <iprintf>
 800612a:	f06f 0305 	mvn.w	r3, #5
 800612e:	e004      	b.n	800613a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f47f af61 	bne.w	8005ffa <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	0800f730 	.word	0x0800f730
 8006148:	0800f9d8 	.word	0x0800f9d8
 800614c:	0800f790 	.word	0x0800f790
 8006150:	0800fa08 	.word	0x0800fa08
 8006154:	0800fa20 	.word	0x0800fa20
 8006158:	0800fa3c 	.word	0x0800fa3c
 800615c:	0800fa4c 	.word	0x0800fa4c

08006160 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	4611      	mov	r1, r2
 800616c:	461a      	mov	r2, r3
 800616e:	460b      	mov	r3, r1
 8006170:	80fb      	strh	r3, [r7, #6]
 8006172:	4613      	mov	r3, r2
 8006174:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006176:	2300      	movs	r3, #0
 8006178:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d108      	bne.n	8006196 <pbuf_copy_partial+0x36>
 8006184:	4b2b      	ldr	r3, [pc, #172]	@ (8006234 <pbuf_copy_partial+0xd4>)
 8006186:	f240 420a 	movw	r2, #1034	@ 0x40a
 800618a:	492b      	ldr	r1, [pc, #172]	@ (8006238 <pbuf_copy_partial+0xd8>)
 800618c:	482b      	ldr	r0, [pc, #172]	@ (800623c <pbuf_copy_partial+0xdc>)
 800618e:	f008 f8d3 	bl	800e338 <iprintf>
 8006192:	2300      	movs	r3, #0
 8006194:	e04a      	b.n	800622c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d108      	bne.n	80061ae <pbuf_copy_partial+0x4e>
 800619c:	4b25      	ldr	r3, [pc, #148]	@ (8006234 <pbuf_copy_partial+0xd4>)
 800619e:	f240 420b 	movw	r2, #1035	@ 0x40b
 80061a2:	4927      	ldr	r1, [pc, #156]	@ (8006240 <pbuf_copy_partial+0xe0>)
 80061a4:	4825      	ldr	r0, [pc, #148]	@ (800623c <pbuf_copy_partial+0xdc>)
 80061a6:	f008 f8c7 	bl	800e338 <iprintf>
 80061aa:	2300      	movs	r3, #0
 80061ac:	e03e      	b.n	800622c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	61fb      	str	r3, [r7, #28]
 80061b2:	e034      	b.n	800621e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80061b4:	88bb      	ldrh	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00a      	beq.n	80061d0 <pbuf_copy_partial+0x70>
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	895b      	ldrh	r3, [r3, #10]
 80061be:	88ba      	ldrh	r2, [r7, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d305      	bcc.n	80061d0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	895b      	ldrh	r3, [r3, #10]
 80061c8:	88ba      	ldrh	r2, [r7, #4]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	80bb      	strh	r3, [r7, #4]
 80061ce:	e023      	b.n	8006218 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	895a      	ldrh	r2, [r3, #10]
 80061d4:	88bb      	ldrh	r3, [r7, #4]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80061da:	8b3a      	ldrh	r2, [r7, #24]
 80061dc:	88fb      	ldrh	r3, [r7, #6]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d901      	bls.n	80061e6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80061e2:	88fb      	ldrh	r3, [r7, #6]
 80061e4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80061e6:	8b7b      	ldrh	r3, [r7, #26]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	18d0      	adds	r0, r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	4413      	add	r3, r2
 80061f4:	8b3a      	ldrh	r2, [r7, #24]
 80061f6:	4619      	mov	r1, r3
 80061f8:	f008 f979 	bl	800e4ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80061fc:	8afa      	ldrh	r2, [r7, #22]
 80061fe:	8b3b      	ldrh	r3, [r7, #24]
 8006200:	4413      	add	r3, r2
 8006202:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006204:	8b7a      	ldrh	r2, [r7, #26]
 8006206:	8b3b      	ldrh	r3, [r7, #24]
 8006208:	4413      	add	r3, r2
 800620a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	8b3b      	ldrh	r3, [r7, #24]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	61fb      	str	r3, [r7, #28]
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <pbuf_copy_partial+0xca>
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1c4      	bne.n	80061b4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800622a:	8afb      	ldrh	r3, [r7, #22]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	0800f730 	.word	0x0800f730
 8006238:	0800fa78 	.word	0x0800fa78
 800623c:	0800f790 	.word	0x0800f790
 8006240:	0800fa98 	.word	0x0800fa98

08006244 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	603a      	str	r2, [r7, #0]
 800624e:	71fb      	strb	r3, [r7, #7]
 8006250:	460b      	mov	r3, r1
 8006252:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	8919      	ldrh	r1, [r3, #8]
 8006258:	88ba      	ldrh	r2, [r7, #4]
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff fab1 	bl	80057c4 <pbuf_alloc>
 8006262:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <pbuf_clone+0x2a>
    return NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	e011      	b.n	8006292 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fea3 	bl	8005fbc <pbuf_copy>
 8006276:	4603      	mov	r3, r0
 8006278:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800627a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <pbuf_clone+0x4c>
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <pbuf_clone+0x58>)
 8006284:	f240 5224 	movw	r2, #1316	@ 0x524
 8006288:	4905      	ldr	r1, [pc, #20]	@ (80062a0 <pbuf_clone+0x5c>)
 800628a:	4806      	ldr	r0, [pc, #24]	@ (80062a4 <pbuf_clone+0x60>)
 800628c:	f008 f854 	bl	800e338 <iprintf>
  return q;
 8006290:	68fb      	ldr	r3, [r7, #12]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	0800f730 	.word	0x0800f730
 80062a0:	0800fba4 	.word	0x0800fba4
 80062a4:	0800f790 	.word	0x0800f790

080062a8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80062ac:	f007 ff44 	bl	800e138 <rand>
 80062b0:	4603      	mov	r3, r0
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80062be:	b29a      	uxth	r2, r3
 80062c0:	4b01      	ldr	r3, [pc, #4]	@ (80062c8 <tcp_init+0x20>)
 80062c2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80062c4:	bf00      	nop
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	24000024 	.word	0x24000024

080062cc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	7d1b      	ldrb	r3, [r3, #20]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d105      	bne.n	80062e8 <tcp_free+0x1c>
 80062dc:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <tcp_free+0x2c>)
 80062de:	22d4      	movs	r2, #212	@ 0xd4
 80062e0:	4906      	ldr	r1, [pc, #24]	@ (80062fc <tcp_free+0x30>)
 80062e2:	4807      	ldr	r0, [pc, #28]	@ (8006300 <tcp_free+0x34>)
 80062e4:	f008 f828 	bl	800e338 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	2001      	movs	r0, #1
 80062ec:	f7fe fed8 	bl	80050a0 <memp_free>
}
 80062f0:	bf00      	nop
 80062f2:	3708      	adds	r7, #8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	0800fc30 	.word	0x0800fc30
 80062fc:	0800fc60 	.word	0x0800fc60
 8006300:	0800fc74 	.word	0x0800fc74

08006304 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	7d1b      	ldrb	r3, [r3, #20]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d105      	bne.n	8006320 <tcp_free_listen+0x1c>
 8006314:	4b06      	ldr	r3, [pc, #24]	@ (8006330 <tcp_free_listen+0x2c>)
 8006316:	22df      	movs	r2, #223	@ 0xdf
 8006318:	4906      	ldr	r1, [pc, #24]	@ (8006334 <tcp_free_listen+0x30>)
 800631a:	4807      	ldr	r0, [pc, #28]	@ (8006338 <tcp_free_listen+0x34>)
 800631c:	f008 f80c 	bl	800e338 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	2002      	movs	r0, #2
 8006324:	f7fe febc 	bl	80050a0 <memp_free>
}
 8006328:	bf00      	nop
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	0800fc30 	.word	0x0800fc30
 8006334:	0800fc9c 	.word	0x0800fc9c
 8006338:	0800fc74 	.word	0x0800fc74

0800633c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006340:	f000 fea4 	bl	800708c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006344:	4b07      	ldr	r3, [pc, #28]	@ (8006364 <tcp_tmr+0x28>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3301      	adds	r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b05      	ldr	r3, [pc, #20]	@ (8006364 <tcp_tmr+0x28>)
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	4b04      	ldr	r3, [pc, #16]	@ (8006364 <tcp_tmr+0x28>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800635c:	f000 fb54 	bl	8006a08 <tcp_slowtmr>
  }
}
 8006360:	bf00      	nop
 8006362:	bd80      	pop	{r7, pc}
 8006364:	24007b81 	.word	0x24007b81

08006368 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d105      	bne.n	8006384 <tcp_remove_listener+0x1c>
 8006378:	4b0d      	ldr	r3, [pc, #52]	@ (80063b0 <tcp_remove_listener+0x48>)
 800637a:	22ff      	movs	r2, #255	@ 0xff
 800637c:	490d      	ldr	r1, [pc, #52]	@ (80063b4 <tcp_remove_listener+0x4c>)
 800637e:	480e      	ldr	r0, [pc, #56]	@ (80063b8 <tcp_remove_listener+0x50>)
 8006380:	f007 ffda 	bl	800e338 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e00a      	b.n	80063a0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800638e:	683a      	ldr	r2, [r7, #0]
 8006390:	429a      	cmp	r2, r3
 8006392:	d102      	bne.n	800639a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1f1      	bne.n	800638a <tcp_remove_listener+0x22>
    }
  }
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	0800fc30 	.word	0x0800fc30
 80063b4:	0800fcb8 	.word	0x0800fcb8
 80063b8:	0800fc74 	.word	0x0800fc74

080063bc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <tcp_listen_closed+0x1c>
 80063ca:	4b14      	ldr	r3, [pc, #80]	@ (800641c <tcp_listen_closed+0x60>)
 80063cc:	f240 1211 	movw	r2, #273	@ 0x111
 80063d0:	4913      	ldr	r1, [pc, #76]	@ (8006420 <tcp_listen_closed+0x64>)
 80063d2:	4814      	ldr	r0, [pc, #80]	@ (8006424 <tcp_listen_closed+0x68>)
 80063d4:	f007 ffb0 	bl	800e338 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	7d1b      	ldrb	r3, [r3, #20]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d006      	beq.n	80063ee <tcp_listen_closed+0x32>
 80063e0:	4b0e      	ldr	r3, [pc, #56]	@ (800641c <tcp_listen_closed+0x60>)
 80063e2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80063e6:	4910      	ldr	r1, [pc, #64]	@ (8006428 <tcp_listen_closed+0x6c>)
 80063e8:	480e      	ldr	r0, [pc, #56]	@ (8006424 <tcp_listen_closed+0x68>)
 80063ea:	f007 ffa5 	bl	800e338 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80063ee:	2301      	movs	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e00b      	b.n	800640c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80063f4:	4a0d      	ldr	r2, [pc, #52]	@ (800642c <tcp_listen_closed+0x70>)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff ffb1 	bl	8006368 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3301      	adds	r3, #1
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b03      	cmp	r3, #3
 8006410:	d9f0      	bls.n	80063f4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006412:	bf00      	nop
 8006414:	bf00      	nop
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	0800fc30 	.word	0x0800fc30
 8006420:	0800fce0 	.word	0x0800fce0
 8006424:	0800fc74 	.word	0x0800fc74
 8006428:	0800fcec 	.word	0x0800fcec
 800642c:	08011c08 	.word	0x08011c08

08006430 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006430:	b5b0      	push	{r4, r5, r7, lr}
 8006432:	b088      	sub	sp, #32
 8006434:	af04      	add	r7, sp, #16
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d106      	bne.n	8006450 <tcp_close_shutdown+0x20>
 8006442:	4b63      	ldr	r3, [pc, #396]	@ (80065d0 <tcp_close_shutdown+0x1a0>)
 8006444:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8006448:	4962      	ldr	r1, [pc, #392]	@ (80065d4 <tcp_close_shutdown+0x1a4>)
 800644a:	4863      	ldr	r0, [pc, #396]	@ (80065d8 <tcp_close_shutdown+0x1a8>)
 800644c:	f007 ff74 	bl	800e338 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006450:	78fb      	ldrb	r3, [r7, #3]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d066      	beq.n	8006524 <tcp_close_shutdown+0xf4>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	7d1b      	ldrb	r3, [r3, #20]
 800645a:	2b04      	cmp	r3, #4
 800645c:	d003      	beq.n	8006466 <tcp_close_shutdown+0x36>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	7d1b      	ldrb	r3, [r3, #20]
 8006462:	2b07      	cmp	r3, #7
 8006464:	d15e      	bne.n	8006524 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800646a:	2b00      	cmp	r3, #0
 800646c:	d104      	bne.n	8006478 <tcp_close_shutdown+0x48>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006472:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8006476:	d055      	beq.n	8006524 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8b5b      	ldrh	r3, [r3, #26]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <tcp_close_shutdown+0x62>
 8006484:	4b52      	ldr	r3, [pc, #328]	@ (80065d0 <tcp_close_shutdown+0x1a0>)
 8006486:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800648a:	4954      	ldr	r1, [pc, #336]	@ (80065dc <tcp_close_shutdown+0x1ac>)
 800648c:	4852      	ldr	r0, [pc, #328]	@ (80065d8 <tcp_close_shutdown+0x1a8>)
 800648e:	f007 ff53 	bl	800e338 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800649a:	687d      	ldr	r5, [r7, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	8ad2      	ldrh	r2, [r2, #22]
 80064a4:	6879      	ldr	r1, [r7, #4]
 80064a6:	8b09      	ldrh	r1, [r1, #24]
 80064a8:	9102      	str	r1, [sp, #8]
 80064aa:	9201      	str	r2, [sp, #4]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	462b      	mov	r3, r5
 80064b0:	4622      	mov	r2, r4
 80064b2:	4601      	mov	r1, r0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f004 fe8d 	bl	800b1d4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 f8c8 	bl	8007650 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80064c0:	4b47      	ldr	r3, [pc, #284]	@ (80065e0 <tcp_close_shutdown+0x1b0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d105      	bne.n	80064d6 <tcp_close_shutdown+0xa6>
 80064ca:	4b45      	ldr	r3, [pc, #276]	@ (80065e0 <tcp_close_shutdown+0x1b0>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	4a43      	ldr	r2, [pc, #268]	@ (80065e0 <tcp_close_shutdown+0x1b0>)
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	e013      	b.n	80064fe <tcp_close_shutdown+0xce>
 80064d6:	4b42      	ldr	r3, [pc, #264]	@ (80065e0 <tcp_close_shutdown+0x1b0>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]
 80064dc:	e00c      	b.n	80064f8 <tcp_close_shutdown+0xc8>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d104      	bne.n	80064f2 <tcp_close_shutdown+0xc2>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e005      	b.n	80064fe <tcp_close_shutdown+0xce>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1ef      	bne.n	80064de <tcp_close_shutdown+0xae>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	60da      	str	r2, [r3, #12]
 8006504:	4b37      	ldr	r3, [pc, #220]	@ (80065e4 <tcp_close_shutdown+0x1b4>)
 8006506:	2201      	movs	r2, #1
 8006508:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800650a:	4b37      	ldr	r3, [pc, #220]	@ (80065e8 <tcp_close_shutdown+0x1b8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d102      	bne.n	800651a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006514:	f003 fd5c 	bl	8009fd0 <tcp_trigger_input_pcb_close>
 8006518:	e002      	b.n	8006520 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff fed6 	bl	80062cc <tcp_free>
      }
      return ERR_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e050      	b.n	80065c6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7d1b      	ldrb	r3, [r3, #20]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d03b      	beq.n	80065a4 <tcp_close_shutdown+0x174>
 800652c:	2b02      	cmp	r3, #2
 800652e:	dc44      	bgt.n	80065ba <tcp_close_shutdown+0x18a>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <tcp_close_shutdown+0x10a>
 8006534:	2b01      	cmp	r3, #1
 8006536:	d02a      	beq.n	800658e <tcp_close_shutdown+0x15e>
 8006538:	e03f      	b.n	80065ba <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	8adb      	ldrh	r3, [r3, #22]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d021      	beq.n	8006586 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006542:	4b2a      	ldr	r3, [pc, #168]	@ (80065ec <tcp_close_shutdown+0x1bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	429a      	cmp	r2, r3
 800654a:	d105      	bne.n	8006558 <tcp_close_shutdown+0x128>
 800654c:	4b27      	ldr	r3, [pc, #156]	@ (80065ec <tcp_close_shutdown+0x1bc>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	4a26      	ldr	r2, [pc, #152]	@ (80065ec <tcp_close_shutdown+0x1bc>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	e013      	b.n	8006580 <tcp_close_shutdown+0x150>
 8006558:	4b24      	ldr	r3, [pc, #144]	@ (80065ec <tcp_close_shutdown+0x1bc>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	e00c      	b.n	800657a <tcp_close_shutdown+0x14a>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	429a      	cmp	r2, r3
 8006568:	d104      	bne.n	8006574 <tcp_close_shutdown+0x144>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	e005      	b.n	8006580 <tcp_close_shutdown+0x150>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	60bb      	str	r3, [r7, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1ef      	bne.n	8006560 <tcp_close_shutdown+0x130>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fea0 	bl	80062cc <tcp_free>
      break;
 800658c:	e01a      	b.n	80065c4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7ff ff14 	bl	80063bc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4816      	ldr	r0, [pc, #88]	@ (80065f0 <tcp_close_shutdown+0x1c0>)
 8006598:	f001 f8aa 	bl	80076f0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f7ff feb1 	bl	8006304 <tcp_free_listen>
      break;
 80065a2:	e00f      	b.n	80065c4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	480e      	ldr	r0, [pc, #56]	@ (80065e0 <tcp_close_shutdown+0x1b0>)
 80065a8:	f001 f8a2 	bl	80076f0 <tcp_pcb_remove>
 80065ac:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <tcp_close_shutdown+0x1b4>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fe8a 	bl	80062cc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80065b8:	e004      	b.n	80065c4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f81a 	bl	80065f4 <tcp_close_shutdown_fin>
 80065c0:	4603      	mov	r3, r0
 80065c2:	e000      	b.n	80065c6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bdb0      	pop	{r4, r5, r7, pc}
 80065ce:	bf00      	nop
 80065d0:	0800fc30 	.word	0x0800fc30
 80065d4:	0800fd04 	.word	0x0800fd04
 80065d8:	0800fc74 	.word	0x0800fc74
 80065dc:	0800fd24 	.word	0x0800fd24
 80065e0:	24007b78 	.word	0x24007b78
 80065e4:	24007b80 	.word	0x24007b80
 80065e8:	24007bb8 	.word	0x24007bb8
 80065ec:	24007b70 	.word	0x24007b70
 80065f0:	24007b74 	.word	0x24007b74

080065f4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <tcp_close_shutdown_fin+0x1c>
 8006602:	4b2e      	ldr	r3, [pc, #184]	@ (80066bc <tcp_close_shutdown_fin+0xc8>)
 8006604:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8006608:	492d      	ldr	r1, [pc, #180]	@ (80066c0 <tcp_close_shutdown_fin+0xcc>)
 800660a:	482e      	ldr	r0, [pc, #184]	@ (80066c4 <tcp_close_shutdown_fin+0xd0>)
 800660c:	f007 fe94 	bl	800e338 <iprintf>

  switch (pcb->state) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	7d1b      	ldrb	r3, [r3, #20]
 8006614:	2b07      	cmp	r3, #7
 8006616:	d020      	beq.n	800665a <tcp_close_shutdown_fin+0x66>
 8006618:	2b07      	cmp	r3, #7
 800661a:	dc2b      	bgt.n	8006674 <tcp_close_shutdown_fin+0x80>
 800661c:	2b03      	cmp	r3, #3
 800661e:	d002      	beq.n	8006626 <tcp_close_shutdown_fin+0x32>
 8006620:	2b04      	cmp	r3, #4
 8006622:	d00d      	beq.n	8006640 <tcp_close_shutdown_fin+0x4c>
 8006624:	e026      	b.n	8006674 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f003 fee2 	bl	800a3f0 <tcp_send_fin>
 800662c:	4603      	mov	r3, r0
 800662e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11f      	bne.n	8006678 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2205      	movs	r2, #5
 800663c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800663e:	e01b      	b.n	8006678 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f003 fed5 	bl	800a3f0 <tcp_send_fin>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d114      	bne.n	800667c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2205      	movs	r2, #5
 8006656:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006658:	e010      	b.n	800667c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f003 fec8 	bl	800a3f0 <tcp_send_fin>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006664:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d109      	bne.n	8006680 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2209      	movs	r2, #9
 8006670:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006672:	e005      	b.n	8006680 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	e01c      	b.n	80066b2 <tcp_close_shutdown_fin+0xbe>
      break;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <tcp_close_shutdown_fin+0x8e>
      break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <tcp_close_shutdown_fin+0x8e>
      break;
 8006680:	bf00      	nop
  }

  if (err == ERR_OK) {
 8006682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f003 ffee 	bl	800a66c <tcp_output>
 8006690:	e00d      	b.n	80066ae <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8006692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669a:	d108      	bne.n	80066ae <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	8b5b      	ldrh	r3, [r3, #26]
 80066a0:	f043 0308 	orr.w	r3, r3, #8
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	e001      	b.n	80066b2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80066ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	0800fc30 	.word	0x0800fc30
 80066c0:	0800fce0 	.word	0x0800fce0
 80066c4:	0800fc74 	.word	0x0800fc74

080066c8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <tcp_close+0x22>
 80066d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006714 <tcp_close+0x4c>)
 80066d8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80066dc:	490e      	ldr	r1, [pc, #56]	@ (8006718 <tcp_close+0x50>)
 80066de:	480f      	ldr	r0, [pc, #60]	@ (800671c <tcp_close+0x54>)
 80066e0:	f007 fe2a 	bl	800e338 <iprintf>
 80066e4:	f06f 030f 	mvn.w	r3, #15
 80066e8:	e00f      	b.n	800670a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7d1b      	ldrb	r3, [r3, #20]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d006      	beq.n	8006700 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8b5b      	ldrh	r3, [r3, #26]
 80066f6:	f043 0310 	orr.w	r3, r3, #16
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006700:	2101      	movs	r1, #1
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff fe94 	bl	8006430 <tcp_close_shutdown>
 8006708:	4603      	mov	r3, r0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	0800fc30 	.word	0x0800fc30
 8006718:	0800fd40 	.word	0x0800fd40
 800671c:	0800fc74 	.word	0x0800fc74

08006720 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d107      	bne.n	8006740 <tcp_abandon+0x20>
 8006730:	4b52      	ldr	r3, [pc, #328]	@ (800687c <tcp_abandon+0x15c>)
 8006732:	f240 223d 	movw	r2, #573	@ 0x23d
 8006736:	4952      	ldr	r1, [pc, #328]	@ (8006880 <tcp_abandon+0x160>)
 8006738:	4852      	ldr	r0, [pc, #328]	@ (8006884 <tcp_abandon+0x164>)
 800673a:	f007 fdfd 	bl	800e338 <iprintf>
 800673e:	e099      	b.n	8006874 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	7d1b      	ldrb	r3, [r3, #20]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <tcp_abandon+0x36>
 8006748:	4b4c      	ldr	r3, [pc, #304]	@ (800687c <tcp_abandon+0x15c>)
 800674a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800674e:	494e      	ldr	r1, [pc, #312]	@ (8006888 <tcp_abandon+0x168>)
 8006750:	484c      	ldr	r0, [pc, #304]	@ (8006884 <tcp_abandon+0x164>)
 8006752:	f007 fdf1 	bl	800e338 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7d1b      	ldrb	r3, [r3, #20]
 800675a:	2b0a      	cmp	r3, #10
 800675c:	d107      	bne.n	800676e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800675e:	6879      	ldr	r1, [r7, #4]
 8006760:	484a      	ldr	r0, [pc, #296]	@ (800688c <tcp_abandon+0x16c>)
 8006762:	f000 ffc5 	bl	80076f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff fdb0 	bl	80062cc <tcp_free>
 800676c:	e082      	b.n	8006874 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800677a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006788:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7d1b      	ldrb	r3, [r3, #20]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d126      	bne.n	80067e6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8adb      	ldrh	r3, [r3, #22]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d02e      	beq.n	80067fe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80067a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006890 <tcp_abandon+0x170>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d105      	bne.n	80067b6 <tcp_abandon+0x96>
 80067aa:	4b39      	ldr	r3, [pc, #228]	@ (8006890 <tcp_abandon+0x170>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a37      	ldr	r2, [pc, #220]	@ (8006890 <tcp_abandon+0x170>)
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	e013      	b.n	80067de <tcp_abandon+0xbe>
 80067b6:	4b36      	ldr	r3, [pc, #216]	@ (8006890 <tcp_abandon+0x170>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e00c      	b.n	80067d8 <tcp_abandon+0xb8>
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d104      	bne.n	80067d2 <tcp_abandon+0xb2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e005      	b.n	80067de <tcp_abandon+0xbe>
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1ef      	bne.n	80067be <tcp_abandon+0x9e>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	60da      	str	r2, [r3, #12]
 80067e4:	e00b      	b.n	80067fe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	8adb      	ldrh	r3, [r3, #22]
 80067ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80067f0:	6879      	ldr	r1, [r7, #4]
 80067f2:	4828      	ldr	r0, [pc, #160]	@ (8006894 <tcp_abandon+0x174>)
 80067f4:	f000 ff7c 	bl	80076f0 <tcp_pcb_remove>
 80067f8:	4b27      	ldr	r3, [pc, #156]	@ (8006898 <tcp_abandon+0x178>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006802:	2b00      	cmp	r3, #0
 8006804:	d004      	beq.n	8006810 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800680a:	4618      	mov	r0, r3
 800680c:	f000 fd1e 	bl	800724c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d004      	beq.n	8006822 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fd15 	bl	800724c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006826:	2b00      	cmp	r3, #0
 8006828:	d004      	beq.n	8006834 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fd0c 	bl	800724c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00e      	beq.n	8006858 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	8b12      	ldrh	r2, [r2, #24]
 8006844:	9202      	str	r2, [sp, #8]
 8006846:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006848:	9201      	str	r2, [sp, #4]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	460b      	mov	r3, r1
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	69b9      	ldr	r1, [r7, #24]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f004 fcbe 	bl	800b1d4 <tcp_rst>
    }
    last_state = pcb->state;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	7d1b      	ldrb	r3, [r3, #20]
 800685c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fd34 	bl	80062cc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d004      	beq.n	8006874 <tcp_abandon+0x154>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f06f 010c 	mvn.w	r1, #12
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	4798      	blx	r3
  }
}
 8006874:	3728      	adds	r7, #40	@ 0x28
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	0800fc30 	.word	0x0800fc30
 8006880:	0800fd74 	.word	0x0800fd74
 8006884:	0800fc74 	.word	0x0800fc74
 8006888:	0800fd90 	.word	0x0800fd90
 800688c:	24007b7c 	.word	0x24007b7c
 8006890:	24007b70 	.word	0x24007b70
 8006894:	24007b78 	.word	0x24007b78
 8006898:	24007b80 	.word	0x24007b80

0800689c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80068a4:	2101      	movs	r1, #1
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff ff3a 	bl	8006720 <tcp_abandon>
}
 80068ac:	bf00      	nop
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d106      	bne.n	80068d0 <tcp_update_rcv_ann_wnd+0x1c>
 80068c2:	4b25      	ldr	r3, [pc, #148]	@ (8006958 <tcp_update_rcv_ann_wnd+0xa4>)
 80068c4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80068c8:	4924      	ldr	r1, [pc, #144]	@ (800695c <tcp_update_rcv_ann_wnd+0xa8>)
 80068ca:	4825      	ldr	r0, [pc, #148]	@ (8006960 <tcp_update_rcv_ann_wnd+0xac>)
 80068cc:	f007 fd34 	bl	800e338 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80068e4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80068e8:	bf28      	it	cs
 80068ea:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80068ee:	b292      	uxth	r2, r2
 80068f0:	4413      	add	r3, r2
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	db08      	blt.n	800690c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	e020      	b.n	800694e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	dd03      	ble.n	8006922 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006920:	e014      	b.n	800694c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006934:	d306      	bcc.n	8006944 <tcp_update_rcv_ann_wnd+0x90>
 8006936:	4b08      	ldr	r3, [pc, #32]	@ (8006958 <tcp_update_rcv_ann_wnd+0xa4>)
 8006938:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800693c:	4909      	ldr	r1, [pc, #36]	@ (8006964 <tcp_update_rcv_ann_wnd+0xb0>)
 800693e:	4808      	ldr	r0, [pc, #32]	@ (8006960 <tcp_update_rcv_ann_wnd+0xac>)
 8006940:	f007 fcfa 	bl	800e338 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800694c:	2300      	movs	r3, #0
  }
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	0800fc30 	.word	0x0800fc30
 800695c:	0800fe8c 	.word	0x0800fe8c
 8006960:	0800fc74 	.word	0x0800fc74
 8006964:	0800feb0 	.word	0x0800feb0

08006968 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d107      	bne.n	800698a <tcp_recved+0x22>
 800697a:	4b1f      	ldr	r3, [pc, #124]	@ (80069f8 <tcp_recved+0x90>)
 800697c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8006980:	491e      	ldr	r1, [pc, #120]	@ (80069fc <tcp_recved+0x94>)
 8006982:	481f      	ldr	r0, [pc, #124]	@ (8006a00 <tcp_recved+0x98>)
 8006984:	f007 fcd8 	bl	800e338 <iprintf>
 8006988:	e032      	b.n	80069f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7d1b      	ldrb	r3, [r3, #20]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d106      	bne.n	80069a0 <tcp_recved+0x38>
 8006992:	4b19      	ldr	r3, [pc, #100]	@ (80069f8 <tcp_recved+0x90>)
 8006994:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8006998:	491a      	ldr	r1, [pc, #104]	@ (8006a04 <tcp_recved+0x9c>)
 800699a:	4819      	ldr	r0, [pc, #100]	@ (8006a00 <tcp_recved+0x98>)
 800699c:	f007 fccc 	bl	800e338 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80069a4:	887b      	ldrh	r3, [r7, #2]
 80069a6:	4413      	add	r3, r2
 80069a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80069aa:	89fb      	ldrh	r3, [r7, #14]
 80069ac:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80069b0:	d804      	bhi.n	80069bc <tcp_recved+0x54>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069b6:	89fa      	ldrh	r2, [r7, #14]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d204      	bcs.n	80069c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80069c2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80069c4:	e002      	b.n	80069cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	89fa      	ldrh	r2, [r7, #14]
 80069ca:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f7ff ff71 	bl	80068b4 <tcp_update_rcv_ann_wnd>
 80069d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80069da:	d309      	bcc.n	80069f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8b5b      	ldrh	r3, [r3, #26]
 80069e0:	f043 0302 	orr.w	r3, r3, #2
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f003 fe3e 	bl	800a66c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	0800fc30 	.word	0x0800fc30
 80069fc:	0800fecc 	.word	0x0800fecc
 8006a00:	0800fc74 	.word	0x0800fc74
 8006a04:	0800fee4 	.word	0x0800fee4

08006a08 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b090      	sub	sp, #64	@ 0x40
 8006a0c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8006a14:	4b95      	ldr	r3, [pc, #596]	@ (8006c6c <tcp_slowtmr+0x264>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a94      	ldr	r2, [pc, #592]	@ (8006c6c <tcp_slowtmr+0x264>)
 8006a1c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8006a1e:	4b94      	ldr	r3, [pc, #592]	@ (8006c70 <tcp_slowtmr+0x268>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	3301      	adds	r3, #1
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	4b92      	ldr	r3, [pc, #584]	@ (8006c70 <tcp_slowtmr+0x268>)
 8006a28:	701a      	strb	r2, [r3, #0]
 8006a2a:	e000      	b.n	8006a2e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8006a2c:	bf00      	nop
  prev = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8006a32:	4b90      	ldr	r3, [pc, #576]	@ (8006c74 <tcp_slowtmr+0x26c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006a38:	e29d      	b.n	8006f76 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3c:	7d1b      	ldrb	r3, [r3, #20]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <tcp_slowtmr+0x48>
 8006a42:	4b8d      	ldr	r3, [pc, #564]	@ (8006c78 <tcp_slowtmr+0x270>)
 8006a44:	f240 42be 	movw	r2, #1214	@ 0x4be
 8006a48:	498c      	ldr	r1, [pc, #560]	@ (8006c7c <tcp_slowtmr+0x274>)
 8006a4a:	488d      	ldr	r0, [pc, #564]	@ (8006c80 <tcp_slowtmr+0x278>)
 8006a4c:	f007 fc74 	bl	800e338 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a52:	7d1b      	ldrb	r3, [r3, #20]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d106      	bne.n	8006a66 <tcp_slowtmr+0x5e>
 8006a58:	4b87      	ldr	r3, [pc, #540]	@ (8006c78 <tcp_slowtmr+0x270>)
 8006a5a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8006a5e:	4989      	ldr	r1, [pc, #548]	@ (8006c84 <tcp_slowtmr+0x27c>)
 8006a60:	4887      	ldr	r0, [pc, #540]	@ (8006c80 <tcp_slowtmr+0x278>)
 8006a62:	f007 fc69 	bl	800e338 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a68:	7d1b      	ldrb	r3, [r3, #20]
 8006a6a:	2b0a      	cmp	r3, #10
 8006a6c:	d106      	bne.n	8006a7c <tcp_slowtmr+0x74>
 8006a6e:	4b82      	ldr	r3, [pc, #520]	@ (8006c78 <tcp_slowtmr+0x270>)
 8006a70:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8006a74:	4984      	ldr	r1, [pc, #528]	@ (8006c88 <tcp_slowtmr+0x280>)
 8006a76:	4882      	ldr	r0, [pc, #520]	@ (8006c80 <tcp_slowtmr+0x278>)
 8006a78:	f007 fc5e 	bl	800e338 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	7f9a      	ldrb	r2, [r3, #30]
 8006a80:	4b7b      	ldr	r3, [pc, #492]	@ (8006c70 <tcp_slowtmr+0x268>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d105      	bne.n	8006a94 <tcp_slowtmr+0x8c>
      prev = pcb;
 8006a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8006a92:	e270      	b.n	8006f76 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8006a94:	4b76      	ldr	r3, [pc, #472]	@ (8006c70 <tcp_slowtmr+0x268>)
 8006a96:	781a      	ldrb	r2, [r3, #0]
 8006a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	7d1b      	ldrb	r3, [r3, #20]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d10a      	bne.n	8006ac6 <tcp_slowtmr+0xbe>
 8006ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ab6:	2b05      	cmp	r3, #5
 8006ab8:	d905      	bls.n	8006ac6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8006aba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006abe:	3301      	adds	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ac4:	e11e      	b.n	8006d04 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006acc:	2b0b      	cmp	r3, #11
 8006ace:	d905      	bls.n	8006adc <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8006ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006ada:	e113      	b.n	8006d04 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8006adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ade:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d075      	beq.n	8006bd2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d006      	beq.n	8006afc <tcp_slowtmr+0xf4>
 8006aee:	4b62      	ldr	r3, [pc, #392]	@ (8006c78 <tcp_slowtmr+0x270>)
 8006af0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8006af4:	4965      	ldr	r1, [pc, #404]	@ (8006c8c <tcp_slowtmr+0x284>)
 8006af6:	4862      	ldr	r0, [pc, #392]	@ (8006c80 <tcp_slowtmr+0x278>)
 8006af8:	f007 fc1e 	bl	800e338 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <tcp_slowtmr+0x10a>
 8006b04:	4b5c      	ldr	r3, [pc, #368]	@ (8006c78 <tcp_slowtmr+0x270>)
 8006b06:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8006b0a:	4961      	ldr	r1, [pc, #388]	@ (8006c90 <tcp_slowtmr+0x288>)
 8006b0c:	485c      	ldr	r0, [pc, #368]	@ (8006c80 <tcp_slowtmr+0x278>)
 8006b0e:	f007 fc13 	bl	800e338 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8006b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b14:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8006b18:	2b0b      	cmp	r3, #11
 8006b1a:	d905      	bls.n	8006b28 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b20:	3301      	adds	r3, #1
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006b26:	e0ed      	b.n	8006d04 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a58      	ldr	r2, [pc, #352]	@ (8006c94 <tcp_slowtmr+0x28c>)
 8006b32:	5cd3      	ldrb	r3, [r2, r3]
 8006b34:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b38:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b3c:	7c7a      	ldrb	r2, [r7, #17]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d907      	bls.n	8006b52 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8006b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b44:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b48:	3301      	adds	r3, #1
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8006b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b54:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8006b58:	7c7a      	ldrb	r2, [r7, #17]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	f200 80d2 	bhi.w	8006d04 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8006b60:	2301      	movs	r3, #1
 8006b62:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8006b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d108      	bne.n	8006b80 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006b6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b70:	f004 fc24 	bl	800b3bc <tcp_zero_window_probe>
 8006b74:	4603      	mov	r3, r0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d014      	beq.n	8006ba4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	e011      	b.n	8006ba4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b86:	4619      	mov	r1, r3
 8006b88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b8a:	f003 fae9 	bl	800a160 <tcp_split_unsent_seg>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d107      	bne.n	8006ba4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8006b94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b96:	f003 fd69 	bl	800a66c <tcp_output>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 80ac 	beq.w	8006d04 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8006bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006bba:	2b06      	cmp	r3, #6
 8006bbc:	f200 80a2 	bhi.w	8006d04 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8006bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	b2da      	uxtb	r2, r3
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8006bd0:	e098      	b.n	8006d04 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	db0f      	blt.n	8006bfc <tcp_slowtmr+0x1f4>
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006be2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d008      	beq.n	8006bfc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	b21a      	sxth	r2, r3
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8006bfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	db7b      	blt.n	8006d04 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006c0e:	f004 f821 	bl	800ac54 <tcp_rexmit_rto_prepare>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <tcp_slowtmr+0x220>
 8006c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d171      	bne.n	8006d04 <tcp_slowtmr+0x2fc>
 8006c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d06d      	beq.n	8006d04 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8006c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2a:	7d1b      	ldrb	r3, [r3, #20]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d03a      	beq.n	8006ca6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c36:	2b0c      	cmp	r3, #12
 8006c38:	bf28      	it	cs
 8006c3a:	230c      	movcs	r3, #12
 8006c3c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c40:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8006c44:	10db      	asrs	r3, r3, #3
 8006c46:	b21b      	sxth	r3, r3
 8006c48:	461a      	mov	r2, r3
 8006c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8006c50:	4413      	add	r3, r2
 8006c52:	7efa      	ldrb	r2, [r7, #27]
 8006c54:	4910      	ldr	r1, [pc, #64]	@ (8006c98 <tcp_slowtmr+0x290>)
 8006c56:	5c8a      	ldrb	r2, [r1, r2]
 8006c58:	4093      	lsls	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8006c62:	4293      	cmp	r3, r2
 8006c64:	dc1a      	bgt.n	8006c9c <tcp_slowtmr+0x294>
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	b21a      	sxth	r2, r3
 8006c6a:	e019      	b.n	8006ca0 <tcp_slowtmr+0x298>
 8006c6c:	24007b6c 	.word	0x24007b6c
 8006c70:	24007b82 	.word	0x24007b82
 8006c74:	24007b78 	.word	0x24007b78
 8006c78:	0800fc30 	.word	0x0800fc30
 8006c7c:	0800ff74 	.word	0x0800ff74
 8006c80:	0800fc74 	.word	0x0800fc74
 8006c84:	0800ffa0 	.word	0x0800ffa0
 8006c88:	0800ffcc 	.word	0x0800ffcc
 8006c8c:	0800fffc 	.word	0x0800fffc
 8006c90:	08010030 	.word	0x08010030
 8006c94:	08011c00 	.word	0x08011c00
 8006c98:	08011bf0 	.word	0x08011bf0
 8006c9c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8006cb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	bf28      	it	cs
 8006cbc:	4613      	movcs	r3, r2
 8006cbe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006cc0:	8a7b      	ldrh	r3, [r7, #18]
 8006cc2:	085b      	lsrs	r3, r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8006cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d206      	bcs.n	8006cec <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8006cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cee:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8006cf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8006cfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d00:	f004 f818 	bl	800ad34 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8006d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d06:	7d1b      	ldrb	r3, [r3, #20]
 8006d08:	2b06      	cmp	r3, #6
 8006d0a:	d111      	bne.n	8006d30 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8006d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0e:	8b5b      	ldrh	r3, [r3, #26]
 8006d10:	f003 0310 	and.w	r3, r3, #16
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d18:	4b9c      	ldr	r3, [pc, #624]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b28      	cmp	r3, #40	@ 0x28
 8006d24:	d904      	bls.n	8006d30 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8006d26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	7a5b      	ldrb	r3, [r3, #9]
 8006d34:	f003 0308 	and.w	r3, r3, #8
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d04a      	beq.n	8006dd2 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d003      	beq.n	8006d4c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8006d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006d48:	2b07      	cmp	r3, #7
 8006d4a:	d142      	bne.n	8006dd2 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d58:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006d5c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f90 <tcp_slowtmr+0x588>)
 8006d5e:	440b      	add	r3, r1
 8006d60:	498c      	ldr	r1, [pc, #560]	@ (8006f94 <tcp_slowtmr+0x58c>)
 8006d62:	fba1 1303 	umull	r1, r3, r1, r3
 8006d66:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d90a      	bls.n	8006d82 <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8006d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d70:	3301      	adds	r3, #1
 8006d72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8006d76:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006d80:	e027      	b.n	8006dd2 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006d82:	4b82      	ldr	r3, [pc, #520]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8006d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d94:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006d98:	4618      	mov	r0, r3
 8006d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f98 <tcp_slowtmr+0x590>)
 8006d9c:	fb00 f303 	mul.w	r3, r0, r3
 8006da0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006da2:	497c      	ldr	r1, [pc, #496]	@ (8006f94 <tcp_slowtmr+0x58c>)
 8006da4:	fba1 1303 	umull	r1, r3, r1, r3
 8006da8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d911      	bls.n	8006dd2 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006dae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006db0:	f004 fac4 	bl	800b33c <tcp_keepalive>
 8006db4:	4603      	mov	r3, r0
 8006db6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8006dba:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d107      	bne.n	8006dd2 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8006dc8:	3301      	adds	r3, #1
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dce:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d011      	beq.n	8006dfe <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006dda:	4b6c      	ldr	r3, [pc, #432]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	1ad2      	subs	r2, r2, r3
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8006dea:	4619      	mov	r1, r3
 8006dec:	460b      	mov	r3, r1
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	440b      	add	r3, r1
 8006df2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d302      	bcc.n	8006dfe <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8006df8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006dfa:	f000 fddd 	bl	80079b8 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	7d1b      	ldrb	r3, [r3, #20]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d10b      	bne.n	8006e1e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006e06:	4b61      	ldr	r3, [pc, #388]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	2b28      	cmp	r3, #40	@ 0x28
 8006e12:	d904      	bls.n	8006e1e <tcp_slowtmr+0x416>
        ++pcb_remove;
 8006e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e18:	3301      	adds	r3, #1
 8006e1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8006e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e20:	7d1b      	ldrb	r3, [r3, #20]
 8006e22:	2b09      	cmp	r3, #9
 8006e24:	d10b      	bne.n	8006e3e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006e26:	4b59      	ldr	r3, [pc, #356]	@ (8006f8c <tcp_slowtmr+0x584>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2bf0      	cmp	r3, #240	@ 0xf0
 8006e32:	d904      	bls.n	8006e3e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006e34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e38:	3301      	adds	r3, #1
 8006e3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8006e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d060      	beq.n	8006f08 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8006e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006e4c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8006e4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e50:	f000 fbfe 	bl	8007650 <tcp_pcb_purge>
      if (prev != NULL) {
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d010      	beq.n	8006e7c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006e5a:	4b50      	ldr	r3, [pc, #320]	@ (8006f9c <tcp_slowtmr+0x594>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d106      	bne.n	8006e72 <tcp_slowtmr+0x46a>
 8006e64:	4b4e      	ldr	r3, [pc, #312]	@ (8006fa0 <tcp_slowtmr+0x598>)
 8006e66:	f240 526d 	movw	r2, #1389	@ 0x56d
 8006e6a:	494e      	ldr	r1, [pc, #312]	@ (8006fa4 <tcp_slowtmr+0x59c>)
 8006e6c:	484e      	ldr	r0, [pc, #312]	@ (8006fa8 <tcp_slowtmr+0x5a0>)
 8006e6e:	f007 fa63 	bl	800e338 <iprintf>
        prev->next = pcb->next;
 8006e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e78:	60da      	str	r2, [r3, #12]
 8006e7a:	e00f      	b.n	8006e9c <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006e7c:	4b47      	ldr	r3, [pc, #284]	@ (8006f9c <tcp_slowtmr+0x594>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d006      	beq.n	8006e94 <tcp_slowtmr+0x48c>
 8006e86:	4b46      	ldr	r3, [pc, #280]	@ (8006fa0 <tcp_slowtmr+0x598>)
 8006e88:	f240 5271 	movw	r2, #1393	@ 0x571
 8006e8c:	4947      	ldr	r1, [pc, #284]	@ (8006fac <tcp_slowtmr+0x5a4>)
 8006e8e:	4846      	ldr	r0, [pc, #280]	@ (8006fa8 <tcp_slowtmr+0x5a0>)
 8006e90:	f007 fa52 	bl	800e338 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	4a40      	ldr	r2, [pc, #256]	@ (8006f9c <tcp_slowtmr+0x594>)
 8006e9a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8006e9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d013      	beq.n	8006ecc <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8006ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eaa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006eac:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb4:	8ad2      	ldrh	r2, [r2, #22]
 8006eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb8:	8b09      	ldrh	r1, [r1, #24]
 8006eba:	9102      	str	r1, [sp, #8]
 8006ebc:	9201      	str	r2, [sp, #4]
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	4622      	mov	r2, r4
 8006ec4:	4601      	mov	r1, r0
 8006ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ec8:	f004 f984 	bl	800b1d4 <tcp_rst>
      err_arg = pcb->callback_arg;
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	7d1b      	ldrb	r3, [r3, #20]
 8006ed6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eda:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8006ee2:	6838      	ldr	r0, [r7, #0]
 8006ee4:	f7ff f9f2 	bl	80062cc <tcp_free>
      tcp_active_pcbs_changed = 0;
 8006ee8:	4b31      	ldr	r3, [pc, #196]	@ (8006fb0 <tcp_slowtmr+0x5a8>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <tcp_slowtmr+0x4f6>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f06f 010c 	mvn.w	r1, #12
 8006efa:	68b8      	ldr	r0, [r7, #8]
 8006efc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006efe:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb0 <tcp_slowtmr+0x5a8>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d037      	beq.n	8006f76 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006f06:	e592      	b.n	8006a2e <tcp_slowtmr+0x26>
      prev = pcb;
 8006f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8006f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8006f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f14:	7f1b      	ldrb	r3, [r3, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	b2da      	uxtb	r2, r3
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f20:	7f1a      	ldrb	r2, [r3, #28]
 8006f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f24:	7f5b      	ldrb	r3, [r3, #29]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d325      	bcc.n	8006f76 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8006f30:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb0 <tcp_slowtmr+0x5a8>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <tcp_slowtmr+0x550>
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f48:	6912      	ldr	r2, [r2, #16]
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	4603      	mov	r3, r0
 8006f52:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8006f56:	e002      	b.n	8006f5e <tcp_slowtmr+0x556>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8006f5e:	4b14      	ldr	r3, [pc, #80]	@ (8006fb0 <tcp_slowtmr+0x5a8>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f47f ad62 	bne.w	8006a2c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006f68:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006f70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f72:	f003 fb7b 	bl	800a66c <tcp_output>
  while (pcb != NULL) {
 8006f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f47f ad5e 	bne.w	8006a3a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8006f82:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb4 <tcp_slowtmr+0x5ac>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8006f88:	e069      	b.n	800705e <tcp_slowtmr+0x656>
 8006f8a:	bf00      	nop
 8006f8c:	24007b6c 	.word	0x24007b6c
 8006f90:	000a4cb8 	.word	0x000a4cb8
 8006f94:	10624dd3 	.word	0x10624dd3
 8006f98:	000124f8 	.word	0x000124f8
 8006f9c:	24007b78 	.word	0x24007b78
 8006fa0:	0800fc30 	.word	0x0800fc30
 8006fa4:	08010068 	.word	0x08010068
 8006fa8:	0800fc74 	.word	0x0800fc74
 8006fac:	08010094 	.word	0x08010094
 8006fb0:	24007b80 	.word	0x24007b80
 8006fb4:	24007b7c 	.word	0x24007b7c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	7d1b      	ldrb	r3, [r3, #20]
 8006fbc:	2b0a      	cmp	r3, #10
 8006fbe:	d006      	beq.n	8006fce <tcp_slowtmr+0x5c6>
 8006fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8007070 <tcp_slowtmr+0x668>)
 8006fc2:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8006fc6:	492b      	ldr	r1, [pc, #172]	@ (8007074 <tcp_slowtmr+0x66c>)
 8006fc8:	482b      	ldr	r0, [pc, #172]	@ (8007078 <tcp_slowtmr+0x670>)
 8006fca:	f007 f9b5 	bl	800e338 <iprintf>
    pcb_remove = 0;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006fd4:	4b29      	ldr	r3, [pc, #164]	@ (800707c <tcp_slowtmr+0x674>)
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2bf0      	cmp	r3, #240	@ 0xf0
 8006fe0:	d904      	bls.n	8006fec <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8006fe2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006fec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02f      	beq.n	8007054 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ff6:	f000 fb2b 	bl	8007650 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007000:	4b1f      	ldr	r3, [pc, #124]	@ (8007080 <tcp_slowtmr+0x678>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007006:	429a      	cmp	r2, r3
 8007008:	d106      	bne.n	8007018 <tcp_slowtmr+0x610>
 800700a:	4b19      	ldr	r3, [pc, #100]	@ (8007070 <tcp_slowtmr+0x668>)
 800700c:	f240 52af 	movw	r2, #1455	@ 0x5af
 8007010:	491c      	ldr	r1, [pc, #112]	@ (8007084 <tcp_slowtmr+0x67c>)
 8007012:	4819      	ldr	r0, [pc, #100]	@ (8007078 <tcp_slowtmr+0x670>)
 8007014:	f007 f990 	bl	800e338 <iprintf>
        prev->next = pcb->next;
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	60da      	str	r2, [r3, #12]
 8007020:	e00f      	b.n	8007042 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007022:	4b17      	ldr	r3, [pc, #92]	@ (8007080 <tcp_slowtmr+0x678>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007028:	429a      	cmp	r2, r3
 800702a:	d006      	beq.n	800703a <tcp_slowtmr+0x632>
 800702c:	4b10      	ldr	r3, [pc, #64]	@ (8007070 <tcp_slowtmr+0x668>)
 800702e:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8007032:	4915      	ldr	r1, [pc, #84]	@ (8007088 <tcp_slowtmr+0x680>)
 8007034:	4810      	ldr	r0, [pc, #64]	@ (8007078 <tcp_slowtmr+0x670>)
 8007036:	f007 f97f 	bl	800e338 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800703a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	4a10      	ldr	r2, [pc, #64]	@ (8007080 <tcp_slowtmr+0x678>)
 8007040:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007044:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800704c:	69f8      	ldr	r0, [r7, #28]
 800704e:	f7ff f93d 	bl	80062cc <tcp_free>
 8007052:	e004      	b.n	800705e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8007054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007056:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8007058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1a9      	bne.n	8006fb8 <tcp_slowtmr+0x5b0>
    }
  }
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3730      	adds	r7, #48	@ 0x30
 800706a:	46bd      	mov	sp, r7
 800706c:	bdb0      	pop	{r4, r5, r7, pc}
 800706e:	bf00      	nop
 8007070:	0800fc30 	.word	0x0800fc30
 8007074:	080100c0 	.word	0x080100c0
 8007078:	0800fc74 	.word	0x0800fc74
 800707c:	24007b6c 	.word	0x24007b6c
 8007080:	24007b7c 	.word	0x24007b7c
 8007084:	080100f0 	.word	0x080100f0
 8007088:	08010118 	.word	0x08010118

0800708c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007092:	4b2d      	ldr	r3, [pc, #180]	@ (8007148 <tcp_fasttmr+0xbc>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	3301      	adds	r3, #1
 8007098:	b2da      	uxtb	r2, r3
 800709a:	4b2b      	ldr	r3, [pc, #172]	@ (8007148 <tcp_fasttmr+0xbc>)
 800709c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800709e:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <tcp_fasttmr+0xc0>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80070a4:	e048      	b.n	8007138 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	7f9a      	ldrb	r2, [r3, #30]
 80070aa:	4b27      	ldr	r3, [pc, #156]	@ (8007148 <tcp_fasttmr+0xbc>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d03f      	beq.n	8007132 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80070b2:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <tcp_fasttmr+0xbc>)
 80070b4:	781a      	ldrb	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8b5b      	ldrh	r3, [r3, #26]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d010      	beq.n	80070e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	8b5b      	ldrh	r3, [r3, #26]
 80070ca:	f043 0302 	orr.w	r3, r3, #2
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f003 fac9 	bl	800a66c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8b5b      	ldrh	r3, [r3, #26]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8b5b      	ldrh	r3, [r3, #26]
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d009      	beq.n	8007108 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8b5b      	ldrh	r3, [r3, #26]
 80070f8:	f023 0308 	bic.w	r3, r3, #8
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff fa76 	bl	80065f4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007116:	4b0e      	ldr	r3, [pc, #56]	@ (8007150 <tcp_fasttmr+0xc4>)
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f819 	bl	8007154 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007122:	4b0b      	ldr	r3, [pc, #44]	@ (8007150 <tcp_fasttmr+0xc4>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d000      	beq.n	800712c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800712a:	e7b8      	b.n	800709e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	607b      	str	r3, [r7, #4]
 8007130:	e002      	b.n	8007138 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1b3      	bne.n	80070a6 <tcp_fasttmr+0x1a>
    }
  }
}
 800713e:	bf00      	nop
 8007140:	bf00      	nop
 8007142:	3708      	adds	r7, #8
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	24007b82 	.word	0x24007b82
 800714c:	24007b78 	.word	0x24007b78
 8007150:	24007b80 	.word	0x24007b80

08007154 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007154:	b590      	push	{r4, r7, lr}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <tcp_process_refused_data+0x22>
 8007162:	4b37      	ldr	r3, [pc, #220]	@ (8007240 <tcp_process_refused_data+0xec>)
 8007164:	f240 6209 	movw	r2, #1545	@ 0x609
 8007168:	4936      	ldr	r1, [pc, #216]	@ (8007244 <tcp_process_refused_data+0xf0>)
 800716a:	4837      	ldr	r0, [pc, #220]	@ (8007248 <tcp_process_refused_data+0xf4>)
 800716c:	f007 f8e4 	bl	800e338 <iprintf>
 8007170:	f06f 030f 	mvn.w	r3, #15
 8007174:	e060      	b.n	8007238 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800717a:	7b5b      	ldrb	r3, [r3, #13]
 800717c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007182:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <tcp_process_refused_data+0x58>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6918      	ldr	r0, [r3, #16]
 800719e:	2300      	movs	r3, #0
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	47a0      	blx	r4
 80071a6:	4603      	mov	r3, r0
 80071a8:	73fb      	strb	r3, [r7, #15]
 80071aa:	e007      	b.n	80071bc <tcp_process_refused_data+0x68>
 80071ac:	2300      	movs	r3, #0
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	2000      	movs	r0, #0
 80071b4:	f000 f8a4 	bl	8007300 <tcp_recv_null>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80071bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d12a      	bne.n	800721a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d033      	beq.n	8007236 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80071d6:	d005      	beq.n	80071e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071dc:	3301      	adds	r3, #1
 80071de:	b29a      	uxth	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <tcp_process_refused_data+0xb2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6918      	ldr	r0, [r3, #16]
 80071f8:	2300      	movs	r3, #0
 80071fa:	2200      	movs	r2, #0
 80071fc:	6879      	ldr	r1, [r7, #4]
 80071fe:	47a0      	blx	r4
 8007200:	4603      	mov	r3, r0
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	e001      	b.n	800720a <tcp_process_refused_data+0xb6>
 8007206:	2300      	movs	r3, #0
 8007208:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800720a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800720e:	f113 0f0d 	cmn.w	r3, #13
 8007212:	d110      	bne.n	8007236 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8007214:	f06f 030c 	mvn.w	r3, #12
 8007218:	e00e      	b.n	8007238 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800721a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800721e:	f113 0f0d 	cmn.w	r3, #13
 8007222:	d102      	bne.n	800722a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8007224:	f06f 030c 	mvn.w	r3, #12
 8007228:	e006      	b.n	8007238 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8007230:	f06f 0304 	mvn.w	r3, #4
 8007234:	e000      	b.n	8007238 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3714      	adds	r7, #20
 800723c:	46bd      	mov	sp, r7
 800723e:	bd90      	pop	{r4, r7, pc}
 8007240:	0800fc30 	.word	0x0800fc30
 8007244:	08010140 	.word	0x08010140
 8007248:	0800fc74 	.word	0x0800fc74

0800724c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8007254:	e007      	b.n	8007266 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f80a 	bl	8007276 <tcp_seg_free>
    seg = next;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f4      	bne.n	8007256 <tcp_segs_free+0xa>
  }
}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b082      	sub	sp, #8
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00c      	beq.n	800729e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d004      	beq.n	8007296 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fd7b 	bl	8005d8c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	2003      	movs	r0, #3
 800729a:	f7fd ff01 	bl	80050a0 <memp_free>
  }
}
 800729e:	bf00      	nop
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d106      	bne.n	80072c4 <tcp_seg_copy+0x1c>
 80072b6:	4b0f      	ldr	r3, [pc, #60]	@ (80072f4 <tcp_seg_copy+0x4c>)
 80072b8:	f240 6282 	movw	r2, #1666	@ 0x682
 80072bc:	490e      	ldr	r1, [pc, #56]	@ (80072f8 <tcp_seg_copy+0x50>)
 80072be:	480f      	ldr	r0, [pc, #60]	@ (80072fc <tcp_seg_copy+0x54>)
 80072c0:	f007 f83a 	bl	800e338 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80072c4:	2003      	movs	r0, #3
 80072c6:	f7fd fe7b 	bl	8004fc0 <memp_malloc>
 80072ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <tcp_seg_copy+0x2e>
    return NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	e00a      	b.n	80072ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80072d6:	2210      	movs	r2, #16
 80072d8:	6879      	ldr	r1, [r7, #4]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f007 f907 	bl	800e4ee <memcpy>
  pbuf_ref(cseg->p);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7fe fdf1 	bl	8005ecc <pbuf_ref>
  return cseg;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	0800fc30 	.word	0x0800fc30
 80072f8:	08010184 	.word	0x08010184
 80072fc:	0800fc74 	.word	0x0800fc74

08007300 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
 800730c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d109      	bne.n	8007328 <tcp_recv_null+0x28>
 8007314:	4b12      	ldr	r3, [pc, #72]	@ (8007360 <tcp_recv_null+0x60>)
 8007316:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800731a:	4912      	ldr	r1, [pc, #72]	@ (8007364 <tcp_recv_null+0x64>)
 800731c:	4812      	ldr	r0, [pc, #72]	@ (8007368 <tcp_recv_null+0x68>)
 800731e:	f007 f80b 	bl	800e338 <iprintf>
 8007322:	f06f 030f 	mvn.w	r3, #15
 8007326:	e016      	b.n	8007356 <tcp_recv_null+0x56>

  if (p != NULL) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d009      	beq.n	8007342 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	891b      	ldrh	r3, [r3, #8]
 8007332:	4619      	mov	r1, r3
 8007334:	68b8      	ldr	r0, [r7, #8]
 8007336:	f7ff fb17 	bl	8006968 <tcp_recved>
    pbuf_free(p);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7fe fd26 	bl	8005d8c <pbuf_free>
 8007340:	e008      	b.n	8007354 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8007342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800734a:	68b8      	ldr	r0, [r7, #8]
 800734c:	f7ff f9bc 	bl	80066c8 <tcp_close>
 8007350:	4603      	mov	r3, r0
 8007352:	e000      	b.n	8007356 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	0800fc30 	.word	0x0800fc30
 8007364:	080101a0 	.word	0x080101a0
 8007368:	0800fc74 	.word	0x0800fc74

0800736c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800737a:	2b00      	cmp	r3, #0
 800737c:	db01      	blt.n	8007382 <tcp_kill_prio+0x16>
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	e000      	b.n	8007384 <tcp_kill_prio+0x18>
 8007382:	237f      	movs	r3, #127	@ 0x7f
 8007384:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d034      	beq.n	80073f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	3b01      	subs	r3, #1
 8007390:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8007392:	2300      	movs	r3, #0
 8007394:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800739a:	4b19      	ldr	r3, [pc, #100]	@ (8007400 <tcp_kill_prio+0x94>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e01f      	b.n	80073e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	7d5b      	ldrb	r3, [r3, #21]
 80073a6:	7afa      	ldrb	r2, [r7, #11]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d80c      	bhi.n	80073c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80073b0:	7afa      	ldrb	r2, [r7, #11]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d112      	bne.n	80073dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80073b6:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <tcp_kill_prio+0x98>)
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d80a      	bhi.n	80073dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <tcp_kill_prio+0x98>)
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	7d5b      	ldrb	r3, [r3, #21]
 80073da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	617b      	str	r3, [r7, #20]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1dc      	bne.n	80073a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80073ee:	6938      	ldr	r0, [r7, #16]
 80073f0:	f7ff fa54 	bl	800689c <tcp_abort>
 80073f4:	e000      	b.n	80073f8 <tcp_kill_prio+0x8c>
    return;
 80073f6:	bf00      	nop
  }
}
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	24007b78 	.word	0x24007b78
 8007404:	24007b6c 	.word	0x24007b6c

08007408 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b086      	sub	sp, #24
 800740c:	af00      	add	r7, sp, #0
 800740e:	4603      	mov	r3, r0
 8007410:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	2b08      	cmp	r3, #8
 8007416:	d009      	beq.n	800742c <tcp_kill_state+0x24>
 8007418:	79fb      	ldrb	r3, [r7, #7]
 800741a:	2b09      	cmp	r3, #9
 800741c:	d006      	beq.n	800742c <tcp_kill_state+0x24>
 800741e:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <tcp_kill_state+0x80>)
 8007420:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8007424:	4919      	ldr	r1, [pc, #100]	@ (800748c <tcp_kill_state+0x84>)
 8007426:	481a      	ldr	r0, [pc, #104]	@ (8007490 <tcp_kill_state+0x88>)
 8007428:	f006 ff86 	bl	800e338 <iprintf>

  inactivity = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007430:	2300      	movs	r3, #0
 8007432:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007434:	4b17      	ldr	r3, [pc, #92]	@ (8007494 <tcp_kill_state+0x8c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e017      	b.n	800746c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	7d1b      	ldrb	r3, [r3, #20]
 8007440:	79fa      	ldrb	r2, [r7, #7]
 8007442:	429a      	cmp	r2, r3
 8007444:	d10f      	bne.n	8007466 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007446:	4b14      	ldr	r3, [pc, #80]	@ (8007498 <tcp_kill_state+0x90>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	1ad3      	subs	r3, r2, r3
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	429a      	cmp	r2, r3
 8007454:	d807      	bhi.n	8007466 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8007456:	4b10      	ldr	r3, [pc, #64]	@ (8007498 <tcp_kill_state+0x90>)
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e4      	bne.n	800743c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007478:	2100      	movs	r1, #0
 800747a:	6938      	ldr	r0, [r7, #16]
 800747c:	f7ff f950 	bl	8006720 <tcp_abandon>
  }
}
 8007480:	bf00      	nop
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	0800fc30 	.word	0x0800fc30
 800748c:	080101bc 	.word	0x080101bc
 8007490:	0800fc74 	.word	0x0800fc74
 8007494:	24007b78 	.word	0x24007b78
 8007498:	24007b6c 	.word	0x24007b6c

0800749c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <tcp_kill_timewait+0x58>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	60fb      	str	r3, [r7, #12]
 80074b0:	e012      	b.n	80074d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <tcp_kill_timewait+0x5c>)
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d807      	bhi.n	80074d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80074c2:	4b0d      	ldr	r3, [pc, #52]	@ (80074f8 <tcp_kill_timewait+0x5c>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e9      	bne.n	80074b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d002      	beq.n	80074ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80074e4:	68b8      	ldr	r0, [r7, #8]
 80074e6:	f7ff f9d9 	bl	800689c <tcp_abort>
  }
}
 80074ea:	bf00      	nop
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	24007b7c 	.word	0x24007b7c
 80074f8:	24007b6c 	.word	0x24007b6c

080074fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8007502:	4b10      	ldr	r3, [pc, #64]	@ (8007544 <tcp_handle_closepend+0x48>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007508:	e014      	b.n	8007534 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	8b5b      	ldrh	r3, [r3, #26]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	8b5b      	ldrh	r3, [r3, #26]
 8007520:	f023 0308 	bic.w	r3, r3, #8
 8007524:	b29a      	uxth	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7ff f862 	bl	80065f4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1e7      	bne.n	800750a <tcp_handle_closepend+0xe>
  }
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	3708      	adds	r7, #8
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	24007b78 	.word	0x24007b78

08007548 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007552:	2001      	movs	r0, #1
 8007554:	f7fd fd34 	bl	8004fc0 <memp_malloc>
 8007558:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d126      	bne.n	80075ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007560:	f7ff ffcc 	bl	80074fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007564:	f7ff ff9a 	bl	800749c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007568:	2001      	movs	r0, #1
 800756a:	f7fd fd29 	bl	8004fc0 <memp_malloc>
 800756e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11b      	bne.n	80075ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8007576:	2009      	movs	r0, #9
 8007578:	f7ff ff46 	bl	8007408 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800757c:	2001      	movs	r0, #1
 800757e:	f7fd fd1f 	bl	8004fc0 <memp_malloc>
 8007582:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d111      	bne.n	80075ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800758a:	2008      	movs	r0, #8
 800758c:	f7ff ff3c 	bl	8007408 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007590:	2001      	movs	r0, #1
 8007592:	f7fd fd15 	bl	8004fc0 <memp_malloc>
 8007596:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fee3 	bl	800736c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80075a6:	2001      	movs	r0, #1
 80075a8:	f7fd fd0a 	bl	8004fc0 <memp_malloc>
 80075ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d03f      	beq.n	8007634 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80075b4:	229c      	movs	r2, #156	@ 0x9c
 80075b6:	2100      	movs	r1, #0
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f006 ff22 	bl	800e402 <memset>
    pcb->prio = prio;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	79fa      	ldrb	r2, [r7, #7]
 80075c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80075ca:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80075d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	22ff      	movs	r2, #255	@ 0xff
 80075e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80075ea:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2206      	movs	r2, #6
 80075f0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2206      	movs	r2, #6
 80075f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007600:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800760a:	4b0d      	ldr	r3, [pc, #52]	@ (8007640 <tcp_alloc+0xf8>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007612:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <tcp_alloc+0xfc>)
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8007620:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4a08      	ldr	r2, [pc, #32]	@ (8007648 <tcp_alloc+0x100>)
 8007628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a07      	ldr	r2, [pc, #28]	@ (800764c <tcp_alloc+0x104>)
 8007630:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007634:	68fb      	ldr	r3, [r7, #12]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	24007b6c 	.word	0x24007b6c
 8007644:	24007b82 	.word	0x24007b82
 8007648:	08007301 	.word	0x08007301
 800764c:	006ddd00 	.word	0x006ddd00

08007650 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d107      	bne.n	800766e <tcp_pcb_purge+0x1e>
 800765e:	4b21      	ldr	r3, [pc, #132]	@ (80076e4 <tcp_pcb_purge+0x94>)
 8007660:	f640 0251 	movw	r2, #2129	@ 0x851
 8007664:	4920      	ldr	r1, [pc, #128]	@ (80076e8 <tcp_pcb_purge+0x98>)
 8007666:	4821      	ldr	r0, [pc, #132]	@ (80076ec <tcp_pcb_purge+0x9c>)
 8007668:	f006 fe66 	bl	800e338 <iprintf>
 800766c:	e037      	b.n	80076de <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	7d1b      	ldrb	r3, [r3, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d033      	beq.n	80076de <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800767a:	2b0a      	cmp	r3, #10
 800767c:	d02f      	beq.n	80076de <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007682:	2b01      	cmp	r3, #1
 8007684:	d02b      	beq.n	80076de <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800768a:	2b00      	cmp	r3, #0
 800768c:	d007      	beq.n	800769e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe fb7a 	bl	8005d8c <pbuf_free>
      pcb->refused_data = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d002      	beq.n	80076ac <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f986 	bl	80079b8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076b2:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7ff fdc7 	bl	800724c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff fdc2 	bl	800724c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	66da      	str	r2, [r3, #108]	@ 0x6c
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	0800fc30 	.word	0x0800fc30
 80076e8:	0801027c 	.word	0x0801027c
 80076ec:	0800fc74 	.word	0x0800fc74

080076f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <tcp_pcb_remove+0x1e>
 8007700:	4b3e      	ldr	r3, [pc, #248]	@ (80077fc <tcp_pcb_remove+0x10c>)
 8007702:	f640 0283 	movw	r2, #2179	@ 0x883
 8007706:	493e      	ldr	r1, [pc, #248]	@ (8007800 <tcp_pcb_remove+0x110>)
 8007708:	483e      	ldr	r0, [pc, #248]	@ (8007804 <tcp_pcb_remove+0x114>)
 800770a:	f006 fe15 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d106      	bne.n	8007722 <tcp_pcb_remove+0x32>
 8007714:	4b39      	ldr	r3, [pc, #228]	@ (80077fc <tcp_pcb_remove+0x10c>)
 8007716:	f640 0284 	movw	r2, #2180	@ 0x884
 800771a:	493b      	ldr	r1, [pc, #236]	@ (8007808 <tcp_pcb_remove+0x118>)
 800771c:	4839      	ldr	r0, [pc, #228]	@ (8007804 <tcp_pcb_remove+0x114>)
 800771e:	f006 fe0b 	bl	800e338 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	429a      	cmp	r2, r3
 800772a:	d105      	bne.n	8007738 <tcp_pcb_remove+0x48>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	e013      	b.n	8007760 <tcp_pcb_remove+0x70>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
 800773e:	e00c      	b.n	800775a <tcp_pcb_remove+0x6a>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d104      	bne.n	8007754 <tcp_pcb_remove+0x64>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	68da      	ldr	r2, [r3, #12]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	e005      	b.n	8007760 <tcp_pcb_remove+0x70>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1ef      	bne.n	8007740 <tcp_pcb_remove+0x50>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2200      	movs	r2, #0
 8007764:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8007766:	6838      	ldr	r0, [r7, #0]
 8007768:	f7ff ff72 	bl	8007650 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	7d1b      	ldrb	r3, [r3, #20]
 8007770:	2b0a      	cmp	r3, #10
 8007772:	d013      	beq.n	800779c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8007778:	2b01      	cmp	r3, #1
 800777a:	d00f      	beq.n	800779c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	8b5b      	ldrh	r3, [r3, #26]
 8007780:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007784:	2b00      	cmp	r3, #0
 8007786:	d009      	beq.n	800779c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	8b5b      	ldrh	r3, [r3, #26]
 800778c:	f043 0302 	orr.w	r3, r3, #2
 8007790:	b29a      	uxth	r2, r3
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007796:	6838      	ldr	r0, [r7, #0]
 8007798:	f002 ff68 	bl	800a66c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	7d1b      	ldrb	r3, [r3, #20]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d020      	beq.n	80077e6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d006      	beq.n	80077ba <tcp_pcb_remove+0xca>
 80077ac:	4b13      	ldr	r3, [pc, #76]	@ (80077fc <tcp_pcb_remove+0x10c>)
 80077ae:	f640 0293 	movw	r2, #2195	@ 0x893
 80077b2:	4916      	ldr	r1, [pc, #88]	@ (800780c <tcp_pcb_remove+0x11c>)
 80077b4:	4813      	ldr	r0, [pc, #76]	@ (8007804 <tcp_pcb_remove+0x114>)
 80077b6:	f006 fdbf 	bl	800e338 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d006      	beq.n	80077d0 <tcp_pcb_remove+0xe0>
 80077c2:	4b0e      	ldr	r3, [pc, #56]	@ (80077fc <tcp_pcb_remove+0x10c>)
 80077c4:	f640 0294 	movw	r2, #2196	@ 0x894
 80077c8:	4911      	ldr	r1, [pc, #68]	@ (8007810 <tcp_pcb_remove+0x120>)
 80077ca:	480e      	ldr	r0, [pc, #56]	@ (8007804 <tcp_pcb_remove+0x114>)
 80077cc:	f006 fdb4 	bl	800e338 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d006      	beq.n	80077e6 <tcp_pcb_remove+0xf6>
 80077d8:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <tcp_pcb_remove+0x10c>)
 80077da:	f640 0296 	movw	r2, #2198	@ 0x896
 80077de:	490d      	ldr	r1, [pc, #52]	@ (8007814 <tcp_pcb_remove+0x124>)
 80077e0:	4808      	ldr	r0, [pc, #32]	@ (8007804 <tcp_pcb_remove+0x114>)
 80077e2:	f006 fda9 	bl	800e338 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2200      	movs	r2, #0
 80077ea:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2200      	movs	r2, #0
 80077f0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80077f2:	bf00      	nop
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	0800fc30 	.word	0x0800fc30
 8007800:	08010298 	.word	0x08010298
 8007804:	0800fc74 	.word	0x0800fc74
 8007808:	080102b4 	.word	0x080102b4
 800780c:	080102d4 	.word	0x080102d4
 8007810:	080102ec 	.word	0x080102ec
 8007814:	08010308 	.word	0x08010308

08007818 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <tcp_next_iss+0x1c>
 8007826:	4b0a      	ldr	r3, [pc, #40]	@ (8007850 <tcp_next_iss+0x38>)
 8007828:	f640 02af 	movw	r2, #2223	@ 0x8af
 800782c:	4909      	ldr	r1, [pc, #36]	@ (8007854 <tcp_next_iss+0x3c>)
 800782e:	480a      	ldr	r0, [pc, #40]	@ (8007858 <tcp_next_iss+0x40>)
 8007830:	f006 fd82 	bl	800e338 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007834:	4b09      	ldr	r3, [pc, #36]	@ (800785c <tcp_next_iss+0x44>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <tcp_next_iss+0x48>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4413      	add	r3, r2
 800783e:	4a07      	ldr	r2, [pc, #28]	@ (800785c <tcp_next_iss+0x44>)
 8007840:	6013      	str	r3, [r2, #0]
  return iss;
 8007842:	4b06      	ldr	r3, [pc, #24]	@ (800785c <tcp_next_iss+0x44>)
 8007844:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	0800fc30 	.word	0x0800fc30
 8007854:	08010320 	.word	0x08010320
 8007858:	0800fc74 	.word	0x0800fc74
 800785c:	24000028 	.word	0x24000028
 8007860:	24007b6c 	.word	0x24007b6c

08007864 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
 8007870:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <tcp_eff_send_mss_netif+0x22>
 8007878:	4b14      	ldr	r3, [pc, #80]	@ (80078cc <tcp_eff_send_mss_netif+0x68>)
 800787a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800787e:	4914      	ldr	r1, [pc, #80]	@ (80078d0 <tcp_eff_send_mss_netif+0x6c>)
 8007880:	4814      	ldr	r0, [pc, #80]	@ (80078d4 <tcp_eff_send_mss_netif+0x70>)
 8007882:	f006 fd59 	bl	800e338 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800788c:	89fb      	ldrh	r3, [r7, #14]
 800788e:	e019      	b.n	80078c4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007894:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8007896:	8afb      	ldrh	r3, [r7, #22]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d012      	beq.n	80078c2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800789c:	2328      	movs	r3, #40	@ 0x28
 800789e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80078a0:	8afa      	ldrh	r2, [r7, #22]
 80078a2:	8abb      	ldrh	r3, [r7, #20]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d904      	bls.n	80078b2 <tcp_eff_send_mss_netif+0x4e>
 80078a8:	8afa      	ldrh	r2, [r7, #22]
 80078aa:	8abb      	ldrh	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	e000      	b.n	80078b4 <tcp_eff_send_mss_netif+0x50>
 80078b2:	2300      	movs	r3, #0
 80078b4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80078b6:	8a7a      	ldrh	r2, [r7, #18]
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	bf28      	it	cs
 80078be:	4613      	movcs	r3, r2
 80078c0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80078c2:	89fb      	ldrh	r3, [r7, #14]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	0800fc30 	.word	0x0800fc30
 80078d0:	0801033c 	.word	0x0801033c
 80078d4:	0800fc74 	.word	0x0800fc74

080078d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
 80078e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d119      	bne.n	8007920 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80078ec:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80078ee:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80078f2:	4910      	ldr	r1, [pc, #64]	@ (8007934 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80078f4:	4810      	ldr	r0, [pc, #64]	@ (8007938 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80078f6:	f006 fd1f 	bl	800e338 <iprintf>

  while (pcb != NULL) {
 80078fa:	e011      	b.n	8007920 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d108      	bne.n	800791a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7fe ffc4 	bl	800689c <tcp_abort>
      pcb = next;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e002      	b.n	8007920 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1ea      	bne.n	80078fc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8007926:	bf00      	nop
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	0800fc30 	.word	0x0800fc30
 8007934:	08010364 	.word	0x08010364
 8007938:	0800fc74 	.word	0x0800fc74

0800793c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02a      	beq.n	80079a2 <tcp_netif_ip_addr_changed+0x66>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d026      	beq.n	80079a2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007954:	4b15      	ldr	r3, [pc, #84]	@ (80079ac <tcp_netif_ip_addr_changed+0x70>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7ff ffbc 	bl	80078d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007960:	4b13      	ldr	r3, [pc, #76]	@ (80079b0 <tcp_netif_ip_addr_changed+0x74>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f7ff ffb6 	bl	80078d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d017      	beq.n	80079a2 <tcp_netif_ip_addr_changed+0x66>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d013      	beq.n	80079a2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800797a:	4b0e      	ldr	r3, [pc, #56]	@ (80079b4 <tcp_netif_ip_addr_changed+0x78>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]
 8007980:	e00c      	b.n	800799c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d103      	bne.n	8007996 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	60fb      	str	r3, [r7, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1ef      	bne.n	8007982 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80079a2:	bf00      	nop
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	24007b78 	.word	0x24007b78
 80079b0:	24007b70 	.word	0x24007b70
 80079b4:	24007b74 	.word	0x24007b74

080079b8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff fc3d 	bl	800724c <tcp_segs_free>
    pcb->ooseq = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80079d8:	bf00      	nop
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b08d      	sub	sp, #52	@ 0x34
 80079e4:	af04      	add	r7, sp, #16
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d105      	bne.n	80079fc <tcp_input+0x1c>
 80079f0:	4b9b      	ldr	r3, [pc, #620]	@ (8007c60 <tcp_input+0x280>)
 80079f2:	2283      	movs	r2, #131	@ 0x83
 80079f4:	499b      	ldr	r1, [pc, #620]	@ (8007c64 <tcp_input+0x284>)
 80079f6:	489c      	ldr	r0, [pc, #624]	@ (8007c68 <tcp_input+0x288>)
 80079f8:	f006 fc9e 	bl	800e338 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	4a9a      	ldr	r2, [pc, #616]	@ (8007c6c <tcp_input+0x28c>)
 8007a02:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	895b      	ldrh	r3, [r3, #10]
 8007a08:	2b13      	cmp	r3, #19
 8007a0a:	f240 83d1 	bls.w	80081b0 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a0e:	4b98      	ldr	r3, [pc, #608]	@ (8007c70 <tcp_input+0x290>)
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	4a97      	ldr	r2, [pc, #604]	@ (8007c70 <tcp_input+0x290>)
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	4611      	mov	r1, r2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f005 fc37 	bl	800d28c <ip4_addr_isbroadcast_u32>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f040 83c7 	bne.w	80081b4 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8007a26:	4b92      	ldr	r3, [pc, #584]	@ (8007c70 <tcp_input+0x290>)
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007a2e:	2be0      	cmp	r3, #224	@ 0xe0
 8007a30:	f000 83c0 	beq.w	80081b4 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007a34:	4b8d      	ldr	r3, [pc, #564]	@ (8007c6c <tcp_input+0x28c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	899b      	ldrh	r3, [r3, #12]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fc fd8f 	bl	8004560 <lwip_htons>
 8007a42:	4603      	mov	r3, r0
 8007a44:	0b1b      	lsrs	r3, r3, #12
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007a4e:	7cbb      	ldrb	r3, [r7, #18]
 8007a50:	2b13      	cmp	r3, #19
 8007a52:	f240 83b1 	bls.w	80081b8 <tcp_input+0x7d8>
 8007a56:	7cbb      	ldrb	r3, [r7, #18]
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	891b      	ldrh	r3, [r3, #8]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f200 83aa 	bhi.w	80081b8 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007a64:	7cbb      	ldrb	r3, [r7, #18]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3b14      	subs	r3, #20
 8007a6a:	b29a      	uxth	r2, r3
 8007a6c:	4b81      	ldr	r3, [pc, #516]	@ (8007c74 <tcp_input+0x294>)
 8007a6e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007a70:	4b81      	ldr	r3, [pc, #516]	@ (8007c78 <tcp_input+0x298>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	895a      	ldrh	r2, [r3, #10]
 8007a7a:	7cbb      	ldrb	r3, [r7, #18]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d309      	bcc.n	8007a96 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007a82:	4b7c      	ldr	r3, [pc, #496]	@ (8007c74 <tcp_input+0x294>)
 8007a84:	881a      	ldrh	r2, [r3, #0]
 8007a86:	4b7d      	ldr	r3, [pc, #500]	@ (8007c7c <tcp_input+0x29c>)
 8007a88:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8007a8a:	7cbb      	ldrb	r3, [r7, #18]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fe f8f6 	bl	8005c80 <pbuf_remove_header>
 8007a94:	e04e      	b.n	8007b34 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d105      	bne.n	8007aaa <tcp_input+0xca>
 8007a9e:	4b70      	ldr	r3, [pc, #448]	@ (8007c60 <tcp_input+0x280>)
 8007aa0:	22c2      	movs	r2, #194	@ 0xc2
 8007aa2:	4977      	ldr	r1, [pc, #476]	@ (8007c80 <tcp_input+0x2a0>)
 8007aa4:	4870      	ldr	r0, [pc, #448]	@ (8007c68 <tcp_input+0x288>)
 8007aa6:	f006 fc47 	bl	800e338 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8007aaa:	2114      	movs	r1, #20
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7fe f8e7 	bl	8005c80 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	895a      	ldrh	r2, [r3, #10]
 8007ab6:	4b71      	ldr	r3, [pc, #452]	@ (8007c7c <tcp_input+0x29c>)
 8007ab8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8007aba:	4b6e      	ldr	r3, [pc, #440]	@ (8007c74 <tcp_input+0x294>)
 8007abc:	881a      	ldrh	r2, [r3, #0]
 8007abe:	4b6f      	ldr	r3, [pc, #444]	@ (8007c7c <tcp_input+0x29c>)
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8007ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8007c7c <tcp_input+0x29c>)
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f7fe f8d7 	bl	8005c80 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	895b      	ldrh	r3, [r3, #10]
 8007ad8:	8a3a      	ldrh	r2, [r7, #16]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	f200 836e 	bhi.w	80081bc <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4a64      	ldr	r2, [pc, #400]	@ (8007c78 <tcp_input+0x298>)
 8007ae8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	8a3a      	ldrh	r2, [r7, #16]
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe f8c4 	bl	8005c80 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	891a      	ldrh	r2, [r3, #8]
 8007afc:	8a3b      	ldrh	r3, [r7, #16]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	895b      	ldrh	r3, [r3, #10]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <tcp_input+0x13a>
 8007b0e:	4b54      	ldr	r3, [pc, #336]	@ (8007c60 <tcp_input+0x280>)
 8007b10:	22df      	movs	r2, #223	@ 0xdf
 8007b12:	495c      	ldr	r1, [pc, #368]	@ (8007c84 <tcp_input+0x2a4>)
 8007b14:	4854      	ldr	r0, [pc, #336]	@ (8007c68 <tcp_input+0x288>)
 8007b16:	f006 fc0f 	bl	800e338 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	891a      	ldrh	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	891b      	ldrh	r3, [r3, #8]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d005      	beq.n	8007b34 <tcp_input+0x154>
 8007b28:	4b4d      	ldr	r3, [pc, #308]	@ (8007c60 <tcp_input+0x280>)
 8007b2a:	22e0      	movs	r2, #224	@ 0xe0
 8007b2c:	4956      	ldr	r1, [pc, #344]	@ (8007c88 <tcp_input+0x2a8>)
 8007b2e:	484e      	ldr	r0, [pc, #312]	@ (8007c68 <tcp_input+0x288>)
 8007b30:	f006 fc02 	bl	800e338 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007b34:	4b4d      	ldr	r3, [pc, #308]	@ (8007c6c <tcp_input+0x28c>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	881b      	ldrh	r3, [r3, #0]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	4a4b      	ldr	r2, [pc, #300]	@ (8007c6c <tcp_input+0x28c>)
 8007b3e:	6814      	ldr	r4, [r2, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fc fd0d 	bl	8004560 <lwip_htons>
 8007b46:	4603      	mov	r3, r0
 8007b48:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007b4a:	4b48      	ldr	r3, [pc, #288]	@ (8007c6c <tcp_input+0x28c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	885b      	ldrh	r3, [r3, #2]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	4a46      	ldr	r2, [pc, #280]	@ (8007c6c <tcp_input+0x28c>)
 8007b54:	6814      	ldr	r4, [r2, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fc fd02 	bl	8004560 <lwip_htons>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007b60:	4b42      	ldr	r3, [pc, #264]	@ (8007c6c <tcp_input+0x28c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	4a41      	ldr	r2, [pc, #260]	@ (8007c6c <tcp_input+0x28c>)
 8007b68:	6814      	ldr	r4, [r2, #0]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fc fd0d 	bl	800458a <lwip_htonl>
 8007b70:	4603      	mov	r3, r0
 8007b72:	6063      	str	r3, [r4, #4]
 8007b74:	6863      	ldr	r3, [r4, #4]
 8007b76:	4a45      	ldr	r2, [pc, #276]	@ (8007c8c <tcp_input+0x2ac>)
 8007b78:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007c6c <tcp_input+0x28c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4a3a      	ldr	r2, [pc, #232]	@ (8007c6c <tcp_input+0x28c>)
 8007b82:	6814      	ldr	r4, [r2, #0]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f7fc fd00 	bl	800458a <lwip_htonl>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	60a3      	str	r3, [r4, #8]
 8007b8e:	68a3      	ldr	r3, [r4, #8]
 8007b90:	4a3f      	ldr	r2, [pc, #252]	@ (8007c90 <tcp_input+0x2b0>)
 8007b92:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007b94:	4b35      	ldr	r3, [pc, #212]	@ (8007c6c <tcp_input+0x28c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	89db      	ldrh	r3, [r3, #14]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	4a33      	ldr	r2, [pc, #204]	@ (8007c6c <tcp_input+0x28c>)
 8007b9e:	6814      	ldr	r4, [r2, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fc fcdd 	bl	8004560 <lwip_htons>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007baa:	4b30      	ldr	r3, [pc, #192]	@ (8007c6c <tcp_input+0x28c>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	899b      	ldrh	r3, [r3, #12]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fc fcd4 	bl	8004560 <lwip_htons>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007bc0:	b2da      	uxtb	r2, r3
 8007bc2:	4b34      	ldr	r3, [pc, #208]	@ (8007c94 <tcp_input+0x2b4>)
 8007bc4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	891a      	ldrh	r2, [r3, #8]
 8007bca:	4b33      	ldr	r3, [pc, #204]	@ (8007c98 <tcp_input+0x2b8>)
 8007bcc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007bce:	4b31      	ldr	r3, [pc, #196]	@ (8007c94 <tcp_input+0x2b4>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00c      	beq.n	8007bf4 <tcp_input+0x214>
    tcplen++;
 8007bda:	4b2f      	ldr	r3, [pc, #188]	@ (8007c98 <tcp_input+0x2b8>)
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	3301      	adds	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c98 <tcp_input+0x2b8>)
 8007be4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	891a      	ldrh	r2, [r3, #8]
 8007bea:	4b2b      	ldr	r3, [pc, #172]	@ (8007c98 <tcp_input+0x2b8>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	f200 82e6 	bhi.w	80081c0 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007bf8:	4b28      	ldr	r3, [pc, #160]	@ (8007c9c <tcp_input+0x2bc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	61fb      	str	r3, [r7, #28]
 8007bfe:	e09d      	b.n	8007d3c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	7d1b      	ldrb	r3, [r3, #20]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d105      	bne.n	8007c14 <tcp_input+0x234>
 8007c08:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <tcp_input+0x280>)
 8007c0a:	22fb      	movs	r2, #251	@ 0xfb
 8007c0c:	4924      	ldr	r1, [pc, #144]	@ (8007ca0 <tcp_input+0x2c0>)
 8007c0e:	4816      	ldr	r0, [pc, #88]	@ (8007c68 <tcp_input+0x288>)
 8007c10:	f006 fb92 	bl	800e338 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	7d1b      	ldrb	r3, [r3, #20]
 8007c18:	2b0a      	cmp	r3, #10
 8007c1a:	d105      	bne.n	8007c28 <tcp_input+0x248>
 8007c1c:	4b10      	ldr	r3, [pc, #64]	@ (8007c60 <tcp_input+0x280>)
 8007c1e:	22fc      	movs	r2, #252	@ 0xfc
 8007c20:	4920      	ldr	r1, [pc, #128]	@ (8007ca4 <tcp_input+0x2c4>)
 8007c22:	4811      	ldr	r0, [pc, #68]	@ (8007c68 <tcp_input+0x288>)
 8007c24:	f006 fb88 	bl	800e338 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	7d1b      	ldrb	r3, [r3, #20]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d105      	bne.n	8007c3c <tcp_input+0x25c>
 8007c30:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <tcp_input+0x280>)
 8007c32:	22fd      	movs	r2, #253	@ 0xfd
 8007c34:	491c      	ldr	r1, [pc, #112]	@ (8007ca8 <tcp_input+0x2c8>)
 8007c36:	480c      	ldr	r0, [pc, #48]	@ (8007c68 <tcp_input+0x288>)
 8007c38:	f006 fb7e 	bl	800e338 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	7a1b      	ldrb	r3, [r3, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d033      	beq.n	8007cac <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	7a1a      	ldrb	r2, [r3, #8]
 8007c48:	4b09      	ldr	r3, [pc, #36]	@ (8007c70 <tcp_input+0x290>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d029      	beq.n	8007cac <tcp_input+0x2cc>
      prev = pcb;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	61bb      	str	r3, [r7, #24]
      continue;
 8007c5c:	e06b      	b.n	8007d36 <tcp_input+0x356>
 8007c5e:	bf00      	nop
 8007c60:	08010398 	.word	0x08010398
 8007c64:	080103cc 	.word	0x080103cc
 8007c68:	080103e4 	.word	0x080103e4
 8007c6c:	24007b94 	.word	0x24007b94
 8007c70:	24004c50 	.word	0x24004c50
 8007c74:	24007b98 	.word	0x24007b98
 8007c78:	24007b9c 	.word	0x24007b9c
 8007c7c:	24007b9a 	.word	0x24007b9a
 8007c80:	0801040c 	.word	0x0801040c
 8007c84:	0801041c 	.word	0x0801041c
 8007c88:	08010428 	.word	0x08010428
 8007c8c:	24007ba4 	.word	0x24007ba4
 8007c90:	24007ba8 	.word	0x24007ba8
 8007c94:	24007bb0 	.word	0x24007bb0
 8007c98:	24007bae 	.word	0x24007bae
 8007c9c:	24007b78 	.word	0x24007b78
 8007ca0:	08010448 	.word	0x08010448
 8007ca4:	08010470 	.word	0x08010470
 8007ca8:	0801049c 	.word	0x0801049c
    }

    if (pcb->remote_port == tcphdr->src &&
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	8b1a      	ldrh	r2, [r3, #24]
 8007cb0:	4b72      	ldr	r3, [pc, #456]	@ (8007e7c <tcp_input+0x49c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d13a      	bne.n	8007d32 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	8ada      	ldrh	r2, [r3, #22]
 8007cc0:	4b6e      	ldr	r3, [pc, #440]	@ (8007e7c <tcp_input+0x49c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	885b      	ldrh	r3, [r3, #2]
 8007cc6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d132      	bne.n	8007d32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	4b6b      	ldr	r3, [pc, #428]	@ (8007e80 <tcp_input+0x4a0>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d12c      	bne.n	8007d32 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b68      	ldr	r3, [pc, #416]	@ (8007e80 <tcp_input+0x4a0>)
 8007cde:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d126      	bne.n	8007d32 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	69fa      	ldr	r2, [r7, #28]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d106      	bne.n	8007cfc <tcp_input+0x31c>
 8007cee:	4b65      	ldr	r3, [pc, #404]	@ (8007e84 <tcp_input+0x4a4>)
 8007cf0:	f240 120d 	movw	r2, #269	@ 0x10d
 8007cf4:	4964      	ldr	r1, [pc, #400]	@ (8007e88 <tcp_input+0x4a8>)
 8007cf6:	4865      	ldr	r0, [pc, #404]	@ (8007e8c <tcp_input+0x4ac>)
 8007cf8:	f006 fb1e 	bl	800e338 <iprintf>
      if (prev != NULL) {
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <tcp_input+0x338>
        prev->next = pcb->next;
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007d0a:	4b61      	ldr	r3, [pc, #388]	@ (8007e90 <tcp_input+0x4b0>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007d12:	4a5f      	ldr	r2, [pc, #380]	@ (8007e90 <tcp_input+0x4b0>)
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d111      	bne.n	8007d46 <tcp_input+0x366>
 8007d22:	4b58      	ldr	r3, [pc, #352]	@ (8007e84 <tcp_input+0x4a4>)
 8007d24:	f240 1215 	movw	r2, #277	@ 0x115
 8007d28:	495a      	ldr	r1, [pc, #360]	@ (8007e94 <tcp_input+0x4b4>)
 8007d2a:	4858      	ldr	r0, [pc, #352]	@ (8007e8c <tcp_input+0x4ac>)
 8007d2c:	f006 fb04 	bl	800e338 <iprintf>
      break;
 8007d30:	e009      	b.n	8007d46 <tcp_input+0x366>
    }
    prev = pcb;
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	61fb      	str	r3, [r7, #28]
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f47f af5e 	bne.w	8007c00 <tcp_input+0x220>
 8007d44:	e000      	b.n	8007d48 <tcp_input+0x368>
      break;
 8007d46:	bf00      	nop
  }

  if (pcb == NULL) {
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f040 80aa 	bne.w	8007ea4 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d50:	4b51      	ldr	r3, [pc, #324]	@ (8007e98 <tcp_input+0x4b8>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e03f      	b.n	8007dd8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	7d1b      	ldrb	r3, [r3, #20]
 8007d5c:	2b0a      	cmp	r3, #10
 8007d5e:	d006      	beq.n	8007d6e <tcp_input+0x38e>
 8007d60:	4b48      	ldr	r3, [pc, #288]	@ (8007e84 <tcp_input+0x4a4>)
 8007d62:	f240 121f 	movw	r2, #287	@ 0x11f
 8007d66:	494d      	ldr	r1, [pc, #308]	@ (8007e9c <tcp_input+0x4bc>)
 8007d68:	4848      	ldr	r0, [pc, #288]	@ (8007e8c <tcp_input+0x4ac>)
 8007d6a:	f006 fae5 	bl	800e338 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	7a1b      	ldrb	r3, [r3, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d009      	beq.n	8007d8a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	7a1a      	ldrb	r2, [r3, #8]
 8007d7a:	4b41      	ldr	r3, [pc, #260]	@ (8007e80 <tcp_input+0x4a0>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007d82:	3301      	adds	r3, #1
 8007d84:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d122      	bne.n	8007dd0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	8b1a      	ldrh	r2, [r3, #24]
 8007d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8007e7c <tcp_input+0x49c>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d11b      	bne.n	8007dd2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	8ada      	ldrh	r2, [r3, #22]
 8007d9e:	4b37      	ldr	r3, [pc, #220]	@ (8007e7c <tcp_input+0x49c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	885b      	ldrh	r3, [r3, #2]
 8007da4:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d113      	bne.n	8007dd2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	4b34      	ldr	r3, [pc, #208]	@ (8007e80 <tcp_input+0x4a0>)
 8007db0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d10d      	bne.n	8007dd2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	4b31      	ldr	r3, [pc, #196]	@ (8007e80 <tcp_input+0x4a0>)
 8007dbc:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d107      	bne.n	8007dd2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007dc2:	69f8      	ldr	r0, [r7, #28]
 8007dc4:	f000 fb56 	bl	8008474 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f7fd ffdf 	bl	8005d8c <pbuf_free>
        return;
 8007dce:	e1fd      	b.n	80081cc <tcp_input+0x7ec>
        continue;
 8007dd0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1bc      	bne.n	8007d58 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007de2:	4b2f      	ldr	r3, [pc, #188]	@ (8007ea0 <tcp_input+0x4c0>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	617b      	str	r3, [r7, #20]
 8007de8:	e02a      	b.n	8007e40 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	7a1b      	ldrb	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00c      	beq.n	8007e0c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	7a1a      	ldrb	r2, [r3, #8]
 8007df6:	4b22      	ldr	r3, [pc, #136]	@ (8007e80 <tcp_input+0x4a0>)
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007dfe:	3301      	adds	r3, #1
 8007e00:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d002      	beq.n	8007e0c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	61bb      	str	r3, [r7, #24]
        continue;
 8007e0a:	e016      	b.n	8007e3a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	8ada      	ldrh	r2, [r3, #22]
 8007e10:	4b1a      	ldr	r3, [pc, #104]	@ (8007e7c <tcp_input+0x49c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	885b      	ldrh	r3, [r3, #2]
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d10c      	bne.n	8007e36 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	4b17      	ldr	r3, [pc, #92]	@ (8007e80 <tcp_input+0x4a0>)
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d00f      	beq.n	8007e48 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <tcp_input+0x46a>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d1      	bne.n	8007dea <tcp_input+0x40a>
 8007e46:	e000      	b.n	8007e4a <tcp_input+0x46a>
            break;
 8007e48:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d029      	beq.n	8007ea4 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007e5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ea0 <tcp_input+0x4c0>)
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007e66:	4a0e      	ldr	r2, [pc, #56]	@ (8007ea0 <tcp_input+0x4c0>)
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007e6c:	6978      	ldr	r0, [r7, #20]
 8007e6e:	f000 fa03 	bl	8008278 <tcp_listen_input>
      }
      pbuf_free(p);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f7fd ff8a 	bl	8005d8c <pbuf_free>
      return;
 8007e78:	e1a8      	b.n	80081cc <tcp_input+0x7ec>
 8007e7a:	bf00      	nop
 8007e7c:	24007b94 	.word	0x24007b94
 8007e80:	24004c50 	.word	0x24004c50
 8007e84:	08010398 	.word	0x08010398
 8007e88:	080104c4 	.word	0x080104c4
 8007e8c:	080103e4 	.word	0x080103e4
 8007e90:	24007b78 	.word	0x24007b78
 8007e94:	080104f0 	.word	0x080104f0
 8007e98:	24007b7c 	.word	0x24007b7c
 8007e9c:	0801051c 	.word	0x0801051c
 8007ea0:	24007b74 	.word	0x24007b74
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 8158 	beq.w	800815c <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007eac:	4b95      	ldr	r3, [pc, #596]	@ (8008104 <tcp_input+0x724>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	891a      	ldrh	r2, [r3, #8]
 8007eb6:	4b93      	ldr	r3, [pc, #588]	@ (8008104 <tcp_input+0x724>)
 8007eb8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007eba:	4a92      	ldr	r2, [pc, #584]	@ (8008104 <tcp_input+0x724>)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007ec0:	4b91      	ldr	r3, [pc, #580]	@ (8008108 <tcp_input+0x728>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a8f      	ldr	r2, [pc, #572]	@ (8008104 <tcp_input+0x724>)
 8007ec6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007ec8:	4b90      	ldr	r3, [pc, #576]	@ (800810c <tcp_input+0x72c>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007ece:	4b90      	ldr	r3, [pc, #576]	@ (8008110 <tcp_input+0x730>)
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007ed4:	4b8f      	ldr	r3, [pc, #572]	@ (8008114 <tcp_input+0x734>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007eda:	4b8f      	ldr	r3, [pc, #572]	@ (8008118 <tcp_input+0x738>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	f003 0308 	and.w	r3, r3, #8
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	7b5b      	ldrb	r3, [r3, #13]
 8007eea:	f043 0301 	orr.w	r3, r3, #1
 8007eee:	b2da      	uxtb	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d017      	beq.n	8007f2c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007efc:	69f8      	ldr	r0, [r7, #28]
 8007efe:	f7ff f929 	bl	8007154 <tcp_process_refused_data>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f113 0f0d 	cmn.w	r3, #13
 8007f08:	d007      	beq.n	8007f1a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00c      	beq.n	8007f2c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007f12:	4b82      	ldr	r3, [pc, #520]	@ (800811c <tcp_input+0x73c>)
 8007f14:	881b      	ldrh	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d008      	beq.n	8007f2c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f040 80e3 	bne.w	80080ea <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007f24:	69f8      	ldr	r0, [r7, #28]
 8007f26:	f003 f9a7 	bl	800b278 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007f2a:	e0de      	b.n	80080ea <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007f2c:	4a7c      	ldr	r2, [pc, #496]	@ (8008120 <tcp_input+0x740>)
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007f32:	69f8      	ldr	r0, [r7, #28]
 8007f34:	f000 fb18 	bl	8008568 <tcp_process>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007f3c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f40:	f113 0f0d 	cmn.w	r3, #13
 8007f44:	f000 80d3 	beq.w	80080ee <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007f48:	4b71      	ldr	r3, [pc, #452]	@ (8008110 <tcp_input+0x730>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	f003 0308 	and.w	r3, r3, #8
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d015      	beq.n	8007f80 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d008      	beq.n	8007f70 <tcp_input+0x590>
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f64:	69fa      	ldr	r2, [r7, #28]
 8007f66:	6912      	ldr	r2, [r2, #16]
 8007f68:	f06f 010d 	mvn.w	r1, #13
 8007f6c:	4610      	mov	r0, r2
 8007f6e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007f70:	69f9      	ldr	r1, [r7, #28]
 8007f72:	486c      	ldr	r0, [pc, #432]	@ (8008124 <tcp_input+0x744>)
 8007f74:	f7ff fbbc 	bl	80076f0 <tcp_pcb_remove>
        tcp_free(pcb);
 8007f78:	69f8      	ldr	r0, [r7, #28]
 8007f7a:	f7fe f9a7 	bl	80062cc <tcp_free>
 8007f7e:	e0da      	b.n	8008136 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007f84:	4b63      	ldr	r3, [pc, #396]	@ (8008114 <tcp_input+0x734>)
 8007f86:	881b      	ldrh	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01d      	beq.n	8007fc8 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007f8c:	4b61      	ldr	r3, [pc, #388]	@ (8008114 <tcp_input+0x734>)
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007f92:	69fb      	ldr	r3, [r7, #28]
 8007f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00a      	beq.n	8007fb2 <tcp_input+0x5d2>
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007fa2:	69fa      	ldr	r2, [r7, #28]
 8007fa4:	6910      	ldr	r0, [r2, #16]
 8007fa6:	89fa      	ldrh	r2, [r7, #14]
 8007fa8:	69f9      	ldr	r1, [r7, #28]
 8007faa:	4798      	blx	r3
 8007fac:	4603      	mov	r3, r0
 8007fae:	74fb      	strb	r3, [r7, #19]
 8007fb0:	e001      	b.n	8007fb6 <tcp_input+0x5d6>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007fb6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fba:	f113 0f0d 	cmn.w	r3, #13
 8007fbe:	f000 8098 	beq.w	80080f2 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007fc2:	4b54      	ldr	r3, [pc, #336]	@ (8008114 <tcp_input+0x734>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007fc8:	69f8      	ldr	r0, [r7, #28]
 8007fca:	f000 f915 	bl	80081f8 <tcp_input_delayed_close>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8090 	bne.w	80080f6 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007fd6:	4b4d      	ldr	r3, [pc, #308]	@ (800810c <tcp_input+0x72c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d041      	beq.n	8008062 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d006      	beq.n	8007ff4 <tcp_input+0x614>
 8007fe6:	4b50      	ldr	r3, [pc, #320]	@ (8008128 <tcp_input+0x748>)
 8007fe8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8007fec:	494f      	ldr	r1, [pc, #316]	@ (800812c <tcp_input+0x74c>)
 8007fee:	4850      	ldr	r0, [pc, #320]	@ (8008130 <tcp_input+0x750>)
 8007ff0:	f006 f9a2 	bl	800e338 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	8b5b      	ldrh	r3, [r3, #26]
 8007ff8:	f003 0310 	and.w	r3, r3, #16
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008000:	4b42      	ldr	r3, [pc, #264]	@ (800810c <tcp_input+0x72c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f7fd fec1 	bl	8005d8c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800800a:	69f8      	ldr	r0, [r7, #28]
 800800c:	f7fe fc46 	bl	800689c <tcp_abort>
            goto aborted;
 8008010:	e091      	b.n	8008136 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00c      	beq.n	8008036 <tcp_input+0x656>
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	6918      	ldr	r0, [r3, #16]
 8008026:	4b39      	ldr	r3, [pc, #228]	@ (800810c <tcp_input+0x72c>)
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	2300      	movs	r3, #0
 800802c:	69f9      	ldr	r1, [r7, #28]
 800802e:	47a0      	blx	r4
 8008030:	4603      	mov	r3, r0
 8008032:	74fb      	strb	r3, [r7, #19]
 8008034:	e008      	b.n	8008048 <tcp_input+0x668>
 8008036:	4b35      	ldr	r3, [pc, #212]	@ (800810c <tcp_input+0x72c>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	69f9      	ldr	r1, [r7, #28]
 800803e:	2000      	movs	r0, #0
 8008040:	f7ff f95e 	bl	8007300 <tcp_recv_null>
 8008044:	4603      	mov	r3, r0
 8008046:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8008048:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800804c:	f113 0f0d 	cmn.w	r3, #13
 8008050:	d053      	beq.n	80080fa <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8008052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800805a:	4b2c      	ldr	r3, [pc, #176]	@ (800810c <tcp_input+0x72c>)
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8008062:	4b2b      	ldr	r3, [pc, #172]	@ (8008110 <tcp_input+0x730>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	f003 0320 	and.w	r3, r3, #32
 800806a:	2b00      	cmp	r3, #0
 800806c:	d030      	beq.n	80080d0 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800807a:	7b5a      	ldrb	r2, [r3, #13]
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008080:	f042 0220 	orr.w	r2, r2, #32
 8008084:	b2d2      	uxtb	r2, r2
 8008086:	735a      	strb	r2, [r3, #13]
 8008088:	e022      	b.n	80080d0 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008092:	d005      	beq.n	80080a0 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008098:	3301      	adds	r3, #1
 800809a:	b29a      	uxth	r2, r3
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00b      	beq.n	80080c2 <tcp_input+0x6e2>
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	6918      	ldr	r0, [r3, #16]
 80080b4:	2300      	movs	r3, #0
 80080b6:	2200      	movs	r2, #0
 80080b8:	69f9      	ldr	r1, [r7, #28]
 80080ba:	47a0      	blx	r4
 80080bc:	4603      	mov	r3, r0
 80080be:	74fb      	strb	r3, [r7, #19]
 80080c0:	e001      	b.n	80080c6 <tcp_input+0x6e6>
 80080c2:	2300      	movs	r3, #0
 80080c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80080c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80080ca:	f113 0f0d 	cmn.w	r3, #13
 80080ce:	d016      	beq.n	80080fe <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80080d0:	4b13      	ldr	r3, [pc, #76]	@ (8008120 <tcp_input+0x740>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80080d6:	69f8      	ldr	r0, [r7, #28]
 80080d8:	f000 f88e 	bl	80081f8 <tcp_input_delayed_close>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d128      	bne.n	8008134 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80080e2:	69f8      	ldr	r0, [r7, #28]
 80080e4:	f002 fac2 	bl	800a66c <tcp_output>
 80080e8:	e025      	b.n	8008136 <tcp_input+0x756>
        goto aborted;
 80080ea:	bf00      	nop
 80080ec:	e023      	b.n	8008136 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80080ee:	bf00      	nop
 80080f0:	e021      	b.n	8008136 <tcp_input+0x756>
              goto aborted;
 80080f2:	bf00      	nop
 80080f4:	e01f      	b.n	8008136 <tcp_input+0x756>
          goto aborted;
 80080f6:	bf00      	nop
 80080f8:	e01d      	b.n	8008136 <tcp_input+0x756>
            goto aborted;
 80080fa:	bf00      	nop
 80080fc:	e01b      	b.n	8008136 <tcp_input+0x756>
              goto aborted;
 80080fe:	bf00      	nop
 8008100:	e019      	b.n	8008136 <tcp_input+0x756>
 8008102:	bf00      	nop
 8008104:	24007b84 	.word	0x24007b84
 8008108:	24007b94 	.word	0x24007b94
 800810c:	24007bb4 	.word	0x24007bb4
 8008110:	24007bb1 	.word	0x24007bb1
 8008114:	24007bac 	.word	0x24007bac
 8008118:	24007bb0 	.word	0x24007bb0
 800811c:	24007bae 	.word	0x24007bae
 8008120:	24007bb8 	.word	0x24007bb8
 8008124:	24007b78 	.word	0x24007b78
 8008128:	08010398 	.word	0x08010398
 800812c:	0801054c 	.word	0x0801054c
 8008130:	080103e4 	.word	0x080103e4
          goto aborted;
 8008134:	bf00      	nop
    tcp_input_pcb = NULL;
 8008136:	4b27      	ldr	r3, [pc, #156]	@ (80081d4 <tcp_input+0x7f4>)
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800813c:	4b26      	ldr	r3, [pc, #152]	@ (80081d8 <tcp_input+0x7f8>)
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <tcp_input+0x7fc>)
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d03f      	beq.n	80081ca <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800814a:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <tcp_input+0x7fc>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	4618      	mov	r0, r3
 8008150:	f7fd fe1c 	bl	8005d8c <pbuf_free>
      inseg.p = NULL;
 8008154:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <tcp_input+0x7fc>)
 8008156:	2200      	movs	r2, #0
 8008158:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800815a:	e036      	b.n	80081ca <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800815c:	4b20      	ldr	r3, [pc, #128]	@ (80081e0 <tcp_input+0x800>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	899b      	ldrh	r3, [r3, #12]
 8008162:	b29b      	uxth	r3, r3
 8008164:	4618      	mov	r0, r3
 8008166:	f7fc f9fb 	bl	8004560 <lwip_htons>
 800816a:	4603      	mov	r3, r0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d118      	bne.n	80081a8 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008176:	4b1b      	ldr	r3, [pc, #108]	@ (80081e4 <tcp_input+0x804>)
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	4b1b      	ldr	r3, [pc, #108]	@ (80081e8 <tcp_input+0x808>)
 800817c:	881b      	ldrh	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	4b1a      	ldr	r3, [pc, #104]	@ (80081ec <tcp_input+0x80c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008186:	4b16      	ldr	r3, [pc, #88]	@ (80081e0 <tcp_input+0x800>)
 8008188:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800818a:	885b      	ldrh	r3, [r3, #2]
 800818c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800818e:	4a14      	ldr	r2, [pc, #80]	@ (80081e0 <tcp_input+0x800>)
 8008190:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008192:	8812      	ldrh	r2, [r2, #0]
 8008194:	b292      	uxth	r2, r2
 8008196:	9202      	str	r2, [sp, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	4b15      	ldr	r3, [pc, #84]	@ (80081f0 <tcp_input+0x810>)
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	4b15      	ldr	r3, [pc, #84]	@ (80081f4 <tcp_input+0x814>)
 80081a0:	4602      	mov	r2, r0
 80081a2:	2000      	movs	r0, #0
 80081a4:	f003 f816 	bl	800b1d4 <tcp_rst>
    pbuf_free(p);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fd fdef 	bl	8005d8c <pbuf_free>
  return;
 80081ae:	e00c      	b.n	80081ca <tcp_input+0x7ea>
    goto dropped;
 80081b0:	bf00      	nop
 80081b2:	e006      	b.n	80081c2 <tcp_input+0x7e2>
    goto dropped;
 80081b4:	bf00      	nop
 80081b6:	e004      	b.n	80081c2 <tcp_input+0x7e2>
    goto dropped;
 80081b8:	bf00      	nop
 80081ba:	e002      	b.n	80081c2 <tcp_input+0x7e2>
      goto dropped;
 80081bc:	bf00      	nop
 80081be:	e000      	b.n	80081c2 <tcp_input+0x7e2>
      goto dropped;
 80081c0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7fd fde2 	bl	8005d8c <pbuf_free>
 80081c8:	e000      	b.n	80081cc <tcp_input+0x7ec>
  return;
 80081ca:	bf00      	nop
}
 80081cc:	3724      	adds	r7, #36	@ 0x24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd90      	pop	{r4, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	24007bb8 	.word	0x24007bb8
 80081d8:	24007bb4 	.word	0x24007bb4
 80081dc:	24007b84 	.word	0x24007b84
 80081e0:	24007b94 	.word	0x24007b94
 80081e4:	24007ba8 	.word	0x24007ba8
 80081e8:	24007bae 	.word	0x24007bae
 80081ec:	24007ba4 	.word	0x24007ba4
 80081f0:	24004c60 	.word	0x24004c60
 80081f4:	24004c64 	.word	0x24004c64

080081f8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d106      	bne.n	8008214 <tcp_input_delayed_close+0x1c>
 8008206:	4b17      	ldr	r3, [pc, #92]	@ (8008264 <tcp_input_delayed_close+0x6c>)
 8008208:	f240 225a 	movw	r2, #602	@ 0x25a
 800820c:	4916      	ldr	r1, [pc, #88]	@ (8008268 <tcp_input_delayed_close+0x70>)
 800820e:	4817      	ldr	r0, [pc, #92]	@ (800826c <tcp_input_delayed_close+0x74>)
 8008210:	f006 f892 	bl	800e338 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008214:	4b16      	ldr	r3, [pc, #88]	@ (8008270 <tcp_input_delayed_close+0x78>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	f003 0310 	and.w	r3, r3, #16
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01c      	beq.n	800825a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	8b5b      	ldrh	r3, [r3, #26]
 8008224:	f003 0310 	and.w	r3, r3, #16
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10d      	bne.n	8008248 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	2b00      	cmp	r3, #0
 8008234:	d008      	beq.n	8008248 <tcp_input_delayed_close+0x50>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6912      	ldr	r2, [r2, #16]
 8008240:	f06f 010e 	mvn.w	r1, #14
 8008244:	4610      	mov	r0, r2
 8008246:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	480a      	ldr	r0, [pc, #40]	@ (8008274 <tcp_input_delayed_close+0x7c>)
 800824c:	f7ff fa50 	bl	80076f0 <tcp_pcb_remove>
    tcp_free(pcb);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f7fe f83b 	bl	80062cc <tcp_free>
    return 1;
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <tcp_input_delayed_close+0x64>
  }
  return 0;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	08010398 	.word	0x08010398
 8008268:	08010568 	.word	0x08010568
 800826c:	080103e4 	.word	0x080103e4
 8008270:	24007bb1 	.word	0x24007bb1
 8008274:	24007b78 	.word	0x24007b78

08008278 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b08b      	sub	sp, #44	@ 0x2c
 800827c:	af04      	add	r7, sp, #16
 800827e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008280:	4b6f      	ldr	r3, [pc, #444]	@ (8008440 <tcp_listen_input+0x1c8>)
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 80d2 	bne.w	8008432 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d106      	bne.n	80082a2 <tcp_listen_input+0x2a>
 8008294:	4b6b      	ldr	r3, [pc, #428]	@ (8008444 <tcp_listen_input+0x1cc>)
 8008296:	f240 2281 	movw	r2, #641	@ 0x281
 800829a:	496b      	ldr	r1, [pc, #428]	@ (8008448 <tcp_listen_input+0x1d0>)
 800829c:	486b      	ldr	r0, [pc, #428]	@ (800844c <tcp_listen_input+0x1d4>)
 800829e:	f006 f84b 	bl	800e338 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80082a2:	4b67      	ldr	r3, [pc, #412]	@ (8008440 <tcp_listen_input+0x1c8>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d019      	beq.n	80082e2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082ae:	4b68      	ldr	r3, [pc, #416]	@ (8008450 <tcp_listen_input+0x1d8>)
 80082b0:	6819      	ldr	r1, [r3, #0]
 80082b2:	4b68      	ldr	r3, [pc, #416]	@ (8008454 <tcp_listen_input+0x1dc>)
 80082b4:	881b      	ldrh	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	4b67      	ldr	r3, [pc, #412]	@ (8008458 <tcp_listen_input+0x1e0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082be:	4b67      	ldr	r3, [pc, #412]	@ (800845c <tcp_listen_input+0x1e4>)
 80082c0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082c2:	885b      	ldrh	r3, [r3, #2]
 80082c4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80082c6:	4a65      	ldr	r2, [pc, #404]	@ (800845c <tcp_listen_input+0x1e4>)
 80082c8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80082ca:	8812      	ldrh	r2, [r2, #0]
 80082cc:	b292      	uxth	r2, r2
 80082ce:	9202      	str	r2, [sp, #8]
 80082d0:	9301      	str	r3, [sp, #4]
 80082d2:	4b63      	ldr	r3, [pc, #396]	@ (8008460 <tcp_listen_input+0x1e8>)
 80082d4:	9300      	str	r3, [sp, #0]
 80082d6:	4b63      	ldr	r3, [pc, #396]	@ (8008464 <tcp_listen_input+0x1ec>)
 80082d8:	4602      	mov	r2, r0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f002 ff7a 	bl	800b1d4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80082e0:	e0a9      	b.n	8008436 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80082e2:	4b57      	ldr	r3, [pc, #348]	@ (8008440 <tcp_listen_input+0x1c8>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	f000 80a3 	beq.w	8008436 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	7d5b      	ldrb	r3, [r3, #21]
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff f927 	bl	8007548 <tcp_alloc>
 80082fa:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d111      	bne.n	8008326 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <tcp_listen_input+0xa8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6910      	ldr	r0, [r2, #16]
 8008312:	f04f 32ff 	mov.w	r2, #4294967295
 8008316:	2100      	movs	r1, #0
 8008318:	4798      	blx	r3
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]
      return;
 800831e:	e08b      	b.n	8008438 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008320:	23f0      	movs	r3, #240	@ 0xf0
 8008322:	73bb      	strb	r3, [r7, #14]
      return;
 8008324:	e088      	b.n	8008438 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008326:	4b50      	ldr	r3, [pc, #320]	@ (8008468 <tcp_listen_input+0x1f0>)
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800832e:	4b4e      	ldr	r3, [pc, #312]	@ (8008468 <tcp_listen_input+0x1f0>)
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8ada      	ldrh	r2, [r3, #22]
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800833e:	4b47      	ldr	r3, [pc, #284]	@ (800845c <tcp_listen_input+0x1e4>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29a      	uxth	r2, r3
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2203      	movs	r2, #3
 800834e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008350:	4b41      	ldr	r3, [pc, #260]	@ (8008458 <tcp_listen_input+0x1e0>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	1c5a      	adds	r2, r3, #1
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8008362:	6978      	ldr	r0, [r7, #20]
 8008364:	f7ff fa58 	bl	8007818 <tcp_next_iss>
 8008368:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	693a      	ldr	r2, [r7, #16]
 800836e:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008382:	4b35      	ldr	r3, [pc, #212]	@ (8008458 <tcp_listen_input+0x1e0>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	1e5a      	subs	r2, r3, #1
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	691a      	ldr	r2, [r3, #16]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7a5b      	ldrb	r3, [r3, #9]
 800839e:	f003 030c 	and.w	r3, r3, #12
 80083a2:	b2da      	uxtb	r2, r3
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	7a1a      	ldrb	r2, [r3, #8]
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80083b0:	4b2e      	ldr	r3, [pc, #184]	@ (800846c <tcp_listen_input+0x1f4>)
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	60da      	str	r2, [r3, #12]
 80083b8:	4a2c      	ldr	r2, [pc, #176]	@ (800846c <tcp_listen_input+0x1f4>)
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	f003 f8cb 	bl	800b558 <tcp_timer_needed>
 80083c2:	4b2b      	ldr	r3, [pc, #172]	@ (8008470 <tcp_listen_input+0x1f8>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80083c8:	6978      	ldr	r0, [r7, #20]
 80083ca:	f001 fd8b 	bl	8009ee4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80083ce:	4b23      	ldr	r3, [pc, #140]	@ (800845c <tcp_listen_input+0x1e4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	89db      	ldrh	r3, [r3, #14]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	3304      	adds	r3, #4
 80083f0:	4618      	mov	r0, r3
 80083f2:	f004 fcb5 	bl	800cd60 <ip4_route>
 80083f6:	4601      	mov	r1, r0
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	3304      	adds	r3, #4
 80083fc:	461a      	mov	r2, r3
 80083fe:	4620      	mov	r0, r4
 8008400:	f7ff fa30 	bl	8007864 <tcp_eff_send_mss_netif>
 8008404:	4603      	mov	r3, r0
 8008406:	461a      	mov	r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800840c:	2112      	movs	r1, #18
 800840e:	6978      	ldr	r0, [r7, #20]
 8008410:	f002 f83e 	bl	800a490 <tcp_enqueue_flags>
 8008414:	4603      	mov	r3, r0
 8008416:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008420:	2100      	movs	r1, #0
 8008422:	6978      	ldr	r0, [r7, #20]
 8008424:	f7fe f97c 	bl	8006720 <tcp_abandon>
      return;
 8008428:	e006      	b.n	8008438 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800842a:	6978      	ldr	r0, [r7, #20]
 800842c:	f002 f91e 	bl	800a66c <tcp_output>
  return;
 8008430:	e001      	b.n	8008436 <tcp_listen_input+0x1be>
    return;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <tcp_listen_input+0x1c0>
  return;
 8008436:	bf00      	nop
}
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}
 800843e:	bf00      	nop
 8008440:	24007bb0 	.word	0x24007bb0
 8008444:	08010398 	.word	0x08010398
 8008448:	08010590 	.word	0x08010590
 800844c:	080103e4 	.word	0x080103e4
 8008450:	24007ba8 	.word	0x24007ba8
 8008454:	24007bae 	.word	0x24007bae
 8008458:	24007ba4 	.word	0x24007ba4
 800845c:	24007b94 	.word	0x24007b94
 8008460:	24004c60 	.word	0x24004c60
 8008464:	24004c64 	.word	0x24004c64
 8008468:	24004c50 	.word	0x24004c50
 800846c:	24007b78 	.word	0x24007b78
 8008470:	24007b80 	.word	0x24007b80

08008474 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af04      	add	r7, sp, #16
 800847a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800847c:	4b2f      	ldr	r3, [pc, #188]	@ (800853c <tcp_timewait_input+0xc8>)
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d153      	bne.n	8008530 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <tcp_timewait_input+0x28>
 800848e:	4b2c      	ldr	r3, [pc, #176]	@ (8008540 <tcp_timewait_input+0xcc>)
 8008490:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8008494:	492b      	ldr	r1, [pc, #172]	@ (8008544 <tcp_timewait_input+0xd0>)
 8008496:	482c      	ldr	r0, [pc, #176]	@ (8008548 <tcp_timewait_input+0xd4>)
 8008498:	f005 ff4e 	bl	800e338 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800849c:	4b27      	ldr	r3, [pc, #156]	@ (800853c <tcp_timewait_input+0xc8>)
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d02a      	beq.n	80084fe <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80084a8:	4b28      	ldr	r3, [pc, #160]	@ (800854c <tcp_timewait_input+0xd8>)
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	db2d      	blt.n	8008512 <tcp_timewait_input+0x9e>
 80084b6:	4b25      	ldr	r3, [pc, #148]	@ (800854c <tcp_timewait_input+0xd8>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80084c2:	440b      	add	r3, r1
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	dc23      	bgt.n	8008512 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084ca:	4b21      	ldr	r3, [pc, #132]	@ (8008550 <tcp_timewait_input+0xdc>)
 80084cc:	6819      	ldr	r1, [r3, #0]
 80084ce:	4b21      	ldr	r3, [pc, #132]	@ (8008554 <tcp_timewait_input+0xe0>)
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	4b1d      	ldr	r3, [pc, #116]	@ (800854c <tcp_timewait_input+0xd8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084da:	4b1f      	ldr	r3, [pc, #124]	@ (8008558 <tcp_timewait_input+0xe4>)
 80084dc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084de:	885b      	ldrh	r3, [r3, #2]
 80084e0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80084e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008558 <tcp_timewait_input+0xe4>)
 80084e4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80084e6:	8812      	ldrh	r2, [r2, #0]
 80084e8:	b292      	uxth	r2, r2
 80084ea:	9202      	str	r2, [sp, #8]
 80084ec:	9301      	str	r3, [sp, #4]
 80084ee:	4b1b      	ldr	r3, [pc, #108]	@ (800855c <tcp_timewait_input+0xe8>)
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008560 <tcp_timewait_input+0xec>)
 80084f4:	4602      	mov	r2, r0
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f002 fe6c 	bl	800b1d4 <tcp_rst>
      return;
 80084fc:	e01b      	b.n	8008536 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80084fe:	4b0f      	ldr	r3, [pc, #60]	@ (800853c <tcp_timewait_input+0xc8>)
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f003 0301 	and.w	r3, r3, #1
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800850a:	4b16      	ldr	r3, [pc, #88]	@ (8008564 <tcp_timewait_input+0xf0>)
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008512:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <tcp_timewait_input+0xe0>)
 8008514:	881b      	ldrh	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	8b5b      	ldrh	r3, [r3, #26]
 800851e:	f043 0302 	orr.w	r3, r3, #2
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f002 f89f 	bl	800a66c <tcp_output>
  }
  return;
 800852e:	e001      	b.n	8008534 <tcp_timewait_input+0xc0>
    return;
 8008530:	bf00      	nop
 8008532:	e000      	b.n	8008536 <tcp_timewait_input+0xc2>
  return;
 8008534:	bf00      	nop
}
 8008536:	3708      	adds	r7, #8
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	24007bb0 	.word	0x24007bb0
 8008540:	08010398 	.word	0x08010398
 8008544:	080105b0 	.word	0x080105b0
 8008548:	080103e4 	.word	0x080103e4
 800854c:	24007ba4 	.word	0x24007ba4
 8008550:	24007ba8 	.word	0x24007ba8
 8008554:	24007bae 	.word	0x24007bae
 8008558:	24007b94 	.word	0x24007b94
 800855c:	24004c60 	.word	0x24004c60
 8008560:	24004c64 	.word	0x24004c64
 8008564:	24007b6c 	.word	0x24007b6c

08008568 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8008568:	b590      	push	{r4, r7, lr}
 800856a:	b08d      	sub	sp, #52	@ 0x34
 800856c:	af04      	add	r7, sp, #16
 800856e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d106      	bne.n	800858c <tcp_process+0x24>
 800857e:	4b9d      	ldr	r3, [pc, #628]	@ (80087f4 <tcp_process+0x28c>)
 8008580:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8008584:	499c      	ldr	r1, [pc, #624]	@ (80087f8 <tcp_process+0x290>)
 8008586:	489d      	ldr	r0, [pc, #628]	@ (80087fc <tcp_process+0x294>)
 8008588:	f005 fed6 	bl	800e338 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800858c:	4b9c      	ldr	r3, [pc, #624]	@ (8008800 <tcp_process+0x298>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	d04e      	beq.n	8008636 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7d1b      	ldrb	r3, [r3, #20]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d108      	bne.n	80085b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80085a4:	4b97      	ldr	r3, [pc, #604]	@ (8008804 <tcp_process+0x29c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d123      	bne.n	80085f4 <tcp_process+0x8c>
        acceptable = 1;
 80085ac:	2301      	movs	r3, #1
 80085ae:	76fb      	strb	r3, [r7, #27]
 80085b0:	e020      	b.n	80085f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80085b6:	4b94      	ldr	r3, [pc, #592]	@ (8008808 <tcp_process+0x2a0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d102      	bne.n	80085c4 <tcp_process+0x5c>
        acceptable = 1;
 80085be:	2301      	movs	r3, #1
 80085c0:	76fb      	strb	r3, [r7, #27]
 80085c2:	e017      	b.n	80085f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80085c4:	4b90      	ldr	r3, [pc, #576]	@ (8008808 <tcp_process+0x2a0>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db10      	blt.n	80085f4 <tcp_process+0x8c>
 80085d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008808 <tcp_process+0x2a0>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085da:	6879      	ldr	r1, [r7, #4]
 80085dc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80085de:	440b      	add	r3, r1
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	dc06      	bgt.n	80085f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	8b5b      	ldrh	r3, [r3, #26]
 80085ea:	f043 0302 	orr.w	r3, r3, #2
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80085f4:	7efb      	ldrb	r3, [r7, #27]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01b      	beq.n	8008632 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	7d1b      	ldrb	r3, [r3, #20]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d106      	bne.n	8008610 <tcp_process+0xa8>
 8008602:	4b7c      	ldr	r3, [pc, #496]	@ (80087f4 <tcp_process+0x28c>)
 8008604:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8008608:	4980      	ldr	r1, [pc, #512]	@ (800880c <tcp_process+0x2a4>)
 800860a:	487c      	ldr	r0, [pc, #496]	@ (80087fc <tcp_process+0x294>)
 800860c:	f005 fe94 	bl	800e338 <iprintf>
      recv_flags |= TF_RESET;
 8008610:	4b7f      	ldr	r3, [pc, #508]	@ (8008810 <tcp_process+0x2a8>)
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	f043 0308 	orr.w	r3, r3, #8
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b7d      	ldr	r3, [pc, #500]	@ (8008810 <tcp_process+0x2a8>)
 800861c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8b5b      	ldrh	r3, [r3, #26]
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	b29a      	uxth	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800862c:	f06f 030d 	mvn.w	r3, #13
 8008630:	e37a      	b.n	8008d28 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e378      	b.n	8008d28 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008636:	4b72      	ldr	r3, [pc, #456]	@ (8008800 <tcp_process+0x298>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	f003 0302 	and.w	r3, r3, #2
 800863e:	2b00      	cmp	r3, #0
 8008640:	d010      	beq.n	8008664 <tcp_process+0xfc>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	7d1b      	ldrb	r3, [r3, #20]
 8008646:	2b02      	cmp	r3, #2
 8008648:	d00c      	beq.n	8008664 <tcp_process+0xfc>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7d1b      	ldrb	r3, [r3, #20]
 800864e:	2b03      	cmp	r3, #3
 8008650:	d008      	beq.n	8008664 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	8b5b      	ldrh	r3, [r3, #26]
 8008656:	f043 0302 	orr.w	r3, r3, #2
 800865a:	b29a      	uxth	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008660:	2300      	movs	r3, #0
 8008662:	e361      	b.n	8008d28 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8b5b      	ldrh	r3, [r3, #26]
 8008668:	f003 0310 	and.w	r3, r3, #16
 800866c:	2b00      	cmp	r3, #0
 800866e:	d103      	bne.n	8008678 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008670:	4b68      	ldr	r3, [pc, #416]	@ (8008814 <tcp_process+0x2ac>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f001 fc2b 	bl	8009ee4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7d1b      	ldrb	r3, [r3, #20]
 8008692:	3b02      	subs	r3, #2
 8008694:	2b07      	cmp	r3, #7
 8008696:	f200 8337 	bhi.w	8008d08 <tcp_process+0x7a0>
 800869a:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <tcp_process+0x138>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086c1 	.word	0x080086c1
 80086a4:	080088f1 	.word	0x080088f1
 80086a8:	08008a69 	.word	0x08008a69
 80086ac:	08008a93 	.word	0x08008a93
 80086b0:	08008bb7 	.word	0x08008bb7
 80086b4:	08008a69 	.word	0x08008a69
 80086b8:	08008c43 	.word	0x08008c43
 80086bc:	08008cd3 	.word	0x08008cd3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80086c0:	4b4f      	ldr	r3, [pc, #316]	@ (8008800 <tcp_process+0x298>)
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	f000 80e4 	beq.w	8008896 <tcp_process+0x32e>
 80086ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008800 <tcp_process+0x298>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 0302 	and.w	r3, r3, #2
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f000 80dd 	beq.w	8008896 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e0:	1c5a      	adds	r2, r3, #1
 80086e2:	4b48      	ldr	r3, [pc, #288]	@ (8008804 <tcp_process+0x29c>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	f040 80d5 	bne.w	8008896 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80086ec:	4b46      	ldr	r3, [pc, #280]	@ (8008808 <tcp_process+0x2a0>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	1c5a      	adds	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80086fe:	4b41      	ldr	r3, [pc, #260]	@ (8008804 <tcp_process+0x29c>)
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008706:	4b44      	ldr	r3, [pc, #272]	@ (8008818 <tcp_process+0x2b0>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	89db      	ldrh	r3, [r3, #14]
 800870c:	b29a      	uxth	r2, r3
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008720:	4b39      	ldr	r3, [pc, #228]	@ (8008808 <tcp_process+0x2a0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	1e5a      	subs	r2, r3, #1
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2204      	movs	r2, #4
 800872e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f004 fb11 	bl	800cd60 <ip4_route>
 800873e:	4601      	mov	r1, r0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3304      	adds	r3, #4
 8008744:	461a      	mov	r2, r3
 8008746:	4620      	mov	r0, r4
 8008748:	f7ff f88c 	bl	8007864 <tcp_eff_send_mss_netif>
 800874c:	4603      	mov	r3, r0
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008758:	009a      	lsls	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	f241 111c 	movw	r1, #4380	@ 0x111c
 8008764:	428b      	cmp	r3, r1
 8008766:	bf38      	it	cc
 8008768:	460b      	movcc	r3, r1
 800876a:	429a      	cmp	r2, r3
 800876c:	d204      	bcs.n	8008778 <tcp_process+0x210>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	b29b      	uxth	r3, r3
 8008776:	e00d      	b.n	8008794 <tcp_process+0x22c>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8008782:	4293      	cmp	r3, r2
 8008784:	d904      	bls.n	8008790 <tcp_process+0x228>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	e001      	b.n	8008794 <tcp_process+0x22c>
 8008790:	f241 131c 	movw	r3, #4380	@ 0x111c
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <tcp_process+0x24a>
 80087a4:	4b13      	ldr	r3, [pc, #76]	@ (80087f4 <tcp_process+0x28c>)
 80087a6:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80087aa:	491c      	ldr	r1, [pc, #112]	@ (800881c <tcp_process+0x2b4>)
 80087ac:	4813      	ldr	r0, [pc, #76]	@ (80087fc <tcp_process+0x294>)
 80087ae:	f005 fdc3 	bl	800e338 <iprintf>
        --pcb->snd_queuelen;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80087c6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d12a      	bne.n	8008824 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80087d2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d106      	bne.n	80087e8 <tcp_process+0x280>
 80087da:	4b06      	ldr	r3, [pc, #24]	@ (80087f4 <tcp_process+0x28c>)
 80087dc:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80087e0:	490f      	ldr	r1, [pc, #60]	@ (8008820 <tcp_process+0x2b8>)
 80087e2:	4806      	ldr	r0, [pc, #24]	@ (80087fc <tcp_process+0x294>)
 80087e4:	f005 fda8 	bl	800e338 <iprintf>
          pcb->unsent = rseg->next;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	66da      	str	r2, [r3, #108]	@ 0x6c
 80087f0:	e01c      	b.n	800882c <tcp_process+0x2c4>
 80087f2:	bf00      	nop
 80087f4:	08010398 	.word	0x08010398
 80087f8:	080105d0 	.word	0x080105d0
 80087fc:	080103e4 	.word	0x080103e4
 8008800:	24007bb0 	.word	0x24007bb0
 8008804:	24007ba8 	.word	0x24007ba8
 8008808:	24007ba4 	.word	0x24007ba4
 800880c:	080105ec 	.word	0x080105ec
 8008810:	24007bb1 	.word	0x24007bb1
 8008814:	24007b6c 	.word	0x24007b6c
 8008818:	24007b94 	.word	0x24007b94
 800881c:	0801060c 	.word	0x0801060c
 8008820:	08010624 	.word	0x08010624
        } else {
          pcb->unacked = rseg->next;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800882c:	69f8      	ldr	r0, [r7, #28]
 800882e:	f7fe fd22 	bl	8007276 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008836:	2b00      	cmp	r3, #0
 8008838:	d104      	bne.n	8008844 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008840:	861a      	strh	r2, [r3, #48]	@ 0x30
 8008842:	e006      	b.n	8008852 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <tcp_process+0x30a>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6910      	ldr	r0, [r2, #16]
 8008866:	2200      	movs	r2, #0
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4798      	blx	r3
 800886c:	4603      	mov	r3, r0
 800886e:	76bb      	strb	r3, [r7, #26]
 8008870:	e001      	b.n	8008876 <tcp_process+0x30e>
 8008872:	2300      	movs	r3, #0
 8008874:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8008876:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800887a:	f113 0f0d 	cmn.w	r3, #13
 800887e:	d102      	bne.n	8008886 <tcp_process+0x31e>
          return ERR_ABRT;
 8008880:	f06f 030c 	mvn.w	r3, #12
 8008884:	e250      	b.n	8008d28 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8b5b      	ldrh	r3, [r3, #26]
 800888a:	f043 0302 	orr.w	r3, r3, #2
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8008894:	e23a      	b.n	8008d0c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8008896:	4b98      	ldr	r3, [pc, #608]	@ (8008af8 <tcp_process+0x590>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0310 	and.w	r3, r3, #16
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8234 	beq.w	8008d0c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088a4:	4b95      	ldr	r3, [pc, #596]	@ (8008afc <tcp_process+0x594>)
 80088a6:	6819      	ldr	r1, [r3, #0]
 80088a8:	4b95      	ldr	r3, [pc, #596]	@ (8008b00 <tcp_process+0x598>)
 80088aa:	881b      	ldrh	r3, [r3, #0]
 80088ac:	461a      	mov	r2, r3
 80088ae:	4b95      	ldr	r3, [pc, #596]	@ (8008b04 <tcp_process+0x59c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088b4:	4b94      	ldr	r3, [pc, #592]	@ (8008b08 <tcp_process+0x5a0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088b8:	885b      	ldrh	r3, [r3, #2]
 80088ba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80088bc:	4a92      	ldr	r2, [pc, #584]	@ (8008b08 <tcp_process+0x5a0>)
 80088be:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80088c0:	8812      	ldrh	r2, [r2, #0]
 80088c2:	b292      	uxth	r2, r2
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	9301      	str	r3, [sp, #4]
 80088c8:	4b90      	ldr	r3, [pc, #576]	@ (8008b0c <tcp_process+0x5a4>)
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	4b90      	ldr	r3, [pc, #576]	@ (8008b10 <tcp_process+0x5a8>)
 80088ce:	4602      	mov	r2, r0
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f002 fc7f 	bl	800b1d4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80088dc:	2b05      	cmp	r3, #5
 80088de:	f200 8215 	bhi.w	8008d0c <tcp_process+0x7a4>
          pcb->rtime = 0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f002 fa4b 	bl	800ad84 <tcp_rexmit_rto>
      break;
 80088ee:	e20d      	b.n	8008d0c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80088f0:	4b81      	ldr	r3, [pc, #516]	@ (8008af8 <tcp_process+0x590>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80a1 	beq.w	8008a40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088fe:	4b7f      	ldr	r3, [pc, #508]	@ (8008afc <tcp_process+0x594>)
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	3b01      	subs	r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	db7e      	blt.n	8008a0c <tcp_process+0x4a4>
 800890e:	4b7b      	ldr	r3, [pc, #492]	@ (8008afc <tcp_process+0x594>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	dc77      	bgt.n	8008a0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2204      	movs	r2, #4
 8008920:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d102      	bne.n	8008930 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800892a:	23fa      	movs	r3, #250	@ 0xfa
 800892c:	76bb      	strb	r3, [r7, #26]
 800892e:	e01d      	b.n	800896c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <tcp_process+0x3e0>
 800893a:	4b76      	ldr	r3, [pc, #472]	@ (8008b14 <tcp_process+0x5ac>)
 800893c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8008940:	4975      	ldr	r1, [pc, #468]	@ (8008b18 <tcp_process+0x5b0>)
 8008942:	4876      	ldr	r0, [pc, #472]	@ (8008b1c <tcp_process+0x5b4>)
 8008944:	f005 fcf8 	bl	800e338 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <tcp_process+0x400>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	6910      	ldr	r0, [r2, #16]
 800895c:	2200      	movs	r2, #0
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	4798      	blx	r3
 8008962:	4603      	mov	r3, r0
 8008964:	76bb      	strb	r3, [r7, #26]
 8008966:	e001      	b.n	800896c <tcp_process+0x404>
 8008968:	23f0      	movs	r3, #240	@ 0xf0
 800896a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800896c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008974:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008978:	f113 0f0d 	cmn.w	r3, #13
 800897c:	d002      	beq.n	8008984 <tcp_process+0x41c>
              tcp_abort(pcb);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fd ff8c 	bl	800689c <tcp_abort>
            }
            return ERR_ABRT;
 8008984:	f06f 030c 	mvn.w	r3, #12
 8008988:	e1ce      	b.n	8008d28 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fae0 	bl	8008f50 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8008990:	4b63      	ldr	r3, [pc, #396]	@ (8008b20 <tcp_process+0x5b8>)
 8008992:	881b      	ldrh	r3, [r3, #0]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <tcp_process+0x43c>
            recv_acked--;
 8008998:	4b61      	ldr	r3, [pc, #388]	@ (8008b20 <tcp_process+0x5b8>)
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	3b01      	subs	r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	4b5f      	ldr	r3, [pc, #380]	@ (8008b20 <tcp_process+0x5b8>)
 80089a2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089a8:	009a      	lsls	r2, r3, #2
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80089b4:	428b      	cmp	r3, r1
 80089b6:	bf38      	it	cc
 80089b8:	460b      	movcc	r3, r1
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d204      	bcs.n	80089c8 <tcp_process+0x460>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	b29b      	uxth	r3, r3
 80089c6:	e00d      	b.n	80089e4 <tcp_process+0x47c>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089cc:	005b      	lsls	r3, r3, #1
 80089ce:	f241 121c 	movw	r2, #4380	@ 0x111c
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d904      	bls.n	80089e0 <tcp_process+0x478>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	b29b      	uxth	r3, r3
 80089de:	e001      	b.n	80089e4 <tcp_process+0x47c>
 80089e0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80089ea:	4b4e      	ldr	r3, [pc, #312]	@ (8008b24 <tcp_process+0x5bc>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d037      	beq.n	8008a66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	8b5b      	ldrh	r3, [r3, #26]
 80089fa:	f043 0302 	orr.w	r3, r3, #2
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2207      	movs	r2, #7
 8008a08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8008a0a:	e02c      	b.n	8008a66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008afc <tcp_process+0x594>)
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	4b3b      	ldr	r3, [pc, #236]	@ (8008b00 <tcp_process+0x598>)
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	461a      	mov	r2, r3
 8008a16:	4b3b      	ldr	r3, [pc, #236]	@ (8008b04 <tcp_process+0x59c>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8008b08 <tcp_process+0x5a0>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008a24:	4a38      	ldr	r2, [pc, #224]	@ (8008b08 <tcp_process+0x5a0>)
 8008a26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008a28:	8812      	ldrh	r2, [r2, #0]
 8008a2a:	b292      	uxth	r2, r2
 8008a2c:	9202      	str	r2, [sp, #8]
 8008a2e:	9301      	str	r3, [sp, #4]
 8008a30:	4b36      	ldr	r3, [pc, #216]	@ (8008b0c <tcp_process+0x5a4>)
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4b36      	ldr	r3, [pc, #216]	@ (8008b10 <tcp_process+0x5a8>)
 8008a36:	4602      	mov	r2, r0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f002 fbcb 	bl	800b1d4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008a3e:	e167      	b.n	8008d10 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008a40:	4b2d      	ldr	r3, [pc, #180]	@ (8008af8 <tcp_process+0x590>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 8161 	beq.w	8008d10 <tcp_process+0x7a8>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a52:	1e5a      	subs	r2, r3, #1
 8008a54:	4b2b      	ldr	r3, [pc, #172]	@ (8008b04 <tcp_process+0x59c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	f040 8159 	bne.w	8008d10 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 f9b2 	bl	800adc8 <tcp_rexmit>
      break;
 8008a64:	e154      	b.n	8008d10 <tcp_process+0x7a8>
 8008a66:	e153      	b.n	8008d10 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa71 	bl	8008f50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8008b24 <tcp_process+0x5bc>)
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	f003 0320 	and.w	r3, r3, #32
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 814c 	beq.w	8008d14 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	8b5b      	ldrh	r3, [r3, #26]
 8008a80:	f043 0302 	orr.w	r3, r3, #2
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008a90:	e140      	b.n	8008d14 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa5c 	bl	8008f50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008a98:	4b22      	ldr	r3, [pc, #136]	@ (8008b24 <tcp_process+0x5bc>)
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d071      	beq.n	8008b88 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008aa4:	4b14      	ldr	r3, [pc, #80]	@ (8008af8 <tcp_process+0x590>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d060      	beq.n	8008b72 <tcp_process+0x60a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ab4:	4b11      	ldr	r3, [pc, #68]	@ (8008afc <tcp_process+0x594>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d15a      	bne.n	8008b72 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d156      	bne.n	8008b72 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	8b5b      	ldrh	r3, [r3, #26]
 8008ac8:	f043 0302 	orr.w	r3, r3, #2
 8008acc:	b29a      	uxth	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe fdbc 	bl	8007650 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008ad8:	4b13      	ldr	r3, [pc, #76]	@ (8008b28 <tcp_process+0x5c0>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d105      	bne.n	8008aee <tcp_process+0x586>
 8008ae2:	4b11      	ldr	r3, [pc, #68]	@ (8008b28 <tcp_process+0x5c0>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8008b28 <tcp_process+0x5c0>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	e02e      	b.n	8008b4c <tcp_process+0x5e4>
 8008aee:	4b0e      	ldr	r3, [pc, #56]	@ (8008b28 <tcp_process+0x5c0>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e027      	b.n	8008b46 <tcp_process+0x5de>
 8008af6:	bf00      	nop
 8008af8:	24007bb0 	.word	0x24007bb0
 8008afc:	24007ba8 	.word	0x24007ba8
 8008b00:	24007bae 	.word	0x24007bae
 8008b04:	24007ba4 	.word	0x24007ba4
 8008b08:	24007b94 	.word	0x24007b94
 8008b0c:	24004c60 	.word	0x24004c60
 8008b10:	24004c64 	.word	0x24004c64
 8008b14:	08010398 	.word	0x08010398
 8008b18:	08010638 	.word	0x08010638
 8008b1c:	080103e4 	.word	0x080103e4
 8008b20:	24007bac 	.word	0x24007bac
 8008b24:	24007bb1 	.word	0x24007bb1
 8008b28:	24007b78 	.word	0x24007b78
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d104      	bne.n	8008b40 <tcp_process+0x5d8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68da      	ldr	r2, [r3, #12]
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	60da      	str	r2, [r3, #12]
 8008b3e:	e005      	b.n	8008b4c <tcp_process+0x5e4>
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1ef      	bne.n	8008b2c <tcp_process+0x5c4>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	60da      	str	r2, [r3, #12]
 8008b52:	4b77      	ldr	r3, [pc, #476]	@ (8008d30 <tcp_process+0x7c8>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	220a      	movs	r2, #10
 8008b5c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008b5e:	4b75      	ldr	r3, [pc, #468]	@ (8008d34 <tcp_process+0x7cc>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	4a73      	ldr	r2, [pc, #460]	@ (8008d34 <tcp_process+0x7cc>)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6013      	str	r3, [r2, #0]
 8008b6c:	f002 fcf4 	bl	800b558 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008b70:	e0d2      	b.n	8008d18 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	8b5b      	ldrh	r3, [r3, #26]
 8008b76:	f043 0302 	orr.w	r3, r3, #2
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2208      	movs	r2, #8
 8008b84:	751a      	strb	r2, [r3, #20]
      break;
 8008b86:	e0c7      	b.n	8008d18 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008b88:	4b6b      	ldr	r3, [pc, #428]	@ (8008d38 <tcp_process+0x7d0>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	f003 0310 	and.w	r3, r3, #16
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80c1 	beq.w	8008d18 <tcp_process+0x7b0>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b9a:	4b68      	ldr	r3, [pc, #416]	@ (8008d3c <tcp_process+0x7d4>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	f040 80ba 	bne.w	8008d18 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f040 80b5 	bne.w	8008d18 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2206      	movs	r2, #6
 8008bb2:	751a      	strb	r2, [r3, #20]
      break;
 8008bb4:	e0b0      	b.n	8008d18 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f9ca 	bl	8008f50 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008bbc:	4b60      	ldr	r3, [pc, #384]	@ (8008d40 <tcp_process+0x7d8>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	f003 0320 	and.w	r3, r3, #32
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	f000 80a9 	beq.w	8008d1c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	8b5b      	ldrh	r3, [r3, #26]
 8008bce:	f043 0302 	orr.w	r3, r3, #2
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7fe fd39 	bl	8007650 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008bde:	4b59      	ldr	r3, [pc, #356]	@ (8008d44 <tcp_process+0x7dc>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d105      	bne.n	8008bf4 <tcp_process+0x68c>
 8008be8:	4b56      	ldr	r3, [pc, #344]	@ (8008d44 <tcp_process+0x7dc>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	4a55      	ldr	r2, [pc, #340]	@ (8008d44 <tcp_process+0x7dc>)
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	e013      	b.n	8008c1c <tcp_process+0x6b4>
 8008bf4:	4b53      	ldr	r3, [pc, #332]	@ (8008d44 <tcp_process+0x7dc>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	e00c      	b.n	8008c16 <tcp_process+0x6ae>
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	687a      	ldr	r2, [r7, #4]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d104      	bne.n	8008c10 <tcp_process+0x6a8>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	60da      	str	r2, [r3, #12]
 8008c0e:	e005      	b.n	8008c1c <tcp_process+0x6b4>
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	613b      	str	r3, [r7, #16]
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1ef      	bne.n	8008bfc <tcp_process+0x694>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	60da      	str	r2, [r3, #12]
 8008c22:	4b43      	ldr	r3, [pc, #268]	@ (8008d30 <tcp_process+0x7c8>)
 8008c24:	2201      	movs	r2, #1
 8008c26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	220a      	movs	r2, #10
 8008c2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008c2e:	4b41      	ldr	r3, [pc, #260]	@ (8008d34 <tcp_process+0x7cc>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60da      	str	r2, [r3, #12]
 8008c36:	4a3f      	ldr	r2, [pc, #252]	@ (8008d34 <tcp_process+0x7cc>)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	f002 fc8c 	bl	800b558 <tcp_timer_needed>
      }
      break;
 8008c40:	e06c      	b.n	8008d1c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 f984 	bl	8008f50 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008c48:	4b3b      	ldr	r3, [pc, #236]	@ (8008d38 <tcp_process+0x7d0>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0310 	and.w	r3, r3, #16
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d065      	beq.n	8008d20 <tcp_process+0x7b8>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008c58:	4b38      	ldr	r3, [pc, #224]	@ (8008d3c <tcp_process+0x7d4>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d15f      	bne.n	8008d20 <tcp_process+0x7b8>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d15b      	bne.n	8008d20 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe fcf1 	bl	8007650 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008c6e:	4b35      	ldr	r3, [pc, #212]	@ (8008d44 <tcp_process+0x7dc>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d105      	bne.n	8008c84 <tcp_process+0x71c>
 8008c78:	4b32      	ldr	r3, [pc, #200]	@ (8008d44 <tcp_process+0x7dc>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	4a31      	ldr	r2, [pc, #196]	@ (8008d44 <tcp_process+0x7dc>)
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e013      	b.n	8008cac <tcp_process+0x744>
 8008c84:	4b2f      	ldr	r3, [pc, #188]	@ (8008d44 <tcp_process+0x7dc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e00c      	b.n	8008ca6 <tcp_process+0x73e>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d104      	bne.n	8008ca0 <tcp_process+0x738>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68da      	ldr	r2, [r3, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	60da      	str	r2, [r3, #12]
 8008c9e:	e005      	b.n	8008cac <tcp_process+0x744>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1ef      	bne.n	8008c8c <tcp_process+0x724>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	60da      	str	r2, [r3, #12]
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d30 <tcp_process+0x7c8>)
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	220a      	movs	r2, #10
 8008cbc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8008d34 <tcp_process+0x7cc>)
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60da      	str	r2, [r3, #12]
 8008cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8008d34 <tcp_process+0x7cc>)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	f002 fc44 	bl	800b558 <tcp_timer_needed>
      }
      break;
 8008cd0:	e026      	b.n	8008d20 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f93c 	bl	8008f50 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008cd8:	4b17      	ldr	r3, [pc, #92]	@ (8008d38 <tcp_process+0x7d0>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d01f      	beq.n	8008d24 <tcp_process+0x7bc>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ce8:	4b14      	ldr	r3, [pc, #80]	@ (8008d3c <tcp_process+0x7d4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d119      	bne.n	8008d24 <tcp_process+0x7bc>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d115      	bne.n	8008d24 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	@ (8008d40 <tcp_process+0x7d8>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f043 0310 	orr.w	r3, r3, #16
 8008d00:	b2da      	uxtb	r2, r3
 8008d02:	4b0f      	ldr	r3, [pc, #60]	@ (8008d40 <tcp_process+0x7d8>)
 8008d04:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008d06:	e00d      	b.n	8008d24 <tcp_process+0x7bc>
    default:
      break;
 8008d08:	bf00      	nop
 8008d0a:	e00c      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d0c:	bf00      	nop
 8008d0e:	e00a      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d10:	bf00      	nop
 8008d12:	e008      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d14:	bf00      	nop
 8008d16:	e006      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d18:	bf00      	nop
 8008d1a:	e004      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e002      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <tcp_process+0x7be>
      break;
 8008d24:	bf00      	nop
  }
  return ERR_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3724      	adds	r7, #36	@ 0x24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd90      	pop	{r4, r7, pc}
 8008d30:	24007b80 	.word	0x24007b80
 8008d34:	24007b7c 	.word	0x24007b7c
 8008d38:	24007bb0 	.word	0x24007bb0
 8008d3c:	24007ba8 	.word	0x24007ba8
 8008d40:	24007bb1 	.word	0x24007bb1
 8008d44:	24007b78 	.word	0x24007b78

08008d48 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008d48:	b590      	push	{r4, r7, lr}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d106      	bne.n	8008d66 <tcp_oos_insert_segment+0x1e>
 8008d58:	4b3b      	ldr	r3, [pc, #236]	@ (8008e48 <tcp_oos_insert_segment+0x100>)
 8008d5a:	f240 421f 	movw	r2, #1055	@ 0x41f
 8008d5e:	493b      	ldr	r1, [pc, #236]	@ (8008e4c <tcp_oos_insert_segment+0x104>)
 8008d60:	483b      	ldr	r0, [pc, #236]	@ (8008e50 <tcp_oos_insert_segment+0x108>)
 8008d62:	f005 fae9 	bl	800e338 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	899b      	ldrh	r3, [r3, #12]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fb fbf6 	bl	8004560 <lwip_htons>
 8008d74:	4603      	mov	r3, r0
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d028      	beq.n	8008dd2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008d80:	6838      	ldr	r0, [r7, #0]
 8008d82:	f7fe fa63 	bl	800724c <tcp_segs_free>
    next = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	603b      	str	r3, [r7, #0]
 8008d8a:	e056      	b.n	8008e3a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	899b      	ldrh	r3, [r3, #12]
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fb fbe3 	bl	8004560 <lwip_htons>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d00d      	beq.n	8008dc2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	899b      	ldrh	r3, [r3, #12]
 8008dac:	b29c      	uxth	r4, r3
 8008dae:	2001      	movs	r0, #1
 8008db0:	f7fb fbd6 	bl	8004560 <lwip_htons>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	4322      	orrs	r2, r4
 8008dbe:	b292      	uxth	r2, r2
 8008dc0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7fe fa52 	bl	8007276 <tcp_seg_free>
    while (next &&
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00e      	beq.n	8008df6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	891b      	ldrh	r3, [r3, #8]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4b1d      	ldr	r3, [pc, #116]	@ (8008e54 <tcp_oos_insert_segment+0x10c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	441a      	add	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	8909      	ldrh	r1, [r1, #8]
 8008dee:	440b      	add	r3, r1
 8008df0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	daca      	bge.n	8008d8c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d01e      	beq.n	8008e3a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	891b      	ldrh	r3, [r3, #8]
 8008e00:	461a      	mov	r2, r3
 8008e02:	4b14      	ldr	r3, [pc, #80]	@ (8008e54 <tcp_oos_insert_segment+0x10c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	441a      	add	r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	68db      	ldr	r3, [r3, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	dd12      	ble.n	8008e3a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008e54 <tcp_oos_insert_segment+0x10c>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685a      	ldr	r2, [r3, #4]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	891b      	ldrh	r3, [r3, #8]
 8008e32:	4619      	mov	r1, r3
 8008e34:	4610      	mov	r0, r2
 8008e36:	f7fc fe23 	bl	8005a80 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	683a      	ldr	r2, [r7, #0]
 8008e3e:	601a      	str	r2, [r3, #0]
}
 8008e40:	bf00      	nop
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd90      	pop	{r4, r7, pc}
 8008e48:	08010398 	.word	0x08010398
 8008e4c:	08010658 	.word	0x08010658
 8008e50:	080103e4 	.word	0x080103e4
 8008e54:	24007ba4 	.word	0x24007ba4

08008e58 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008e58:	b5b0      	push	{r4, r5, r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008e66:	e03e      	b.n	8008ee6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fd f810 	bl	8005e9c <pbuf_clen>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008e86:	8a7a      	ldrh	r2, [r7, #18]
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d906      	bls.n	8008e9a <tcp_free_acked_segments+0x42>
 8008e8c:	4b2a      	ldr	r3, [pc, #168]	@ (8008f38 <tcp_free_acked_segments+0xe0>)
 8008e8e:	f240 4257 	movw	r2, #1111	@ 0x457
 8008e92:	492a      	ldr	r1, [pc, #168]	@ (8008f3c <tcp_free_acked_segments+0xe4>)
 8008e94:	482a      	ldr	r0, [pc, #168]	@ (8008f40 <tcp_free_acked_segments+0xe8>)
 8008e96:	f005 fa4f 	bl	800e338 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8008ea0:	8a7b      	ldrh	r3, [r7, #18]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	891a      	ldrh	r2, [r3, #8]
 8008eb0:	4b24      	ldr	r3, [pc, #144]	@ (8008f44 <tcp_free_acked_segments+0xec>)
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	4b22      	ldr	r3, [pc, #136]	@ (8008f44 <tcp_free_acked_segments+0xec>)
 8008eba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008ebc:	6978      	ldr	r0, [r7, #20]
 8008ebe:	f7fe f9da 	bl	8007276 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00c      	beq.n	8008ee6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <tcp_free_acked_segments+0x8e>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d106      	bne.n	8008ee6 <tcp_free_acked_segments+0x8e>
 8008ed8:	4b17      	ldr	r3, [pc, #92]	@ (8008f38 <tcp_free_acked_segments+0xe0>)
 8008eda:	f240 4261 	movw	r2, #1121	@ 0x461
 8008ede:	491a      	ldr	r1, [pc, #104]	@ (8008f48 <tcp_free_acked_segments+0xf0>)
 8008ee0:	4817      	ldr	r0, [pc, #92]	@ (8008f40 <tcp_free_acked_segments+0xe8>)
 8008ee2:	f005 fa29 	bl	800e338 <iprintf>
  while (seg_list != NULL &&
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d020      	beq.n	8008f2e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fb fb49 	bl	800458a <lwip_htonl>
 8008ef8:	4604      	mov	r4, r0
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	891b      	ldrh	r3, [r3, #8]
 8008efe:	461d      	mov	r5, r3
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	899b      	ldrh	r3, [r3, #12]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fb fb29 	bl	8004560 <lwip_htons>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <tcp_free_acked_segments+0xc6>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <tcp_free_acked_segments+0xc8>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	442b      	add	r3, r5
 8008f22:	18e2      	adds	r2, r4, r3
 8008f24:	4b09      	ldr	r3, [pc, #36]	@ (8008f4c <tcp_free_acked_segments+0xf4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dd9c      	ble.n	8008e68 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008f2e:	68bb      	ldr	r3, [r7, #8]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3718      	adds	r7, #24
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bdb0      	pop	{r4, r5, r7, pc}
 8008f38:	08010398 	.word	0x08010398
 8008f3c:	08010680 	.word	0x08010680
 8008f40:	080103e4 	.word	0x080103e4
 8008f44:	24007bac 	.word	0x24007bac
 8008f48:	080106a8 	.word	0x080106a8
 8008f4c:	24007ba8 	.word	0x24007ba8

08008f50 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008f50:	b5b0      	push	{r4, r5, r7, lr}
 8008f52:	b094      	sub	sp, #80	@ 0x50
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d106      	bne.n	8008f70 <tcp_receive+0x20>
 8008f62:	4b91      	ldr	r3, [pc, #580]	@ (80091a8 <tcp_receive+0x258>)
 8008f64:	f240 427b 	movw	r2, #1147	@ 0x47b
 8008f68:	4990      	ldr	r1, [pc, #576]	@ (80091ac <tcp_receive+0x25c>)
 8008f6a:	4891      	ldr	r0, [pc, #580]	@ (80091b0 <tcp_receive+0x260>)
 8008f6c:	f005 f9e4 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	7d1b      	ldrb	r3, [r3, #20]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d806      	bhi.n	8008f86 <tcp_receive+0x36>
 8008f78:	4b8b      	ldr	r3, [pc, #556]	@ (80091a8 <tcp_receive+0x258>)
 8008f7a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8008f7e:	498d      	ldr	r1, [pc, #564]	@ (80091b4 <tcp_receive+0x264>)
 8008f80:	488b      	ldr	r0, [pc, #556]	@ (80091b0 <tcp_receive+0x260>)
 8008f82:	f005 f9d9 	bl	800e338 <iprintf>

  if (flags & TCP_ACK) {
 8008f86:	4b8c      	ldr	r3, [pc, #560]	@ (80091b8 <tcp_receive+0x268>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	f003 0310 	and.w	r3, r3, #16
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f000 8264 	beq.w	800945c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fa0:	4413      	add	r3, r2
 8008fa2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fa8:	4b84      	ldr	r3, [pc, #528]	@ (80091bc <tcp_receive+0x26c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	db1b      	blt.n	8008fea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008fb6:	4b81      	ldr	r3, [pc, #516]	@ (80091bc <tcp_receive+0x26c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d106      	bne.n	8008fcc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80091c0 <tcp_receive+0x270>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	1ad3      	subs	r3, r2, r3
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	db0e      	blt.n	8008fea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80091c0 <tcp_receive+0x270>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d125      	bne.n	8009024 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008fd8:	4b7a      	ldr	r3, [pc, #488]	@ (80091c4 <tcp_receive+0x274>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	89db      	ldrh	r3, [r3, #14]
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d91c      	bls.n	8009024 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008fea:	4b76      	ldr	r3, [pc, #472]	@ (80091c4 <tcp_receive+0x274>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	89db      	ldrh	r3, [r3, #14]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009004:	429a      	cmp	r2, r3
 8009006:	d205      	bcs.n	8009014 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8009014:	4b69      	ldr	r3, [pc, #420]	@ (80091bc <tcp_receive+0x26c>)
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800901c:	4b68      	ldr	r3, [pc, #416]	@ (80091c0 <tcp_receive+0x270>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009024:	4b66      	ldr	r3, [pc, #408]	@ (80091c0 <tcp_receive+0x270>)
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	dc58      	bgt.n	80090e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8009032:	4b65      	ldr	r3, [pc, #404]	@ (80091c8 <tcp_receive+0x278>)
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d14b      	bne.n	80090d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903e:	687a      	ldr	r2, [r7, #4]
 8009040:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8009044:	4413      	add	r3, r2
 8009046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009048:	429a      	cmp	r2, r3
 800904a:	d142      	bne.n	80090d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8009052:	2b00      	cmp	r3, #0
 8009054:	db3d      	blt.n	80090d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800905a:	4b59      	ldr	r3, [pc, #356]	@ (80091c0 <tcp_receive+0x270>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	429a      	cmp	r2, r3
 8009060:	d137      	bne.n	80090d2 <tcp_receive+0x182>
              found_dupack = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800906c:	2bff      	cmp	r3, #255	@ 0xff
 800906e:	d007      	beq.n	8009080 <tcp_receive+0x130>
                ++pcb->dupacks;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009076:	3301      	adds	r3, #1
 8009078:	b2da      	uxtb	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009086:	2b03      	cmp	r3, #3
 8009088:	d91b      	bls.n	80090c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009094:	4413      	add	r3, r2
 8009096:	b29a      	uxth	r2, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800909e:	429a      	cmp	r2, r3
 80090a0:	d30a      	bcc.n	80090b8 <tcp_receive+0x168>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80090ac:	4413      	add	r3, r2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80090b6:	e004      	b.n	80090c2 <tcp_receive+0x172>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090be:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d902      	bls.n	80090d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f001 fee7 	bl	800aea0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80090d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f040 8161 	bne.w	800939c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80090e2:	e15b      	b.n	800939c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80090e4:	4b36      	ldr	r3, [pc, #216]	@ (80091c0 <tcp_receive+0x270>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	3b01      	subs	r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f2c0 814e 	blt.w	8009392 <tcp_receive+0x442>
 80090f6:	4b32      	ldr	r3, [pc, #200]	@ (80091c0 <tcp_receive+0x270>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	f300 8146 	bgt.w	8009392 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	8b5b      	ldrh	r3, [r3, #26]
 800910a:	f003 0304 	and.w	r3, r3, #4
 800910e:	2b00      	cmp	r3, #0
 8009110:	d010      	beq.n	8009134 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	8b5b      	ldrh	r3, [r3, #26]
 8009116:	f023 0304 	bic.w	r3, r3, #4
 800911a:	b29a      	uxth	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009142:	10db      	asrs	r3, r3, #3
 8009144:	b21b      	sxth	r3, r3
 8009146:	b29a      	uxth	r2, r3
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800914e:	b29b      	uxth	r3, r3
 8009150:	4413      	add	r3, r2
 8009152:	b29b      	uxth	r3, r3
 8009154:	b21a      	sxth	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800915c:	4b18      	ldr	r3, [pc, #96]	@ (80091c0 <tcp_receive+0x270>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	b29a      	uxth	r2, r3
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009166:	b29b      	uxth	r3, r3
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8009174:	4b12      	ldr	r3, [pc, #72]	@ (80091c0 <tcp_receive+0x270>)
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	7d1b      	ldrb	r3, [r3, #20]
 8009180:	2b03      	cmp	r3, #3
 8009182:	f240 8097 	bls.w	80092b4 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8009192:	429a      	cmp	r2, r3
 8009194:	d245      	bcs.n	8009222 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8b5b      	ldrh	r3, [r3, #26]
 800919a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d014      	beq.n	80091cc <tcp_receive+0x27c>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e013      	b.n	80091ce <tcp_receive+0x27e>
 80091a6:	bf00      	nop
 80091a8:	08010398 	.word	0x08010398
 80091ac:	080106c8 	.word	0x080106c8
 80091b0:	080103e4 	.word	0x080103e4
 80091b4:	080106e4 	.word	0x080106e4
 80091b8:	24007bb0 	.word	0x24007bb0
 80091bc:	24007ba4 	.word	0x24007ba4
 80091c0:	24007ba8 	.word	0x24007ba8
 80091c4:	24007b94 	.word	0x24007b94
 80091c8:	24007bae 	.word	0x24007bae
 80091cc:	2302      	movs	r3, #2
 80091ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80091d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80091dc:	fb12 f303 	smulbb	r3, r2, r3
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80091e4:	4293      	cmp	r3, r2
 80091e6:	bf28      	it	cs
 80091e8:	4613      	movcs	r3, r2
 80091ea:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80091f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80091f4:	4413      	add	r3, r2
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80091fe:	429a      	cmp	r2, r3
 8009200:	d309      	bcc.n	8009216 <tcp_receive+0x2c6>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009208:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800920a:	4413      	add	r3, r2
 800920c:	b29a      	uxth	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009214:	e04e      	b.n	80092b4 <tcp_receive+0x364>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800921c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8009220:	e048      	b.n	80092b4 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8009228:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800922a:	4413      	add	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8009234:	429a      	cmp	r2, r3
 8009236:	d309      	bcc.n	800924c <tcp_receive+0x2fc>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800923e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009240:	4413      	add	r3, r2
 8009242:	b29a      	uxth	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800924a:	e004      	b.n	8009256 <tcp_receive+0x306>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009252:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009262:	429a      	cmp	r2, r3
 8009264:	d326      	bcc.n	80092b4 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009286:	4413      	add	r3, r2
 8009288:	b29a      	uxth	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009290:	429a      	cmp	r2, r3
 8009292:	d30a      	bcc.n	80092aa <tcp_receive+0x35a>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800929e:	4413      	add	r3, r2
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80092a8:	e004      	b.n	80092b4 <tcp_receive+0x364>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092b0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092bc:	4a98      	ldr	r2, [pc, #608]	@ (8009520 <tcp_receive+0x5d0>)
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff fdca 	bl	8008e58 <tcp_free_acked_segments>
 80092c4:	4602      	mov	r2, r0
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d2:	4a94      	ldr	r2, [pc, #592]	@ (8009524 <tcp_receive+0x5d4>)
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fdbf 	bl	8008e58 <tcp_free_acked_segments>
 80092da:	4602      	mov	r2, r0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d104      	bne.n	80092f2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092ee:	861a      	strh	r2, [r3, #48]	@ 0x30
 80092f0:	e002      	b.n	80092f8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8009314:	4b84      	ldr	r3, [pc, #528]	@ (8009528 <tcp_receive+0x5d8>)
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	4413      	add	r3, r2
 800931a:	b29a      	uxth	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	8b5b      	ldrh	r3, [r3, #26]
 8009326:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800932a:	2b00      	cmp	r3, #0
 800932c:	d035      	beq.n	800939a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009332:	2b00      	cmp	r3, #0
 8009334:	d118      	bne.n	8009368 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00c      	beq.n	8009358 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	4618      	mov	r0, r3
 800934c:	f7fb f91d 	bl	800458a <lwip_htonl>
 8009350:	4603      	mov	r3, r0
 8009352:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009354:	2b00      	cmp	r3, #0
 8009356:	dc20      	bgt.n	800939a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	8b5b      	ldrh	r3, [r3, #26]
 800935c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009360:	b29a      	uxth	r2, r3
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009366:	e018      	b.n	800939a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4618      	mov	r0, r3
 8009376:	f7fb f908 	bl	800458a <lwip_htonl>
 800937a:	4603      	mov	r3, r0
 800937c:	1ae3      	subs	r3, r4, r3
 800937e:	2b00      	cmp	r3, #0
 8009380:	dc0b      	bgt.n	800939a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	8b5b      	ldrh	r3, [r3, #26]
 8009386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800938a:	b29a      	uxth	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009390:	e003      	b.n	800939a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f001 ff70 	bl	800b278 <tcp_send_empty_ack>
 8009398:	e000      	b.n	800939c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800939a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d05b      	beq.n	800945c <tcp_receive+0x50c>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80093a8:	4b60      	ldr	r3, [pc, #384]	@ (800952c <tcp_receive+0x5dc>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	da54      	bge.n	800945c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80093b2:	4b5f      	ldr	r3, [pc, #380]	@ (8009530 <tcp_receive+0x5e0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093bc:	b29b      	uxth	r3, r3
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80093c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80093d0:	10db      	asrs	r3, r3, #3
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	1ad3      	subs	r3, r2, r3
 80093d8:	b29b      	uxth	r3, r3
 80093da:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80093ea:	4413      	add	r3, r2
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	b21a      	sxth	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80093f4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da05      	bge.n	8009408 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80093fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009400:	425b      	negs	r3, r3
 8009402:	b29b      	uxth	r3, r3
 8009404:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009408:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009412:	109b      	asrs	r3, r3, #2
 8009414:	b21b      	sxth	r3, r3
 8009416:	b29b      	uxth	r3, r3
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	b29b      	uxth	r3, r3
 800941c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009426:	b29a      	uxth	r2, r3
 8009428:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800942c:	4413      	add	r3, r2
 800942e:	b29b      	uxth	r3, r3
 8009430:	b21a      	sxth	r2, r3
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800943c:	10db      	asrs	r3, r3, #3
 800943e:	b21b      	sxth	r3, r3
 8009440:	b29a      	uxth	r2, r3
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009448:	b29b      	uxth	r3, r3
 800944a:	4413      	add	r3, r2
 800944c:	b29b      	uxth	r3, r3
 800944e:	b21a      	sxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2200      	movs	r2, #0
 800945a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800945c:	4b35      	ldr	r3, [pc, #212]	@ (8009534 <tcp_receive+0x5e4>)
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 84df 	beq.w	8009e24 <tcp_receive+0xed4>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	7d1b      	ldrb	r3, [r3, #20]
 800946a:	2b06      	cmp	r3, #6
 800946c:	f200 84da 	bhi.w	8009e24 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009474:	4b30      	ldr	r3, [pc, #192]	@ (8009538 <tcp_receive+0x5e8>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	1ad3      	subs	r3, r2, r3
 800947a:	3b01      	subs	r3, #1
 800947c:	2b00      	cmp	r3, #0
 800947e:	f2c0 808f 	blt.w	80095a0 <tcp_receive+0x650>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009486:	4b2b      	ldr	r3, [pc, #172]	@ (8009534 <tcp_receive+0x5e4>)
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	4619      	mov	r1, r3
 800948c:	4b2a      	ldr	r3, [pc, #168]	@ (8009538 <tcp_receive+0x5e8>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	440b      	add	r3, r1
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	3301      	adds	r3, #1
 8009496:	2b00      	cmp	r3, #0
 8009498:	f300 8082 	bgt.w	80095a0 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800949c:	4b27      	ldr	r3, [pc, #156]	@ (800953c <tcp_receive+0x5ec>)
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094a6:	4b24      	ldr	r3, [pc, #144]	@ (8009538 <tcp_receive+0x5e8>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	1ad3      	subs	r3, r2, r3
 80094ac:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80094ae:	4b23      	ldr	r3, [pc, #140]	@ (800953c <tcp_receive+0x5ec>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <tcp_receive+0x574>
 80094b6:	4b22      	ldr	r3, [pc, #136]	@ (8009540 <tcp_receive+0x5f0>)
 80094b8:	f240 5294 	movw	r2, #1428	@ 0x594
 80094bc:	4921      	ldr	r1, [pc, #132]	@ (8009544 <tcp_receive+0x5f4>)
 80094be:	4822      	ldr	r0, [pc, #136]	@ (8009548 <tcp_receive+0x5f8>)
 80094c0:	f004 ff3a 	bl	800e338 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d906      	bls.n	80094dc <tcp_receive+0x58c>
 80094ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009540 <tcp_receive+0x5f0>)
 80094d0:	f240 5295 	movw	r2, #1429	@ 0x595
 80094d4:	491d      	ldr	r1, [pc, #116]	@ (800954c <tcp_receive+0x5fc>)
 80094d6:	481c      	ldr	r0, [pc, #112]	@ (8009548 <tcp_receive+0x5f8>)
 80094d8:	f004 ff2e 	bl	800e338 <iprintf>
      off = (u16_t)off32;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094de:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80094e2:	4b16      	ldr	r3, [pc, #88]	@ (800953c <tcp_receive+0x5ec>)
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	891b      	ldrh	r3, [r3, #8]
 80094e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d906      	bls.n	80094fe <tcp_receive+0x5ae>
 80094f0:	4b13      	ldr	r3, [pc, #76]	@ (8009540 <tcp_receive+0x5f0>)
 80094f2:	f240 5297 	movw	r2, #1431	@ 0x597
 80094f6:	4916      	ldr	r1, [pc, #88]	@ (8009550 <tcp_receive+0x600>)
 80094f8:	4813      	ldr	r0, [pc, #76]	@ (8009548 <tcp_receive+0x5f8>)
 80094fa:	f004 ff1d 	bl	800e338 <iprintf>
      inseg.len -= off;
 80094fe:	4b0f      	ldr	r3, [pc, #60]	@ (800953c <tcp_receive+0x5ec>)
 8009500:	891a      	ldrh	r2, [r3, #8]
 8009502:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009506:	1ad3      	subs	r3, r2, r3
 8009508:	b29a      	uxth	r2, r3
 800950a:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <tcp_receive+0x5ec>)
 800950c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800950e:	4b0b      	ldr	r3, [pc, #44]	@ (800953c <tcp_receive+0x5ec>)
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	891a      	ldrh	r2, [r3, #8]
 8009514:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800951c:	e02a      	b.n	8009574 <tcp_receive+0x624>
 800951e:	bf00      	nop
 8009520:	08010700 	.word	0x08010700
 8009524:	08010708 	.word	0x08010708
 8009528:	24007bac 	.word	0x24007bac
 800952c:	24007ba8 	.word	0x24007ba8
 8009530:	24007b6c 	.word	0x24007b6c
 8009534:	24007bae 	.word	0x24007bae
 8009538:	24007ba4 	.word	0x24007ba4
 800953c:	24007b84 	.word	0x24007b84
 8009540:	08010398 	.word	0x08010398
 8009544:	08010710 	.word	0x08010710
 8009548:	080103e4 	.word	0x080103e4
 800954c:	08010720 	.word	0x08010720
 8009550:	08010730 	.word	0x08010730
        off -= p->len;
 8009554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009556:	895b      	ldrh	r3, [r3, #10]
 8009558:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009564:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8009566:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8009568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800956a:	2200      	movs	r2, #0
 800956c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800956e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8009574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009576:	895b      	ldrh	r3, [r3, #10]
 8009578:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800957c:	429a      	cmp	r2, r3
 800957e:	d8e9      	bhi.n	8009554 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009580:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009584:	4619      	mov	r1, r3
 8009586:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8009588:	f7fc fb7a 	bl	8005c80 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009590:	4a90      	ldr	r2, [pc, #576]	@ (80097d4 <tcp_receive+0x884>)
 8009592:	6013      	str	r3, [r2, #0]
 8009594:	4b90      	ldr	r3, [pc, #576]	@ (80097d8 <tcp_receive+0x888>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a8e      	ldr	r2, [pc, #568]	@ (80097d4 <tcp_receive+0x884>)
 800959a:	6812      	ldr	r2, [r2, #0]
 800959c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800959e:	e00d      	b.n	80095bc <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80095a0:	4b8c      	ldr	r3, [pc, #560]	@ (80097d4 <tcp_receive+0x884>)
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	da06      	bge.n	80095bc <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	8b5b      	ldrh	r3, [r3, #26]
 80095b2:	f043 0302 	orr.w	r3, r3, #2
 80095b6:	b29a      	uxth	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095bc:	4b85      	ldr	r3, [pc, #532]	@ (80097d4 <tcp_receive+0x884>)
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f2c0 8427 	blt.w	8009e1a <tcp_receive+0xeca>
 80095cc:	4b81      	ldr	r3, [pc, #516]	@ (80097d4 <tcp_receive+0x884>)
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d4:	6879      	ldr	r1, [r7, #4]
 80095d6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80095d8:	440b      	add	r3, r1
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	3301      	adds	r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f300 841b 	bgt.w	8009e1a <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095e8:	4b7a      	ldr	r3, [pc, #488]	@ (80097d4 <tcp_receive+0x884>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	f040 8298 	bne.w	8009b22 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80095f2:	4b79      	ldr	r3, [pc, #484]	@ (80097d8 <tcp_receive+0x888>)
 80095f4:	891c      	ldrh	r4, [r3, #8]
 80095f6:	4b78      	ldr	r3, [pc, #480]	@ (80097d8 <tcp_receive+0x888>)
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	899b      	ldrh	r3, [r3, #12]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fa ffae 	bl	8004560 <lwip_htons>
 8009604:	4603      	mov	r3, r0
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0303 	and.w	r3, r3, #3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <tcp_receive+0x6c4>
 8009610:	2301      	movs	r3, #1
 8009612:	e000      	b.n	8009616 <tcp_receive+0x6c6>
 8009614:	2300      	movs	r3, #0
 8009616:	4423      	add	r3, r4
 8009618:	b29a      	uxth	r2, r3
 800961a:	4b70      	ldr	r3, [pc, #448]	@ (80097dc <tcp_receive+0x88c>)
 800961c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009622:	4b6e      	ldr	r3, [pc, #440]	@ (80097dc <tcp_receive+0x88c>)
 8009624:	881b      	ldrh	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d274      	bcs.n	8009714 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800962a:	4b6b      	ldr	r3, [pc, #428]	@ (80097d8 <tcp_receive+0x888>)
 800962c:	68db      	ldr	r3, [r3, #12]
 800962e:	899b      	ldrh	r3, [r3, #12]
 8009630:	b29b      	uxth	r3, r3
 8009632:	4618      	mov	r0, r3
 8009634:	f7fa ff94 	bl	8004560 <lwip_htons>
 8009638:	4603      	mov	r3, r0
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	d01e      	beq.n	8009682 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009644:	4b64      	ldr	r3, [pc, #400]	@ (80097d8 <tcp_receive+0x888>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	899b      	ldrh	r3, [r3, #12]
 800964a:	b29b      	uxth	r3, r3
 800964c:	b21b      	sxth	r3, r3
 800964e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009652:	b21c      	sxth	r4, r3
 8009654:	4b60      	ldr	r3, [pc, #384]	@ (80097d8 <tcp_receive+0x888>)
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	899b      	ldrh	r3, [r3, #12]
 800965a:	b29b      	uxth	r3, r3
 800965c:	4618      	mov	r0, r3
 800965e:	f7fa ff7f 	bl	8004560 <lwip_htons>
 8009662:	4603      	mov	r3, r0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800966a:	b29b      	uxth	r3, r3
 800966c:	4618      	mov	r0, r3
 800966e:	f7fa ff77 	bl	8004560 <lwip_htons>
 8009672:	4603      	mov	r3, r0
 8009674:	b21b      	sxth	r3, r3
 8009676:	4323      	orrs	r3, r4
 8009678:	b21a      	sxth	r2, r3
 800967a:	4b57      	ldr	r3, [pc, #348]	@ (80097d8 <tcp_receive+0x888>)
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	b292      	uxth	r2, r2
 8009680:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009686:	4b54      	ldr	r3, [pc, #336]	@ (80097d8 <tcp_receive+0x888>)
 8009688:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800968a:	4b53      	ldr	r3, [pc, #332]	@ (80097d8 <tcp_receive+0x888>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	899b      	ldrh	r3, [r3, #12]
 8009690:	b29b      	uxth	r3, r3
 8009692:	4618      	mov	r0, r3
 8009694:	f7fa ff64 	bl	8004560 <lwip_htons>
 8009698:	4603      	mov	r3, r0
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0302 	and.w	r3, r3, #2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d005      	beq.n	80096b0 <tcp_receive+0x760>
            inseg.len -= 1;
 80096a4:	4b4c      	ldr	r3, [pc, #304]	@ (80097d8 <tcp_receive+0x888>)
 80096a6:	891b      	ldrh	r3, [r3, #8]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	4b4a      	ldr	r3, [pc, #296]	@ (80097d8 <tcp_receive+0x888>)
 80096ae:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80096b0:	4b49      	ldr	r3, [pc, #292]	@ (80097d8 <tcp_receive+0x888>)
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	4a48      	ldr	r2, [pc, #288]	@ (80097d8 <tcp_receive+0x888>)
 80096b6:	8912      	ldrh	r2, [r2, #8]
 80096b8:	4611      	mov	r1, r2
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fc f9e0 	bl	8005a80 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80096c0:	4b45      	ldr	r3, [pc, #276]	@ (80097d8 <tcp_receive+0x888>)
 80096c2:	891c      	ldrh	r4, [r3, #8]
 80096c4:	4b44      	ldr	r3, [pc, #272]	@ (80097d8 <tcp_receive+0x888>)
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	899b      	ldrh	r3, [r3, #12]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fa ff47 	bl	8004560 <lwip_htons>
 80096d2:	4603      	mov	r3, r0
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d001      	beq.n	80096e2 <tcp_receive+0x792>
 80096de:	2301      	movs	r3, #1
 80096e0:	e000      	b.n	80096e4 <tcp_receive+0x794>
 80096e2:	2300      	movs	r3, #0
 80096e4:	4423      	add	r3, r4
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	4b3c      	ldr	r3, [pc, #240]	@ (80097dc <tcp_receive+0x88c>)
 80096ea:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80096ec:	4b3b      	ldr	r3, [pc, #236]	@ (80097dc <tcp_receive+0x88c>)
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	4b38      	ldr	r3, [pc, #224]	@ (80097d4 <tcp_receive+0x884>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	441a      	add	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fc:	6879      	ldr	r1, [r7, #4]
 80096fe:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009700:	440b      	add	r3, r1
 8009702:	429a      	cmp	r2, r3
 8009704:	d006      	beq.n	8009714 <tcp_receive+0x7c4>
 8009706:	4b36      	ldr	r3, [pc, #216]	@ (80097e0 <tcp_receive+0x890>)
 8009708:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800970c:	4935      	ldr	r1, [pc, #212]	@ (80097e4 <tcp_receive+0x894>)
 800970e:	4836      	ldr	r0, [pc, #216]	@ (80097e8 <tcp_receive+0x898>)
 8009710:	f004 fe12 	bl	800e338 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80e6 	beq.w	80098ea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800971e:	4b2e      	ldr	r3, [pc, #184]	@ (80097d8 <tcp_receive+0x888>)
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	899b      	ldrh	r3, [r3, #12]
 8009724:	b29b      	uxth	r3, r3
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa ff1a 	bl	8004560 <lwip_htons>
 800972c:	4603      	mov	r3, r0
 800972e:	b2db      	uxtb	r3, r3
 8009730:	f003 0301 	and.w	r3, r3, #1
 8009734:	2b00      	cmp	r3, #0
 8009736:	d010      	beq.n	800975a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009738:	e00a      	b.n	8009750 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800973e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7fd fd93 	bl	8007276 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1f0      	bne.n	800973a <tcp_receive+0x7ea>
 8009758:	e0c7      	b.n	80098ea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009760:	e051      	b.n	8009806 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	68db      	ldr	r3, [r3, #12]
 8009766:	899b      	ldrh	r3, [r3, #12]
 8009768:	b29b      	uxth	r3, r3
 800976a:	4618      	mov	r0, r3
 800976c:	f7fa fef8 	bl	8004560 <lwip_htons>
 8009770:	4603      	mov	r3, r0
 8009772:	b2db      	uxtb	r3, r3
 8009774:	f003 0301 	and.w	r3, r3, #1
 8009778:	2b00      	cmp	r3, #0
 800977a:	d03c      	beq.n	80097f6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800977c:	4b16      	ldr	r3, [pc, #88]	@ (80097d8 <tcp_receive+0x888>)
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	899b      	ldrh	r3, [r3, #12]
 8009782:	b29b      	uxth	r3, r3
 8009784:	4618      	mov	r0, r3
 8009786:	f7fa feeb 	bl	8004560 <lwip_htons>
 800978a:	4603      	mov	r3, r0
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009792:	2b00      	cmp	r3, #0
 8009794:	d12f      	bne.n	80097f6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009796:	4b10      	ldr	r3, [pc, #64]	@ (80097d8 <tcp_receive+0x888>)
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	899b      	ldrh	r3, [r3, #12]
 800979c:	b29c      	uxth	r4, r3
 800979e:	2001      	movs	r0, #1
 80097a0:	f7fa fede 	bl	8004560 <lwip_htons>
 80097a4:	4603      	mov	r3, r0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b0b      	ldr	r3, [pc, #44]	@ (80097d8 <tcp_receive+0x888>)
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	4322      	orrs	r2, r4
 80097ae:	b292      	uxth	r2, r2
 80097b0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80097b2:	4b09      	ldr	r3, [pc, #36]	@ (80097d8 <tcp_receive+0x888>)
 80097b4:	891c      	ldrh	r4, [r3, #8]
 80097b6:	4b08      	ldr	r3, [pc, #32]	@ (80097d8 <tcp_receive+0x888>)
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	899b      	ldrh	r3, [r3, #12]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fa fece 	bl	8004560 <lwip_htons>
 80097c4:	4603      	mov	r3, r0
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0303 	and.w	r3, r3, #3
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00d      	beq.n	80097ec <tcp_receive+0x89c>
 80097d0:	2301      	movs	r3, #1
 80097d2:	e00c      	b.n	80097ee <tcp_receive+0x89e>
 80097d4:	24007ba4 	.word	0x24007ba4
 80097d8:	24007b84 	.word	0x24007b84
 80097dc:	24007bae 	.word	0x24007bae
 80097e0:	08010398 	.word	0x08010398
 80097e4:	08010740 	.word	0x08010740
 80097e8:	080103e4 	.word	0x080103e4
 80097ec:	2300      	movs	r3, #0
 80097ee:	4423      	add	r3, r4
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	4b98      	ldr	r3, [pc, #608]	@ (8009a54 <tcp_receive+0xb04>)
 80097f4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80097f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80097fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8009800:	6938      	ldr	r0, [r7, #16]
 8009802:	f7fd fd38 	bl	8007276 <tcp_seg_free>
            while (next &&
 8009806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d00e      	beq.n	800982a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800980c:	4b91      	ldr	r3, [pc, #580]	@ (8009a54 <tcp_receive+0xb04>)
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	4b91      	ldr	r3, [pc, #580]	@ (8009a58 <tcp_receive+0xb08>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	441a      	add	r2, r3
 8009818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009820:	8909      	ldrh	r1, [r1, #8]
 8009822:	440b      	add	r3, r1
 8009824:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009826:	2b00      	cmp	r3, #0
 8009828:	da9b      	bge.n	8009762 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800982a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d059      	beq.n	80098e4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009830:	4b88      	ldr	r3, [pc, #544]	@ (8009a54 <tcp_receive+0xb04>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	461a      	mov	r2, r3
 8009836:	4b88      	ldr	r3, [pc, #544]	@ (8009a58 <tcp_receive+0xb08>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	441a      	add	r2, r3
 800983c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009844:	2b00      	cmp	r3, #0
 8009846:	dd4d      	ble.n	80098e4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800984a:	68db      	ldr	r3, [r3, #12]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	b29a      	uxth	r2, r3
 8009850:	4b81      	ldr	r3, [pc, #516]	@ (8009a58 <tcp_receive+0xb08>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	b29b      	uxth	r3, r3
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	b29a      	uxth	r2, r3
 800985a:	4b80      	ldr	r3, [pc, #512]	@ (8009a5c <tcp_receive+0xb0c>)
 800985c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800985e:	4b7f      	ldr	r3, [pc, #508]	@ (8009a5c <tcp_receive+0xb0c>)
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	899b      	ldrh	r3, [r3, #12]
 8009864:	b29b      	uxth	r3, r3
 8009866:	4618      	mov	r0, r3
 8009868:	f7fa fe7a 	bl	8004560 <lwip_htons>
 800986c:	4603      	mov	r3, r0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	f003 0302 	and.w	r3, r3, #2
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <tcp_receive+0x934>
                inseg.len -= 1;
 8009878:	4b78      	ldr	r3, [pc, #480]	@ (8009a5c <tcp_receive+0xb0c>)
 800987a:	891b      	ldrh	r3, [r3, #8]
 800987c:	3b01      	subs	r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	4b76      	ldr	r3, [pc, #472]	@ (8009a5c <tcp_receive+0xb0c>)
 8009882:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8009884:	4b75      	ldr	r3, [pc, #468]	@ (8009a5c <tcp_receive+0xb0c>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4a74      	ldr	r2, [pc, #464]	@ (8009a5c <tcp_receive+0xb0c>)
 800988a:	8912      	ldrh	r2, [r2, #8]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7fc f8f6 	bl	8005a80 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009894:	4b71      	ldr	r3, [pc, #452]	@ (8009a5c <tcp_receive+0xb0c>)
 8009896:	891c      	ldrh	r4, [r3, #8]
 8009898:	4b70      	ldr	r3, [pc, #448]	@ (8009a5c <tcp_receive+0xb0c>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	899b      	ldrh	r3, [r3, #12]
 800989e:	b29b      	uxth	r3, r3
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fa fe5d 	bl	8004560 <lwip_htons>
 80098a6:	4603      	mov	r3, r0
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <tcp_receive+0x966>
 80098b2:	2301      	movs	r3, #1
 80098b4:	e000      	b.n	80098b8 <tcp_receive+0x968>
 80098b6:	2300      	movs	r3, #0
 80098b8:	4423      	add	r3, r4
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	4b65      	ldr	r3, [pc, #404]	@ (8009a54 <tcp_receive+0xb04>)
 80098be:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80098c0:	4b64      	ldr	r3, [pc, #400]	@ (8009a54 <tcp_receive+0xb04>)
 80098c2:	881b      	ldrh	r3, [r3, #0]
 80098c4:	461a      	mov	r2, r3
 80098c6:	4b64      	ldr	r3, [pc, #400]	@ (8009a58 <tcp_receive+0xb08>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	441a      	add	r2, r3
 80098cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d006      	beq.n	80098e4 <tcp_receive+0x994>
 80098d6:	4b62      	ldr	r3, [pc, #392]	@ (8009a60 <tcp_receive+0xb10>)
 80098d8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80098dc:	4961      	ldr	r1, [pc, #388]	@ (8009a64 <tcp_receive+0xb14>)
 80098de:	4862      	ldr	r0, [pc, #392]	@ (8009a68 <tcp_receive+0xb18>)
 80098e0:	f004 fd2a 	bl	800e338 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80098e8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80098ea:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <tcp_receive+0xb04>)
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	461a      	mov	r2, r3
 80098f0:	4b59      	ldr	r3, [pc, #356]	@ (8009a58 <tcp_receive+0xb08>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	441a      	add	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80098fe:	4b55      	ldr	r3, [pc, #340]	@ (8009a54 <tcp_receive+0xb04>)
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	429a      	cmp	r2, r3
 8009904:	d206      	bcs.n	8009914 <tcp_receive+0x9c4>
 8009906:	4b56      	ldr	r3, [pc, #344]	@ (8009a60 <tcp_receive+0xb10>)
 8009908:	f240 6207 	movw	r2, #1543	@ 0x607
 800990c:	4957      	ldr	r1, [pc, #348]	@ (8009a6c <tcp_receive+0xb1c>)
 800990e:	4856      	ldr	r0, [pc, #344]	@ (8009a68 <tcp_receive+0xb18>)
 8009910:	f004 fd12 	bl	800e338 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009918:	4b4e      	ldr	r3, [pc, #312]	@ (8009a54 <tcp_receive+0xb04>)
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7fc ffc5 	bl	80068b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800992a:	4b4c      	ldr	r3, [pc, #304]	@ (8009a5c <tcp_receive+0xb0c>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	891b      	ldrh	r3, [r3, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009934:	4b49      	ldr	r3, [pc, #292]	@ (8009a5c <tcp_receive+0xb0c>)
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4a4d      	ldr	r2, [pc, #308]	@ (8009a70 <tcp_receive+0xb20>)
 800993a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800993c:	4b47      	ldr	r3, [pc, #284]	@ (8009a5c <tcp_receive+0xb0c>)
 800993e:	2200      	movs	r2, #0
 8009940:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009942:	4b46      	ldr	r3, [pc, #280]	@ (8009a5c <tcp_receive+0xb0c>)
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	899b      	ldrh	r3, [r3, #12]
 8009948:	b29b      	uxth	r3, r3
 800994a:	4618      	mov	r0, r3
 800994c:	f7fa fe08 	bl	8004560 <lwip_htons>
 8009950:	4603      	mov	r3, r0
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f003 0301 	and.w	r3, r3, #1
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80b8 	beq.w	8009ace <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800995e:	4b45      	ldr	r3, [pc, #276]	@ (8009a74 <tcp_receive+0xb24>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	f043 0320 	orr.w	r3, r3, #32
 8009966:	b2da      	uxtb	r2, r3
 8009968:	4b42      	ldr	r3, [pc, #264]	@ (8009a74 <tcp_receive+0xb24>)
 800996a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800996c:	e0af      	b.n	8009ace <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009972:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	4a36      	ldr	r2, [pc, #216]	@ (8009a58 <tcp_receive+0xb08>)
 800997e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	891b      	ldrh	r3, [r3, #8]
 8009984:	461c      	mov	r4, r3
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	899b      	ldrh	r3, [r3, #12]
 800998c:	b29b      	uxth	r3, r3
 800998e:	4618      	mov	r0, r3
 8009990:	f7fa fde6 	bl	8004560 <lwip_htons>
 8009994:	4603      	mov	r3, r0
 8009996:	b2db      	uxtb	r3, r3
 8009998:	f003 0303 	and.w	r3, r3, #3
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <tcp_receive+0xa54>
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <tcp_receive+0xa56>
 80099a4:	2300      	movs	r3, #0
 80099a6:	191a      	adds	r2, r3, r4
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ac:	441a      	add	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099b6:	461c      	mov	r4, r3
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	891b      	ldrh	r3, [r3, #8]
 80099bc:	461d      	mov	r5, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	899b      	ldrh	r3, [r3, #12]
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fa fdca 	bl	8004560 <lwip_htons>
 80099cc:	4603      	mov	r3, r0
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	f003 0303 	and.w	r3, r3, #3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <tcp_receive+0xa8c>
 80099d8:	2301      	movs	r3, #1
 80099da:	e000      	b.n	80099de <tcp_receive+0xa8e>
 80099dc:	2300      	movs	r3, #0
 80099de:	442b      	add	r3, r5
 80099e0:	429c      	cmp	r4, r3
 80099e2:	d206      	bcs.n	80099f2 <tcp_receive+0xaa2>
 80099e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009a60 <tcp_receive+0xb10>)
 80099e6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80099ea:	4923      	ldr	r1, [pc, #140]	@ (8009a78 <tcp_receive+0xb28>)
 80099ec:	481e      	ldr	r0, [pc, #120]	@ (8009a68 <tcp_receive+0xb18>)
 80099ee:	f004 fca3 	bl	800e338 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	891b      	ldrh	r3, [r3, #8]
 80099f6:	461c      	mov	r4, r3
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fa fdad 	bl	8004560 <lwip_htons>
 8009a06:	4603      	mov	r3, r0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d001      	beq.n	8009a16 <tcp_receive+0xac6>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e000      	b.n	8009a18 <tcp_receive+0xac8>
 8009a16:	2300      	movs	r3, #0
 8009a18:	1919      	adds	r1, r3, r4
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009a1e:	b28b      	uxth	r3, r1
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f7fc ff43 	bl	80068b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	891b      	ldrh	r3, [r3, #8]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d028      	beq.n	8009a8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009a38:	4b0d      	ldr	r3, [pc, #52]	@ (8009a70 <tcp_receive+0xb20>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d01d      	beq.n	8009a7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009a40:	4b0b      	ldr	r3, [pc, #44]	@ (8009a70 <tcp_receive+0xb20>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fc fa60 	bl	8005f10 <pbuf_cat>
 8009a50:	e018      	b.n	8009a84 <tcp_receive+0xb34>
 8009a52:	bf00      	nop
 8009a54:	24007bae 	.word	0x24007bae
 8009a58:	24007ba4 	.word	0x24007ba4
 8009a5c:	24007b84 	.word	0x24007b84
 8009a60:	08010398 	.word	0x08010398
 8009a64:	08010778 	.word	0x08010778
 8009a68:	080103e4 	.word	0x080103e4
 8009a6c:	080107b4 	.word	0x080107b4
 8009a70:	24007bb4 	.word	0x24007bb4
 8009a74:	24007bb1 	.word	0x24007bb1
 8009a78:	080107d4 	.word	0x080107d4
            } else {
              recv_data = cseg->p;
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a70      	ldr	r2, [pc, #448]	@ (8009c44 <tcp_receive+0xcf4>)
 8009a82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	899b      	ldrh	r3, [r3, #12]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fa fd64 	bl	8004560 <lwip_htons>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	f003 0301 	and.w	r3, r3, #1
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00d      	beq.n	8009ac0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8009aa4:	4b68      	ldr	r3, [pc, #416]	@ (8009c48 <tcp_receive+0xcf8>)
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	f043 0320 	orr.w	r3, r3, #32
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	4b66      	ldr	r3, [pc, #408]	@ (8009c48 <tcp_receive+0xcf8>)
 8009ab0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7d1b      	ldrb	r3, [r3, #20]
 8009ab6:	2b04      	cmp	r3, #4
 8009ab8:	d102      	bne.n	8009ac0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2207      	movs	r2, #7
 8009abe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8009ac8:	68b8      	ldr	r0, [r7, #8]
 8009aca:	f7fd fbd4 	bl	8007276 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	685a      	ldr	r2, [r3, #4]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	f43f af43 	beq.w	800996e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	8b5b      	ldrh	r3, [r3, #26]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00e      	beq.n	8009b12 <tcp_receive+0xbc2>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	8b5b      	ldrh	r3, [r3, #26]
 8009af8:	f023 0301 	bic.w	r3, r3, #1
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	835a      	strh	r2, [r3, #26]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	8b5b      	ldrh	r3, [r3, #26]
 8009b06:	f043 0302 	orr.w	r3, r3, #2
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b10:	e187      	b.n	8009e22 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	8b5b      	ldrh	r3, [r3, #26]
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009b20:	e17f      	b.n	8009e22 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d106      	bne.n	8009b38 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009b2a:	4848      	ldr	r0, [pc, #288]	@ (8009c4c <tcp_receive+0xcfc>)
 8009b2c:	f7fd fbbc 	bl	80072a8 <tcp_seg_copy>
 8009b30:	4602      	mov	r2, r0
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	675a      	str	r2, [r3, #116]	@ 0x74
 8009b36:	e16c      	b.n	8009e12 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b42:	e156      	b.n	8009df2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8009b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	4b41      	ldr	r3, [pc, #260]	@ (8009c50 <tcp_receive+0xd00>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d11d      	bne.n	8009b8e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009b52:	4b3e      	ldr	r3, [pc, #248]	@ (8009c4c <tcp_receive+0xcfc>)
 8009b54:	891a      	ldrh	r2, [r3, #8]
 8009b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b58:	891b      	ldrh	r3, [r3, #8]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	f240 814e 	bls.w	8009dfc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009b60:	483a      	ldr	r0, [pc, #232]	@ (8009c4c <tcp_receive+0xcfc>)
 8009b62:	f7fd fba1 	bl	80072a8 <tcp_seg_copy>
 8009b66:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f000 8148 	beq.w	8009e00 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8009b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8009b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b78:	697a      	ldr	r2, [r7, #20]
 8009b7a:	601a      	str	r2, [r3, #0]
 8009b7c:	e002      	b.n	8009b84 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009b84:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b86:	6978      	ldr	r0, [r7, #20]
 8009b88:	f7ff f8de 	bl	8008d48 <tcp_oos_insert_segment>
                }
                break;
 8009b8c:	e138      	b.n	8009e00 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d117      	bne.n	8009bc4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009b94:	4b2e      	ldr	r3, [pc, #184]	@ (8009c50 <tcp_receive+0xd00>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	da57      	bge.n	8009c54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ba4:	4829      	ldr	r0, [pc, #164]	@ (8009c4c <tcp_receive+0xcfc>)
 8009ba6:	f7fd fb7f 	bl	80072a8 <tcp_seg_copy>
 8009baa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 8128 	beq.w	8009e04 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009bba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009bbc:	69b8      	ldr	r0, [r7, #24]
 8009bbe:	f7ff f8c3 	bl	8008d48 <tcp_oos_insert_segment>
                  }
                  break;
 8009bc2:	e11f      	b.n	8009e04 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009bc4:	4b22      	ldr	r3, [pc, #136]	@ (8009c50 <tcp_receive+0xd00>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	db3e      	blt.n	8009c54 <tcp_receive+0xd04>
 8009bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8009c50 <tcp_receive+0xd00>)
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	3301      	adds	r3, #1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	dc35      	bgt.n	8009c54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009be8:	4818      	ldr	r0, [pc, #96]	@ (8009c4c <tcp_receive+0xcfc>)
 8009bea:	f7fd fb5d 	bl	80072a8 <tcp_seg_copy>
 8009bee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 8108 	beq.w	8009e08 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c00:	8912      	ldrh	r2, [r2, #8]
 8009c02:	441a      	add	r2, r3
 8009c04:	4b12      	ldr	r3, [pc, #72]	@ (8009c50 <tcp_receive+0xd00>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	dd12      	ble.n	8009c34 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009c0e:	4b10      	ldr	r3, [pc, #64]	@ (8009c50 <tcp_receive+0xd00>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c2a:	891b      	ldrh	r3, [r3, #8]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4610      	mov	r0, r2
 8009c30:	f7fb ff26 	bl	8005a80 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009c3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c3c:	69f8      	ldr	r0, [r7, #28]
 8009c3e:	f7ff f883 	bl	8008d48 <tcp_oos_insert_segment>
                  }
                  break;
 8009c42:	e0e1      	b.n	8009e08 <tcp_receive+0xeb8>
 8009c44:	24007bb4 	.word	0x24007bb4
 8009c48:	24007bb1 	.word	0x24007bb1
 8009c4c:	24007b84 	.word	0x24007b84
 8009c50:	24007ba4 	.word	0x24007ba4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c56:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f040 80c5 	bne.w	8009dec <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009c62:	4b7f      	ldr	r3, [pc, #508]	@ (8009e60 <tcp_receive+0xf10>)
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	f340 80bc 	ble.w	8009dec <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	899b      	ldrh	r3, [r3, #12]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fa fc6f 	bl	8004560 <lwip_htons>
 8009c82:	4603      	mov	r3, r0
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 80be 	bne.w	8009e0c <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009c90:	4874      	ldr	r0, [pc, #464]	@ (8009e64 <tcp_receive+0xf14>)
 8009c92:	f7fd fb09 	bl	80072a8 <tcp_seg_copy>
 8009c96:	4602      	mov	r2, r0
 8009c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 80b5 	beq.w	8009e10 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cae:	8912      	ldrh	r2, [r2, #8]
 8009cb0:	441a      	add	r2, r3
 8009cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8009e60 <tcp_receive+0xf10>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dd12      	ble.n	8009ce2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009cbc:	4b68      	ldr	r3, [pc, #416]	@ (8009e60 <tcp_receive+0xf10>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	b29a      	uxth	r2, r3
 8009cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cd8:	891b      	ldrh	r3, [r3, #8]
 8009cda:	4619      	mov	r1, r3
 8009cdc:	4610      	mov	r0, r2
 8009cde:	f7fb fecf 	bl	8005a80 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009ce2:	4b61      	ldr	r3, [pc, #388]	@ (8009e68 <tcp_receive+0xf18>)
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	4b5d      	ldr	r3, [pc, #372]	@ (8009e60 <tcp_receive+0xf10>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	441a      	add	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cf2:	6879      	ldr	r1, [r7, #4]
 8009cf4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009cf6:	440b      	add	r3, r1
 8009cf8:	1ad3      	subs	r3, r2, r3
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f340 8088 	ble.w	8009e10 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	899b      	ldrh	r3, [r3, #12]
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fa fc28 	bl	8004560 <lwip_htons>
 8009d10:	4603      	mov	r3, r0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d021      	beq.n	8009d60 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	899b      	ldrh	r3, [r3, #12]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	b21b      	sxth	r3, r3
 8009d28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009d2c:	b21c      	sxth	r4, r3
 8009d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	899b      	ldrh	r3, [r3, #12]
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fa fc11 	bl	8004560 <lwip_htons>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fa fc09 	bl	8004560 <lwip_htons>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	b21b      	sxth	r3, r3
 8009d52:	4323      	orrs	r3, r4
 8009d54:	b21a      	sxth	r2, r3
 8009d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	b292      	uxth	r2, r2
 8009d5e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d6a:	4413      	add	r3, r2
 8009d6c:	b299      	uxth	r1, r3
 8009d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8009e60 <tcp_receive+0xf10>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1a8a      	subs	r2, r1, r2
 8009d7a:	b292      	uxth	r2, r2
 8009d7c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	891b      	ldrh	r3, [r3, #8]
 8009d8a:	4619      	mov	r1, r3
 8009d8c:	4610      	mov	r0, r2
 8009d8e:	f7fb fe77 	bl	8005a80 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	891c      	ldrh	r4, [r3, #8]
 8009d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	899b      	ldrh	r3, [r3, #12]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fa fbdc 	bl	8004560 <lwip_htons>
 8009da8:	4603      	mov	r3, r0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d001      	beq.n	8009db8 <tcp_receive+0xe68>
 8009db4:	2301      	movs	r3, #1
 8009db6:	e000      	b.n	8009dba <tcp_receive+0xe6a>
 8009db8:	2300      	movs	r3, #0
 8009dba:	4423      	add	r3, r4
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8009e68 <tcp_receive+0xf18>)
 8009dc0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009dc2:	4b29      	ldr	r3, [pc, #164]	@ (8009e68 <tcp_receive+0xf18>)
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	4b25      	ldr	r3, [pc, #148]	@ (8009e60 <tcp_receive+0xf10>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	441a      	add	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	6879      	ldr	r1, [r7, #4]
 8009dd4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009dd6:	440b      	add	r3, r1
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d019      	beq.n	8009e10 <tcp_receive+0xec0>
 8009ddc:	4b23      	ldr	r3, [pc, #140]	@ (8009e6c <tcp_receive+0xf1c>)
 8009dde:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8009de2:	4923      	ldr	r1, [pc, #140]	@ (8009e70 <tcp_receive+0xf20>)
 8009de4:	4823      	ldr	r0, [pc, #140]	@ (8009e74 <tcp_receive+0xf24>)
 8009de6:	f004 faa7 	bl	800e338 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009dea:	e011      	b.n	8009e10 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f47f aea5 	bne.w	8009b44 <tcp_receive+0xbf4>
 8009dfa:	e00a      	b.n	8009e12 <tcp_receive+0xec2>
                break;
 8009dfc:	bf00      	nop
 8009dfe:	e008      	b.n	8009e12 <tcp_receive+0xec2>
                break;
 8009e00:	bf00      	nop
 8009e02:	e006      	b.n	8009e12 <tcp_receive+0xec2>
                  break;
 8009e04:	bf00      	nop
 8009e06:	e004      	b.n	8009e12 <tcp_receive+0xec2>
                  break;
 8009e08:	bf00      	nop
 8009e0a:	e002      	b.n	8009e12 <tcp_receive+0xec2>
                  break;
 8009e0c:	bf00      	nop
 8009e0e:	e000      	b.n	8009e12 <tcp_receive+0xec2>
                break;
 8009e10:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f001 fa30 	bl	800b278 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009e18:	e003      	b.n	8009e22 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fa2c 	bl	800b278 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e20:	e01a      	b.n	8009e58 <tcp_receive+0xf08>
 8009e22:	e019      	b.n	8009e58 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009e24:	4b0e      	ldr	r3, [pc, #56]	@ (8009e60 <tcp_receive+0xf10>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	db0a      	blt.n	8009e48 <tcp_receive+0xef8>
 8009e32:	4b0b      	ldr	r3, [pc, #44]	@ (8009e60 <tcp_receive+0xf10>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3a:	6879      	ldr	r1, [r7, #4]
 8009e3c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8009e3e:	440b      	add	r3, r1
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	3301      	adds	r3, #1
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dd07      	ble.n	8009e58 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	8b5b      	ldrh	r3, [r3, #26]
 8009e4c:	f043 0302 	orr.w	r3, r3, #2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009e56:	e7ff      	b.n	8009e58 <tcp_receive+0xf08>
 8009e58:	bf00      	nop
 8009e5a:	3750      	adds	r7, #80	@ 0x50
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e60:	24007ba4 	.word	0x24007ba4
 8009e64:	24007b84 	.word	0x24007b84
 8009e68:	24007bae 	.word	0x24007bae
 8009e6c:	08010398 	.word	0x08010398
 8009e70:	08010740 	.word	0x08010740
 8009e74:	080103e4 	.word	0x080103e4

08009e78 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009e7e:	4b15      	ldr	r3, [pc, #84]	@ (8009ed4 <tcp_get_next_optbyte+0x5c>)
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	b291      	uxth	r1, r2
 8009e86:	4a13      	ldr	r2, [pc, #76]	@ (8009ed4 <tcp_get_next_optbyte+0x5c>)
 8009e88:	8011      	strh	r1, [r2, #0]
 8009e8a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009e8c:	4b12      	ldr	r3, [pc, #72]	@ (8009ed8 <tcp_get_next_optbyte+0x60>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <tcp_get_next_optbyte+0x26>
 8009e94:	4b11      	ldr	r3, [pc, #68]	@ (8009edc <tcp_get_next_optbyte+0x64>)
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	88fa      	ldrh	r2, [r7, #6]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d208      	bcs.n	8009eb0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009e9e:	4b10      	ldr	r3, [pc, #64]	@ (8009ee0 <tcp_get_next_optbyte+0x68>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3314      	adds	r3, #20
 8009ea4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	4413      	add	r3, r2
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	e00b      	b.n	8009ec8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009eb0:	88fb      	ldrh	r3, [r7, #6]
 8009eb2:	b2da      	uxtb	r2, r3
 8009eb4:	4b09      	ldr	r3, [pc, #36]	@ (8009edc <tcp_get_next_optbyte+0x64>)
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009ebe:	4b06      	ldr	r3, [pc, #24]	@ (8009ed8 <tcp_get_next_optbyte+0x60>)
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	797b      	ldrb	r3, [r7, #5]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr
 8009ed4:	24007ba0 	.word	0x24007ba0
 8009ed8:	24007b9c 	.word	0x24007b9c
 8009edc:	24007b9a 	.word	0x24007b9a
 8009ee0:	24007b94 	.word	0x24007b94

08009ee4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d106      	bne.n	8009f00 <tcp_parseopt+0x1c>
 8009ef2:	4b32      	ldr	r3, [pc, #200]	@ (8009fbc <tcp_parseopt+0xd8>)
 8009ef4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8009ef8:	4931      	ldr	r1, [pc, #196]	@ (8009fc0 <tcp_parseopt+0xdc>)
 8009efa:	4832      	ldr	r0, [pc, #200]	@ (8009fc4 <tcp_parseopt+0xe0>)
 8009efc:	f004 fa1c 	bl	800e338 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009f00:	4b31      	ldr	r3, [pc, #196]	@ (8009fc8 <tcp_parseopt+0xe4>)
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d056      	beq.n	8009fb6 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f08:	4b30      	ldr	r3, [pc, #192]	@ (8009fcc <tcp_parseopt+0xe8>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e046      	b.n	8009f9e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8009f10:	f7ff ffb2 	bl	8009e78 <tcp_get_next_optbyte>
 8009f14:	4603      	mov	r3, r0
 8009f16:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009f18:	7bfb      	ldrb	r3, [r7, #15]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d006      	beq.n	8009f2c <tcp_parseopt+0x48>
 8009f1e:	2b02      	cmp	r3, #2
 8009f20:	dc2a      	bgt.n	8009f78 <tcp_parseopt+0x94>
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d042      	beq.n	8009fac <tcp_parseopt+0xc8>
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d038      	beq.n	8009f9c <tcp_parseopt+0xb8>
 8009f2a:	e025      	b.n	8009f78 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009f2c:	f7ff ffa4 	bl	8009e78 <tcp_get_next_optbyte>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d13c      	bne.n	8009fb0 <tcp_parseopt+0xcc>
 8009f36:	4b25      	ldr	r3, [pc, #148]	@ (8009fcc <tcp_parseopt+0xe8>)
 8009f38:	881b      	ldrh	r3, [r3, #0]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	4a22      	ldr	r2, [pc, #136]	@ (8009fc8 <tcp_parseopt+0xe4>)
 8009f3e:	8812      	ldrh	r2, [r2, #0]
 8009f40:	4293      	cmp	r3, r2
 8009f42:	da35      	bge.n	8009fb0 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009f44:	f7ff ff98 	bl	8009e78 <tcp_get_next_optbyte>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	021b      	lsls	r3, r3, #8
 8009f4c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009f4e:	f7ff ff93 	bl	8009e78 <tcp_get_next_optbyte>
 8009f52:	4603      	mov	r3, r0
 8009f54:	461a      	mov	r2, r3
 8009f56:	89bb      	ldrh	r3, [r7, #12]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009f5c:	89bb      	ldrh	r3, [r7, #12]
 8009f5e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8009f62:	d804      	bhi.n	8009f6e <tcp_parseopt+0x8a>
 8009f64:	89bb      	ldrh	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <tcp_parseopt+0x8a>
 8009f6a:	89ba      	ldrh	r2, [r7, #12]
 8009f6c:	e001      	b.n	8009f72 <tcp_parseopt+0x8e>
 8009f6e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8009f76:	e012      	b.n	8009f9e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009f78:	f7ff ff7e 	bl	8009e78 <tcp_get_next_optbyte>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009f80:	7afb      	ldrb	r3, [r7, #11]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d916      	bls.n	8009fb4 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009f86:	7afb      	ldrb	r3, [r7, #11]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	4b10      	ldr	r3, [pc, #64]	@ (8009fcc <tcp_parseopt+0xe8>)
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	4413      	add	r3, r2
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b02      	subs	r3, #2
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	4b0d      	ldr	r3, [pc, #52]	@ (8009fcc <tcp_parseopt+0xe8>)
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	e000      	b.n	8009f9e <tcp_parseopt+0xba>
          break;
 8009f9c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009fcc <tcp_parseopt+0xe8>)
 8009fa0:	881a      	ldrh	r2, [r3, #0]
 8009fa2:	4b09      	ldr	r3, [pc, #36]	@ (8009fc8 <tcp_parseopt+0xe4>)
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d3b2      	bcc.n	8009f10 <tcp_parseopt+0x2c>
 8009faa:	e004      	b.n	8009fb6 <tcp_parseopt+0xd2>
          return;
 8009fac:	bf00      	nop
 8009fae:	e002      	b.n	8009fb6 <tcp_parseopt+0xd2>
            return;
 8009fb0:	bf00      	nop
 8009fb2:	e000      	b.n	8009fb6 <tcp_parseopt+0xd2>
            return;
 8009fb4:	bf00      	nop
      }
    }
  }
}
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}
 8009fbc:	08010398 	.word	0x08010398
 8009fc0:	080107fc 	.word	0x080107fc
 8009fc4:	080103e4 	.word	0x080103e4
 8009fc8:	24007b98 	.word	0x24007b98
 8009fcc:	24007ba0 	.word	0x24007ba0

08009fd0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009fd4:	4b05      	ldr	r3, [pc, #20]	@ (8009fec <tcp_trigger_input_pcb_close+0x1c>)
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	f043 0310 	orr.w	r3, r3, #16
 8009fdc:	b2da      	uxtb	r2, r3
 8009fde:	4b03      	ldr	r3, [pc, #12]	@ (8009fec <tcp_trigger_input_pcb_close+0x1c>)
 8009fe0:	701a      	strb	r2, [r3, #0]
}
 8009fe2:	bf00      	nop
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr
 8009fec:	24007bb1 	.word	0x24007bb1

08009ff0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <tcp_route+0x28>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	7a1b      	ldrb	r3, [r3, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d006      	beq.n	800a018 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	7a1b      	ldrb	r3, [r3, #8]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7fb fb5c 	bl	80056cc <netif_get_by_index>
 800a014:	4603      	mov	r3, r0
 800a016:	e003      	b.n	800a020 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f002 fea1 	bl	800cd60 <ip4_route>
 800a01e:	4603      	mov	r3, r0
  }
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800a028:	b590      	push	{r4, r7, lr}
 800a02a:	b087      	sub	sp, #28
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	4613      	mov	r3, r2
 800a036:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d105      	bne.n	800a04a <tcp_create_segment+0x22>
 800a03e:	4b43      	ldr	r3, [pc, #268]	@ (800a14c <tcp_create_segment+0x124>)
 800a040:	22a3      	movs	r2, #163	@ 0xa3
 800a042:	4943      	ldr	r1, [pc, #268]	@ (800a150 <tcp_create_segment+0x128>)
 800a044:	4843      	ldr	r0, [pc, #268]	@ (800a154 <tcp_create_segment+0x12c>)
 800a046:	f004 f977 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d105      	bne.n	800a05c <tcp_create_segment+0x34>
 800a050:	4b3e      	ldr	r3, [pc, #248]	@ (800a14c <tcp_create_segment+0x124>)
 800a052:	22a4      	movs	r2, #164	@ 0xa4
 800a054:	4940      	ldr	r1, [pc, #256]	@ (800a158 <tcp_create_segment+0x130>)
 800a056:	483f      	ldr	r0, [pc, #252]	@ (800a154 <tcp_create_segment+0x12c>)
 800a058:	f004 f96e 	bl	800e338 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a05c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	b2db      	uxtb	r3, r3
 800a064:	f003 0304 	and.w	r3, r3, #4
 800a068:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800a06a:	2003      	movs	r0, #3
 800a06c:	f7fa ffa8 	bl	8004fc0 <memp_malloc>
 800a070:	6138      	str	r0, [r7, #16]
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d104      	bne.n	800a082 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800a078:	68b8      	ldr	r0, [r7, #8]
 800a07a:	f7fb fe87 	bl	8005d8c <pbuf_free>
    return NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	e060      	b.n	800a144 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800a088:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	891a      	ldrh	r2, [r3, #8]
 800a09a:	7dfb      	ldrb	r3, [r7, #23]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d205      	bcs.n	800a0ae <tcp_create_segment+0x86>
 800a0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <tcp_create_segment+0x124>)
 800a0a4:	22b0      	movs	r2, #176	@ 0xb0
 800a0a6:	492d      	ldr	r1, [pc, #180]	@ (800a15c <tcp_create_segment+0x134>)
 800a0a8:	482a      	ldr	r0, [pc, #168]	@ (800a154 <tcp_create_segment+0x12c>)
 800a0aa:	f004 f945 	bl	800e338 <iprintf>
  seg->len = p->tot_len - optlen;
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	891a      	ldrh	r2, [r3, #8]
 800a0b2:	7dfb      	ldrb	r3, [r7, #23]
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800a0be:	2114      	movs	r1, #20
 800a0c0:	68b8      	ldr	r0, [r7, #8]
 800a0c2:	f7fb fdcd 	bl	8005c60 <pbuf_add_header>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800a0cc:	6938      	ldr	r0, [r7, #16]
 800a0ce:	f7fd f8d2 	bl	8007276 <tcp_seg_free>
    return NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e036      	b.n	800a144 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	8ada      	ldrh	r2, [r3, #22]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	68dc      	ldr	r4, [r3, #12]
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	f7fa fa39 	bl	8004560 <lwip_htons>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8b1a      	ldrh	r2, [r3, #24]
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	68dc      	ldr	r4, [r3, #12]
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fa fa30 	bl	8004560 <lwip_htons>
 800a100:	4603      	mov	r3, r0
 800a102:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	68dc      	ldr	r4, [r3, #12]
 800a108:	6838      	ldr	r0, [r7, #0]
 800a10a:	f7fa fa3e 	bl	800458a <lwip_htonl>
 800a10e:	4603      	mov	r3, r0
 800a110:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a112:	7dfb      	ldrb	r3, [r7, #23]
 800a114:	089b      	lsrs	r3, r3, #2
 800a116:	b2db      	uxtb	r3, r3
 800a118:	3305      	adds	r3, #5
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	031b      	lsls	r3, r3, #12
 800a11e:	b29a      	uxth	r2, r3
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	b29b      	uxth	r3, r3
 800a124:	4313      	orrs	r3, r2
 800a126:	b29a      	uxth	r2, r3
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	68dc      	ldr	r4, [r3, #12]
 800a12c:	4610      	mov	r0, r2
 800a12e:	f7fa fa17 	bl	8004560 <lwip_htons>
 800a132:	4603      	mov	r3, r0
 800a134:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	749a      	strb	r2, [r3, #18]
 800a13e:	2200      	movs	r2, #0
 800a140:	74da      	strb	r2, [r3, #19]
  return seg;
 800a142:	693b      	ldr	r3, [r7, #16]
}
 800a144:	4618      	mov	r0, r3
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd90      	pop	{r4, r7, pc}
 800a14c:	08010818 	.word	0x08010818
 800a150:	0801084c 	.word	0x0801084c
 800a154:	0801086c 	.word	0x0801086c
 800a158:	08010894 	.word	0x08010894
 800a15c:	080108b8 	.word	0x080108b8

0800a160 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a160:	b590      	push	{r4, r7, lr}
 800a162:	b08b      	sub	sp, #44	@ 0x2c
 800a164:	af02      	add	r7, sp, #8
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a16c:	2300      	movs	r3, #0
 800a16e:	61fb      	str	r3, [r7, #28]
 800a170:	2300      	movs	r3, #0
 800a172:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d106      	bne.n	800a18c <tcp_split_unsent_seg+0x2c>
 800a17e:	4b95      	ldr	r3, [pc, #596]	@ (800a3d4 <tcp_split_unsent_seg+0x274>)
 800a180:	f240 324b 	movw	r2, #843	@ 0x34b
 800a184:	4994      	ldr	r1, [pc, #592]	@ (800a3d8 <tcp_split_unsent_seg+0x278>)
 800a186:	4895      	ldr	r0, [pc, #596]	@ (800a3dc <tcp_split_unsent_seg+0x27c>)
 800a188:	f004 f8d6 	bl	800e338 <iprintf>

  useg = pcb->unsent;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a190:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d102      	bne.n	800a19e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a198:	f04f 33ff 	mov.w	r3, #4294967295
 800a19c:	e116      	b.n	800a3cc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a19e:	887b      	ldrh	r3, [r7, #2]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d109      	bne.n	800a1b8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a1a4:	4b8b      	ldr	r3, [pc, #556]	@ (800a3d4 <tcp_split_unsent_seg+0x274>)
 800a1a6:	f240 3253 	movw	r2, #851	@ 0x353
 800a1aa:	498d      	ldr	r1, [pc, #564]	@ (800a3e0 <tcp_split_unsent_seg+0x280>)
 800a1ac:	488b      	ldr	r0, [pc, #556]	@ (800a3dc <tcp_split_unsent_seg+0x27c>)
 800a1ae:	f004 f8c3 	bl	800e338 <iprintf>
    return ERR_VAL;
 800a1b2:	f06f 0305 	mvn.w	r3, #5
 800a1b6:	e109      	b.n	800a3cc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	891b      	ldrh	r3, [r3, #8]
 800a1bc:	887a      	ldrh	r2, [r7, #2]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d301      	bcc.n	800a1c6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	e102      	b.n	800a3cc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a1ca:	887a      	ldrh	r2, [r7, #2]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d906      	bls.n	800a1de <tcp_split_unsent_seg+0x7e>
 800a1d0:	4b80      	ldr	r3, [pc, #512]	@ (800a3d4 <tcp_split_unsent_seg+0x274>)
 800a1d2:	f240 325b 	movw	r2, #859	@ 0x35b
 800a1d6:	4983      	ldr	r1, [pc, #524]	@ (800a3e4 <tcp_split_unsent_seg+0x284>)
 800a1d8:	4880      	ldr	r0, [pc, #512]	@ (800a3dc <tcp_split_unsent_seg+0x27c>)
 800a1da:	f004 f8ad 	bl	800e338 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	891b      	ldrh	r3, [r3, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <tcp_split_unsent_seg+0x94>
 800a1e6:	4b7b      	ldr	r3, [pc, #492]	@ (800a3d4 <tcp_split_unsent_seg+0x274>)
 800a1e8:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800a1ec:	497e      	ldr	r1, [pc, #504]	@ (800a3e8 <tcp_split_unsent_seg+0x288>)
 800a1ee:	487b      	ldr	r0, [pc, #492]	@ (800a3dc <tcp_split_unsent_seg+0x27c>)
 800a1f0:	f004 f8a2 	bl	800e338 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	7a9b      	ldrb	r3, [r3, #10]
 800a1f8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	891a      	ldrh	r2, [r3, #8]
 800a20a:	887b      	ldrh	r3, [r7, #2]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	b29a      	uxth	r2, r3
 800a214:	89bb      	ldrh	r3, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	b29b      	uxth	r3, r3
 800a21a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a21e:	4619      	mov	r1, r3
 800a220:	2036      	movs	r0, #54	@ 0x36
 800a222:	f7fb facf 	bl	80057c4 <pbuf_alloc>
 800a226:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 80b7 	beq.w	800a39e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	891a      	ldrh	r2, [r3, #8]
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	891b      	ldrh	r3, [r3, #8]
 800a23a:	1ad3      	subs	r3, r2, r3
 800a23c:	b29a      	uxth	r2, r3
 800a23e:	887b      	ldrh	r3, [r7, #2]
 800a240:	4413      	add	r3, r2
 800a242:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	6858      	ldr	r0, [r3, #4]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	685a      	ldr	r2, [r3, #4]
 800a24c:	7bbb      	ldrb	r3, [r7, #14]
 800a24e:	18d1      	adds	r1, r2, r3
 800a250:	897b      	ldrh	r3, [r7, #10]
 800a252:	89ba      	ldrh	r2, [r7, #12]
 800a254:	f7fb ff84 	bl	8006160 <pbuf_copy_partial>
 800a258:	4603      	mov	r3, r0
 800a25a:	461a      	mov	r2, r3
 800a25c:	89bb      	ldrh	r3, [r7, #12]
 800a25e:	4293      	cmp	r3, r2
 800a260:	f040 809f 	bne.w	800a3a2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	899b      	ldrh	r3, [r3, #12]
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	4618      	mov	r0, r3
 800a26e:	f7fa f977 	bl	8004560 <lwip_htons>
 800a272:	4603      	mov	r3, r0
 800a274:	b2db      	uxtb	r3, r3
 800a276:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a27a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a27c:	2300      	movs	r3, #0
 800a27e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a280:	7efb      	ldrb	r3, [r7, #27]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a28a:	7efb      	ldrb	r3, [r7, #27]
 800a28c:	f023 0308 	bic.w	r3, r3, #8
 800a290:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a292:	7ebb      	ldrb	r3, [r7, #26]
 800a294:	f043 0308 	orr.w	r3, r3, #8
 800a298:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a29a:	7efb      	ldrb	r3, [r7, #27]
 800a29c:	f003 0301 	and.w	r3, r3, #1
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d007      	beq.n	800a2b4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a2a4:	7efb      	ldrb	r3, [r7, #27]
 800a2a6:	f023 0301 	bic.w	r3, r3, #1
 800a2aa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a2ac:	7ebb      	ldrb	r3, [r7, #26]
 800a2ae:	f043 0301 	orr.w	r3, r3, #1
 800a2b2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fa f965 	bl	800458a <lwip_htonl>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	887b      	ldrh	r3, [r7, #2]
 800a2c4:	18d1      	adds	r1, r2, r3
 800a2c6:	7eba      	ldrb	r2, [r7, #26]
 800a2c8:	7bfb      	ldrb	r3, [r7, #15]
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	6939      	ldr	r1, [r7, #16]
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f7ff fea9 	bl	800a028 <tcp_create_segment>
 800a2d6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d063      	beq.n	800a3a6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fb fdda 	bl	8005e9c <pbuf_clen>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	6858      	ldr	r0, [r3, #4]
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	891a      	ldrh	r2, [r3, #8]
 800a306:	89bb      	ldrh	r3, [r7, #12]
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	4619      	mov	r1, r3
 800a30e:	f7fb fbb7 	bl	8005a80 <pbuf_realloc>
  useg->len -= remainder;
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	891a      	ldrh	r2, [r3, #8]
 800a316:	89bb      	ldrh	r3, [r7, #12]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	899b      	ldrh	r3, [r3, #12]
 800a326:	b29c      	uxth	r4, r3
 800a328:	7efb      	ldrb	r3, [r7, #27]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fa f917 	bl	8004560 <lwip_htons>
 800a332:	4603      	mov	r3, r0
 800a334:	461a      	mov	r2, r3
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	68db      	ldr	r3, [r3, #12]
 800a33a:	4322      	orrs	r2, r4
 800a33c:	b292      	uxth	r2, r2
 800a33e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	4618      	mov	r0, r3
 800a346:	f7fb fda9 	bl	8005e9c <pbuf_clen>
 800a34a:	4603      	mov	r3, r0
 800a34c:	461a      	mov	r2, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a354:	4413      	add	r3, r2
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4618      	mov	r0, r3
 800a364:	f7fb fd9a 	bl	8005e9c <pbuf_clen>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a372:	4413      	add	r3, r2
 800a374:	b29a      	uxth	r2, r3
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	69fa      	ldr	r2, [r7, #28]
 800a388:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d103      	bne.n	800a39a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e016      	b.n	800a3cc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a39e:	bf00      	nop
 800a3a0:	e002      	b.n	800a3a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a3a2:	bf00      	nop
 800a3a4:	e000      	b.n	800a3a8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a3a6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d006      	beq.n	800a3bc <tcp_split_unsent_seg+0x25c>
 800a3ae:	4b09      	ldr	r3, [pc, #36]	@ (800a3d4 <tcp_split_unsent_seg+0x274>)
 800a3b0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800a3b4:	490d      	ldr	r1, [pc, #52]	@ (800a3ec <tcp_split_unsent_seg+0x28c>)
 800a3b6:	4809      	ldr	r0, [pc, #36]	@ (800a3dc <tcp_split_unsent_seg+0x27c>)
 800a3b8:	f003 ffbe 	bl	800e338 <iprintf>
  if (p != NULL) {
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d002      	beq.n	800a3c8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a3c2:	6938      	ldr	r0, [r7, #16]
 800a3c4:	f7fb fce2 	bl	8005d8c <pbuf_free>
  }

  return ERR_MEM;
 800a3c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3724      	adds	r7, #36	@ 0x24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd90      	pop	{r4, r7, pc}
 800a3d4:	08010818 	.word	0x08010818
 800a3d8:	08010bac 	.word	0x08010bac
 800a3dc:	0801086c 	.word	0x0801086c
 800a3e0:	08010bd0 	.word	0x08010bd0
 800a3e4:	08010bf4 	.word	0x08010bf4
 800a3e8:	08010c04 	.word	0x08010c04
 800a3ec:	08010c14 	.word	0x08010c14

0800a3f0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b085      	sub	sp, #20
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <tcp_send_fin+0x1c>
 800a3fe:	4b21      	ldr	r3, [pc, #132]	@ (800a484 <tcp_send_fin+0x94>)
 800a400:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800a404:	4920      	ldr	r1, [pc, #128]	@ (800a488 <tcp_send_fin+0x98>)
 800a406:	4821      	ldr	r0, [pc, #132]	@ (800a48c <tcp_send_fin+0x9c>)
 800a408:	f003 ff96 	bl	800e338 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a410:	2b00      	cmp	r3, #0
 800a412:	d02e      	beq.n	800a472 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a418:	60fb      	str	r3, [r7, #12]
 800a41a:	e002      	b.n	800a422 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1f8      	bne.n	800a41c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	899b      	ldrh	r3, [r3, #12]
 800a430:	b29b      	uxth	r3, r3
 800a432:	4618      	mov	r0, r3
 800a434:	f7fa f894 	bl	8004560 <lwip_htons>
 800a438:	4603      	mov	r3, r0
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	f003 0307 	and.w	r3, r3, #7
 800a440:	2b00      	cmp	r3, #0
 800a442:	d116      	bne.n	800a472 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	899b      	ldrh	r3, [r3, #12]
 800a44a:	b29c      	uxth	r4, r3
 800a44c:	2001      	movs	r0, #1
 800a44e:	f7fa f887 	bl	8004560 <lwip_htons>
 800a452:	4603      	mov	r3, r0
 800a454:	461a      	mov	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	4322      	orrs	r2, r4
 800a45c:	b292      	uxth	r2, r2
 800a45e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	8b5b      	ldrh	r3, [r3, #26]
 800a464:	f043 0320 	orr.w	r3, r3, #32
 800a468:	b29a      	uxth	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800a46e:	2300      	movs	r3, #0
 800a470:	e004      	b.n	800a47c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800a472:	2101      	movs	r1, #1
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 f80b 	bl	800a490 <tcp_enqueue_flags>
 800a47a:	4603      	mov	r3, r0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3714      	adds	r7, #20
 800a480:	46bd      	mov	sp, r7
 800a482:	bd90      	pop	{r4, r7, pc}
 800a484:	08010818 	.word	0x08010818
 800a488:	08010c20 	.word	0x08010c20
 800a48c:	0801086c 	.word	0x0801086c

0800a490 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af02      	add	r7, sp, #8
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	460b      	mov	r3, r1
 800a49a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800a4a4:	78fb      	ldrb	r3, [r7, #3]
 800a4a6:	f003 0303 	and.w	r3, r3, #3
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d106      	bne.n	800a4bc <tcp_enqueue_flags+0x2c>
 800a4ae:	4b67      	ldr	r3, [pc, #412]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a4b0:	f240 4211 	movw	r2, #1041	@ 0x411
 800a4b4:	4966      	ldr	r1, [pc, #408]	@ (800a650 <tcp_enqueue_flags+0x1c0>)
 800a4b6:	4867      	ldr	r0, [pc, #412]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a4b8:	f003 ff3e 	bl	800e338 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <tcp_enqueue_flags+0x40>
 800a4c2:	4b62      	ldr	r3, [pc, #392]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a4c4:	f240 4213 	movw	r2, #1043	@ 0x413
 800a4c8:	4963      	ldr	r1, [pc, #396]	@ (800a658 <tcp_enqueue_flags+0x1c8>)
 800a4ca:	4862      	ldr	r0, [pc, #392]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a4cc:	f003 ff34 	bl	800e338 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800a4d0:	78fb      	ldrb	r3, [r7, #3]
 800a4d2:	f003 0302 	and.w	r3, r3, #2
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d001      	beq.n	800a4de <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a4de:	7ffb      	ldrb	r3, [r7, #31]
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a4ea:	7dfb      	ldrb	r3, [r7, #23]
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	2036      	movs	r0, #54	@ 0x36
 800a4f6:	f7fb f965 	bl	80057c4 <pbuf_alloc>
 800a4fa:	6138      	str	r0, [r7, #16]
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d109      	bne.n	800a516 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	8b5b      	ldrh	r3, [r3, #26]
 800a506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	e095      	b.n	800a642 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	895a      	ldrh	r2, [r3, #10]
 800a51a:	7dfb      	ldrb	r3, [r7, #23]
 800a51c:	b29b      	uxth	r3, r3
 800a51e:	429a      	cmp	r2, r3
 800a520:	d206      	bcs.n	800a530 <tcp_enqueue_flags+0xa0>
 800a522:	4b4a      	ldr	r3, [pc, #296]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a524:	f240 4239 	movw	r2, #1081	@ 0x439
 800a528:	494c      	ldr	r1, [pc, #304]	@ (800a65c <tcp_enqueue_flags+0x1cc>)
 800a52a:	484a      	ldr	r0, [pc, #296]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a52c:	f003 ff04 	bl	800e338 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	7ffb      	ldrb	r3, [r7, #31]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	460b      	mov	r3, r1
 800a53c:	6939      	ldr	r1, [r7, #16]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fd72 	bl	800a028 <tcp_create_segment>
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d109      	bne.n	800a560 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	8b5b      	ldrh	r3, [r3, #26]
 800a550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a554:	b29a      	uxth	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800a55a:	f04f 33ff 	mov.w	r3, #4294967295
 800a55e:	e070      	b.n	800a642 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	68db      	ldr	r3, [r3, #12]
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d006      	beq.n	800a57a <tcp_enqueue_flags+0xea>
 800a56c:	4b37      	ldr	r3, [pc, #220]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a56e:	f240 4242 	movw	r2, #1090	@ 0x442
 800a572:	493b      	ldr	r1, [pc, #236]	@ (800a660 <tcp_enqueue_flags+0x1d0>)
 800a574:	4837      	ldr	r0, [pc, #220]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a576:	f003 fedf 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	891b      	ldrh	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d006      	beq.n	800a590 <tcp_enqueue_flags+0x100>
 800a582:	4b32      	ldr	r3, [pc, #200]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a584:	f240 4243 	movw	r2, #1091	@ 0x443
 800a588:	4936      	ldr	r1, [pc, #216]	@ (800a664 <tcp_enqueue_flags+0x1d4>)
 800a58a:	4832      	ldr	r0, [pc, #200]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a58c:	f003 fed4 	bl	800e338 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d103      	bne.n	800a5a0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68fa      	ldr	r2, [r7, #12]
 800a59c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a59e:	e00d      	b.n	800a5bc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5a4:	61bb      	str	r3, [r7, #24]
 800a5a6:	e002      	b.n	800a5ae <tcp_enqueue_flags+0x11e>
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	61bb      	str	r3, [r7, #24]
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d1f8      	bne.n	800a5a8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d104      	bne.n	800a5d8 <tcp_enqueue_flags+0x148>
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d004      	beq.n	800a5e2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5dc:	1c5a      	adds	r2, r3, #1
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800a5e2:	78fb      	ldrb	r3, [r7, #3]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	8b5b      	ldrh	r3, [r3, #26]
 800a5f0:	f043 0320 	orr.w	r3, r3, #32
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fb fc4c 	bl	8005e9c <pbuf_clen>
 800a604:	4603      	mov	r3, r0
 800a606:	461a      	mov	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a60e:	4413      	add	r3, r2
 800a610:	b29a      	uxth	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00e      	beq.n	800a640 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10a      	bne.n	800a640 <tcp_enqueue_flags+0x1b0>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d106      	bne.n	800a640 <tcp_enqueue_flags+0x1b0>
 800a632:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <tcp_enqueue_flags+0x1bc>)
 800a634:	f240 4265 	movw	r2, #1125	@ 0x465
 800a638:	490b      	ldr	r1, [pc, #44]	@ (800a668 <tcp_enqueue_flags+0x1d8>)
 800a63a:	4806      	ldr	r0, [pc, #24]	@ (800a654 <tcp_enqueue_flags+0x1c4>)
 800a63c:	f003 fe7c 	bl	800e338 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3720      	adds	r7, #32
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	08010818 	.word	0x08010818
 800a650:	08010c3c 	.word	0x08010c3c
 800a654:	0801086c 	.word	0x0801086c
 800a658:	08010c94 	.word	0x08010c94
 800a65c:	08010cb4 	.word	0x08010cb4
 800a660:	08010cf0 	.word	0x08010cf0
 800a664:	08010d08 	.word	0x08010d08
 800a668:	08010d34 	.word	0x08010d34

0800a66c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800a66c:	b5b0      	push	{r4, r5, r7, lr}
 800a66e:	b08a      	sub	sp, #40	@ 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d106      	bne.n	800a688 <tcp_output+0x1c>
 800a67a:	4b8a      	ldr	r3, [pc, #552]	@ (800a8a4 <tcp_output+0x238>)
 800a67c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800a680:	4989      	ldr	r1, [pc, #548]	@ (800a8a8 <tcp_output+0x23c>)
 800a682:	488a      	ldr	r0, [pc, #552]	@ (800a8ac <tcp_output+0x240>)
 800a684:	f003 fe58 	bl	800e338 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	7d1b      	ldrb	r3, [r3, #20]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d106      	bne.n	800a69e <tcp_output+0x32>
 800a690:	4b84      	ldr	r3, [pc, #528]	@ (800a8a4 <tcp_output+0x238>)
 800a692:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800a696:	4986      	ldr	r1, [pc, #536]	@ (800a8b0 <tcp_output+0x244>)
 800a698:	4884      	ldr	r0, [pc, #528]	@ (800a8ac <tcp_output+0x240>)
 800a69a:	f003 fe4d 	bl	800e338 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800a69e:	4b85      	ldr	r3, [pc, #532]	@ (800a8b4 <tcp_output+0x248>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d101      	bne.n	800a6ac <tcp_output+0x40>
    return ERR_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e1ce      	b.n	800aa4a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	bf28      	it	cs
 800a6bc:	4613      	movcs	r3, r2
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10b      	bne.n	800a6e6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8b5b      	ldrh	r3, [r3, #26]
 800a6d2:	f003 0302 	and.w	r3, r3, #2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f000 81aa 	beq.w	800aa30 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fdcb 	bl	800b278 <tcp_send_empty_ack>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	e1b1      	b.n	800aa4a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fc7e 	bl	8009ff0 <tcp_route>
 800a6f4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <tcp_output+0x96>
    return ERR_RTE;
 800a6fc:	f06f 0303 	mvn.w	r3, #3
 800a700:	e1a3      	b.n	800aa4a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <tcp_output+0xa4>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d111      	bne.n	800a734 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <tcp_output+0xb0>
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	3304      	adds	r3, #4
 800a71a:	e000      	b.n	800a71e <tcp_output+0xb2>
 800a71c:	2300      	movs	r3, #0
 800a71e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d102      	bne.n	800a72c <tcp_output+0xc0>
      return ERR_RTE;
 800a726:	f06f 0303 	mvn.w	r3, #3
 800a72a:	e18e      	b.n	800aa4a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800a734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7f9 ff25 	bl	800458a <lwip_htonl>
 800a740:	4602      	mov	r2, r0
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a74a:	8912      	ldrh	r2, [r2, #8]
 800a74c:	4413      	add	r3, r2
 800a74e:	69ba      	ldr	r2, [r7, #24]
 800a750:	429a      	cmp	r2, r3
 800a752:	d227      	bcs.n	800a7a4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a75a:	461a      	mov	r2, r3
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	4293      	cmp	r3, r2
 800a760:	d114      	bne.n	800a78c <tcp_output+0x120>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a766:	2b00      	cmp	r3, #0
 800a768:	d110      	bne.n	800a78c <tcp_output+0x120>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	8b5b      	ldrh	r3, [r3, #26]
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 814d 	beq.w	800aa34 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fd6c 	bl	800b278 <tcp_send_empty_ack>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	e152      	b.n	800aa4a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7b0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f000 811c 	beq.w	800a9f2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800a7ba:	e002      	b.n	800a7c2 <tcp_output+0x156>
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	623b      	str	r3, [r7, #32]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f8      	bne.n	800a7bc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800a7ca:	e112      	b.n	800a9f2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800a7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	899b      	ldrh	r3, [r3, #12]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7f9 fec3 	bl	8004560 <lwip_htons>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <tcp_output+0x188>
 800a7e6:	4b2f      	ldr	r3, [pc, #188]	@ (800a8a4 <tcp_output+0x238>)
 800a7e8:	f240 5236 	movw	r2, #1334	@ 0x536
 800a7ec:	4932      	ldr	r1, [pc, #200]	@ (800a8b8 <tcp_output+0x24c>)
 800a7ee:	482f      	ldr	r0, [pc, #188]	@ (800a8ac <tcp_output+0x240>)
 800a7f0:	f003 fda2 	bl	800e338 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d01f      	beq.n	800a83c <tcp_output+0x1d0>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	8b5b      	ldrh	r3, [r3, #26]
 800a800:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800a804:	2b00      	cmp	r3, #0
 800a806:	d119      	bne.n	800a83c <tcp_output+0x1d0>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00b      	beq.n	800a828 <tcp_output+0x1bc>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d110      	bne.n	800a83c <tcp_output+0x1d0>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a81e:	891a      	ldrh	r2, [r3, #8]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a824:	429a      	cmp	r2, r3
 800a826:	d209      	bcs.n	800a83c <tcp_output+0x1d0>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <tcp_output+0x1d0>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d901      	bls.n	800a840 <tcp_output+0x1d4>
 800a83c:	2301      	movs	r3, #1
 800a83e:	e000      	b.n	800a842 <tcp_output+0x1d6>
 800a840:	2300      	movs	r3, #0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d106      	bne.n	800a854 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	8b5b      	ldrh	r3, [r3, #26]
 800a84a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 80e4 	beq.w	800aa1c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7d1b      	ldrb	r3, [r3, #20]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d00d      	beq.n	800a878 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800a85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	899b      	ldrh	r3, [r3, #12]
 800a862:	b29c      	uxth	r4, r3
 800a864:	2010      	movs	r0, #16
 800a866:	f7f9 fe7b 	bl	8004560 <lwip_htons>
 800a86a:	4603      	mov	r3, r0
 800a86c:	461a      	mov	r2, r3
 800a86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	4322      	orrs	r2, r4
 800a874:	b292      	uxth	r2, r2
 800a876:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	6879      	ldr	r1, [r7, #4]
 800a87c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a87e:	f000 f909 	bl	800aa94 <tcp_output_segment>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d016      	beq.n	800a8bc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	8b5b      	ldrh	r3, [r3, #26]
 800a892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a896:	b29a      	uxth	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	835a      	strh	r2, [r3, #26]
      return err;
 800a89c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8a0:	e0d3      	b.n	800aa4a <tcp_output+0x3de>
 800a8a2:	bf00      	nop
 800a8a4:	08010818 	.word	0x08010818
 800a8a8:	08010d5c 	.word	0x08010d5c
 800a8ac:	0801086c 	.word	0x0801086c
 800a8b0:	08010d74 	.word	0x08010d74
 800a8b4:	24007bb8 	.word	0x24007bb8
 800a8b8:	08010d9c 	.word	0x08010d9c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d006      	beq.n	800a8da <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	8b5b      	ldrh	r3, [r3, #26]
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7f9 fe52 	bl	800458a <lwip_htonl>
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	891b      	ldrh	r3, [r3, #8]
 800a8ec:	461d      	mov	r5, r3
 800a8ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7f9 fe32 	bl	8004560 <lwip_htons>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0303 	and.w	r3, r3, #3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <tcp_output+0x2a0>
 800a908:	2301      	movs	r3, #1
 800a90a:	e000      	b.n	800a90e <tcp_output+0x2a2>
 800a90c:	2300      	movs	r3, #0
 800a90e:	442b      	add	r3, r5
 800a910:	4423      	add	r3, r4
 800a912:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	da02      	bge.n	800a926 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800a926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a928:	891b      	ldrh	r3, [r3, #8]
 800a92a:	461c      	mov	r4, r3
 800a92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	899b      	ldrh	r3, [r3, #12]
 800a932:	b29b      	uxth	r3, r3
 800a934:	4618      	mov	r0, r3
 800a936:	f7f9 fe13 	bl	8004560 <lwip_htons>
 800a93a:	4603      	mov	r3, r0
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <tcp_output+0x2de>
 800a946:	2301      	movs	r3, #1
 800a948:	e000      	b.n	800a94c <tcp_output+0x2e0>
 800a94a:	2300      	movs	r3, #0
 800a94c:	4423      	add	r3, r4
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d049      	beq.n	800a9e6 <tcp_output+0x37a>
      seg->next = NULL;
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d105      	bne.n	800a96c <tcp_output+0x300>
        pcb->unacked = seg;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a964:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800a966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a968:	623b      	str	r3, [r7, #32]
 800a96a:	e03f      	b.n	800a9ec <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	4618      	mov	r0, r3
 800a974:	f7f9 fe09 	bl	800458a <lwip_htonl>
 800a978:	4604      	mov	r4, r0
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4618      	mov	r0, r3
 800a982:	f7f9 fe02 	bl	800458a <lwip_htonl>
 800a986:	4603      	mov	r3, r0
 800a988:	1ae3      	subs	r3, r4, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	da24      	bge.n	800a9d8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	3370      	adds	r3, #112	@ 0x70
 800a992:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a994:	e002      	b.n	800a99c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800a99c:	69fb      	ldr	r3, [r7, #28]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d011      	beq.n	800a9c8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7f9 fdec 	bl	800458a <lwip_htonl>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7f9 fde5 	bl	800458a <lwip_htonl>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	dbe6      	blt.n	800a996 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ce:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800a9d0:	69fb      	ldr	r3, [r7, #28]
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	e009      	b.n	800a9ec <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9dc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	623b      	str	r3, [r7, #32]
 800a9e4:	e002      	b.n	800a9ec <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800a9e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9e8:	f7fc fc45 	bl	8007276 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a9f0:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d012      	beq.n	800aa1e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800a9f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f9 fdc3 	bl	800458a <lwip_htonl>
 800aa04:	4602      	mov	r2, r0
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa0e:	8912      	ldrh	r2, [r2, #8]
 800aa10:	4413      	add	r3, r2
  while (seg != NULL &&
 800aa12:	69ba      	ldr	r2, [r7, #24]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	f4bf aed9 	bcs.w	800a7cc <tcp_output+0x160>
 800aa1a:	e000      	b.n	800aa1e <tcp_output+0x3b2>
      break;
 800aa1c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d108      	bne.n	800aa38 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800aa2e:	e004      	b.n	800aa3a <tcp_output+0x3ce>
    goto output_done;
 800aa30:	bf00      	nop
 800aa32:	e002      	b.n	800aa3a <tcp_output+0x3ce>
    goto output_done;
 800aa34:	bf00      	nop
 800aa36:	e000      	b.n	800aa3a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800aa38:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	8b5b      	ldrh	r3, [r3, #26]
 800aa3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3728      	adds	r7, #40	@ 0x28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bdb0      	pop	{r4, r5, r7, pc}
 800aa52:	bf00      	nop

0800aa54 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <tcp_output_segment_busy+0x1c>
 800aa62:	4b09      	ldr	r3, [pc, #36]	@ (800aa88 <tcp_output_segment_busy+0x34>)
 800aa64:	f240 529a 	movw	r2, #1434	@ 0x59a
 800aa68:	4908      	ldr	r1, [pc, #32]	@ (800aa8c <tcp_output_segment_busy+0x38>)
 800aa6a:	4809      	ldr	r0, [pc, #36]	@ (800aa90 <tcp_output_segment_busy+0x3c>)
 800aa6c:	f003 fc64 	bl	800e338 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	7b9b      	ldrb	r3, [r3, #14]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d001      	beq.n	800aa7e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3708      	adds	r7, #8
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	08010818 	.word	0x08010818
 800aa8c:	08010db4 	.word	0x08010db4
 800aa90:	0801086c 	.word	0x0801086c

0800aa94 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800aa94:	b5b0      	push	{r4, r5, r7, lr}
 800aa96:	b08c      	sub	sp, #48	@ 0x30
 800aa98:	af04      	add	r7, sp, #16
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	60b9      	str	r1, [r7, #8]
 800aa9e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d106      	bne.n	800aab4 <tcp_output_segment+0x20>
 800aaa6:	4b64      	ldr	r3, [pc, #400]	@ (800ac38 <tcp_output_segment+0x1a4>)
 800aaa8:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800aaac:	4963      	ldr	r1, [pc, #396]	@ (800ac3c <tcp_output_segment+0x1a8>)
 800aaae:	4864      	ldr	r0, [pc, #400]	@ (800ac40 <tcp_output_segment+0x1ac>)
 800aab0:	f003 fc42 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d106      	bne.n	800aac8 <tcp_output_segment+0x34>
 800aaba:	4b5f      	ldr	r3, [pc, #380]	@ (800ac38 <tcp_output_segment+0x1a4>)
 800aabc:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800aac0:	4960      	ldr	r1, [pc, #384]	@ (800ac44 <tcp_output_segment+0x1b0>)
 800aac2:	485f      	ldr	r0, [pc, #380]	@ (800ac40 <tcp_output_segment+0x1ac>)
 800aac4:	f003 fc38 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d106      	bne.n	800aadc <tcp_output_segment+0x48>
 800aace:	4b5a      	ldr	r3, [pc, #360]	@ (800ac38 <tcp_output_segment+0x1a4>)
 800aad0:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800aad4:	495c      	ldr	r1, [pc, #368]	@ (800ac48 <tcp_output_segment+0x1b4>)
 800aad6:	485a      	ldr	r0, [pc, #360]	@ (800ac40 <tcp_output_segment+0x1ac>)
 800aad8:	f003 fc2e 	bl	800e338 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f7ff ffb9 	bl	800aa54 <tcp_output_segment_busy>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	e0a1      	b.n	800ac30 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	68dc      	ldr	r4, [r3, #12]
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7f9 fd48 	bl	800458a <lwip_htonl>
 800aafa:	4603      	mov	r3, r0
 800aafc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68dc      	ldr	r4, [r3, #12]
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7f9 fd2a 	bl	8004560 <lwip_htons>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800ab18:	441a      	add	r2, r3
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	3314      	adds	r3, #20
 800ab24:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	7a9b      	ldrb	r3, [r3, #10]
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d015      	beq.n	800ab5e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	3304      	adds	r3, #4
 800ab36:	461a      	mov	r2, r3
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800ab3e:	f7fc fe91 	bl	8007864 <tcp_eff_send_mss_netif>
 800ab42:	4603      	mov	r3, r0
 800ab44:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ab46:	8b7b      	ldrh	r3, [r7, #26]
 800ab48:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7f9 fd1c 	bl	800458a <lwip_htonl>
 800ab52:	4602      	mov	r2, r0
 800ab54:	69fb      	ldr	r3, [r7, #28]
 800ab56:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	da02      	bge.n	800ab6e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10c      	bne.n	800ab90 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800ab76:	4b35      	ldr	r3, [pc, #212]	@ (800ac4c <tcp_output_segment+0x1b8>)
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7f9 fd00 	bl	800458a <lwip_htonl>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	68da      	ldr	r2, [r3, #12]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	1ad3      	subs	r3, r2, r3
 800ab9c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	8959      	ldrh	r1, [r3, #10]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	8b3a      	ldrh	r2, [r7, #24]
 800abaa:	1a8a      	subs	r2, r1, r2
 800abac:	b292      	uxth	r2, r2
 800abae:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	8919      	ldrh	r1, [r3, #8]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	8b3a      	ldrh	r2, [r7, #24]
 800abbc:	1a8a      	subs	r2, r1, r2
 800abbe:	b292      	uxth	r2, r2
 800abc0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	68d2      	ldr	r2, [r2, #12]
 800abca:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	2200      	movs	r2, #0
 800abd2:	741a      	strb	r2, [r3, #16]
 800abd4:	2200      	movs	r2, #0
 800abd6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	7a9b      	ldrb	r3, [r3, #10]
 800abe0:	f003 0301 	and.w	r3, r3, #1
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <tcp_output_segment+0x158>
 800abe8:	2318      	movs	r3, #24
 800abea:	e000      	b.n	800abee <tcp_output_segment+0x15a>
 800abec:	2314      	movs	r3, #20
 800abee:	4413      	add	r3, r2
 800abf0:	69fa      	ldr	r2, [r7, #28]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d006      	beq.n	800ac04 <tcp_output_segment+0x170>
 800abf6:	4b10      	ldr	r3, [pc, #64]	@ (800ac38 <tcp_output_segment+0x1a4>)
 800abf8:	f240 621c 	movw	r2, #1564	@ 0x61c
 800abfc:	4914      	ldr	r1, [pc, #80]	@ (800ac50 <tcp_output_segment+0x1bc>)
 800abfe:	4810      	ldr	r0, [pc, #64]	@ (800ac40 <tcp_output_segment+0x1ac>)
 800ac00:	f003 fb9a 	bl	800e338 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6858      	ldr	r0, [r3, #4]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	1d1c      	adds	r4, r3, #4
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	7add      	ldrb	r5, [r3, #11]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	7a9b      	ldrb	r3, [r3, #10]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	9202      	str	r2, [sp, #8]
 800ac1a:	2206      	movs	r2, #6
 800ac1c:	9201      	str	r2, [sp, #4]
 800ac1e:	9300      	str	r3, [sp, #0]
 800ac20:	462b      	mov	r3, r5
 800ac22:	4622      	mov	r2, r4
 800ac24:	f002 fa5a 	bl	800d0dc <ip4_output_if>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800ac2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	3720      	adds	r7, #32
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bdb0      	pop	{r4, r5, r7, pc}
 800ac38:	08010818 	.word	0x08010818
 800ac3c:	08010ddc 	.word	0x08010ddc
 800ac40:	0801086c 	.word	0x0801086c
 800ac44:	08010dfc 	.word	0x08010dfc
 800ac48:	08010e1c 	.word	0x08010e1c
 800ac4c:	24007b6c 	.word	0x24007b6c
 800ac50:	08010e40 	.word	0x08010e40

0800ac54 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800ac54:	b5b0      	push	{r4, r5, r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d106      	bne.n	800ac70 <tcp_rexmit_rto_prepare+0x1c>
 800ac62:	4b31      	ldr	r3, [pc, #196]	@ (800ad28 <tcp_rexmit_rto_prepare+0xd4>)
 800ac64:	f240 6263 	movw	r2, #1635	@ 0x663
 800ac68:	4930      	ldr	r1, [pc, #192]	@ (800ad2c <tcp_rexmit_rto_prepare+0xd8>)
 800ac6a:	4831      	ldr	r0, [pc, #196]	@ (800ad30 <tcp_rexmit_rto_prepare+0xdc>)
 800ac6c:	f003 fb64 	bl	800e338 <iprintf>

  if (pcb->unacked == NULL) {
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d102      	bne.n	800ac7e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800ac78:	f06f 0305 	mvn.w	r3, #5
 800ac7c:	e050      	b.n	800ad20 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac82:	60fb      	str	r3, [r7, #12]
 800ac84:	e00b      	b.n	800ac9e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff fee4 	bl	800aa54 <tcp_output_segment_busy>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d002      	beq.n	800ac98 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800ac92:	f06f 0305 	mvn.w	r3, #5
 800ac96:	e043      	b.n	800ad20 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1ef      	bne.n	800ac86 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800aca6:	68f8      	ldr	r0, [r7, #12]
 800aca8:	f7ff fed4 	bl	800aa54 <tcp_output_segment_busy>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800acb2:	f06f 0305 	mvn.w	r3, #5
 800acb6:	e033      	b.n	800ad20 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	8b5b      	ldrh	r3, [r3, #26]
 800acd2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800acd6:	b29a      	uxth	r2, r3
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	4618      	mov	r0, r3
 800ace4:	f7f9 fc51 	bl	800458a <lwip_htonl>
 800ace8:	4604      	mov	r4, r0
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	891b      	ldrh	r3, [r3, #8]
 800acee:	461d      	mov	r5, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	899b      	ldrh	r3, [r3, #12]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7f9 fc31 	bl	8004560 <lwip_htons>
 800acfe:	4603      	mov	r3, r0
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	f003 0303 	and.w	r3, r3, #3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <tcp_rexmit_rto_prepare+0xba>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e000      	b.n	800ad10 <tcp_rexmit_rto_prepare+0xbc>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	442b      	add	r3, r5
 800ad12:	18e2      	adds	r2, r4, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bdb0      	pop	{r4, r5, r7, pc}
 800ad28:	08010818 	.word	0x08010818
 800ad2c:	08010e54 	.word	0x08010e54
 800ad30:	0801086c 	.word	0x0801086c

0800ad34 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <tcp_rexmit_rto_commit+0x1c>
 800ad42:	4b0d      	ldr	r3, [pc, #52]	@ (800ad78 <tcp_rexmit_rto_commit+0x44>)
 800ad44:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ad48:	490c      	ldr	r1, [pc, #48]	@ (800ad7c <tcp_rexmit_rto_commit+0x48>)
 800ad4a:	480d      	ldr	r0, [pc, #52]	@ (800ad80 <tcp_rexmit_rto_commit+0x4c>)
 800ad4c:	f003 faf4 	bl	800e338 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad56:	2bff      	cmp	r3, #255	@ 0xff
 800ad58:	d007      	beq.n	800ad6a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad60:	3301      	adds	r3, #1
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f7ff fc7e 	bl	800a66c <tcp_output>
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08010818 	.word	0x08010818
 800ad7c:	08010e78 	.word	0x08010e78
 800ad80:	0801086c 	.word	0x0801086c

0800ad84 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b082      	sub	sp, #8
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <tcp_rexmit_rto+0x1c>
 800ad92:	4b0a      	ldr	r3, [pc, #40]	@ (800adbc <tcp_rexmit_rto+0x38>)
 800ad94:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800ad98:	4909      	ldr	r1, [pc, #36]	@ (800adc0 <tcp_rexmit_rto+0x3c>)
 800ad9a:	480a      	ldr	r0, [pc, #40]	@ (800adc4 <tcp_rexmit_rto+0x40>)
 800ad9c:	f003 facc 	bl	800e338 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f7ff ff57 	bl	800ac54 <tcp_rexmit_rto_prepare>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d102      	bne.n	800adb2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff ffc1 	bl	800ad34 <tcp_rexmit_rto_commit>
  }
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	08010818 	.word	0x08010818
 800adc0:	08010e9c 	.word	0x08010e9c
 800adc4:	0801086c 	.word	0x0801086c

0800adc8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800adc8:	b590      	push	{r4, r7, lr}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d106      	bne.n	800ade4 <tcp_rexmit+0x1c>
 800add6:	4b2f      	ldr	r3, [pc, #188]	@ (800ae94 <tcp_rexmit+0xcc>)
 800add8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800addc:	492e      	ldr	r1, [pc, #184]	@ (800ae98 <tcp_rexmit+0xd0>)
 800adde:	482f      	ldr	r0, [pc, #188]	@ (800ae9c <tcp_rexmit+0xd4>)
 800ade0:	f003 faaa 	bl	800e338 <iprintf>

  if (pcb->unacked == NULL) {
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d102      	bne.n	800adf2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800adec:	f06f 0305 	mvn.w	r3, #5
 800adf0:	e04c      	b.n	800ae8c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adf6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800adf8:	68b8      	ldr	r0, [r7, #8]
 800adfa:	f7ff fe2b 	bl	800aa54 <tcp_output_segment_busy>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800ae04:	f06f 0305 	mvn.w	r3, #5
 800ae08:	e040      	b.n	800ae8c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	336c      	adds	r3, #108	@ 0x6c
 800ae16:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae18:	e002      	b.n	800ae20 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d011      	beq.n	800ae4c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7f9 fbaa 	bl	800458a <lwip_htonl>
 800ae36:	4604      	mov	r4, r0
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7f9 fba3 	bl	800458a <lwip_htonl>
 800ae44:	4603      	mov	r3, r0
 800ae46:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	dbe6      	blt.n	800ae1a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d103      	bne.n	800ae6a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2200      	movs	r2, #0
 800ae66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae70:	2bff      	cmp	r3, #255	@ 0xff
 800ae72:	d007      	beq.n	800ae84 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	b2da      	uxtb	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2200      	movs	r2, #0
 800ae88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd90      	pop	{r4, r7, pc}
 800ae94:	08010818 	.word	0x08010818
 800ae98:	08010eb8 	.word	0x08010eb8
 800ae9c:	0801086c 	.word	0x0801086c

0800aea0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d106      	bne.n	800aebc <tcp_rexmit_fast+0x1c>
 800aeae:	4b2a      	ldr	r3, [pc, #168]	@ (800af58 <tcp_rexmit_fast+0xb8>)
 800aeb0:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800aeb4:	4929      	ldr	r1, [pc, #164]	@ (800af5c <tcp_rexmit_fast+0xbc>)
 800aeb6:	482a      	ldr	r0, [pc, #168]	@ (800af60 <tcp_rexmit_fast+0xc0>)
 800aeb8:	f003 fa3e 	bl	800e338 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d045      	beq.n	800af50 <tcp_rexmit_fast+0xb0>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	8b5b      	ldrh	r3, [r3, #26]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d13f      	bne.n	800af50 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff ff79 	bl	800adc8 <tcp_rexmit>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d139      	bne.n	800af50 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800aee8:	4293      	cmp	r3, r2
 800aeea:	bf28      	it	cs
 800aeec:	4613      	movcs	r3, r2
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	da00      	bge.n	800aef6 <tcp_rexmit_fast+0x56>
 800aef4:	3301      	adds	r3, #1
 800aef6:	105b      	asrs	r3, r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800af06:	461a      	mov	r2, r3
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af0c:	005b      	lsls	r3, r3, #1
 800af0e:	429a      	cmp	r2, r3
 800af10:	d206      	bcs.n	800af20 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af16:	005b      	lsls	r3, r3, #1
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800af2a:	4619      	mov	r1, r3
 800af2c:	0049      	lsls	r1, r1, #1
 800af2e:	440b      	add	r3, r1
 800af30:	b29b      	uxth	r3, r3
 800af32:	4413      	add	r3, r2
 800af34:	b29a      	uxth	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	8b5b      	ldrh	r3, [r3, #26]
 800af40:	f043 0304 	orr.w	r3, r3, #4
 800af44:	b29a      	uxth	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800af50:	bf00      	nop
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	08010818 	.word	0x08010818
 800af5c:	08010ed0 	.word	0x08010ed0
 800af60:	0801086c 	.word	0x0801086c

0800af64 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	817b      	strh	r3, [r7, #10]
 800af72:	4613      	mov	r3, r2
 800af74:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800af76:	897a      	ldrh	r2, [r7, #10]
 800af78:	893b      	ldrh	r3, [r7, #8]
 800af7a:	4413      	add	r3, r2
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	3314      	adds	r3, #20
 800af80:	b29b      	uxth	r3, r3
 800af82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af86:	4619      	mov	r1, r3
 800af88:	2022      	movs	r0, #34	@ 0x22
 800af8a:	f7fa fc1b 	bl	80057c4 <pbuf_alloc>
 800af8e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d04d      	beq.n	800b032 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	3313      	adds	r3, #19
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	8952      	ldrh	r2, [r2, #10]
 800af9e:	4293      	cmp	r3, r2
 800afa0:	db06      	blt.n	800afb0 <tcp_output_alloc_header_common+0x4c>
 800afa2:	4b26      	ldr	r3, [pc, #152]	@ (800b03c <tcp_output_alloc_header_common+0xd8>)
 800afa4:	f240 7223 	movw	r2, #1827	@ 0x723
 800afa8:	4925      	ldr	r1, [pc, #148]	@ (800b040 <tcp_output_alloc_header_common+0xdc>)
 800afaa:	4826      	ldr	r0, [pc, #152]	@ (800b044 <tcp_output_alloc_header_common+0xe0>)
 800afac:	f003 f9c4 	bl	800e338 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800afb6:	8c3b      	ldrh	r3, [r7, #32]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7f9 fad1 	bl	8004560 <lwip_htons>
 800afbe:	4603      	mov	r3, r0
 800afc0:	461a      	mov	r2, r3
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800afc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800afc8:	4618      	mov	r0, r3
 800afca:	f7f9 fac9 	bl	8004560 <lwip_htons>
 800afce:	4603      	mov	r3, r0
 800afd0:	461a      	mov	r2, r3
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f7f9 fad4 	bl	800458a <lwip_htonl>
 800afe2:	4602      	mov	r2, r0
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800afe8:	897b      	ldrh	r3, [r7, #10]
 800afea:	089b      	lsrs	r3, r3, #2
 800afec:	b29b      	uxth	r3, r3
 800afee:	3305      	adds	r3, #5
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	031b      	lsls	r3, r3, #12
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800affa:	b29b      	uxth	r3, r3
 800affc:	4313      	orrs	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	4618      	mov	r0, r3
 800b002:	f7f9 faad 	bl	8004560 <lwip_htons>
 800b006:	4603      	mov	r3, r0
 800b008:	461a      	mov	r2, r3
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b00e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b010:	4618      	mov	r0, r3
 800b012:	f7f9 faa5 	bl	8004560 <lwip_htons>
 800b016:	4603      	mov	r3, r0
 800b018:	461a      	mov	r2, r3
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2200      	movs	r2, #0
 800b022:	741a      	strb	r2, [r3, #16]
 800b024:	2200      	movs	r2, #0
 800b026:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	2200      	movs	r2, #0
 800b02c:	749a      	strb	r2, [r3, #18]
 800b02e:	2200      	movs	r2, #0
 800b030:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b032:	697b      	ldr	r3, [r7, #20]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	08010818 	.word	0x08010818
 800b040:	08010ef0 	.word	0x08010ef0
 800b044:	0801086c 	.word	0x0801086c

0800b048 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b048:	b5b0      	push	{r4, r5, r7, lr}
 800b04a:	b08a      	sub	sp, #40	@ 0x28
 800b04c:	af04      	add	r7, sp, #16
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	607b      	str	r3, [r7, #4]
 800b052:	460b      	mov	r3, r1
 800b054:	817b      	strh	r3, [r7, #10]
 800b056:	4613      	mov	r3, r2
 800b058:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d106      	bne.n	800b06e <tcp_output_alloc_header+0x26>
 800b060:	4b15      	ldr	r3, [pc, #84]	@ (800b0b8 <tcp_output_alloc_header+0x70>)
 800b062:	f240 7242 	movw	r2, #1858	@ 0x742
 800b066:	4915      	ldr	r1, [pc, #84]	@ (800b0bc <tcp_output_alloc_header+0x74>)
 800b068:	4815      	ldr	r0, [pc, #84]	@ (800b0c0 <tcp_output_alloc_header+0x78>)
 800b06a:	f003 f965 	bl	800e338 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8adb      	ldrh	r3, [r3, #22]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	8b12      	ldrh	r2, [r2, #24]
 800b07a:	68f9      	ldr	r1, [r7, #12]
 800b07c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800b07e:	893d      	ldrh	r5, [r7, #8]
 800b080:	897c      	ldrh	r4, [r7, #10]
 800b082:	9103      	str	r1, [sp, #12]
 800b084:	2110      	movs	r1, #16
 800b086:	9102      	str	r1, [sp, #8]
 800b088:	9201      	str	r2, [sp, #4]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	462a      	mov	r2, r5
 800b090:	4621      	mov	r1, r4
 800b092:	f7ff ff67 	bl	800af64 <tcp_output_alloc_header_common>
 800b096:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d006      	beq.n	800b0ac <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0a2:	68fa      	ldr	r2, [r7, #12]
 800b0a4:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800b0a6:	441a      	add	r2, r3
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800b0ac:	697b      	ldr	r3, [r7, #20]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3718      	adds	r7, #24
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bdb0      	pop	{r4, r5, r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	08010818 	.word	0x08010818
 800b0bc:	08010f20 	.word	0x08010f20
 800b0c0:	0801086c 	.word	0x0801086c

0800b0c4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b088      	sub	sp, #32
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	4611      	mov	r1, r2
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	71fb      	strb	r3, [r7, #7]
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <tcp_output_fill_options+0x2e>
 800b0e4:	4b12      	ldr	r3, [pc, #72]	@ (800b130 <tcp_output_fill_options+0x6c>)
 800b0e6:	f240 7256 	movw	r2, #1878	@ 0x756
 800b0ea:	4912      	ldr	r1, [pc, #72]	@ (800b134 <tcp_output_fill_options+0x70>)
 800b0ec:	4812      	ldr	r0, [pc, #72]	@ (800b138 <tcp_output_fill_options+0x74>)
 800b0ee:	f003 f923 	bl	800e338 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	3314      	adds	r3, #20
 800b0fc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b0fe:	8bfb      	ldrh	r3, [r7, #30]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	461a      	mov	r2, r3
 800b104:	79fb      	ldrb	r3, [r7, #7]
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	f003 0304 	and.w	r3, r3, #4
 800b10c:	4413      	add	r3, r2
 800b10e:	3314      	adds	r3, #20
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	4413      	add	r3, r2
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	429a      	cmp	r2, r3
 800b118:	d006      	beq.n	800b128 <tcp_output_fill_options+0x64>
 800b11a:	4b05      	ldr	r3, [pc, #20]	@ (800b130 <tcp_output_fill_options+0x6c>)
 800b11c:	f240 7275 	movw	r2, #1909	@ 0x775
 800b120:	4906      	ldr	r1, [pc, #24]	@ (800b13c <tcp_output_fill_options+0x78>)
 800b122:	4805      	ldr	r0, [pc, #20]	@ (800b138 <tcp_output_fill_options+0x74>)
 800b124:	f003 f908 	bl	800e338 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b128:	bf00      	nop
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	08010818 	.word	0x08010818
 800b134:	08010f48 	.word	0x08010f48
 800b138:	0801086c 	.word	0x0801086c
 800b13c:	08010e40 	.word	0x08010e40

0800b140 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	@ 0x28
 800b144:	af04      	add	r7, sp, #16
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
 800b14c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <tcp_output_control_segment+0x22>
 800b154:	4b1c      	ldr	r3, [pc, #112]	@ (800b1c8 <tcp_output_control_segment+0x88>)
 800b156:	f240 7287 	movw	r2, #1927	@ 0x787
 800b15a:	491c      	ldr	r1, [pc, #112]	@ (800b1cc <tcp_output_control_segment+0x8c>)
 800b15c:	481c      	ldr	r0, [pc, #112]	@ (800b1d0 <tcp_output_control_segment+0x90>)
 800b15e:	f003 f8eb 	bl	800e338 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b162:	683a      	ldr	r2, [r7, #0]
 800b164:	6879      	ldr	r1, [r7, #4]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f7fe ff42 	bl	8009ff0 <tcp_route>
 800b16c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b174:	23fc      	movs	r3, #252	@ 0xfc
 800b176:	75fb      	strb	r3, [r7, #23]
 800b178:	e01c      	b.n	800b1b4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	7adb      	ldrb	r3, [r3, #11]
 800b184:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	7a9b      	ldrb	r3, [r3, #10]
 800b18a:	757b      	strb	r3, [r7, #21]
 800b18c:	e003      	b.n	800b196 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b18e:	23ff      	movs	r3, #255	@ 0xff
 800b190:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b192:	2300      	movs	r3, #0
 800b194:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b196:	7dba      	ldrb	r2, [r7, #22]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	9302      	str	r3, [sp, #8]
 800b19c:	2306      	movs	r3, #6
 800b19e:	9301      	str	r3, [sp, #4]
 800b1a0:	7d7b      	ldrb	r3, [r7, #21]
 800b1a2:	9300      	str	r3, [sp, #0]
 800b1a4:	4613      	mov	r3, r2
 800b1a6:	683a      	ldr	r2, [r7, #0]
 800b1a8:	6879      	ldr	r1, [r7, #4]
 800b1aa:	68b8      	ldr	r0, [r7, #8]
 800b1ac:	f001 ff96 	bl	800d0dc <ip4_output_if>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b1b4:	68b8      	ldr	r0, [r7, #8]
 800b1b6:	f7fa fde9 	bl	8005d8c <pbuf_free>
  return err;
 800b1ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3718      	adds	r7, #24
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	08010818 	.word	0x08010818
 800b1cc:	08010f70 	.word	0x08010f70
 800b1d0:	0801086c 	.word	0x0801086c

0800b1d4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b1d4:	b590      	push	{r4, r7, lr}
 800b1d6:	b08b      	sub	sp, #44	@ 0x2c
 800b1d8:	af04      	add	r7, sp, #16
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	607a      	str	r2, [r7, #4]
 800b1e0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d106      	bne.n	800b1f6 <tcp_rst+0x22>
 800b1e8:	4b1f      	ldr	r3, [pc, #124]	@ (800b268 <tcp_rst+0x94>)
 800b1ea:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800b1ee:	491f      	ldr	r1, [pc, #124]	@ (800b26c <tcp_rst+0x98>)
 800b1f0:	481f      	ldr	r0, [pc, #124]	@ (800b270 <tcp_rst+0x9c>)
 800b1f2:	f003 f8a1 	bl	800e338 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d106      	bne.n	800b20a <tcp_rst+0x36>
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b268 <tcp_rst+0x94>)
 800b1fe:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800b202:	491c      	ldr	r1, [pc, #112]	@ (800b274 <tcp_rst+0xa0>)
 800b204:	481a      	ldr	r0, [pc, #104]	@ (800b270 <tcp_rst+0x9c>)
 800b206:	f003 f897 	bl	800e338 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b20a:	2300      	movs	r3, #0
 800b20c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b20e:	f246 0308 	movw	r3, #24584	@ 0x6008
 800b212:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b214:	7dfb      	ldrb	r3, [r7, #23]
 800b216:	b29c      	uxth	r4, r3
 800b218:	68b8      	ldr	r0, [r7, #8]
 800b21a:	f7f9 f9b6 	bl	800458a <lwip_htonl>
 800b21e:	4602      	mov	r2, r0
 800b220:	8abb      	ldrh	r3, [r7, #20]
 800b222:	9303      	str	r3, [sp, #12]
 800b224:	2314      	movs	r3, #20
 800b226:	9302      	str	r3, [sp, #8]
 800b228:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800b22a:	9301      	str	r3, [sp, #4]
 800b22c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	4613      	mov	r3, r2
 800b232:	2200      	movs	r2, #0
 800b234:	4621      	mov	r1, r4
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff fe94 	bl	800af64 <tcp_output_alloc_header_common>
 800b23c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00c      	beq.n	800b25e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	2200      	movs	r2, #0
 800b248:	6939      	ldr	r1, [r7, #16]
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff ff3a 	bl	800b0c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	6939      	ldr	r1, [r7, #16]
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff ff72 	bl	800b140 <tcp_output_control_segment>
 800b25c:	e000      	b.n	800b260 <tcp_rst+0x8c>
    return;
 800b25e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b260:	371c      	adds	r7, #28
 800b262:	46bd      	mov	sp, r7
 800b264:	bd90      	pop	{r4, r7, pc}
 800b266:	bf00      	nop
 800b268:	08010818 	.word	0x08010818
 800b26c:	08010f9c 	.word	0x08010f9c
 800b270:	0801086c 	.word	0x0801086c
 800b274:	08010fb8 	.word	0x08010fb8

0800b278 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b278:	b590      	push	{r4, r7, lr}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b280:	2300      	movs	r3, #0
 800b282:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <tcp_send_empty_ack+0x24>
 800b28e:	4b28      	ldr	r3, [pc, #160]	@ (800b330 <tcp_send_empty_ack+0xb8>)
 800b290:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800b294:	4927      	ldr	r1, [pc, #156]	@ (800b334 <tcp_send_empty_ack+0xbc>)
 800b296:	4828      	ldr	r0, [pc, #160]	@ (800b338 <tcp_send_empty_ack+0xc0>)
 800b298:	f003 f84e 	bl	800e338 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	f003 0304 	and.w	r3, r3, #4
 800b2a6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b2a8:	7d7b      	ldrb	r3, [r7, #21]
 800b2aa:	b29c      	uxth	r4, r3
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7f9 f96a 	bl	800458a <lwip_htonl>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4621      	mov	r1, r4
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff fec3 	bl	800b048 <tcp_output_alloc_header>
 800b2c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	8b5b      	ldrh	r3, [r3, #26]
 800b2ce:	f043 0303 	orr.w	r3, r3, #3
 800b2d2:	b29a      	uxth	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b2d8:	f06f 0301 	mvn.w	r3, #1
 800b2dc:	e023      	b.n	800b326 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b2de:	7dbb      	ldrb	r3, [r7, #22]
 800b2e0:	7dfa      	ldrb	r2, [r7, #23]
 800b2e2:	6939      	ldr	r1, [r7, #16]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f7ff feed 	bl	800b0c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	3304      	adds	r3, #4
 800b2f0:	6939      	ldr	r1, [r7, #16]
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff ff24 	bl	800b140 <tcp_output_control_segment>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b2fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d007      	beq.n	800b314 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	8b5b      	ldrh	r3, [r3, #26]
 800b308:	f043 0303 	orr.w	r3, r3, #3
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	835a      	strh	r2, [r3, #26]
 800b312:	e006      	b.n	800b322 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	8b5b      	ldrh	r3, [r3, #26]
 800b318:	f023 0303 	bic.w	r3, r3, #3
 800b31c:	b29a      	uxth	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b322:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b326:	4618      	mov	r0, r3
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd90      	pop	{r4, r7, pc}
 800b32e:	bf00      	nop
 800b330:	08010818 	.word	0x08010818
 800b334:	08010fd4 	.word	0x08010fd4
 800b338:	0801086c 	.word	0x0801086c

0800b33c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b33c:	b590      	push	{r4, r7, lr}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b344:	2300      	movs	r3, #0
 800b346:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d106      	bne.n	800b35c <tcp_keepalive+0x20>
 800b34e:	4b18      	ldr	r3, [pc, #96]	@ (800b3b0 <tcp_keepalive+0x74>)
 800b350:	f640 0224 	movw	r2, #2084	@ 0x824
 800b354:	4917      	ldr	r1, [pc, #92]	@ (800b3b4 <tcp_keepalive+0x78>)
 800b356:	4818      	ldr	r0, [pc, #96]	@ (800b3b8 <tcp_keepalive+0x7c>)
 800b358:	f002 ffee 	bl	800e338 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	b29c      	uxth	r4, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b364:	3b01      	subs	r3, #1
 800b366:	4618      	mov	r0, r3
 800b368:	f7f9 f90f 	bl	800458a <lwip_htonl>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2200      	movs	r2, #0
 800b370:	4621      	mov	r1, r4
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7ff fe68 	bl	800b048 <tcp_output_alloc_header>
 800b378:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d102      	bne.n	800b386 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b380:	f04f 33ff 	mov.w	r3, #4294967295
 800b384:	e010      	b.n	800b3a8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2200      	movs	r2, #0
 800b38a:	6939      	ldr	r1, [r7, #16]
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f7ff fe99 	bl	800b0c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3304      	adds	r3, #4
 800b398:	6939      	ldr	r1, [r7, #16]
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f7ff fed0 	bl	800b140 <tcp_output_control_segment>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	371c      	adds	r7, #28
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd90      	pop	{r4, r7, pc}
 800b3b0:	08010818 	.word	0x08010818
 800b3b4:	08010ff4 	.word	0x08010ff4
 800b3b8:	0801086c 	.word	0x0801086c

0800b3bc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b3bc:	b590      	push	{r4, r7, lr}
 800b3be:	b08b      	sub	sp, #44	@ 0x2c
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d106      	bne.n	800b3de <tcp_zero_window_probe+0x22>
 800b3d0:	4b4c      	ldr	r3, [pc, #304]	@ (800b504 <tcp_zero_window_probe+0x148>)
 800b3d2:	f640 024f 	movw	r2, #2127	@ 0x84f
 800b3d6:	494c      	ldr	r1, [pc, #304]	@ (800b508 <tcp_zero_window_probe+0x14c>)
 800b3d8:	484c      	ldr	r0, [pc, #304]	@ (800b50c <tcp_zero_window_probe+0x150>)
 800b3da:	f002 ffad 	bl	800e338 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3e2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800b3e4:	6a3b      	ldr	r3, [r7, #32]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e086      	b.n	800b4fc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b3f4:	2bff      	cmp	r3, #255	@ 0xff
 800b3f6:	d007      	beq.n	800b408 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800b3fe:	3301      	adds	r3, #1
 800b400:	b2da      	uxtb	r2, r3
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800b408:	6a3b      	ldr	r3, [r7, #32]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	899b      	ldrh	r3, [r3, #12]
 800b40e:	b29b      	uxth	r3, r3
 800b410:	4618      	mov	r0, r3
 800b412:	f7f9 f8a5 	bl	8004560 <lwip_htons>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d005      	beq.n	800b42e <tcp_zero_window_probe+0x72>
 800b422:	6a3b      	ldr	r3, [r7, #32]
 800b424:	891b      	ldrh	r3, [r3, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d101      	bne.n	800b42e <tcp_zero_window_probe+0x72>
 800b42a:	2301      	movs	r3, #1
 800b42c:	e000      	b.n	800b430 <tcp_zero_window_probe+0x74>
 800b42e:	2300      	movs	r3, #0
 800b430:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800b432:	7ffb      	ldrb	r3, [r7, #31]
 800b434:	2b00      	cmp	r3, #0
 800b436:	bf0c      	ite	eq
 800b438:	2301      	moveq	r3, #1
 800b43a:	2300      	movne	r3, #0
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800b440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b444:	b299      	uxth	r1, r3
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	8bba      	ldrh	r2, [r7, #28]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff fdfa 	bl	800b048 <tcp_output_alloc_header>
 800b454:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800b45c:	f04f 33ff 	mov.w	r3, #4294967295
 800b460:	e04c      	b.n	800b4fc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800b468:	7ffb      	ldrb	r3, [r7, #31]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d011      	beq.n	800b492 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	899b      	ldrh	r3, [r3, #12]
 800b472:	b29b      	uxth	r3, r3
 800b474:	b21b      	sxth	r3, r3
 800b476:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b47a:	b21c      	sxth	r4, r3
 800b47c:	2011      	movs	r0, #17
 800b47e:	f7f9 f86f 	bl	8004560 <lwip_htons>
 800b482:	4603      	mov	r3, r0
 800b484:	b21b      	sxth	r3, r3
 800b486:	4323      	orrs	r3, r4
 800b488:	b21b      	sxth	r3, r3
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	819a      	strh	r2, [r3, #12]
 800b490:	e010      	b.n	800b4b4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	3314      	adds	r3, #20
 800b498:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	6858      	ldr	r0, [r3, #4]
 800b49e:	6a3b      	ldr	r3, [r7, #32]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	891a      	ldrh	r2, [r3, #8]
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	891b      	ldrh	r3, [r3, #8]
 800b4a8:	1ad3      	subs	r3, r2, r3
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	2201      	movs	r2, #1
 800b4ae:	6939      	ldr	r1, [r7, #16]
 800b4b0:	f7fa fe56 	bl	8006160 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7f9 f865 	bl	800458a <lwip_htonl>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	1ad3      	subs	r3, r2, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	da02      	bge.n	800b4d8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b4d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b4dc:	2200      	movs	r2, #0
 800b4de:	69b9      	ldr	r1, [r7, #24]
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff fdef 	bl	800b0c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	3304      	adds	r3, #4
 800b4ec:	69b9      	ldr	r1, [r7, #24]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f7ff fe26 	bl	800b140 <tcp_output_control_segment>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b4f8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	372c      	adds	r7, #44	@ 0x2c
 800b500:	46bd      	mov	sp, r7
 800b502:	bd90      	pop	{r4, r7, pc}
 800b504:	08010818 	.word	0x08010818
 800b508:	08011010 	.word	0x08011010
 800b50c:	0801086c 	.word	0x0801086c

0800b510 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800b518:	f7fa ff10 	bl	800633c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800b51c:	4b0a      	ldr	r3, [pc, #40]	@ (800b548 <tcpip_tcp_timer+0x38>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d103      	bne.n	800b52c <tcpip_tcp_timer+0x1c>
 800b524:	4b09      	ldr	r3, [pc, #36]	@ (800b54c <tcpip_tcp_timer+0x3c>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d005      	beq.n	800b538 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b52c:	2200      	movs	r2, #0
 800b52e:	4908      	ldr	r1, [pc, #32]	@ (800b550 <tcpip_tcp_timer+0x40>)
 800b530:	20fa      	movs	r0, #250	@ 0xfa
 800b532:	f000 f8f3 	bl	800b71c <sys_timeout>
 800b536:	e003      	b.n	800b540 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800b538:	4b06      	ldr	r3, [pc, #24]	@ (800b554 <tcpip_tcp_timer+0x44>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]
  }
}
 800b53e:	bf00      	nop
 800b540:	bf00      	nop
 800b542:	3708      	adds	r7, #8
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	24007b78 	.word	0x24007b78
 800b54c:	24007b7c 	.word	0x24007b7c
 800b550:	0800b511 	.word	0x0800b511
 800b554:	24007bc4 	.word	0x24007bc4

0800b558 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800b55c:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <tcp_timer_needed+0x30>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d10f      	bne.n	800b584 <tcp_timer_needed+0x2c>
 800b564:	4b09      	ldr	r3, [pc, #36]	@ (800b58c <tcp_timer_needed+0x34>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d103      	bne.n	800b574 <tcp_timer_needed+0x1c>
 800b56c:	4b08      	ldr	r3, [pc, #32]	@ (800b590 <tcp_timer_needed+0x38>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d007      	beq.n	800b584 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800b574:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <tcp_timer_needed+0x30>)
 800b576:	2201      	movs	r2, #1
 800b578:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800b57a:	2200      	movs	r2, #0
 800b57c:	4905      	ldr	r1, [pc, #20]	@ (800b594 <tcp_timer_needed+0x3c>)
 800b57e:	20fa      	movs	r0, #250	@ 0xfa
 800b580:	f000 f8cc 	bl	800b71c <sys_timeout>
  }
}
 800b584:	bf00      	nop
 800b586:	bd80      	pop	{r7, pc}
 800b588:	24007bc4 	.word	0x24007bc4
 800b58c:	24007b78 	.word	0x24007b78
 800b590:	24007b7c 	.word	0x24007b7c
 800b594:	0800b511 	.word	0x0800b511

0800b598 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800b5a4:	2006      	movs	r0, #6
 800b5a6:	f7f9 fd0b 	bl	8004fc0 <memp_malloc>
 800b5aa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d109      	bne.n	800b5c6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d151      	bne.n	800b65c <sys_timeout_abs+0xc4>
 800b5b8:	4b2a      	ldr	r3, [pc, #168]	@ (800b664 <sys_timeout_abs+0xcc>)
 800b5ba:	22be      	movs	r2, #190	@ 0xbe
 800b5bc:	492a      	ldr	r1, [pc, #168]	@ (800b668 <sys_timeout_abs+0xd0>)
 800b5be:	482b      	ldr	r0, [pc, #172]	@ (800b66c <sys_timeout_abs+0xd4>)
 800b5c0:	f002 feba 	bl	800e338 <iprintf>
    return;
 800b5c4:	e04a      	b.n	800b65c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	68ba      	ldr	r2, [r7, #8]
 800b5d0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	687a      	ldr	r2, [r7, #4]
 800b5d6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800b5de:	4b24      	ldr	r3, [pc, #144]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d103      	bne.n	800b5ee <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800b5e6:	4a22      	ldr	r2, [pc, #136]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	6013      	str	r3, [r2, #0]
    return;
 800b5ec:	e037      	b.n	800b65e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	685a      	ldr	r2, [r3, #4]
 800b5f2:	4b1f      	ldr	r3, [pc, #124]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	1ad3      	subs	r3, r2, r3
 800b5fa:	0fdb      	lsrs	r3, r3, #31
 800b5fc:	f003 0301 	and.w	r3, r3, #1
 800b600:	b2db      	uxtb	r3, r3
 800b602:	2b00      	cmp	r3, #0
 800b604:	d007      	beq.n	800b616 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800b606:	4b1a      	ldr	r3, [pc, #104]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800b60e:	4a18      	ldr	r2, [pc, #96]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	e023      	b.n	800b65e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800b616:	4b16      	ldr	r3, [pc, #88]	@ (800b670 <sys_timeout_abs+0xd8>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	617b      	str	r3, [r7, #20]
 800b61c:	e01a      	b.n	800b654 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00b      	beq.n	800b63e <sys_timeout_abs+0xa6>
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	685a      	ldr	r2, [r3, #4]
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	0fdb      	lsrs	r3, r3, #31
 800b634:	f003 0301 	and.w	r3, r3, #1
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d007      	beq.n	800b64e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	693a      	ldr	r2, [r7, #16]
 800b64a:	601a      	str	r2, [r3, #0]
        break;
 800b64c:	e007      	b.n	800b65e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1e1      	bne.n	800b61e <sys_timeout_abs+0x86>
 800b65a:	e000      	b.n	800b65e <sys_timeout_abs+0xc6>
    return;
 800b65c:	bf00      	nop
      }
    }
  }
}
 800b65e:	3718      	adds	r7, #24
 800b660:	46bd      	mov	sp, r7
 800b662:	bd80      	pop	{r7, pc}
 800b664:	08011034 	.word	0x08011034
 800b668:	08011068 	.word	0x08011068
 800b66c:	080110a8 	.word	0x080110a8
 800b670:	24007bbc 	.word	0x24007bbc

0800b674 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	4798      	blx	r3

  now = sys_now();
 800b686:	f7f8 fd23 	bl	80040d0 <sys_now>
 800b68a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d0 <lwip_cyclic_timer+0x5c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4413      	add	r3, r2
 800b696:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	1ad3      	subs	r3, r2, r3
 800b69e:	0fdb      	lsrs	r3, r3, #31
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d009      	beq.n	800b6be <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	4907      	ldr	r1, [pc, #28]	@ (800b6d4 <lwip_cyclic_timer+0x60>)
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff ff6e 	bl	800b598 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800b6bc:	e004      	b.n	800b6c8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4904      	ldr	r1, [pc, #16]	@ (800b6d4 <lwip_cyclic_timer+0x60>)
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f7ff ff68 	bl	800b598 <sys_timeout_abs>
}
 800b6c8:	bf00      	nop
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}
 800b6d0:	24007bc0 	.word	0x24007bc0
 800b6d4:	0800b675 	.word	0x0800b675

0800b6d8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b6de:	2301      	movs	r3, #1
 800b6e0:	607b      	str	r3, [r7, #4]
 800b6e2:	e00e      	b.n	800b702 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800b6e4:	4a0b      	ldr	r2, [pc, #44]	@ (800b714 <sys_timeouts_init+0x3c>)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	00db      	lsls	r3, r3, #3
 800b6f0:	4a08      	ldr	r2, [pc, #32]	@ (800b714 <sys_timeouts_init+0x3c>)
 800b6f2:	4413      	add	r3, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	4908      	ldr	r1, [pc, #32]	@ (800b718 <sys_timeouts_init+0x40>)
 800b6f8:	f000 f810 	bl	800b71c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3301      	adds	r3, #1
 800b700:	607b      	str	r3, [r7, #4]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2b02      	cmp	r3, #2
 800b706:	d9ed      	bls.n	800b6e4 <sys_timeouts_init+0xc>
  }
}
 800b708:	bf00      	nop
 800b70a:	bf00      	nop
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	08011c18 	.word	0x08011c18
 800b718:	0800b675 	.word	0x0800b675

0800b71c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b72e:	d306      	bcc.n	800b73e <sys_timeout+0x22>
 800b730:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <sys_timeout+0x40>)
 800b732:	f240 1229 	movw	r2, #297	@ 0x129
 800b736:	490a      	ldr	r1, [pc, #40]	@ (800b760 <sys_timeout+0x44>)
 800b738:	480a      	ldr	r0, [pc, #40]	@ (800b764 <sys_timeout+0x48>)
 800b73a:	f002 fdfd 	bl	800e338 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800b73e:	f7f8 fcc7 	bl	80040d0 <sys_now>
 800b742:	4602      	mov	r2, r0
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4413      	add	r3, r2
 800b748:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	68b9      	ldr	r1, [r7, #8]
 800b74e:	6978      	ldr	r0, [r7, #20]
 800b750:	f7ff ff22 	bl	800b598 <sys_timeout_abs>
#endif
}
 800b754:	bf00      	nop
 800b756:	3718      	adds	r7, #24
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	08011034 	.word	0x08011034
 800b760:	080110d0 	.word	0x080110d0
 800b764:	080110a8 	.word	0x080110a8

0800b768 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800b76e:	f7f8 fcaf 	bl	80040d0 <sys_now>
 800b772:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800b774:	4b1a      	ldr	r3, [pc, #104]	@ (800b7e0 <sys_check_timeouts+0x78>)
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d001      	beq.n	800b782 <sys_check_timeouts+0x1a>
 800b77e:	f7f9 ffcb 	bl	8005718 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800b782:	4b18      	ldr	r3, [pc, #96]	@ (800b7e4 <sys_check_timeouts+0x7c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d022      	beq.n	800b7d4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	685b      	ldr	r3, [r3, #4]
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	1ad3      	subs	r3, r2, r3
 800b796:	0fdb      	lsrs	r3, r3, #31
 800b798:	f003 0301 	and.w	r3, r3, #1
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d11a      	bne.n	800b7d8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a0f      	ldr	r2, [pc, #60]	@ (800b7e4 <sys_check_timeouts+0x7c>)
 800b7a8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	4a0b      	ldr	r2, [pc, #44]	@ (800b7e8 <sys_check_timeouts+0x80>)
 800b7bc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800b7be:	68b9      	ldr	r1, [r7, #8]
 800b7c0:	2006      	movs	r0, #6
 800b7c2:	f7f9 fc6d 	bl	80050a0 <memp_free>
    if (handler != NULL) {
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0d3      	beq.n	800b774 <sys_check_timeouts+0xc>
      handler(arg);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	4798      	blx	r3
  do {
 800b7d2:	e7cf      	b.n	800b774 <sys_check_timeouts+0xc>
      return;
 800b7d4:	bf00      	nop
 800b7d6:	e000      	b.n	800b7da <sys_check_timeouts+0x72>
      return;
 800b7d8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	24007b69 	.word	0x24007b69
 800b7e4:	24007bbc 	.word	0x24007bbc
 800b7e8:	24007bc0 	.word	0x24007bc0

0800b7ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b7f0:	f002 fca2 	bl	800e138 <rand>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b802:	b29a      	uxth	r2, r3
 800b804:	4b01      	ldr	r3, [pc, #4]	@ (800b80c <udp_init+0x20>)
 800b806:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b808:	bf00      	nop
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	2400002c 	.word	0x2400002c

0800b810 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d105      	bne.n	800b830 <udp_input_local_match+0x20>
 800b824:	4b27      	ldr	r3, [pc, #156]	@ (800b8c4 <udp_input_local_match+0xb4>)
 800b826:	2287      	movs	r2, #135	@ 0x87
 800b828:	4927      	ldr	r1, [pc, #156]	@ (800b8c8 <udp_input_local_match+0xb8>)
 800b82a:	4828      	ldr	r0, [pc, #160]	@ (800b8cc <udp_input_local_match+0xbc>)
 800b82c:	f002 fd84 	bl	800e338 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d105      	bne.n	800b842 <udp_input_local_match+0x32>
 800b836:	4b23      	ldr	r3, [pc, #140]	@ (800b8c4 <udp_input_local_match+0xb4>)
 800b838:	2288      	movs	r2, #136	@ 0x88
 800b83a:	4925      	ldr	r1, [pc, #148]	@ (800b8d0 <udp_input_local_match+0xc0>)
 800b83c:	4823      	ldr	r0, [pc, #140]	@ (800b8cc <udp_input_local_match+0xbc>)
 800b83e:	f002 fd7b 	bl	800e338 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	7a1b      	ldrb	r3, [r3, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	7a1a      	ldrb	r2, [r3, #8]
 800b84e:	4b21      	ldr	r3, [pc, #132]	@ (800b8d4 <udp_input_local_match+0xc4>)
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b856:	3301      	adds	r3, #1
 800b858:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d001      	beq.n	800b862 <udp_input_local_match+0x52>
    return 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	e02b      	b.n	800b8ba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800b862:	79fb      	ldrb	r3, [r7, #7]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d018      	beq.n	800b89a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d013      	beq.n	800b896 <udp_input_local_match+0x86>
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b876:	4b17      	ldr	r3, [pc, #92]	@ (800b8d4 <udp_input_local_match+0xc4>)
 800b878:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b87e:	d00a      	beq.n	800b896 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	4b13      	ldr	r3, [pc, #76]	@ (800b8d4 <udp_input_local_match+0xc4>)
 800b886:	695b      	ldr	r3, [r3, #20]
 800b888:	405a      	eors	r2, r3
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	3308      	adds	r3, #8
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800b892:	2b00      	cmp	r3, #0
 800b894:	d110      	bne.n	800b8b8 <udp_input_local_match+0xa8>
          return 1;
 800b896:	2301      	movs	r3, #1
 800b898:	e00f      	b.n	800b8ba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d009      	beq.n	800b8b4 <udp_input_local_match+0xa4>
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d005      	beq.n	800b8b4 <udp_input_local_match+0xa4>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	4b09      	ldr	r3, [pc, #36]	@ (800b8d4 <udp_input_local_match+0xc4>)
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d101      	bne.n	800b8b8 <udp_input_local_match+0xa8>
        return 1;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e000      	b.n	800b8ba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	0801111c 	.word	0x0801111c
 800b8c8:	0801114c 	.word	0x0801114c
 800b8cc:	08011170 	.word	0x08011170
 800b8d0:	08011198 	.word	0x08011198
 800b8d4:	24004c50 	.word	0x24004c50

0800b8d8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800b8d8:	b590      	push	{r4, r7, lr}
 800b8da:	b08d      	sub	sp, #52	@ 0x34
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d105      	bne.n	800b8f8 <udp_input+0x20>
 800b8ec:	4b7c      	ldr	r3, [pc, #496]	@ (800bae0 <udp_input+0x208>)
 800b8ee:	22cf      	movs	r2, #207	@ 0xcf
 800b8f0:	497c      	ldr	r1, [pc, #496]	@ (800bae4 <udp_input+0x20c>)
 800b8f2:	487d      	ldr	r0, [pc, #500]	@ (800bae8 <udp_input+0x210>)
 800b8f4:	f002 fd20 	bl	800e338 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <udp_input+0x32>
 800b8fe:	4b78      	ldr	r3, [pc, #480]	@ (800bae0 <udp_input+0x208>)
 800b900:	22d0      	movs	r2, #208	@ 0xd0
 800b902:	497a      	ldr	r1, [pc, #488]	@ (800baec <udp_input+0x214>)
 800b904:	4878      	ldr	r0, [pc, #480]	@ (800bae8 <udp_input+0x210>)
 800b906:	f002 fd17 	bl	800e338 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	895b      	ldrh	r3, [r3, #10]
 800b90e:	2b07      	cmp	r3, #7
 800b910:	d803      	bhi.n	800b91a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7fa fa3a 	bl	8005d8c <pbuf_free>
    goto end;
 800b918:	e0de      	b.n	800bad8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800b920:	4b73      	ldr	r3, [pc, #460]	@ (800baf0 <udp_input+0x218>)
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	4a72      	ldr	r2, [pc, #456]	@ (800baf0 <udp_input+0x218>)
 800b926:	6812      	ldr	r2, [r2, #0]
 800b928:	4611      	mov	r1, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 fcae 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800b930:	4603      	mov	r3, r0
 800b932:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800b934:	697b      	ldr	r3, [r7, #20]
 800b936:	881b      	ldrh	r3, [r3, #0]
 800b938:	b29b      	uxth	r3, r3
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7f8 fe10 	bl	8004560 <lwip_htons>
 800b940:	4603      	mov	r3, r0
 800b942:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	885b      	ldrh	r3, [r3, #2]
 800b948:	b29b      	uxth	r3, r3
 800b94a:	4618      	mov	r0, r3
 800b94c:	f7f8 fe08 	bl	8004560 <lwip_htons>
 800b950:	4603      	mov	r3, r0
 800b952:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800b954:	2300      	movs	r3, #0
 800b956:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800b95c:	2300      	movs	r3, #0
 800b95e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800b960:	4b64      	ldr	r3, [pc, #400]	@ (800baf4 <udp_input+0x21c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	627b      	str	r3, [r7, #36]	@ 0x24
 800b966:	e054      	b.n	800ba12 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	8a5b      	ldrh	r3, [r3, #18]
 800b96c:	89fa      	ldrh	r2, [r7, #14]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d14a      	bne.n	800ba08 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800b972:	7cfb      	ldrb	r3, [r7, #19]
 800b974:	461a      	mov	r2, r3
 800b976:	6839      	ldr	r1, [r7, #0]
 800b978:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b97a:	f7ff ff49 	bl	800b810 <udp_input_local_match>
 800b97e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800b980:	2b00      	cmp	r3, #0
 800b982:	d041      	beq.n	800ba08 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b986:	7c1b      	ldrb	r3, [r3, #16]
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d11d      	bne.n	800b9cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d102      	bne.n	800b99c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800b996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b998:	61fb      	str	r3, [r7, #28]
 800b99a:	e017      	b.n	800b9cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800b99c:	7cfb      	ldrb	r3, [r7, #19]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d014      	beq.n	800b9cc <udp_input+0xf4>
 800b9a2:	4b53      	ldr	r3, [pc, #332]	@ (800baf0 <udp_input+0x218>)
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9aa:	d10f      	bne.n	800b9cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3304      	adds	r3, #4
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d008      	beq.n	800b9cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	3304      	adds	r3, #4
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d101      	bne.n	800b9cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	8a9b      	ldrh	r3, [r3, #20]
 800b9d0:	8a3a      	ldrh	r2, [r7, #16]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d118      	bne.n	800ba08 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800b9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	4b43      	ldr	r3, [pc, #268]	@ (800baf0 <udp_input+0x218>)
 800b9e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d10e      	bne.n	800ba08 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d014      	beq.n	800ba1a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f2:	68da      	ldr	r2, [r3, #12]
 800b9f4:	6a3b      	ldr	r3, [r7, #32]
 800b9f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800b9f8:	4b3e      	ldr	r3, [pc, #248]	@ (800baf4 <udp_input+0x21c>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ba00:	4a3c      	ldr	r2, [pc, #240]	@ (800baf4 <udp_input+0x21c>)
 800ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba04:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ba06:	e008      	b.n	800ba1a <udp_input+0x142>
      }
    }

    prev = pcb;
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1a7      	bne.n	800b968 <udp_input+0x90>
 800ba18:	e000      	b.n	800ba1c <udp_input+0x144>
        break;
 800ba1a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d101      	bne.n	800ba26 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <udp_input+0x15a>
    for_us = 1;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	76fb      	strb	r3, [r7, #27]
 800ba30:	e00a      	b.n	800ba48 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	3304      	adds	r3, #4
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	4b2d      	ldr	r3, [pc, #180]	@ (800baf0 <udp_input+0x218>)
 800ba3a:	695b      	ldr	r3, [r3, #20]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	bf0c      	ite	eq
 800ba40:	2301      	moveq	r3, #1
 800ba42:	2300      	movne	r3, #0
 800ba44:	b2db      	uxtb	r3, r3
 800ba46:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ba48:	7efb      	ldrb	r3, [r7, #27]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d041      	beq.n	800bad2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ba4e:	2108      	movs	r1, #8
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f7fa f915 	bl	8005c80 <pbuf_remove_header>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00a      	beq.n	800ba72 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ba5c:	4b20      	ldr	r3, [pc, #128]	@ (800bae0 <udp_input+0x208>)
 800ba5e:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800ba62:	4925      	ldr	r1, [pc, #148]	@ (800baf8 <udp_input+0x220>)
 800ba64:	4820      	ldr	r0, [pc, #128]	@ (800bae8 <udp_input+0x210>)
 800ba66:	f002 fc67 	bl	800e338 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f7fa f98e 	bl	8005d8c <pbuf_free>
      goto end;
 800ba70:	e032      	b.n	800bad8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d012      	beq.n	800ba9e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	699b      	ldr	r3, [r3, #24]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00a      	beq.n	800ba96 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	699c      	ldr	r4, [r3, #24]
 800ba84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba86:	69d8      	ldr	r0, [r3, #28]
 800ba88:	8a3b      	ldrh	r3, [r7, #16]
 800ba8a:	9300      	str	r3, [sp, #0]
 800ba8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bafc <udp_input+0x224>)
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ba92:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ba94:	e021      	b.n	800bada <udp_input+0x202>
        pbuf_free(p);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7fa f978 	bl	8005d8c <pbuf_free>
        goto end;
 800ba9c:	e01c      	b.n	800bad8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ba9e:	7cfb      	ldrb	r3, [r7, #19]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d112      	bne.n	800baca <udp_input+0x1f2>
 800baa4:	4b12      	ldr	r3, [pc, #72]	@ (800baf0 <udp_input+0x218>)
 800baa6:	695b      	ldr	r3, [r3, #20]
 800baa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800baac:	2be0      	cmp	r3, #224	@ 0xe0
 800baae:	d00c      	beq.n	800baca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800bab0:	4b0f      	ldr	r3, [pc, #60]	@ (800baf0 <udp_input+0x218>)
 800bab2:	899b      	ldrh	r3, [r3, #12]
 800bab4:	3308      	adds	r3, #8
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	b21b      	sxth	r3, r3
 800baba:	4619      	mov	r1, r3
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f7fa f952 	bl	8005d66 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800bac2:	2103      	movs	r1, #3
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f001 f8b7 	bl	800cc38 <icmp_dest_unreach>
      pbuf_free(p);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f7fa f95e 	bl	8005d8c <pbuf_free>
  return;
 800bad0:	e003      	b.n	800bada <udp_input+0x202>
    pbuf_free(p);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7fa f95a 	bl	8005d8c <pbuf_free>
  return;
 800bad8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bada:	372c      	adds	r7, #44	@ 0x2c
 800badc:	46bd      	mov	sp, r7
 800bade:	bd90      	pop	{r4, r7, pc}
 800bae0:	0801111c 	.word	0x0801111c
 800bae4:	080111c0 	.word	0x080111c0
 800bae8:	08011170 	.word	0x08011170
 800baec:	080111d8 	.word	0x080111d8
 800baf0:	24004c50 	.word	0x24004c50
 800baf4:	24007bc8 	.word	0x24007bc8
 800baf8:	080111f4 	.word	0x080111f4
 800bafc:	24004c60 	.word	0x24004c60

0800bb00 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d01e      	beq.n	800bb4e <udp_netif_ip_addr_changed+0x4e>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d01a      	beq.n	800bb4e <udp_netif_ip_addr_changed+0x4e>
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d017      	beq.n	800bb4e <udp_netif_ip_addr_changed+0x4e>
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d013      	beq.n	800bb4e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb26:	4b0d      	ldr	r3, [pc, #52]	@ (800bb5c <udp_netif_ip_addr_changed+0x5c>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	60fb      	str	r3, [r7, #12]
 800bb2c:	e00c      	b.n	800bb48 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681a      	ldr	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d103      	bne.n	800bb42 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	60fb      	str	r3, [r7, #12]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1ef      	bne.n	800bb2e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800bb4e:	bf00      	nop
 800bb50:	3714      	adds	r7, #20
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	24007bc8 	.word	0x24007bc8

0800bb60 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800bb68:	4915      	ldr	r1, [pc, #84]	@ (800bbc0 <etharp_free_entry+0x60>)
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	4613      	mov	r3, r2
 800bb6e:	005b      	lsls	r3, r3, #1
 800bb70:	4413      	add	r3, r2
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	440b      	add	r3, r1
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d013      	beq.n	800bba4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800bb7c:	4910      	ldr	r1, [pc, #64]	@ (800bbc0 <etharp_free_entry+0x60>)
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	4613      	mov	r3, r2
 800bb82:	005b      	lsls	r3, r3, #1
 800bb84:	4413      	add	r3, r2
 800bb86:	00db      	lsls	r3, r3, #3
 800bb88:	440b      	add	r3, r1
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fa f8fd 	bl	8005d8c <pbuf_free>
    arp_table[i].q = NULL;
 800bb92:	490b      	ldr	r1, [pc, #44]	@ (800bbc0 <etharp_free_entry+0x60>)
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4613      	mov	r3, r2
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4413      	add	r3, r2
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	440b      	add	r3, r1
 800bba0:	2200      	movs	r2, #0
 800bba2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800bba4:	4906      	ldr	r1, [pc, #24]	@ (800bbc0 <etharp_free_entry+0x60>)
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	4613      	mov	r3, r2
 800bbaa:	005b      	lsls	r3, r3, #1
 800bbac:	4413      	add	r3, r2
 800bbae:	00db      	lsls	r3, r3, #3
 800bbb0:	440b      	add	r3, r1
 800bbb2:	3314      	adds	r3, #20
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}
 800bbc0:	24007bcc 	.word	0x24007bcc

0800bbc4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e096      	b.n	800bcfe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800bbd0:	494f      	ldr	r1, [pc, #316]	@ (800bd10 <etharp_tmr+0x14c>)
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	005b      	lsls	r3, r3, #1
 800bbd8:	4413      	add	r3, r2
 800bbda:	00db      	lsls	r3, r3, #3
 800bbdc:	440b      	add	r3, r1
 800bbde:	3314      	adds	r3, #20
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800bbe4:	78fb      	ldrb	r3, [r7, #3]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f000 8086 	beq.w	800bcf8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800bbec:	4948      	ldr	r1, [pc, #288]	@ (800bd10 <etharp_tmr+0x14c>)
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	005b      	lsls	r3, r3, #1
 800bbf4:	4413      	add	r3, r2
 800bbf6:	00db      	lsls	r3, r3, #3
 800bbf8:	440b      	add	r3, r1
 800bbfa:	3312      	adds	r3, #18
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	b298      	uxth	r0, r3
 800bc02:	4943      	ldr	r1, [pc, #268]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	4613      	mov	r3, r2
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4413      	add	r3, r2
 800bc0c:	00db      	lsls	r3, r3, #3
 800bc0e:	440b      	add	r3, r1
 800bc10:	3312      	adds	r3, #18
 800bc12:	4602      	mov	r2, r0
 800bc14:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc16:	493e      	ldr	r1, [pc, #248]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	005b      	lsls	r3, r3, #1
 800bc1e:	4413      	add	r3, r2
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	440b      	add	r3, r1
 800bc24:	3312      	adds	r3, #18
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800bc2c:	d215      	bcs.n	800bc5a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc2e:	4938      	ldr	r1, [pc, #224]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	4413      	add	r3, r2
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3314      	adds	r3, #20
 800bc3e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d10e      	bne.n	800bc62 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800bc44:	4932      	ldr	r1, [pc, #200]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	4613      	mov	r3, r2
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	4413      	add	r3, r2
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	440b      	add	r3, r1
 800bc52:	3312      	adds	r3, #18
 800bc54:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d903      	bls.n	800bc62 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff ff80 	bl	800bb60 <etharp_free_entry>
 800bc60:	e04a      	b.n	800bcf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800bc62:	492b      	ldr	r1, [pc, #172]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	4613      	mov	r3, r2
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	4413      	add	r3, r2
 800bc6c:	00db      	lsls	r3, r3, #3
 800bc6e:	440b      	add	r3, r1
 800bc70:	3314      	adds	r3, #20
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	d10a      	bne.n	800bc8e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800bc78:	4925      	ldr	r1, [pc, #148]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	005b      	lsls	r3, r3, #1
 800bc80:	4413      	add	r3, r2
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	440b      	add	r3, r1
 800bc86:	3314      	adds	r3, #20
 800bc88:	2204      	movs	r2, #4
 800bc8a:	701a      	strb	r2, [r3, #0]
 800bc8c:	e034      	b.n	800bcf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800bc8e:	4920      	ldr	r1, [pc, #128]	@ (800bd10 <etharp_tmr+0x14c>)
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	4613      	mov	r3, r2
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	4413      	add	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	440b      	add	r3, r1
 800bc9c:	3314      	adds	r3, #20
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	2b04      	cmp	r3, #4
 800bca2:	d10a      	bne.n	800bcba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800bca4:	491a      	ldr	r1, [pc, #104]	@ (800bd10 <etharp_tmr+0x14c>)
 800bca6:	687a      	ldr	r2, [r7, #4]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	005b      	lsls	r3, r3, #1
 800bcac:	4413      	add	r3, r2
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	440b      	add	r3, r1
 800bcb2:	3314      	adds	r3, #20
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	701a      	strb	r2, [r3, #0]
 800bcb8:	e01e      	b.n	800bcf8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bcba:	4915      	ldr	r1, [pc, #84]	@ (800bd10 <etharp_tmr+0x14c>)
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4413      	add	r3, r2
 800bcc4:	00db      	lsls	r3, r3, #3
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3314      	adds	r3, #20
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d113      	bne.n	800bcf8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800bcd0:	490f      	ldr	r1, [pc, #60]	@ (800bd10 <etharp_tmr+0x14c>)
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	4413      	add	r3, r2
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	440b      	add	r3, r1
 800bcde:	3308      	adds	r3, #8
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	4613      	mov	r3, r2
 800bce6:	005b      	lsls	r3, r3, #1
 800bce8:	4413      	add	r3, r2
 800bcea:	00db      	lsls	r3, r3, #3
 800bcec:	4a08      	ldr	r2, [pc, #32]	@ (800bd10 <etharp_tmr+0x14c>)
 800bcee:	4413      	add	r3, r2
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	f000 fe6e 	bl	800c9d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	607b      	str	r3, [r7, #4]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b09      	cmp	r3, #9
 800bd02:	f77f af65 	ble.w	800bbd0 <etharp_tmr+0xc>
      }
    }
  }
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}
 800bd10:	24007bcc 	.word	0x24007bcc

0800bd14 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b08a      	sub	sp, #40	@ 0x28
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	60f8      	str	r0, [r7, #12]
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	607a      	str	r2, [r7, #4]
 800bd20:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800bd22:	230a      	movs	r3, #10
 800bd24:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bd26:	230a      	movs	r3, #10
 800bd28:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800bd2a:	230a      	movs	r3, #10
 800bd2c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800bd32:	230a      	movs	r3, #10
 800bd34:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800bd36:	2300      	movs	r3, #0
 800bd38:	83bb      	strh	r3, [r7, #28]
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	837b      	strh	r3, [r7, #26]
 800bd3e:	2300      	movs	r3, #0
 800bd40:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800bd42:	2300      	movs	r3, #0
 800bd44:	843b      	strh	r3, [r7, #32]
 800bd46:	e0ae      	b.n	800bea6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800bd48:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bd4c:	49a6      	ldr	r1, [pc, #664]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bd4e:	4613      	mov	r3, r2
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	4413      	add	r3, r2
 800bd54:	00db      	lsls	r3, r3, #3
 800bd56:	440b      	add	r3, r1
 800bd58:	3314      	adds	r3, #20
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800bd5e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bd62:	2b0a      	cmp	r3, #10
 800bd64:	d105      	bne.n	800bd72 <etharp_find_entry+0x5e>
 800bd66:	7dfb      	ldrb	r3, [r7, #23]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d102      	bne.n	800bd72 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800bd6c:	8c3b      	ldrh	r3, [r7, #32]
 800bd6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bd70:	e095      	b.n	800be9e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	f000 8092 	beq.w	800be9e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d009      	beq.n	800bd94 <etharp_find_entry+0x80>
 800bd80:	7dfb      	ldrb	r3, [r7, #23]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d806      	bhi.n	800bd94 <etharp_find_entry+0x80>
 800bd86:	4b99      	ldr	r3, [pc, #612]	@ (800bfec <etharp_find_entry+0x2d8>)
 800bd88:	f240 1223 	movw	r2, #291	@ 0x123
 800bd8c:	4998      	ldr	r1, [pc, #608]	@ (800bff0 <etharp_find_entry+0x2dc>)
 800bd8e:	4899      	ldr	r0, [pc, #612]	@ (800bff4 <etharp_find_entry+0x2e0>)
 800bd90:	f002 fad2 	bl	800e338 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d020      	beq.n	800bddc <etharp_find_entry+0xc8>
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	6819      	ldr	r1, [r3, #0]
 800bd9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bda2:	4891      	ldr	r0, [pc, #580]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bda4:	4613      	mov	r3, r2
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	4413      	add	r3, r2
 800bdaa:	00db      	lsls	r3, r3, #3
 800bdac:	4403      	add	r3, r0
 800bdae:	3304      	adds	r3, #4
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4299      	cmp	r1, r3
 800bdb4:	d112      	bne.n	800bddc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d00c      	beq.n	800bdd6 <etharp_find_entry+0xc2>
 800bdbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdc0:	4989      	ldr	r1, [pc, #548]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	005b      	lsls	r3, r3, #1
 800bdc6:	4413      	add	r3, r2
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	3308      	adds	r3, #8
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d102      	bne.n	800bddc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800bdd6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bdda:	e100      	b.n	800bfde <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d140      	bne.n	800be64 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800bde2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bde6:	4980      	ldr	r1, [pc, #512]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bde8:	4613      	mov	r3, r2
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	4413      	add	r3, r2
 800bdee:	00db      	lsls	r3, r3, #3
 800bdf0:	440b      	add	r3, r1
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d01a      	beq.n	800be2e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800bdf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bdfc:	497a      	ldr	r1, [pc, #488]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bdfe:	4613      	mov	r3, r2
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	4413      	add	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	440b      	add	r3, r1
 800be08:	3312      	adds	r3, #18
 800be0a:	881b      	ldrh	r3, [r3, #0]
 800be0c:	8bba      	ldrh	r2, [r7, #28]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d845      	bhi.n	800be9e <etharp_find_entry+0x18a>
            old_queue = i;
 800be12:	8c3b      	ldrh	r3, [r7, #32]
 800be14:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800be16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be1a:	4973      	ldr	r1, [pc, #460]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800be1c:	4613      	mov	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	440b      	add	r3, r1
 800be26:	3312      	adds	r3, #18
 800be28:	881b      	ldrh	r3, [r3, #0]
 800be2a:	83bb      	strh	r3, [r7, #28]
 800be2c:	e037      	b.n	800be9e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800be2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be32:	496d      	ldr	r1, [pc, #436]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800be34:	4613      	mov	r3, r2
 800be36:	005b      	lsls	r3, r3, #1
 800be38:	4413      	add	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	440b      	add	r3, r1
 800be3e:	3312      	adds	r3, #18
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	8b7a      	ldrh	r2, [r7, #26]
 800be44:	429a      	cmp	r2, r3
 800be46:	d82a      	bhi.n	800be9e <etharp_find_entry+0x18a>
            old_pending = i;
 800be48:	8c3b      	ldrh	r3, [r7, #32]
 800be4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800be4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be50:	4965      	ldr	r1, [pc, #404]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800be52:	4613      	mov	r3, r2
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4413      	add	r3, r2
 800be58:	00db      	lsls	r3, r3, #3
 800be5a:	440b      	add	r3, r1
 800be5c:	3312      	adds	r3, #18
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	837b      	strh	r3, [r7, #26]
 800be62:	e01c      	b.n	800be9e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800be64:	7dfb      	ldrb	r3, [r7, #23]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d919      	bls.n	800be9e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800be6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be6e:	495e      	ldr	r1, [pc, #376]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800be70:	4613      	mov	r3, r2
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	4413      	add	r3, r2
 800be76:	00db      	lsls	r3, r3, #3
 800be78:	440b      	add	r3, r1
 800be7a:	3312      	adds	r3, #18
 800be7c:	881b      	ldrh	r3, [r3, #0]
 800be7e:	8b3a      	ldrh	r2, [r7, #24]
 800be80:	429a      	cmp	r2, r3
 800be82:	d80c      	bhi.n	800be9e <etharp_find_entry+0x18a>
            old_stable = i;
 800be84:	8c3b      	ldrh	r3, [r7, #32]
 800be86:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800be88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800be8c:	4956      	ldr	r1, [pc, #344]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800be8e:	4613      	mov	r3, r2
 800be90:	005b      	lsls	r3, r3, #1
 800be92:	4413      	add	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	440b      	add	r3, r1
 800be98:	3312      	adds	r3, #18
 800be9a:	881b      	ldrh	r3, [r3, #0]
 800be9c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800be9e:	8c3b      	ldrh	r3, [r7, #32]
 800bea0:	3301      	adds	r3, #1
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	843b      	strh	r3, [r7, #32]
 800bea6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800beaa:	2b09      	cmp	r3, #9
 800beac:	f77f af4c 	ble.w	800bd48 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800beb0:	7afb      	ldrb	r3, [r7, #11]
 800beb2:	f003 0302 	and.w	r3, r3, #2
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d108      	bne.n	800becc <etharp_find_entry+0x1b8>
 800beba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bebe:	2b0a      	cmp	r3, #10
 800bec0:	d107      	bne.n	800bed2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800becc:	f04f 33ff 	mov.w	r3, #4294967295
 800bed0:	e085      	b.n	800bfde <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800bed2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800bed6:	2b09      	cmp	r3, #9
 800bed8:	dc02      	bgt.n	800bee0 <etharp_find_entry+0x1cc>
    i = empty;
 800beda:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bedc:	843b      	strh	r3, [r7, #32]
 800bede:	e039      	b.n	800bf54 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800bee0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800bee4:	2b09      	cmp	r3, #9
 800bee6:	dc14      	bgt.n	800bf12 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800bee8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800beea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800beec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bef0:	493d      	ldr	r1, [pc, #244]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bef2:	4613      	mov	r3, r2
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	4413      	add	r3, r2
 800bef8:	00db      	lsls	r3, r3, #3
 800befa:	440b      	add	r3, r1
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d018      	beq.n	800bf34 <etharp_find_entry+0x220>
 800bf02:	4b3a      	ldr	r3, [pc, #232]	@ (800bfec <etharp_find_entry+0x2d8>)
 800bf04:	f240 126d 	movw	r2, #365	@ 0x16d
 800bf08:	493b      	ldr	r1, [pc, #236]	@ (800bff8 <etharp_find_entry+0x2e4>)
 800bf0a:	483a      	ldr	r0, [pc, #232]	@ (800bff4 <etharp_find_entry+0x2e0>)
 800bf0c:	f002 fa14 	bl	800e338 <iprintf>
 800bf10:	e010      	b.n	800bf34 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800bf12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800bf16:	2b09      	cmp	r3, #9
 800bf18:	dc02      	bgt.n	800bf20 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800bf1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bf1c:	843b      	strh	r3, [r7, #32]
 800bf1e:	e009      	b.n	800bf34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800bf20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	dc02      	bgt.n	800bf2e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800bf28:	8bfb      	ldrh	r3, [r7, #30]
 800bf2a:	843b      	strh	r3, [r7, #32]
 800bf2c:	e002      	b.n	800bf34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800bf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf32:	e054      	b.n	800bfde <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf38:	2b09      	cmp	r3, #9
 800bf3a:	dd06      	ble.n	800bf4a <etharp_find_entry+0x236>
 800bf3c:	4b2b      	ldr	r3, [pc, #172]	@ (800bfec <etharp_find_entry+0x2d8>)
 800bf3e:	f240 127f 	movw	r2, #383	@ 0x17f
 800bf42:	492e      	ldr	r1, [pc, #184]	@ (800bffc <etharp_find_entry+0x2e8>)
 800bf44:	482b      	ldr	r0, [pc, #172]	@ (800bff4 <etharp_find_entry+0x2e0>)
 800bf46:	f002 f9f7 	bl	800e338 <iprintf>
    etharp_free_entry(i);
 800bf4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff fe06 	bl	800bb60 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800bf54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800bf58:	2b09      	cmp	r3, #9
 800bf5a:	dd06      	ble.n	800bf6a <etharp_find_entry+0x256>
 800bf5c:	4b23      	ldr	r3, [pc, #140]	@ (800bfec <etharp_find_entry+0x2d8>)
 800bf5e:	f240 1283 	movw	r2, #387	@ 0x183
 800bf62:	4926      	ldr	r1, [pc, #152]	@ (800bffc <etharp_find_entry+0x2e8>)
 800bf64:	4823      	ldr	r0, [pc, #140]	@ (800bff4 <etharp_find_entry+0x2e0>)
 800bf66:	f002 f9e7 	bl	800e338 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800bf6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf6e:	491e      	ldr	r1, [pc, #120]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bf70:	4613      	mov	r3, r2
 800bf72:	005b      	lsls	r3, r3, #1
 800bf74:	4413      	add	r3, r2
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	440b      	add	r3, r1
 800bf7a:	3314      	adds	r3, #20
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d006      	beq.n	800bf90 <etharp_find_entry+0x27c>
 800bf82:	4b1a      	ldr	r3, [pc, #104]	@ (800bfec <etharp_find_entry+0x2d8>)
 800bf84:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800bf88:	491d      	ldr	r1, [pc, #116]	@ (800c000 <etharp_find_entry+0x2ec>)
 800bf8a:	481a      	ldr	r0, [pc, #104]	@ (800bff4 <etharp_find_entry+0x2e0>)
 800bf8c:	f002 f9d4 	bl	800e338 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800bf96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6819      	ldr	r1, [r3, #0]
 800bf9e:	4812      	ldr	r0, [pc, #72]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	005b      	lsls	r3, r3, #1
 800bfa4:	4413      	add	r3, r2
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	4403      	add	r3, r0
 800bfaa:	3304      	adds	r3, #4
 800bfac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800bfae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfb2:	490d      	ldr	r1, [pc, #52]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	005b      	lsls	r3, r3, #1
 800bfb8:	4413      	add	r3, r2
 800bfba:	00db      	lsls	r3, r3, #3
 800bfbc:	440b      	add	r3, r1
 800bfbe:	3312      	adds	r3, #18
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800bfc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800bfc8:	4907      	ldr	r1, [pc, #28]	@ (800bfe8 <etharp_find_entry+0x2d4>)
 800bfca:	4613      	mov	r3, r2
 800bfcc:	005b      	lsls	r3, r3, #1
 800bfce:	4413      	add	r3, r2
 800bfd0:	00db      	lsls	r3, r3, #3
 800bfd2:	440b      	add	r3, r1
 800bfd4:	3308      	adds	r3, #8
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800bfda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3728      	adds	r7, #40	@ 0x28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	24007bcc 	.word	0x24007bcc
 800bfec:	08011480 	.word	0x08011480
 800bff0:	080114b8 	.word	0x080114b8
 800bff4:	080114f8 	.word	0x080114f8
 800bff8:	08011520 	.word	0x08011520
 800bffc:	08011538 	.word	0x08011538
 800c000:	0801154c 	.word	0x0801154c

0800c004 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b088      	sub	sp, #32
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	607a      	str	r2, [r7, #4]
 800c010:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c018:	2b06      	cmp	r3, #6
 800c01a:	d006      	beq.n	800c02a <etharp_update_arp_entry+0x26>
 800c01c:	4b48      	ldr	r3, [pc, #288]	@ (800c140 <etharp_update_arp_entry+0x13c>)
 800c01e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800c022:	4948      	ldr	r1, [pc, #288]	@ (800c144 <etharp_update_arp_entry+0x140>)
 800c024:	4848      	ldr	r0, [pc, #288]	@ (800c148 <etharp_update_arp_entry+0x144>)
 800c026:	f002 f987 	bl	800e338 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d012      	beq.n	800c056 <etharp_update_arp_entry+0x52>
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00e      	beq.n	800c056 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68f9      	ldr	r1, [r7, #12]
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 f924 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800c044:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c046:	2b00      	cmp	r3, #0
 800c048:	d105      	bne.n	800c056 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c052:	2be0      	cmp	r3, #224	@ 0xe0
 800c054:	d102      	bne.n	800c05c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c056:	f06f 030f 	mvn.w	r3, #15
 800c05a:	e06c      	b.n	800c136 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4619      	mov	r1, r3
 800c062:	68b8      	ldr	r0, [r7, #8]
 800c064:	f7ff fe56 	bl	800bd14 <etharp_find_entry>
 800c068:	4603      	mov	r3, r0
 800c06a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c06c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c070:	2b00      	cmp	r3, #0
 800c072:	da02      	bge.n	800c07a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c074:	8afb      	ldrh	r3, [r7, #22]
 800c076:	b25b      	sxtb	r3, r3
 800c078:	e05d      	b.n	800c136 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c07a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c07e:	4933      	ldr	r1, [pc, #204]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c080:	4613      	mov	r3, r2
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	4413      	add	r3, r2
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	440b      	add	r3, r1
 800c08a:	3314      	adds	r3, #20
 800c08c:	2202      	movs	r2, #2
 800c08e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c090:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c094:	492d      	ldr	r1, [pc, #180]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c096:	4613      	mov	r3, r2
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	4413      	add	r3, r2
 800c09c:	00db      	lsls	r3, r3, #3
 800c09e:	440b      	add	r3, r1
 800c0a0:	3308      	adds	r3, #8
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c0a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	005b      	lsls	r3, r3, #1
 800c0ae:	4413      	add	r3, r2
 800c0b0:	00db      	lsls	r3, r3, #3
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	4a25      	ldr	r2, [pc, #148]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c0b6:	4413      	add	r3, r2
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	2206      	movs	r2, #6
 800c0bc:	6879      	ldr	r1, [r7, #4]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f002 fa15 	bl	800e4ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c0c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0c8:	4920      	ldr	r1, [pc, #128]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	005b      	lsls	r3, r3, #1
 800c0ce:	4413      	add	r3, r2
 800c0d0:	00db      	lsls	r3, r3, #3
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3312      	adds	r3, #18
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c0da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0de:	491b      	ldr	r1, [pc, #108]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	4413      	add	r3, r2
 800c0e6:	00db      	lsls	r3, r3, #3
 800c0e8:	440b      	add	r3, r1
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d021      	beq.n	800c134 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c0f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c0f4:	4915      	ldr	r1, [pc, #84]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	440b      	add	r3, r1
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c104:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c108:	4910      	ldr	r1, [pc, #64]	@ (800c14c <etharp_update_arp_entry+0x148>)
 800c10a:	4613      	mov	r3, r2
 800c10c:	005b      	lsls	r3, r3, #1
 800c10e:	4413      	add	r3, r2
 800c110:	00db      	lsls	r3, r3, #3
 800c112:	440b      	add	r3, r1
 800c114:	2200      	movs	r2, #0
 800c116:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c11e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c122:	9300      	str	r3, [sp, #0]
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6939      	ldr	r1, [r7, #16]
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f001 ffbd 	bl	800e0a8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c12e:	6938      	ldr	r0, [r7, #16]
 800c130:	f7f9 fe2c 	bl	8005d8c <pbuf_free>
  }
  return ERR_OK;
 800c134:	2300      	movs	r3, #0
}
 800c136:	4618      	mov	r0, r3
 800c138:	3718      	adds	r7, #24
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08011480 	.word	0x08011480
 800c144:	08011578 	.word	0x08011578
 800c148:	080114f8 	.word	0x080114f8
 800c14c:	24007bcc 	.word	0x24007bcc

0800c150 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c158:	2300      	movs	r3, #0
 800c15a:	60fb      	str	r3, [r7, #12]
 800c15c:	e01e      	b.n	800c19c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c15e:	4913      	ldr	r1, [pc, #76]	@ (800c1ac <etharp_cleanup_netif+0x5c>)
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	00db      	lsls	r3, r3, #3
 800c16a:	440b      	add	r3, r1
 800c16c:	3314      	adds	r3, #20
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c172:	7afb      	ldrb	r3, [r7, #11]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00e      	beq.n	800c196 <etharp_cleanup_netif+0x46>
 800c178:	490c      	ldr	r1, [pc, #48]	@ (800c1ac <etharp_cleanup_netif+0x5c>)
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	4613      	mov	r3, r2
 800c17e:	005b      	lsls	r3, r3, #1
 800c180:	4413      	add	r3, r2
 800c182:	00db      	lsls	r3, r3, #3
 800c184:	440b      	add	r3, r1
 800c186:	3308      	adds	r3, #8
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d102      	bne.n	800c196 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c190:	68f8      	ldr	r0, [r7, #12]
 800c192:	f7ff fce5 	bl	800bb60 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	3301      	adds	r3, #1
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b09      	cmp	r3, #9
 800c1a0:	dddd      	ble.n	800c15e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c1a2:	bf00      	nop
 800c1a4:	bf00      	nop
 800c1a6:	3710      	adds	r7, #16
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bd80      	pop	{r7, pc}
 800c1ac:	24007bcc 	.word	0x24007bcc

0800c1b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c1b0:	b5b0      	push	{r4, r5, r7, lr}
 800c1b2:	b08a      	sub	sp, #40	@ 0x28
 800c1b4:	af04      	add	r7, sp, #16
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d107      	bne.n	800c1d0 <etharp_input+0x20>
 800c1c0:	4b3d      	ldr	r3, [pc, #244]	@ (800c2b8 <etharp_input+0x108>)
 800c1c2:	f240 228a 	movw	r2, #650	@ 0x28a
 800c1c6:	493d      	ldr	r1, [pc, #244]	@ (800c2bc <etharp_input+0x10c>)
 800c1c8:	483d      	ldr	r0, [pc, #244]	@ (800c2c0 <etharp_input+0x110>)
 800c1ca:	f002 f8b5 	bl	800e338 <iprintf>
 800c1ce:	e06f      	b.n	800c2b0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c1d6:	693b      	ldr	r3, [r7, #16]
 800c1d8:	881b      	ldrh	r3, [r3, #0]
 800c1da:	b29b      	uxth	r3, r3
 800c1dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c1e0:	d10c      	bne.n	800c1fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c1e6:	2b06      	cmp	r3, #6
 800c1e8:	d108      	bne.n	800c1fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c1ee:	2b04      	cmp	r3, #4
 800c1f0:	d104      	bne.n	800c1fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d003      	beq.n	800c204 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7f9 fdc5 	bl	8005d8c <pbuf_free>
    return;
 800c202:	e055      	b.n	800c2b0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	330e      	adds	r3, #14
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	3318      	adds	r3, #24
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	3304      	adds	r3, #4
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d102      	bne.n	800c224 <etharp_input+0x74>
    for_us = 0;
 800c21e:	2300      	movs	r3, #0
 800c220:	75fb      	strb	r3, [r7, #23]
 800c222:	e009      	b.n	800c238 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c224:	68ba      	ldr	r2, [r7, #8]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	3304      	adds	r3, #4
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	bf0c      	ite	eq
 800c230:	2301      	moveq	r3, #1
 800c232:	2300      	movne	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f103 0208 	add.w	r2, r3, #8
 800c23e:	7dfb      	ldrb	r3, [r7, #23]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d001      	beq.n	800c248 <etharp_input+0x98>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <etharp_input+0x9a>
 800c248:	2302      	movs	r3, #2
 800c24a:	f107 010c 	add.w	r1, r7, #12
 800c24e:	6838      	ldr	r0, [r7, #0]
 800c250:	f7ff fed8 	bl	800c004 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	88db      	ldrh	r3, [r3, #6]
 800c258:	b29b      	uxth	r3, r3
 800c25a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c25e:	d003      	beq.n	800c268 <etharp_input+0xb8>
 800c260:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c264:	d01e      	beq.n	800c2a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800c266:	e020      	b.n	800c2aa <etharp_input+0xfa>
      if (for_us) {
 800c268:	7dfb      	ldrb	r3, [r7, #23]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d01c      	beq.n	800c2a8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800c284:	693a      	ldr	r2, [r7, #16]
 800c286:	3208      	adds	r2, #8
        etharp_raw(netif,
 800c288:	2102      	movs	r1, #2
 800c28a:	9103      	str	r1, [sp, #12]
 800c28c:	f107 010c 	add.w	r1, r7, #12
 800c290:	9102      	str	r1, [sp, #8]
 800c292:	9201      	str	r2, [sp, #4]
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	462b      	mov	r3, r5
 800c298:	4622      	mov	r2, r4
 800c29a:	4601      	mov	r1, r0
 800c29c:	6838      	ldr	r0, [r7, #0]
 800c29e:	f000 faeb 	bl	800c878 <etharp_raw>
      break;
 800c2a2:	e001      	b.n	800c2a8 <etharp_input+0xf8>
      break;
 800c2a4:	bf00      	nop
 800c2a6:	e000      	b.n	800c2aa <etharp_input+0xfa>
      break;
 800c2a8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c2aa:	6878      	ldr	r0, [r7, #4]
 800c2ac:	f7f9 fd6e 	bl	8005d8c <pbuf_free>
}
 800c2b0:	3718      	adds	r7, #24
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	08011480 	.word	0x08011480
 800c2bc:	080115d0 	.word	0x080115d0
 800c2c0:	080114f8 	.word	0x080114f8

0800c2c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b086      	sub	sp, #24
 800c2c8:	af02      	add	r7, sp, #8
 800c2ca:	60f8      	str	r0, [r7, #12]
 800c2cc:	60b9      	str	r1, [r7, #8]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c2d2:	79fa      	ldrb	r2, [r7, #7]
 800c2d4:	4944      	ldr	r1, [pc, #272]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	005b      	lsls	r3, r3, #1
 800c2da:	4413      	add	r3, r2
 800c2dc:	00db      	lsls	r3, r3, #3
 800c2de:	440b      	add	r3, r1
 800c2e0:	3314      	adds	r3, #20
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d806      	bhi.n	800c2f6 <etharp_output_to_arp_index+0x32>
 800c2e8:	4b40      	ldr	r3, [pc, #256]	@ (800c3ec <etharp_output_to_arp_index+0x128>)
 800c2ea:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800c2ee:	4940      	ldr	r1, [pc, #256]	@ (800c3f0 <etharp_output_to_arp_index+0x12c>)
 800c2f0:	4840      	ldr	r0, [pc, #256]	@ (800c3f4 <etharp_output_to_arp_index+0x130>)
 800c2f2:	f002 f821 	bl	800e338 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c2f6:	79fa      	ldrb	r2, [r7, #7]
 800c2f8:	493b      	ldr	r1, [pc, #236]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	005b      	lsls	r3, r3, #1
 800c2fe:	4413      	add	r3, r2
 800c300:	00db      	lsls	r3, r3, #3
 800c302:	440b      	add	r3, r1
 800c304:	3314      	adds	r3, #20
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	d153      	bne.n	800c3b4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c30c:	79fa      	ldrb	r2, [r7, #7]
 800c30e:	4936      	ldr	r1, [pc, #216]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c310:	4613      	mov	r3, r2
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	4413      	add	r3, r2
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	440b      	add	r3, r1
 800c31a:	3312      	adds	r3, #18
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800c322:	d919      	bls.n	800c358 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c324:	79fa      	ldrb	r2, [r7, #7]
 800c326:	4613      	mov	r3, r2
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	4413      	add	r3, r2
 800c32c:	00db      	lsls	r3, r3, #3
 800c32e:	4a2e      	ldr	r2, [pc, #184]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c330:	4413      	add	r3, r2
 800c332:	3304      	adds	r3, #4
 800c334:	4619      	mov	r1, r3
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f000 fb4c 	bl	800c9d4 <etharp_request>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d138      	bne.n	800c3b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c342:	79fa      	ldrb	r2, [r7, #7]
 800c344:	4928      	ldr	r1, [pc, #160]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c346:	4613      	mov	r3, r2
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	4413      	add	r3, r2
 800c34c:	00db      	lsls	r3, r3, #3
 800c34e:	440b      	add	r3, r1
 800c350:	3314      	adds	r3, #20
 800c352:	2203      	movs	r2, #3
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	e02d      	b.n	800c3b4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c358:	79fa      	ldrb	r2, [r7, #7]
 800c35a:	4923      	ldr	r1, [pc, #140]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c35c:	4613      	mov	r3, r2
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	4413      	add	r3, r2
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	440b      	add	r3, r1
 800c366:	3312      	adds	r3, #18
 800c368:	881b      	ldrh	r3, [r3, #0]
 800c36a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800c36e:	d321      	bcc.n	800c3b4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c370:	79fa      	ldrb	r2, [r7, #7]
 800c372:	4613      	mov	r3, r2
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	4413      	add	r3, r2
 800c378:	00db      	lsls	r3, r3, #3
 800c37a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c37c:	4413      	add	r3, r2
 800c37e:	1d19      	adds	r1, r3, #4
 800c380:	79fa      	ldrb	r2, [r7, #7]
 800c382:	4613      	mov	r3, r2
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	4413      	add	r3, r2
 800c388:	00db      	lsls	r3, r3, #3
 800c38a:	3308      	adds	r3, #8
 800c38c:	4a16      	ldr	r2, [pc, #88]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c38e:	4413      	add	r3, r2
 800c390:	3304      	adds	r3, #4
 800c392:	461a      	mov	r2, r3
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 fafb 	bl	800c990 <etharp_request_dst>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d109      	bne.n	800c3b4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c3a0:	79fa      	ldrb	r2, [r7, #7]
 800c3a2:	4911      	ldr	r1, [pc, #68]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3314      	adds	r3, #20
 800c3b0:	2203      	movs	r2, #3
 800c3b2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 800c3ba:	79fa      	ldrb	r2, [r7, #7]
 800c3bc:	4613      	mov	r3, r2
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	4413      	add	r3, r2
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	3308      	adds	r3, #8
 800c3c6:	4a08      	ldr	r2, [pc, #32]	@ (800c3e8 <etharp_output_to_arp_index+0x124>)
 800c3c8:	4413      	add	r3, r2
 800c3ca:	3304      	adds	r3, #4
 800c3cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c3d0:	9200      	str	r2, [sp, #0]
 800c3d2:	460a      	mov	r2, r1
 800c3d4:	68b9      	ldr	r1, [r7, #8]
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f001 fe66 	bl	800e0a8 <ethernet_output>
 800c3dc:	4603      	mov	r3, r0
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3710      	adds	r7, #16
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	24007bcc 	.word	0x24007bcc
 800c3ec:	08011480 	.word	0x08011480
 800c3f0:	080115f0 	.word	0x080115f0
 800c3f4:	080114f8 	.word	0x080114f8

0800c3f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b08a      	sub	sp, #40	@ 0x28
 800c3fc:	af02      	add	r7, sp, #8
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <etharp_output+0x24>
 800c40e:	4b73      	ldr	r3, [pc, #460]	@ (800c5dc <etharp_output+0x1e4>)
 800c410:	f240 321e 	movw	r2, #798	@ 0x31e
 800c414:	4972      	ldr	r1, [pc, #456]	@ (800c5e0 <etharp_output+0x1e8>)
 800c416:	4873      	ldr	r0, [pc, #460]	@ (800c5e4 <etharp_output+0x1ec>)
 800c418:	f001 ff8e 	bl	800e338 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d106      	bne.n	800c430 <etharp_output+0x38>
 800c422:	4b6e      	ldr	r3, [pc, #440]	@ (800c5dc <etharp_output+0x1e4>)
 800c424:	f240 321f 	movw	r2, #799	@ 0x31f
 800c428:	496f      	ldr	r1, [pc, #444]	@ (800c5e8 <etharp_output+0x1f0>)
 800c42a:	486e      	ldr	r0, [pc, #440]	@ (800c5e4 <etharp_output+0x1ec>)
 800c42c:	f001 ff84 	bl	800e338 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <etharp_output+0x4c>
 800c436:	4b69      	ldr	r3, [pc, #420]	@ (800c5dc <etharp_output+0x1e4>)
 800c438:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800c43c:	496b      	ldr	r1, [pc, #428]	@ (800c5ec <etharp_output+0x1f4>)
 800c43e:	4869      	ldr	r0, [pc, #420]	@ (800c5e4 <etharp_output+0x1ec>)
 800c440:	f001 ff7a 	bl	800e338 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	68f9      	ldr	r1, [r7, #12]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f000 ff1e 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	d002      	beq.n	800c45c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c456:	4b66      	ldr	r3, [pc, #408]	@ (800c5f0 <etharp_output+0x1f8>)
 800c458:	61fb      	str	r3, [r7, #28]
 800c45a:	e0af      	b.n	800c5bc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c464:	2be0      	cmp	r3, #224	@ 0xe0
 800c466:	d118      	bne.n	800c49a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c468:	2301      	movs	r3, #1
 800c46a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c46c:	2300      	movs	r3, #0
 800c46e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c470:	235e      	movs	r3, #94	@ 0x5e
 800c472:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	3301      	adds	r3, #1
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	3302      	adds	r3, #2
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	3303      	adds	r3, #3
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c492:	f107 0310 	add.w	r3, r7, #16
 800c496:	61fb      	str	r3, [r7, #28]
 800c498:	e090      	b.n	800c5bc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	405a      	eors	r2, r3
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	3308      	adds	r3, #8
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	4013      	ands	r3, r2
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d012      	beq.n	800c4d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c4b8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00b      	beq.n	800c4d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	330c      	adds	r3, #12
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	330c      	adds	r3, #12
 800c4ce:	61bb      	str	r3, [r7, #24]
 800c4d0:	e002      	b.n	800c4d8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c4d2:	f06f 0303 	mvn.w	r3, #3
 800c4d6:	e07d      	b.n	800c5d4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c4d8:	4b46      	ldr	r3, [pc, #280]	@ (800c5f4 <etharp_output+0x1fc>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4a46      	ldr	r2, [pc, #280]	@ (800c5f8 <etharp_output+0x200>)
 800c4e0:	460b      	mov	r3, r1
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	440b      	add	r3, r1
 800c4e6:	00db      	lsls	r3, r3, #3
 800c4e8:	4413      	add	r3, r2
 800c4ea:	3314      	adds	r3, #20
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d925      	bls.n	800c53e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c4f2:	4b40      	ldr	r3, [pc, #256]	@ (800c5f4 <etharp_output+0x1fc>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	4a3f      	ldr	r2, [pc, #252]	@ (800c5f8 <etharp_output+0x200>)
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	005b      	lsls	r3, r3, #1
 800c4fe:	440b      	add	r3, r1
 800c500:	00db      	lsls	r3, r3, #3
 800c502:	4413      	add	r3, r2
 800c504:	3308      	adds	r3, #8
 800c506:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d117      	bne.n	800c53e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b38      	ldr	r3, [pc, #224]	@ (800c5f4 <etharp_output+0x1fc>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	4618      	mov	r0, r3
 800c518:	4937      	ldr	r1, [pc, #220]	@ (800c5f8 <etharp_output+0x200>)
 800c51a:	4603      	mov	r3, r0
 800c51c:	005b      	lsls	r3, r3, #1
 800c51e:	4403      	add	r3, r0
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	440b      	add	r3, r1
 800c524:	3304      	adds	r3, #4
 800c526:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800c528:	429a      	cmp	r2, r3
 800c52a:	d108      	bne.n	800c53e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c52c:	4b31      	ldr	r3, [pc, #196]	@ (800c5f4 <etharp_output+0x1fc>)
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	461a      	mov	r2, r3
 800c532:	68b9      	ldr	r1, [r7, #8]
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fec5 	bl	800c2c4 <etharp_output_to_arp_index>
 800c53a:	4603      	mov	r3, r0
 800c53c:	e04a      	b.n	800c5d4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]
 800c542:	e031      	b.n	800c5a8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c544:	7dfa      	ldrb	r2, [r7, #23]
 800c546:	492c      	ldr	r1, [pc, #176]	@ (800c5f8 <etharp_output+0x200>)
 800c548:	4613      	mov	r3, r2
 800c54a:	005b      	lsls	r3, r3, #1
 800c54c:	4413      	add	r3, r2
 800c54e:	00db      	lsls	r3, r3, #3
 800c550:	440b      	add	r3, r1
 800c552:	3314      	adds	r3, #20
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	2b01      	cmp	r3, #1
 800c558:	d923      	bls.n	800c5a2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800c55a:	7dfa      	ldrb	r2, [r7, #23]
 800c55c:	4926      	ldr	r1, [pc, #152]	@ (800c5f8 <etharp_output+0x200>)
 800c55e:	4613      	mov	r3, r2
 800c560:	005b      	lsls	r3, r3, #1
 800c562:	4413      	add	r3, r2
 800c564:	00db      	lsls	r3, r3, #3
 800c566:	440b      	add	r3, r1
 800c568:	3308      	adds	r3, #8
 800c56a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d117      	bne.n	800c5a2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	6819      	ldr	r1, [r3, #0]
 800c576:	7dfa      	ldrb	r2, [r7, #23]
 800c578:	481f      	ldr	r0, [pc, #124]	@ (800c5f8 <etharp_output+0x200>)
 800c57a:	4613      	mov	r3, r2
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4413      	add	r3, r2
 800c580:	00db      	lsls	r3, r3, #3
 800c582:	4403      	add	r3, r0
 800c584:	3304      	adds	r3, #4
 800c586:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800c588:	4299      	cmp	r1, r3
 800c58a:	d10a      	bne.n	800c5a2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800c58c:	4a19      	ldr	r2, [pc, #100]	@ (800c5f4 <etharp_output+0x1fc>)
 800c58e:	7dfb      	ldrb	r3, [r7, #23]
 800c590:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	461a      	mov	r2, r3
 800c596:	68b9      	ldr	r1, [r7, #8]
 800c598:	68f8      	ldr	r0, [r7, #12]
 800c59a:	f7ff fe93 	bl	800c2c4 <etharp_output_to_arp_index>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	e018      	b.n	800c5d4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	75fb      	strb	r3, [r7, #23]
 800c5a8:	7dfb      	ldrb	r3, [r7, #23]
 800c5aa:	2b09      	cmp	r3, #9
 800c5ac:	d9ca      	bls.n	800c544 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800c5ae:	68ba      	ldr	r2, [r7, #8]
 800c5b0:	69b9      	ldr	r1, [r7, #24]
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 f822 	bl	800c5fc <etharp_query>
 800c5b8:	4603      	mov	r3, r0
 800c5ba:	e00b      	b.n	800c5d4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800c5c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	69fb      	ldr	r3, [r7, #28]
 800c5ca:	68b9      	ldr	r1, [r7, #8]
 800c5cc:	68f8      	ldr	r0, [r7, #12]
 800c5ce:	f001 fd6b 	bl	800e0a8 <ethernet_output>
 800c5d2:	4603      	mov	r3, r0
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	08011480 	.word	0x08011480
 800c5e0:	080115d0 	.word	0x080115d0
 800c5e4:	080114f8 	.word	0x080114f8
 800c5e8:	08011620 	.word	0x08011620
 800c5ec:	080115c0 	.word	0x080115c0
 800c5f0:	08011c34 	.word	0x08011c34
 800c5f4:	24007cbc 	.word	0x24007cbc
 800c5f8:	24007bcc 	.word	0x24007bcc

0800c5fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08c      	sub	sp, #48	@ 0x30
 800c600:	af02      	add	r7, sp, #8
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	60b9      	str	r1, [r7, #8]
 800c606:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	3326      	adds	r3, #38	@ 0x26
 800c60c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800c60e:	23ff      	movs	r3, #255	@ 0xff
 800c610:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800c614:	2300      	movs	r3, #0
 800c616:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68f9      	ldr	r1, [r7, #12]
 800c61e:	4618      	mov	r0, r3
 800c620:	f000 fe34 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800c624:	4603      	mov	r3, r0
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10c      	bne.n	800c644 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800c632:	2be0      	cmp	r3, #224	@ 0xe0
 800c634:	d006      	beq.n	800c644 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d003      	beq.n	800c644 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d102      	bne.n	800c64a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c644:	f06f 030f 	mvn.w	r3, #15
 800c648:	e101      	b.n	800c84e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	2101      	movs	r1, #1
 800c64e:	68b8      	ldr	r0, [r7, #8]
 800c650:	f7ff fb60 	bl	800bd14 <etharp_find_entry>
 800c654:	4603      	mov	r3, r0
 800c656:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800c658:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	da02      	bge.n	800c666 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800c660:	8a7b      	ldrh	r3, [r7, #18]
 800c662:	b25b      	sxtb	r3, r3
 800c664:	e0f3      	b.n	800c84e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800c666:	8a7b      	ldrh	r3, [r7, #18]
 800c668:	2b7e      	cmp	r3, #126	@ 0x7e
 800c66a:	d906      	bls.n	800c67a <etharp_query+0x7e>
 800c66c:	4b7a      	ldr	r3, [pc, #488]	@ (800c858 <etharp_query+0x25c>)
 800c66e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800c672:	497a      	ldr	r1, [pc, #488]	@ (800c85c <etharp_query+0x260>)
 800c674:	487a      	ldr	r0, [pc, #488]	@ (800c860 <etharp_query+0x264>)
 800c676:	f001 fe5f 	bl	800e338 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800c67a:	8a7b      	ldrh	r3, [r7, #18]
 800c67c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800c67e:	7c7a      	ldrb	r2, [r7, #17]
 800c680:	4978      	ldr	r1, [pc, #480]	@ (800c864 <etharp_query+0x268>)
 800c682:	4613      	mov	r3, r2
 800c684:	005b      	lsls	r3, r3, #1
 800c686:	4413      	add	r3, r2
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	440b      	add	r3, r1
 800c68c:	3314      	adds	r3, #20
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d115      	bne.n	800c6c0 <etharp_query+0xc4>
    is_new_entry = 1;
 800c694:	2301      	movs	r3, #1
 800c696:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800c698:	7c7a      	ldrb	r2, [r7, #17]
 800c69a:	4972      	ldr	r1, [pc, #456]	@ (800c864 <etharp_query+0x268>)
 800c69c:	4613      	mov	r3, r2
 800c69e:	005b      	lsls	r3, r3, #1
 800c6a0:	4413      	add	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	440b      	add	r3, r1
 800c6a6:	3314      	adds	r3, #20
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800c6ac:	7c7a      	ldrb	r2, [r7, #17]
 800c6ae:	496d      	ldr	r1, [pc, #436]	@ (800c864 <etharp_query+0x268>)
 800c6b0:	4613      	mov	r3, r2
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	440b      	add	r3, r1
 800c6ba:	3308      	adds	r3, #8
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800c6c0:	7c7a      	ldrb	r2, [r7, #17]
 800c6c2:	4968      	ldr	r1, [pc, #416]	@ (800c864 <etharp_query+0x268>)
 800c6c4:	4613      	mov	r3, r2
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	4413      	add	r3, r2
 800c6ca:	00db      	lsls	r3, r3, #3
 800c6cc:	440b      	add	r3, r1
 800c6ce:	3314      	adds	r3, #20
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d011      	beq.n	800c6fa <etharp_query+0xfe>
 800c6d6:	7c7a      	ldrb	r2, [r7, #17]
 800c6d8:	4962      	ldr	r1, [pc, #392]	@ (800c864 <etharp_query+0x268>)
 800c6da:	4613      	mov	r3, r2
 800c6dc:	005b      	lsls	r3, r3, #1
 800c6de:	4413      	add	r3, r2
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	440b      	add	r3, r1
 800c6e4:	3314      	adds	r3, #20
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b01      	cmp	r3, #1
 800c6ea:	d806      	bhi.n	800c6fa <etharp_query+0xfe>
 800c6ec:	4b5a      	ldr	r3, [pc, #360]	@ (800c858 <etharp_query+0x25c>)
 800c6ee:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800c6f2:	495d      	ldr	r1, [pc, #372]	@ (800c868 <etharp_query+0x26c>)
 800c6f4:	485a      	ldr	r0, [pc, #360]	@ (800c860 <etharp_query+0x264>)
 800c6f6:	f001 fe1f 	bl	800e338 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800c6fa:	6a3b      	ldr	r3, [r7, #32]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <etharp_query+0x10a>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10c      	bne.n	800c720 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f000 f963 	bl	800c9d4 <etharp_request>
 800c70e:	4603      	mov	r3, r0
 800c710:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d102      	bne.n	800c720 <etharp_query+0x124>
      return result;
 800c71a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c71e:	e096      	b.n	800c84e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d106      	bne.n	800c734 <etharp_query+0x138>
 800c726:	4b4c      	ldr	r3, [pc, #304]	@ (800c858 <etharp_query+0x25c>)
 800c728:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800c72c:	494f      	ldr	r1, [pc, #316]	@ (800c86c <etharp_query+0x270>)
 800c72e:	484c      	ldr	r0, [pc, #304]	@ (800c860 <etharp_query+0x264>)
 800c730:	f001 fe02 	bl	800e338 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800c734:	7c7a      	ldrb	r2, [r7, #17]
 800c736:	494b      	ldr	r1, [pc, #300]	@ (800c864 <etharp_query+0x268>)
 800c738:	4613      	mov	r3, r2
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	4413      	add	r3, r2
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	440b      	add	r3, r1
 800c742:	3314      	adds	r3, #20
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d917      	bls.n	800c77a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800c74a:	4a49      	ldr	r2, [pc, #292]	@ (800c870 <etharp_query+0x274>)
 800c74c:	7c7b      	ldrb	r3, [r7, #17]
 800c74e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800c750:	7c7a      	ldrb	r2, [r7, #17]
 800c752:	4613      	mov	r3, r2
 800c754:	005b      	lsls	r3, r3, #1
 800c756:	4413      	add	r3, r2
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	3308      	adds	r3, #8
 800c75c:	4a41      	ldr	r2, [pc, #260]	@ (800c864 <etharp_query+0x268>)
 800c75e:	4413      	add	r3, r2
 800c760:	3304      	adds	r3, #4
 800c762:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c766:	9200      	str	r2, [sp, #0]
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	f001 fc9b 	bl	800e0a8 <ethernet_output>
 800c772:	4603      	mov	r3, r0
 800c774:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c778:	e067      	b.n	800c84a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c77a:	7c7a      	ldrb	r2, [r7, #17]
 800c77c:	4939      	ldr	r1, [pc, #228]	@ (800c864 <etharp_query+0x268>)
 800c77e:	4613      	mov	r3, r2
 800c780:	005b      	lsls	r3, r3, #1
 800c782:	4413      	add	r3, r2
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	440b      	add	r3, r1
 800c788:	3314      	adds	r3, #20
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d15c      	bne.n	800c84a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c798:	e01c      	b.n	800c7d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	895a      	ldrh	r2, [r3, #10]
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	891b      	ldrh	r3, [r3, #8]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d10a      	bne.n	800c7bc <etharp_query+0x1c0>
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d006      	beq.n	800c7bc <etharp_query+0x1c0>
 800c7ae:	4b2a      	ldr	r3, [pc, #168]	@ (800c858 <etharp_query+0x25c>)
 800c7b0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800c7b4:	492f      	ldr	r1, [pc, #188]	@ (800c874 <etharp_query+0x278>)
 800c7b6:	482a      	ldr	r0, [pc, #168]	@ (800c860 <etharp_query+0x264>)
 800c7b8:	f001 fdbe 	bl	800e338 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	7b1b      	ldrb	r3, [r3, #12]
 800c7c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <etharp_query+0x1d2>
        copy_needed = 1;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	61bb      	str	r3, [r7, #24]
        break;
 800c7cc:	e005      	b.n	800c7da <etharp_query+0x1de>
      }
      p = p->next;
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1df      	bne.n	800c79a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d007      	beq.n	800c7f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800c7e6:	200e      	movs	r0, #14
 800c7e8:	f7f9 fd2c 	bl	8006244 <pbuf_clone>
 800c7ec:	61f8      	str	r0, [r7, #28]
 800c7ee:	e004      	b.n	800c7fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c7f4:	69f8      	ldr	r0, [r7, #28]
 800c7f6:	f7f9 fb69 	bl	8005ecc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d021      	beq.n	800c844 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c800:	7c7a      	ldrb	r2, [r7, #17]
 800c802:	4918      	ldr	r1, [pc, #96]	@ (800c864 <etharp_query+0x268>)
 800c804:	4613      	mov	r3, r2
 800c806:	005b      	lsls	r3, r3, #1
 800c808:	4413      	add	r3, r2
 800c80a:	00db      	lsls	r3, r3, #3
 800c80c:	440b      	add	r3, r1
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00a      	beq.n	800c82a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c814:	7c7a      	ldrb	r2, [r7, #17]
 800c816:	4913      	ldr	r1, [pc, #76]	@ (800c864 <etharp_query+0x268>)
 800c818:	4613      	mov	r3, r2
 800c81a:	005b      	lsls	r3, r3, #1
 800c81c:	4413      	add	r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	440b      	add	r3, r1
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f7f9 fab1 	bl	8005d8c <pbuf_free>
      }
      arp_table[i].q = p;
 800c82a:	7c7a      	ldrb	r2, [r7, #17]
 800c82c:	490d      	ldr	r1, [pc, #52]	@ (800c864 <etharp_query+0x268>)
 800c82e:	4613      	mov	r3, r2
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	4413      	add	r3, r2
 800c834:	00db      	lsls	r3, r3, #3
 800c836:	440b      	add	r3, r1
 800c838:	69fa      	ldr	r2, [r7, #28]
 800c83a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c842:	e002      	b.n	800c84a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c844:	23ff      	movs	r3, #255	@ 0xff
 800c846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800c84a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3728      	adds	r7, #40	@ 0x28
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	08011480 	.word	0x08011480
 800c85c:	0801162c 	.word	0x0801162c
 800c860:	080114f8 	.word	0x080114f8
 800c864:	24007bcc 	.word	0x24007bcc
 800c868:	0801163c 	.word	0x0801163c
 800c86c:	08011620 	.word	0x08011620
 800c870:	24007cbc 	.word	0x24007cbc
 800c874:	08011664 	.word	0x08011664

0800c878 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08a      	sub	sp, #40	@ 0x28
 800c87c:	af02      	add	r7, sp, #8
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
 800c884:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c886:	2300      	movs	r3, #0
 800c888:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <etharp_raw+0x26>
 800c890:	4b3a      	ldr	r3, [pc, #232]	@ (800c97c <etharp_raw+0x104>)
 800c892:	f240 4257 	movw	r2, #1111	@ 0x457
 800c896:	493a      	ldr	r1, [pc, #232]	@ (800c980 <etharp_raw+0x108>)
 800c898:	483a      	ldr	r0, [pc, #232]	@ (800c984 <etharp_raw+0x10c>)
 800c89a:	f001 fd4d 	bl	800e338 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c89e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c8a2:	211c      	movs	r1, #28
 800c8a4:	200e      	movs	r0, #14
 800c8a6:	f7f8 ff8d 	bl	80057c4 <pbuf_alloc>
 800c8aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d102      	bne.n	800c8b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8b6:	e05d      	b.n	800c974 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	895b      	ldrh	r3, [r3, #10]
 800c8bc:	2b1b      	cmp	r3, #27
 800c8be:	d806      	bhi.n	800c8ce <etharp_raw+0x56>
 800c8c0:	4b2e      	ldr	r3, [pc, #184]	@ (800c97c <etharp_raw+0x104>)
 800c8c2:	f240 4262 	movw	r2, #1122	@ 0x462
 800c8c6:	4930      	ldr	r1, [pc, #192]	@ (800c988 <etharp_raw+0x110>)
 800c8c8:	482e      	ldr	r0, [pc, #184]	@ (800c984 <etharp_raw+0x10c>)
 800c8ca:	f001 fd35 	bl	800e338 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c8d4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f7 fe42 	bl	8004560 <lwip_htons>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	461a      	mov	r2, r3
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c8ea:	2b06      	cmp	r3, #6
 800c8ec:	d006      	beq.n	800c8fc <etharp_raw+0x84>
 800c8ee:	4b23      	ldr	r3, [pc, #140]	@ (800c97c <etharp_raw+0x104>)
 800c8f0:	f240 4269 	movw	r2, #1129	@ 0x469
 800c8f4:	4925      	ldr	r1, [pc, #148]	@ (800c98c <etharp_raw+0x114>)
 800c8f6:	4823      	ldr	r0, [pc, #140]	@ (800c984 <etharp_raw+0x10c>)
 800c8f8:	f001 fd1e 	bl	800e338 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	3308      	adds	r3, #8
 800c900:	2206      	movs	r2, #6
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	4618      	mov	r0, r3
 800c906:	f001 fdf2 	bl	800e4ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	3312      	adds	r3, #18
 800c90e:	2206      	movs	r2, #6
 800c910:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c912:	4618      	mov	r0, r3
 800c914:	f001 fdeb 	bl	800e4ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	330e      	adds	r3, #14
 800c91c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	3318      	adds	r3, #24
 800c926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	2200      	movs	r2, #0
 800c934:	f042 0201 	orr.w	r2, r2, #1
 800c938:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f042 0208 	orr.w	r2, r2, #8
 800c942:	709a      	strb	r2, [r3, #2]
 800c944:	2200      	movs	r2, #0
 800c946:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2206      	movs	r2, #6
 800c94c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2204      	movs	r2, #4
 800c952:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c954:	f640 0306 	movw	r3, #2054	@ 0x806
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	69b9      	ldr	r1, [r7, #24]
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f001 fba1 	bl	800e0a8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c966:	69b8      	ldr	r0, [r7, #24]
 800c968:	f7f9 fa10 	bl	8005d8c <pbuf_free>
  p = NULL;
 800c96c:	2300      	movs	r3, #0
 800c96e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c970:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c974:	4618      	mov	r0, r3
 800c976:	3720      	adds	r7, #32
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	08011480 	.word	0x08011480
 800c980:	080115d0 	.word	0x080115d0
 800c984:	080114f8 	.word	0x080114f8
 800c988:	08011680 	.word	0x08011680
 800c98c:	080116b4 	.word	0x080116b4

0800c990 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b088      	sub	sp, #32
 800c994:	af04      	add	r7, sp, #16
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	9203      	str	r2, [sp, #12]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	9202      	str	r2, [sp, #8]
 800c9b4:	4a06      	ldr	r2, [pc, #24]	@ (800c9d0 <etharp_request_dst+0x40>)
 800c9b6:	9201      	str	r2, [sp, #4]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f7ff ff5a 	bl	800c878 <etharp_raw>
 800c9c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	08011c3c 	.word	0x08011c3c

0800c9d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c9de:	4a05      	ldr	r2, [pc, #20]	@ (800c9f4 <etharp_request+0x20>)
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff ffd4 	bl	800c990 <etharp_request_dst>
 800c9e8:	4603      	mov	r3, r0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08011c34 	.word	0x08011c34

0800c9f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b08e      	sub	sp, #56	@ 0x38
 800c9fc:	af04      	add	r7, sp, #16
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ca02:	4b87      	ldr	r3, [pc, #540]	@ (800cc20 <icmp_input+0x228>)
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800ca08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	f003 030f 	and.w	r3, r3, #15
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800ca18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca1a:	2b13      	cmp	r3, #19
 800ca1c:	f240 80e8 	bls.w	800cbf0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	895b      	ldrh	r3, [r3, #10]
 800ca24:	2b03      	cmp	r3, #3
 800ca26:	f240 80e5 	bls.w	800cbf4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ca34:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 80d2 	beq.w	800cbe2 <icmp_input+0x1ea>
 800ca3e:	2b08      	cmp	r3, #8
 800ca40:	f040 80d2 	bne.w	800cbe8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800ca44:	4b77      	ldr	r3, [pc, #476]	@ (800cc24 <icmp_input+0x22c>)
 800ca46:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ca48:	4b75      	ldr	r3, [pc, #468]	@ (800cc20 <icmp_input+0x228>)
 800ca4a:	695b      	ldr	r3, [r3, #20]
 800ca4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca50:	2be0      	cmp	r3, #224	@ 0xe0
 800ca52:	f000 80d6 	beq.w	800cc02 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ca56:	4b72      	ldr	r3, [pc, #456]	@ (800cc20 <icmp_input+0x228>)
 800ca58:	695b      	ldr	r3, [r3, #20]
 800ca5a:	4a71      	ldr	r2, [pc, #452]	@ (800cc20 <icmp_input+0x228>)
 800ca5c:	6812      	ldr	r2, [r2, #0]
 800ca5e:	4611      	mov	r1, r2
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fc13 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	f040 80cc 	bne.w	800cc06 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	891b      	ldrh	r3, [r3, #8]
 800ca72:	2b07      	cmp	r3, #7
 800ca74:	f240 80c0 	bls.w	800cbf8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7f7 fe0e 	bl	800469a <inet_chksum_pbuf>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f7f9 f981 	bl	8005d8c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800ca8a:	e0c5      	b.n	800cc18 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800ca8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca8e:	330e      	adds	r3, #14
 800ca90:	4619      	mov	r1, r3
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f7f9 f8e4 	bl	8005c60 <pbuf_add_header>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d04b      	beq.n	800cb36 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	891a      	ldrh	r2, [r3, #8]
 800caa2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800caa4:	4413      	add	r3, r2
 800caa6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	891b      	ldrh	r3, [r3, #8]
 800caac:	8b7a      	ldrh	r2, [r7, #26]
 800caae:	429a      	cmp	r2, r3
 800cab0:	f0c0 80ab 	bcc.w	800cc0a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800cab4:	8b7b      	ldrh	r3, [r7, #26]
 800cab6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800caba:	4619      	mov	r1, r3
 800cabc:	200e      	movs	r0, #14
 800cabe:	f7f8 fe81 	bl	80057c4 <pbuf_alloc>
 800cac2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 80a1 	beq.w	800cc0e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	895b      	ldrh	r3, [r3, #10]
 800cad0:	461a      	mov	r2, r3
 800cad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cad4:	3308      	adds	r3, #8
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d203      	bcs.n	800cae2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800cada:	6978      	ldr	r0, [r7, #20]
 800cadc:	f7f9 f956 	bl	8005d8c <pbuf_free>
          goto icmperr;
 800cae0:	e096      	b.n	800cc10 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800cae8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800caea:	4618      	mov	r0, r3
 800caec:	f001 fcff 	bl	800e4ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800caf0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800caf2:	4619      	mov	r1, r3
 800caf4:	6978      	ldr	r0, [r7, #20]
 800caf6:	f7f9 f8c3 	bl	8005c80 <pbuf_remove_header>
 800cafa:	4603      	mov	r3, r0
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d009      	beq.n	800cb14 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cb00:	4b49      	ldr	r3, [pc, #292]	@ (800cc28 <icmp_input+0x230>)
 800cb02:	22b6      	movs	r2, #182	@ 0xb6
 800cb04:	4949      	ldr	r1, [pc, #292]	@ (800cc2c <icmp_input+0x234>)
 800cb06:	484a      	ldr	r0, [pc, #296]	@ (800cc30 <icmp_input+0x238>)
 800cb08:	f001 fc16 	bl	800e338 <iprintf>
          pbuf_free(r);
 800cb0c:	6978      	ldr	r0, [r7, #20]
 800cb0e:	f7f9 f93d 	bl	8005d8c <pbuf_free>
          goto icmperr;
 800cb12:	e07d      	b.n	800cc10 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800cb14:	6879      	ldr	r1, [r7, #4]
 800cb16:	6978      	ldr	r0, [r7, #20]
 800cb18:	f7f9 fa50 	bl	8005fbc <pbuf_copy>
 800cb1c:	4603      	mov	r3, r0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d003      	beq.n	800cb2a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800cb22:	6978      	ldr	r0, [r7, #20]
 800cb24:	f7f9 f932 	bl	8005d8c <pbuf_free>
          goto icmperr;
 800cb28:	e072      	b.n	800cc10 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f7f9 f92e 	bl	8005d8c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	607b      	str	r3, [r7, #4]
 800cb34:	e00f      	b.n	800cb56 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800cb36:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb38:	330e      	adds	r3, #14
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f7f9 f89f 	bl	8005c80 <pbuf_remove_header>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d006      	beq.n	800cb56 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cb48:	4b37      	ldr	r3, [pc, #220]	@ (800cc28 <icmp_input+0x230>)
 800cb4a:	22c7      	movs	r2, #199	@ 0xc7
 800cb4c:	4939      	ldr	r1, [pc, #228]	@ (800cc34 <icmp_input+0x23c>)
 800cb4e:	4838      	ldr	r0, [pc, #224]	@ (800cc30 <icmp_input+0x238>)
 800cb50:	f001 fbf2 	bl	800e338 <iprintf>
          goto icmperr;
 800cb54:	e05c      	b.n	800cc10 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800cb5c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7f9 f87d 	bl	8005c60 <pbuf_add_header>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d13c      	bne.n	800cbe6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cb7a:	4b29      	ldr	r3, [pc, #164]	@ (800cc20 <icmp_input+0x228>)
 800cb7c:	691a      	ldr	r2, [r3, #16]
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	885b      	ldrh	r3, [r3, #2]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d907      	bls.n	800cba6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	885b      	ldrh	r3, [r3, #2]
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	3309      	adds	r3, #9
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	805a      	strh	r2, [r3, #2]
 800cba4:	e006      	b.n	800cbb4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	885b      	ldrh	r3, [r3, #2]
 800cbaa:	b29b      	uxth	r3, r3
 800cbac:	3308      	adds	r3, #8
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	22ff      	movs	r2, #255	@ 0xff
 800cbb8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	729a      	strb	r2, [r3, #10]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	9302      	str	r3, [sp, #8]
 800cbc8:	2301      	movs	r3, #1
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	2300      	movs	r3, #0
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	23ff      	movs	r3, #255	@ 0xff
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	69f9      	ldr	r1, [r7, #28]
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f000 fa80 	bl	800d0dc <ip4_output_if>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800cbe0:	e001      	b.n	800cbe6 <icmp_input+0x1ee>
      break;
 800cbe2:	bf00      	nop
 800cbe4:	e000      	b.n	800cbe8 <icmp_input+0x1f0>
      break;
 800cbe6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7f9 f8cf 	bl	8005d8c <pbuf_free>
  return;
 800cbee:	e013      	b.n	800cc18 <icmp_input+0x220>
    goto lenerr;
 800cbf0:	bf00      	nop
 800cbf2:	e002      	b.n	800cbfa <icmp_input+0x202>
    goto lenerr;
 800cbf4:	bf00      	nop
 800cbf6:	e000      	b.n	800cbfa <icmp_input+0x202>
        goto lenerr;
 800cbf8:	bf00      	nop
lenerr:
  pbuf_free(p);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7f9 f8c6 	bl	8005d8c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc00:	e00a      	b.n	800cc18 <icmp_input+0x220>
        goto icmperr;
 800cc02:	bf00      	nop
 800cc04:	e004      	b.n	800cc10 <icmp_input+0x218>
        goto icmperr;
 800cc06:	bf00      	nop
 800cc08:	e002      	b.n	800cc10 <icmp_input+0x218>
          goto icmperr;
 800cc0a:	bf00      	nop
 800cc0c:	e000      	b.n	800cc10 <icmp_input+0x218>
          goto icmperr;
 800cc0e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7f9 f8bb 	bl	8005d8c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800cc16:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800cc18:	3728      	adds	r7, #40	@ 0x28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}
 800cc1e:	bf00      	nop
 800cc20:	24004c50 	.word	0x24004c50
 800cc24:	24004c64 	.word	0x24004c64
 800cc28:	080116f8 	.word	0x080116f8
 800cc2c:	08011730 	.word	0x08011730
 800cc30:	08011768 	.word	0x08011768
 800cc34:	08011790 	.word	0x08011790

0800cc38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	460b      	mov	r3, r1
 800cc42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800cc44:	78fb      	ldrb	r3, [r7, #3]
 800cc46:	461a      	mov	r2, r3
 800cc48:	2103      	movs	r1, #3
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f814 	bl	800cc78 <icmp_send_response>
}
 800cc50:	bf00      	nop
 800cc52:	3708      	adds	r7, #8
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	460b      	mov	r3, r1
 800cc62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	461a      	mov	r2, r3
 800cc68:	210b      	movs	r1, #11
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f804 	bl	800cc78 <icmp_send_response>
}
 800cc70:	bf00      	nop
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08c      	sub	sp, #48	@ 0x30
 800cc7c:	af04      	add	r7, sp, #16
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
 800cc84:	4613      	mov	r3, r2
 800cc86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cc88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800cc8c:	2124      	movs	r1, #36	@ 0x24
 800cc8e:	2022      	movs	r0, #34	@ 0x22
 800cc90:	f7f8 fd98 	bl	80057c4 <pbuf_alloc>
 800cc94:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800cc96:	69fb      	ldr	r3, [r7, #28]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d056      	beq.n	800cd4a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	895b      	ldrh	r3, [r3, #10]
 800cca0:	2b23      	cmp	r3, #35	@ 0x23
 800cca2:	d806      	bhi.n	800ccb2 <icmp_send_response+0x3a>
 800cca4:	4b2b      	ldr	r3, [pc, #172]	@ (800cd54 <icmp_send_response+0xdc>)
 800cca6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800ccaa:	492b      	ldr	r1, [pc, #172]	@ (800cd58 <icmp_send_response+0xe0>)
 800ccac:	482b      	ldr	r0, [pc, #172]	@ (800cd5c <icmp_send_response+0xe4>)
 800ccae:	f001 fb43 	bl	800e338 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800ccb8:	69fb      	ldr	r3, [r7, #28]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	78fa      	ldrb	r2, [r7, #3]
 800ccc2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	78ba      	ldrb	r2, [r7, #2]
 800ccc8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2200      	movs	r2, #0
 800ccce:	711a      	strb	r2, [r3, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	719a      	strb	r2, [r3, #6]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f103 0008 	add.w	r0, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	685b      	ldr	r3, [r3, #4]
 800ccea:	221c      	movs	r2, #28
 800ccec:	4619      	mov	r1, r3
 800ccee:	f001 fbfe 	bl	800e4ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	68db      	ldr	r3, [r3, #12]
 800ccf6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800ccf8:	f107 030c 	add.w	r3, r7, #12
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 f82f 	bl	800cd60 <ip4_route>
 800cd02:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01b      	beq.n	800cd42 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	709a      	strb	r2, [r3, #2]
 800cd10:	2200      	movs	r2, #0
 800cd12:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	895b      	ldrh	r3, [r3, #10]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6978      	ldr	r0, [r7, #20]
 800cd1c:	f7f7 fcab 	bl	8004676 <inet_chksum>
 800cd20:	4603      	mov	r3, r0
 800cd22:	461a      	mov	r2, r3
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cd28:	f107 020c 	add.w	r2, r7, #12
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	9302      	str	r3, [sp, #8]
 800cd30:	2301      	movs	r3, #1
 800cd32:	9301      	str	r3, [sp, #4]
 800cd34:	2300      	movs	r3, #0
 800cd36:	9300      	str	r3, [sp, #0]
 800cd38:	23ff      	movs	r3, #255	@ 0xff
 800cd3a:	2100      	movs	r1, #0
 800cd3c:	69f8      	ldr	r0, [r7, #28]
 800cd3e:	f000 f9cd 	bl	800d0dc <ip4_output_if>
  }
  pbuf_free(q);
 800cd42:	69f8      	ldr	r0, [r7, #28]
 800cd44:	f7f9 f822 	bl	8005d8c <pbuf_free>
 800cd48:	e000      	b.n	800cd4c <icmp_send_response+0xd4>
    return;
 800cd4a:	bf00      	nop
}
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	080116f8 	.word	0x080116f8
 800cd58:	080117c4 	.word	0x080117c4
 800cd5c:	08011768 	.word	0x08011768

0800cd60 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800cd68:	4b33      	ldr	r3, [pc, #204]	@ (800ce38 <ip4_route+0xd8>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	60fb      	str	r3, [r7, #12]
 800cd6e:	e036      	b.n	800cdde <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d02b      	beq.n	800cdd8 <ip4_route+0x78>
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cd86:	089b      	lsrs	r3, r3, #2
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d022      	beq.n	800cdd8 <ip4_route+0x78>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	3304      	adds	r3, #4
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d01d      	beq.n	800cdd8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3304      	adds	r3, #4
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	405a      	eors	r2, r3
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4013      	ands	r3, r2
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	e038      	b.n	800ce2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdbe:	f003 0302 	and.w	r3, r3, #2
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d108      	bne.n	800cdd8 <ip4_route+0x78>
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	330c      	adds	r3, #12
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d101      	bne.n	800cdd8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	e028      	b.n	800ce2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d1c5      	bne.n	800cd70 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800cde4:	4b15      	ldr	r3, [pc, #84]	@ (800ce3c <ip4_route+0xdc>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01a      	beq.n	800ce22 <ip4_route+0xc2>
 800cdec:	4b13      	ldr	r3, [pc, #76]	@ (800ce3c <ip4_route+0xdc>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cdf4:	f003 0301 	and.w	r3, r3, #1
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d012      	beq.n	800ce22 <ip4_route+0xc2>
 800cdfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ce3c <ip4_route+0xdc>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce04:	f003 0304 	and.w	r3, r3, #4
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d00a      	beq.n	800ce22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ce3c <ip4_route+0xdc>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	3304      	adds	r3, #4
 800ce12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d004      	beq.n	800ce22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	b2db      	uxtb	r3, r3
 800ce1e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce20:	d101      	bne.n	800ce26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e001      	b.n	800ce2a <ip4_route+0xca>
  }

  return netif_default;
 800ce26:	4b05      	ldr	r3, [pc, #20]	@ (800ce3c <ip4_route+0xdc>)
 800ce28:	681b      	ldr	r3, [r3, #0]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3714      	adds	r7, #20
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	24007b60 	.word	0x24007b60
 800ce3c:	24007b64 	.word	0x24007b64

0800ce40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	b2db      	uxtb	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d016      	beq.n	800ce86 <ip4_input_accept+0x46>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	3304      	adds	r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d011      	beq.n	800ce86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ce62:	4b0b      	ldr	r3, [pc, #44]	@ (800ce90 <ip4_input_accept+0x50>)
 800ce64:	695a      	ldr	r2, [r3, #20]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	3304      	adds	r3, #4
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d008      	beq.n	800ce82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800ce70:	4b07      	ldr	r3, [pc, #28]	@ (800ce90 <ip4_input_accept+0x50>)
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fa08 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800ce7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d001      	beq.n	800ce86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800ce82:	2301      	movs	r3, #1
 800ce84:	e000      	b.n	800ce88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	24004c50 	.word	0x24004c50

0800ce94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	091b      	lsrs	r3, r3, #4
 800ceaa:	b2db      	uxtb	r3, r3
 800ceac:	2b04      	cmp	r3, #4
 800ceae:	d004      	beq.n	800ceba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800ceb0:	6878      	ldr	r0, [r7, #4]
 800ceb2:	f7f8 ff6b 	bl	8005d8c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e107      	b.n	800d0ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	f003 030f 	and.w	r3, r3, #15
 800cec2:	b2db      	uxtb	r3, r3
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	b2db      	uxtb	r3, r3
 800cec8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	885b      	ldrh	r3, [r3, #2]
 800cece:	b29b      	uxth	r3, r3
 800ced0:	4618      	mov	r0, r3
 800ced2:	f7f7 fb45 	bl	8004560 <lwip_htons>
 800ced6:	4603      	mov	r3, r0
 800ced8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	891b      	ldrh	r3, [r3, #8]
 800cede:	89ba      	ldrh	r2, [r7, #12]
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d204      	bcs.n	800ceee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800cee4:	89bb      	ldrh	r3, [r7, #12]
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f7f8 fdc9 	bl	8005a80 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	895b      	ldrh	r3, [r3, #10]
 800cef2:	89fa      	ldrh	r2, [r7, #14]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d807      	bhi.n	800cf08 <ip4_input+0x74>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	891b      	ldrh	r3, [r3, #8]
 800cefc:	89ba      	ldrh	r2, [r7, #12]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d802      	bhi.n	800cf08 <ip4_input+0x74>
 800cf02:	89fb      	ldrh	r3, [r7, #14]
 800cf04:	2b13      	cmp	r3, #19
 800cf06:	d804      	bhi.n	800cf12 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f8 ff3f 	bl	8005d8c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	e0db      	b.n	800d0ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	691b      	ldr	r3, [r3, #16]
 800cf16:	4a6f      	ldr	r2, [pc, #444]	@ (800d0d4 <ip4_input+0x240>)
 800cf18:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	4a6d      	ldr	r2, [pc, #436]	@ (800d0d4 <ip4_input+0x240>)
 800cf20:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cf22:	4b6c      	ldr	r3, [pc, #432]	@ (800d0d4 <ip4_input+0x240>)
 800cf24:	695b      	ldr	r3, [r3, #20]
 800cf26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf2a:	2be0      	cmp	r3, #224	@ 0xe0
 800cf2c:	d112      	bne.n	800cf54 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	b2db      	uxtb	r3, r3
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d007      	beq.n	800cf4e <ip4_input+0xba>
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	3304      	adds	r3, #4
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <ip4_input+0xba>
      netif = inp;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	613b      	str	r3, [r7, #16]
 800cf4c:	e02a      	b.n	800cfa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	613b      	str	r3, [r7, #16]
 800cf52:	e027      	b.n	800cfa4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800cf54:	6838      	ldr	r0, [r7, #0]
 800cf56:	f7ff ff73 	bl	800ce40 <ip4_input_accept>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <ip4_input+0xd2>
      netif = inp;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	613b      	str	r3, [r7, #16]
 800cf64:	e01e      	b.n	800cfa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800cf6a:	4b5a      	ldr	r3, [pc, #360]	@ (800d0d4 <ip4_input+0x240>)
 800cf6c:	695b      	ldr	r3, [r3, #20]
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf72:	d017      	beq.n	800cfa4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800cf74:	4b58      	ldr	r3, [pc, #352]	@ (800d0d8 <ip4_input+0x244>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	613b      	str	r3, [r7, #16]
 800cf7a:	e00e      	b.n	800cf9a <ip4_input+0x106>
          if (netif == inp) {
 800cf7c:	693a      	ldr	r2, [r7, #16]
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d006      	beq.n	800cf92 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800cf84:	6938      	ldr	r0, [r7, #16]
 800cf86:	f7ff ff5b 	bl	800ce40 <ip4_input_accept>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d108      	bne.n	800cfa2 <ip4_input+0x10e>
 800cf90:	e000      	b.n	800cf94 <ip4_input+0x100>
            continue;
 800cf92:	bf00      	nop
        NETIF_FOREACH(netif) {
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	613b      	str	r3, [r7, #16]
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d1ed      	bne.n	800cf7c <ip4_input+0xe8>
 800cfa0:	e000      	b.n	800cfa4 <ip4_input+0x110>
            break;
 800cfa2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cfa4:	4b4b      	ldr	r3, [pc, #300]	@ (800d0d4 <ip4_input+0x240>)
 800cfa6:	691b      	ldr	r3, [r3, #16]
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f000 f96e 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d105      	bne.n	800cfc2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800cfb6:	4b47      	ldr	r3, [pc, #284]	@ (800d0d4 <ip4_input+0x240>)
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800cfbe:	2be0      	cmp	r3, #224	@ 0xe0
 800cfc0:	d104      	bne.n	800cfcc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f7f8 fee2 	bl	8005d8c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e07e      	b.n	800d0ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d104      	bne.n	800cfdc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f7f8 feda 	bl	8005d8c <pbuf_free>
    return ERR_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e076      	b.n	800d0ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	88db      	ldrh	r3, [r3, #6]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	461a      	mov	r2, r3
 800cfe4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800cfe8:	4013      	ands	r3, r2
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00b      	beq.n	800d006 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800cfee:	6878      	ldr	r0, [r7, #4]
 800cff0:	f000 fc92 	bl	800d918 <ip4_reass>
 800cff4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d101      	bne.n	800d000 <ip4_input+0x16c>
      return ERR_OK;
 800cffc:	2300      	movs	r3, #0
 800cffe:	e064      	b.n	800d0ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d006:	4a33      	ldr	r2, [pc, #204]	@ (800d0d4 <ip4_input+0x240>)
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d00c:	4a31      	ldr	r2, [pc, #196]	@ (800d0d4 <ip4_input+0x240>)
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d012:	4a30      	ldr	r2, [pc, #192]	@ (800d0d4 <ip4_input+0x240>)
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	f003 030f 	and.w	r3, r3, #15
 800d020:	b2db      	uxtb	r3, r3
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	b2db      	uxtb	r3, r3
 800d026:	461a      	mov	r2, r3
 800d028:	4b2a      	ldr	r3, [pc, #168]	@ (800d0d4 <ip4_input+0x240>)
 800d02a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d02c:	89fb      	ldrh	r3, [r7, #14]
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7f8 fe25 	bl	8005c80 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	7a5b      	ldrb	r3, [r3, #9]
 800d03a:	2b11      	cmp	r3, #17
 800d03c:	d006      	beq.n	800d04c <ip4_input+0x1b8>
 800d03e:	2b11      	cmp	r3, #17
 800d040:	dc13      	bgt.n	800d06a <ip4_input+0x1d6>
 800d042:	2b01      	cmp	r3, #1
 800d044:	d00c      	beq.n	800d060 <ip4_input+0x1cc>
 800d046:	2b06      	cmp	r3, #6
 800d048:	d005      	beq.n	800d056 <ip4_input+0x1c2>
 800d04a:	e00e      	b.n	800d06a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d04c:	6839      	ldr	r1, [r7, #0]
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7fe fc42 	bl	800b8d8 <udp_input>
        break;
 800d054:	e026      	b.n	800d0a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d056:	6839      	ldr	r1, [r7, #0]
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f7fa fcc1 	bl	80079e0 <tcp_input>
        break;
 800d05e:	e021      	b.n	800d0a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fcc8 	bl	800c9f8 <icmp_input>
        break;
 800d068:	e01c      	b.n	800d0a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d06a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d4 <ip4_input+0x240>)
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	6939      	ldr	r1, [r7, #16]
 800d070:	4618      	mov	r0, r3
 800d072:	f000 f90b 	bl	800d28c <ip4_addr_isbroadcast_u32>
 800d076:	4603      	mov	r3, r0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10f      	bne.n	800d09c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d07c:	4b15      	ldr	r3, [pc, #84]	@ (800d0d4 <ip4_input+0x240>)
 800d07e:	695b      	ldr	r3, [r3, #20]
 800d080:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d084:	2be0      	cmp	r3, #224	@ 0xe0
 800d086:	d009      	beq.n	800d09c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7f8 fe69 	bl	8005d66 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d094:	2102      	movs	r1, #2
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7ff fdce 	bl	800cc38 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f7f8 fe75 	bl	8005d8c <pbuf_free>
        break;
 800d0a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d0d4 <ip4_input+0x240>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d0aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d0d4 <ip4_input+0x240>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d0b0:	4b08      	ldr	r3, [pc, #32]	@ (800d0d4 <ip4_input+0x240>)
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d0b6:	4b07      	ldr	r3, [pc, #28]	@ (800d0d4 <ip4_input+0x240>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d0bc:	4b05      	ldr	r3, [pc, #20]	@ (800d0d4 <ip4_input+0x240>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d0c2:	4b04      	ldr	r3, [pc, #16]	@ (800d0d4 <ip4_input+0x240>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d0c8:	2300      	movs	r3, #0
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3718      	adds	r7, #24
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	24004c50 	.word	0x24004c50
 800d0d8:	24007b60 	.word	0x24007b60

0800d0dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b08a      	sub	sp, #40	@ 0x28
 800d0e0:	af04      	add	r7, sp, #16
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
 800d0e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d009      	beq.n	800d108 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <ip4_output_if+0x26>
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d102      	bne.n	800d108 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d104:	3304      	adds	r3, #4
 800d106:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d108:	78fa      	ldrb	r2, [r7, #3]
 800d10a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10c:	9302      	str	r3, [sp, #8]
 800d10e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d112:	9301      	str	r3, [sp, #4]
 800d114:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d118:	9300      	str	r3, [sp, #0]
 800d11a:	4613      	mov	r3, r2
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 f805 	bl	800d130 <ip4_output_if_src>
 800d126:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b088      	sub	sp, #32
 800d134:	af00      	add	r7, sp, #0
 800d136:	60f8      	str	r0, [r7, #12]
 800d138:	60b9      	str	r1, [r7, #8]
 800d13a:	607a      	str	r2, [r7, #4]
 800d13c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	7b9b      	ldrb	r3, [r3, #14]
 800d142:	2b01      	cmp	r3, #1
 800d144:	d006      	beq.n	800d154 <ip4_output_if_src+0x24>
 800d146:	4b4b      	ldr	r3, [pc, #300]	@ (800d274 <ip4_output_if_src+0x144>)
 800d148:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800d14c:	494a      	ldr	r1, [pc, #296]	@ (800d278 <ip4_output_if_src+0x148>)
 800d14e:	484b      	ldr	r0, [pc, #300]	@ (800d27c <ip4_output_if_src+0x14c>)
 800d150:	f001 f8f2 	bl	800e338 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d060      	beq.n	800d21c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d15a:	2314      	movs	r3, #20
 800d15c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d15e:	2114      	movs	r1, #20
 800d160:	68f8      	ldr	r0, [r7, #12]
 800d162:	f7f8 fd7d 	bl	8005c60 <pbuf_add_header>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d16c:	f06f 0301 	mvn.w	r3, #1
 800d170:	e07c      	b.n	800d26c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	895b      	ldrh	r3, [r3, #10]
 800d17c:	2b13      	cmp	r3, #19
 800d17e:	d806      	bhi.n	800d18e <ip4_output_if_src+0x5e>
 800d180:	4b3c      	ldr	r3, [pc, #240]	@ (800d274 <ip4_output_if_src+0x144>)
 800d182:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800d186:	493e      	ldr	r1, [pc, #248]	@ (800d280 <ip4_output_if_src+0x150>)
 800d188:	483c      	ldr	r0, [pc, #240]	@ (800d27c <ip4_output_if_src+0x14c>)
 800d18a:	f001 f8d5 	bl	800e338 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	78fa      	ldrb	r2, [r7, #3]
 800d192:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800d19a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d1a4:	8b7b      	ldrh	r3, [r7, #26]
 800d1a6:	089b      	lsrs	r3, r3, #2
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800d1bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	891b      	ldrh	r3, [r3, #8]
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f7 f9cc 	bl	8004560 <lwip_htons>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	69fb      	ldr	r3, [r7, #28]
 800d1ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d1d0:	69fb      	ldr	r3, [r7, #28]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	719a      	strb	r2, [r3, #6]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d1da:	4b2a      	ldr	r3, [pc, #168]	@ (800d284 <ip4_output_if_src+0x154>)
 800d1dc:	881b      	ldrh	r3, [r3, #0]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7f7 f9be 	bl	8004560 <lwip_htons>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d1ec:	4b25      	ldr	r3, [pc, #148]	@ (800d284 <ip4_output_if_src+0x154>)
 800d1ee:	881b      	ldrh	r3, [r3, #0]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	4b23      	ldr	r3, [pc, #140]	@ (800d284 <ip4_output_if_src+0x154>)
 800d1f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d104      	bne.n	800d208 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d1fe:	4b22      	ldr	r3, [pc, #136]	@ (800d288 <ip4_output_if_src+0x158>)
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	60da      	str	r2, [r3, #12]
 800d206:	e003      	b.n	800d210 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	2200      	movs	r2, #0
 800d214:	729a      	strb	r2, [r3, #10]
 800d216:	2200      	movs	r2, #0
 800d218:	72da      	strb	r2, [r3, #11]
 800d21a:	e00f      	b.n	800d23c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	895b      	ldrh	r3, [r3, #10]
 800d220:	2b13      	cmp	r3, #19
 800d222:	d802      	bhi.n	800d22a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d224:	f06f 0301 	mvn.w	r3, #1
 800d228:	e020      	b.n	800d26c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d236:	f107 0314 	add.w	r3, r7, #20
 800d23a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d240:	2b00      	cmp	r3, #0
 800d242:	d00c      	beq.n	800d25e <ip4_output_if_src+0x12e>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	891a      	ldrh	r2, [r3, #8]
 800d248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d24a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d906      	bls.n	800d25e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f000 fd53 	bl	800dd00 <ip4_frag>
 800d25a:	4603      	mov	r3, r0
 800d25c:	e006      	b.n	800d26c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	68f9      	ldr	r1, [r7, #12]
 800d266:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d268:	4798      	blx	r3
 800d26a:	4603      	mov	r3, r0
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3720      	adds	r7, #32
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	080117f0 	.word	0x080117f0
 800d278:	08011824 	.word	0x08011824
 800d27c:	08011830 	.word	0x08011830
 800d280:	08011858 	.word	0x08011858
 800d284:	24007cbe 	.word	0x24007cbe
 800d288:	08011c30 	.word	0x08011c30

0800d28c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a0:	d002      	beq.n	800d2a8 <ip4_addr_isbroadcast_u32+0x1c>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e02a      	b.n	800d302 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800d2b2:	f003 0302 	and.w	r3, r3, #2
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	e021      	b.n	800d302 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d101      	bne.n	800d2ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e019      	b.n	800d302 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d2ce:	68fa      	ldr	r2, [r7, #12]
 800d2d0:	683b      	ldr	r3, [r7, #0]
 800d2d2:	3304      	adds	r3, #4
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	405a      	eors	r2, r3
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	3308      	adds	r3, #8
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10d      	bne.n	800d300 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	3308      	adds	r3, #8
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	43da      	mvns	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	3308      	adds	r3, #8
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d101      	bne.n	800d300 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	e000      	b.n	800d302 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d300:	2300      	movs	r3, #0
  }
}
 800d302:	4618      	mov	r0, r3
 800d304:	3714      	adds	r7, #20
 800d306:	46bd      	mov	sp, r7
 800d308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30c:	4770      	bx	lr
	...

0800d310 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b084      	sub	sp, #16
 800d314:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d316:	2300      	movs	r3, #0
 800d318:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d31a:	4b12      	ldr	r3, [pc, #72]	@ (800d364 <ip_reass_tmr+0x54>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d320:	e018      	b.n	800d354 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	7fdb      	ldrb	r3, [r3, #31]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00b      	beq.n	800d342 <ip_reass_tmr+0x32>
      r->timer--;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	7fdb      	ldrb	r3, [r3, #31]
 800d32e:	3b01      	subs	r3, #1
 800d330:	b2da      	uxtb	r2, r3
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	e008      	b.n	800d354 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d34c:	68b9      	ldr	r1, [r7, #8]
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f80a 	bl	800d368 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d1e3      	bne.n	800d322 <ip_reass_tmr+0x12>
    }
  }
}
 800d35a:	bf00      	nop
 800d35c:	bf00      	nop
 800d35e:	3710      	adds	r7, #16
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	24007cc0 	.word	0x24007cc0

0800d368 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
 800d370:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d372:	2300      	movs	r3, #0
 800d374:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d376:	683a      	ldr	r2, [r7, #0]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d105      	bne.n	800d38a <ip_reass_free_complete_datagram+0x22>
 800d37e:	4b45      	ldr	r3, [pc, #276]	@ (800d494 <ip_reass_free_complete_datagram+0x12c>)
 800d380:	22ab      	movs	r2, #171	@ 0xab
 800d382:	4945      	ldr	r1, [pc, #276]	@ (800d498 <ip_reass_free_complete_datagram+0x130>)
 800d384:	4845      	ldr	r0, [pc, #276]	@ (800d49c <ip_reass_free_complete_datagram+0x134>)
 800d386:	f000 ffd7 	bl	800e338 <iprintf>
  if (prev != NULL) {
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00a      	beq.n	800d3a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	687a      	ldr	r2, [r7, #4]
 800d396:	429a      	cmp	r2, r3
 800d398:	d005      	beq.n	800d3a6 <ip_reass_free_complete_datagram+0x3e>
 800d39a:	4b3e      	ldr	r3, [pc, #248]	@ (800d494 <ip_reass_free_complete_datagram+0x12c>)
 800d39c:	22ad      	movs	r2, #173	@ 0xad
 800d39e:	4940      	ldr	r1, [pc, #256]	@ (800d4a0 <ip_reass_free_complete_datagram+0x138>)
 800d3a0:	483e      	ldr	r0, [pc, #248]	@ (800d49c <ip_reass_free_complete_datagram+0x134>)
 800d3a2:	f000 ffc9 	bl	800e338 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	889b      	ldrh	r3, [r3, #4]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d12a      	bne.n	800d40e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	6858      	ldr	r0, [r3, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	2214      	movs	r2, #20
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	f001 f88c 	bl	800e4ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	69b8      	ldr	r0, [r7, #24]
 800d3da:	f7ff fc3d 	bl	800cc58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d3de:	69b8      	ldr	r0, [r7, #24]
 800d3e0:	f7f8 fd5c 	bl	8005e9c <pbuf_clen>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d3e8:	8bfa      	ldrh	r2, [r7, #30]
 800d3ea:	8a7b      	ldrh	r3, [r7, #18]
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3f2:	db05      	blt.n	800d400 <ip_reass_free_complete_datagram+0x98>
 800d3f4:	4b27      	ldr	r3, [pc, #156]	@ (800d494 <ip_reass_free_complete_datagram+0x12c>)
 800d3f6:	22bc      	movs	r2, #188	@ 0xbc
 800d3f8:	492a      	ldr	r1, [pc, #168]	@ (800d4a4 <ip_reass_free_complete_datagram+0x13c>)
 800d3fa:	4828      	ldr	r0, [pc, #160]	@ (800d49c <ip_reass_free_complete_datagram+0x134>)
 800d3fc:	f000 ff9c 	bl	800e338 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d400:	8bfa      	ldrh	r2, [r7, #30]
 800d402:	8a7b      	ldrh	r3, [r7, #18]
 800d404:	4413      	add	r3, r2
 800d406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d408:	69b8      	ldr	r0, [r7, #24]
 800d40a:	f7f8 fcbf 	bl	8005d8c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d414:	e01f      	b.n	800d456 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d41c:	69bb      	ldr	r3, [r7, #24]
 800d41e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7f8 fd38 	bl	8005e9c <pbuf_clen>
 800d42c:	4603      	mov	r3, r0
 800d42e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d430:	8bfa      	ldrh	r2, [r7, #30]
 800d432:	8a7b      	ldrh	r3, [r7, #18]
 800d434:	4413      	add	r3, r2
 800d436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d43a:	db05      	blt.n	800d448 <ip_reass_free_complete_datagram+0xe0>
 800d43c:	4b15      	ldr	r3, [pc, #84]	@ (800d494 <ip_reass_free_complete_datagram+0x12c>)
 800d43e:	22cc      	movs	r2, #204	@ 0xcc
 800d440:	4918      	ldr	r1, [pc, #96]	@ (800d4a4 <ip_reass_free_complete_datagram+0x13c>)
 800d442:	4816      	ldr	r0, [pc, #88]	@ (800d49c <ip_reass_free_complete_datagram+0x134>)
 800d444:	f000 ff78 	bl	800e338 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d448:	8bfa      	ldrh	r2, [r7, #30]
 800d44a:	8a7b      	ldrh	r3, [r7, #18]
 800d44c:	4413      	add	r3, r2
 800d44e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d450:	68f8      	ldr	r0, [r7, #12]
 800d452:	f7f8 fc9b 	bl	8005d8c <pbuf_free>
  while (p != NULL) {
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1dc      	bne.n	800d416 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f8c2 	bl	800d5e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d464:	4b10      	ldr	r3, [pc, #64]	@ (800d4a8 <ip_reass_free_complete_datagram+0x140>)
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	8bfa      	ldrh	r2, [r7, #30]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d905      	bls.n	800d47a <ip_reass_free_complete_datagram+0x112>
 800d46e:	4b09      	ldr	r3, [pc, #36]	@ (800d494 <ip_reass_free_complete_datagram+0x12c>)
 800d470:	22d2      	movs	r2, #210	@ 0xd2
 800d472:	490e      	ldr	r1, [pc, #56]	@ (800d4ac <ip_reass_free_complete_datagram+0x144>)
 800d474:	4809      	ldr	r0, [pc, #36]	@ (800d49c <ip_reass_free_complete_datagram+0x134>)
 800d476:	f000 ff5f 	bl	800e338 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d47a:	4b0b      	ldr	r3, [pc, #44]	@ (800d4a8 <ip_reass_free_complete_datagram+0x140>)
 800d47c:	881a      	ldrh	r2, [r3, #0]
 800d47e:	8bfb      	ldrh	r3, [r7, #30]
 800d480:	1ad3      	subs	r3, r2, r3
 800d482:	b29a      	uxth	r2, r3
 800d484:	4b08      	ldr	r3, [pc, #32]	@ (800d4a8 <ip_reass_free_complete_datagram+0x140>)
 800d486:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d488:	8bfb      	ldrh	r3, [r7, #30]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3720      	adds	r7, #32
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	08011888 	.word	0x08011888
 800d498:	080118c4 	.word	0x080118c4
 800d49c:	080118d0 	.word	0x080118d0
 800d4a0:	080118f8 	.word	0x080118f8
 800d4a4:	0801190c 	.word	0x0801190c
 800d4a8:	24007cc4 	.word	0x24007cc4
 800d4ac:	0801192c 	.word	0x0801192c

0800d4b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08a      	sub	sp, #40	@ 0x28
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d4ce:	4b28      	ldr	r3, [pc, #160]	@ (800d570 <ip_reass_remove_oldest_datagram+0xc0>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d4d4:	e030      	b.n	800d538 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d8:	695a      	ldr	r2, [r3, #20]
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d10c      	bne.n	800d4fc <ip_reass_remove_oldest_datagram+0x4c>
 800d4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4e4:	699a      	ldr	r2, [r3, #24]
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d106      	bne.n	800d4fc <ip_reass_remove_oldest_datagram+0x4c>
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	899a      	ldrh	r2, [r3, #12]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	889b      	ldrh	r3, [r3, #4]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d014      	beq.n	800d526 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	3301      	adds	r3, #1
 800d500:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d104      	bne.n	800d512 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d50a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	61bb      	str	r3, [r7, #24]
 800d510:	e009      	b.n	800d526 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d514:	7fda      	ldrb	r2, [r3, #31]
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	7fdb      	ldrb	r3, [r3, #31]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d803      	bhi.n	800d526 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d520:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d522:	69fb      	ldr	r3, [r7, #28]
 800d524:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d530:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1cb      	bne.n	800d4d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d53e:	6a3b      	ldr	r3, [r7, #32]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d008      	beq.n	800d556 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d544:	69b9      	ldr	r1, [r7, #24]
 800d546:	6a38      	ldr	r0, [r7, #32]
 800d548:	f7ff ff0e 	bl	800d368 <ip_reass_free_complete_datagram>
 800d54c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4413      	add	r3, r2
 800d554:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d556:	697a      	ldr	r2, [r7, #20]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	da02      	bge.n	800d564 <ip_reass_remove_oldest_datagram+0xb4>
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	2b01      	cmp	r3, #1
 800d562:	dcac      	bgt.n	800d4be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d564:	697b      	ldr	r3, [r7, #20]
}
 800d566:	4618      	mov	r0, r3
 800d568:	3728      	adds	r7, #40	@ 0x28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bd80      	pop	{r7, pc}
 800d56e:	bf00      	nop
 800d570:	24007cc0 	.word	0x24007cc0

0800d574 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d57e:	2004      	movs	r0, #4
 800d580:	f7f7 fd1e 	bl	8004fc0 <memp_malloc>
 800d584:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d110      	bne.n	800d5ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f7ff ff8e 	bl	800d4b0 <ip_reass_remove_oldest_datagram>
 800d594:	4602      	mov	r2, r0
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	4293      	cmp	r3, r2
 800d59a:	dc03      	bgt.n	800d5a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d59c:	2004      	movs	r0, #4
 800d59e:	f7f7 fd0f 	bl	8004fc0 <memp_malloc>
 800d5a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d101      	bne.n	800d5ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	e016      	b.n	800d5dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	68f8      	ldr	r0, [r7, #12]
 800d5b4:	f000 ff25 	bl	800e402 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	220f      	movs	r2, #15
 800d5bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d5be:	4b09      	ldr	r3, [pc, #36]	@ (800d5e4 <ip_reass_enqueue_new_datagram+0x70>)
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d5c6:	4a07      	ldr	r2, [pc, #28]	@ (800d5e4 <ip_reass_enqueue_new_datagram+0x70>)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	3308      	adds	r3, #8
 800d5d0:	2214      	movs	r2, #20
 800d5d2:	6879      	ldr	r1, [r7, #4]
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 ff8a 	bl	800e4ee <memcpy>
  return ipr;
 800d5da:	68fb      	ldr	r3, [r7, #12]
}
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}
 800d5e4:	24007cc0 	.word	0x24007cc0

0800d5e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d5f2:	4b10      	ldr	r3, [pc, #64]	@ (800d634 <ip_reass_dequeue_datagram+0x4c>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d104      	bne.n	800d606 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a0c      	ldr	r2, [pc, #48]	@ (800d634 <ip_reass_dequeue_datagram+0x4c>)
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	e00d      	b.n	800d622 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <ip_reass_dequeue_datagram+0x32>
 800d60c:	4b0a      	ldr	r3, [pc, #40]	@ (800d638 <ip_reass_dequeue_datagram+0x50>)
 800d60e:	f240 1245 	movw	r2, #325	@ 0x145
 800d612:	490a      	ldr	r1, [pc, #40]	@ (800d63c <ip_reass_dequeue_datagram+0x54>)
 800d614:	480a      	ldr	r0, [pc, #40]	@ (800d640 <ip_reass_dequeue_datagram+0x58>)
 800d616:	f000 fe8f 	bl	800e338 <iprintf>
    prev->next = ipr->next;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d622:	6879      	ldr	r1, [r7, #4]
 800d624:	2004      	movs	r0, #4
 800d626:	f7f7 fd3b 	bl	80050a0 <memp_free>
}
 800d62a:	bf00      	nop
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	24007cc0 	.word	0x24007cc0
 800d638:	08011888 	.word	0x08011888
 800d63c:	08011950 	.word	0x08011950
 800d640:	080118d0 	.word	0x080118d0

0800d644 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b08c      	sub	sp, #48	@ 0x30
 800d648:	af00      	add	r7, sp, #0
 800d64a:	60f8      	str	r0, [r7, #12]
 800d64c:	60b9      	str	r1, [r7, #8]
 800d64e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d650:	2300      	movs	r3, #0
 800d652:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800d654:	2301      	movs	r3, #1
 800d656:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	885b      	ldrh	r3, [r3, #2]
 800d662:	b29b      	uxth	r3, r3
 800d664:	4618      	mov	r0, r3
 800d666:	f7f6 ff7b 	bl	8004560 <lwip_htons>
 800d66a:	4603      	mov	r3, r0
 800d66c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	f003 030f 	and.w	r3, r3, #15
 800d676:	b2db      	uxtb	r3, r3
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800d67c:	7e7b      	ldrb	r3, [r7, #25]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	8b7a      	ldrh	r2, [r7, #26]
 800d682:	429a      	cmp	r2, r3
 800d684:	d202      	bcs.n	800d68c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d686:	f04f 33ff 	mov.w	r3, #4294967295
 800d68a:	e135      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800d68c:	7e7b      	ldrb	r3, [r7, #25]
 800d68e:	b29b      	uxth	r3, r3
 800d690:	8b7a      	ldrh	r2, [r7, #26]
 800d692:	1ad3      	subs	r3, r2, r3
 800d694:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d696:	69fb      	ldr	r3, [r7, #28]
 800d698:	88db      	ldrh	r3, [r3, #6]
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7f6 ff5f 	bl	8004560 <lwip_htons>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800d6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	701a      	strb	r2, [r3, #0]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	705a      	strb	r2, [r3, #1]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	709a      	strb	r2, [r3, #2]
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800d6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6c8:	8afa      	ldrh	r2, [r7, #22]
 800d6ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800d6cc:	8afa      	ldrh	r2, [r7, #22]
 800d6ce:	8b7b      	ldrh	r3, [r7, #26]
 800d6d0:	4413      	add	r3, r2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	88db      	ldrh	r3, [r3, #6]
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	8afa      	ldrh	r2, [r7, #22]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d902      	bls.n	800d6ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d6e4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e8:	e106      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6f0:	e068      	b.n	800d7c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800d6f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6fa:	889b      	ldrh	r3, [r3, #4]
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	889b      	ldrh	r3, [r3, #4]
 800d702:	b29b      	uxth	r3, r3
 800d704:	429a      	cmp	r2, r3
 800d706:	d235      	bcs.n	800d774 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800d708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d70a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d70c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800d70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d710:	2b00      	cmp	r3, #0
 800d712:	d020      	beq.n	800d756 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d716:	889b      	ldrh	r3, [r3, #4]
 800d718:	b29a      	uxth	r2, r3
 800d71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71c:	88db      	ldrh	r3, [r3, #6]
 800d71e:	b29b      	uxth	r3, r3
 800d720:	429a      	cmp	r2, r3
 800d722:	d307      	bcc.n	800d734 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800d724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d726:	88db      	ldrh	r3, [r3, #6]
 800d728:	b29a      	uxth	r2, r3
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	889b      	ldrh	r3, [r3, #4]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	429a      	cmp	r2, r3
 800d732:	d902      	bls.n	800d73a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d734:	f04f 33ff 	mov.w	r3, #4294967295
 800d738:	e0de      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800d73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73c:	68ba      	ldr	r2, [r7, #8]
 800d73e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800d740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d742:	88db      	ldrh	r3, [r3, #6]
 800d744:	b29a      	uxth	r2, r3
 800d746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d748:	889b      	ldrh	r3, [r3, #4]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d03d      	beq.n	800d7cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d750:	2300      	movs	r3, #0
 800d752:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800d754:	e03a      	b.n	800d7cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800d756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d758:	88db      	ldrh	r3, [r3, #6]
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	889b      	ldrh	r3, [r3, #4]
 800d760:	b29b      	uxth	r3, r3
 800d762:	429a      	cmp	r2, r3
 800d764:	d902      	bls.n	800d76c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d766:	f04f 33ff 	mov.w	r3, #4294967295
 800d76a:	e0c5      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	68ba      	ldr	r2, [r7, #8]
 800d770:	605a      	str	r2, [r3, #4]
      break;
 800d772:	e02b      	b.n	800d7cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800d774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d776:	889b      	ldrh	r3, [r3, #4]
 800d778:	b29a      	uxth	r2, r3
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	889b      	ldrh	r3, [r3, #4]
 800d77e:	b29b      	uxth	r3, r3
 800d780:	429a      	cmp	r2, r3
 800d782:	d102      	bne.n	800d78a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d784:	f04f 33ff 	mov.w	r3, #4294967295
 800d788:	e0b6      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	889b      	ldrh	r3, [r3, #4]
 800d78e:	b29a      	uxth	r2, r3
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	88db      	ldrh	r3, [r3, #6]
 800d794:	b29b      	uxth	r3, r3
 800d796:	429a      	cmp	r2, r3
 800d798:	d202      	bcs.n	800d7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d79a:	f04f 33ff 	mov.w	r3, #4294967295
 800d79e:	e0ab      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a8:	88db      	ldrh	r3, [r3, #6]
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	889b      	ldrh	r3, [r3, #4]
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d001      	beq.n	800d7ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d193      	bne.n	800d6f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d7ca:	e000      	b.n	800d7ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d7cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d12d      	bne.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d01c      	beq.n	800d814 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7dc:	88db      	ldrh	r3, [r3, #6]
 800d7de:	b29a      	uxth	r2, r3
 800d7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e2:	889b      	ldrh	r3, [r3, #4]
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	429a      	cmp	r2, r3
 800d7e8:	d906      	bls.n	800d7f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d7ea:	4b45      	ldr	r3, [pc, #276]	@ (800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d7ec:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800d7f0:	4944      	ldr	r1, [pc, #272]	@ (800d904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d7f2:	4845      	ldr	r0, [pc, #276]	@ (800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d7f4:	f000 fda0 	bl	800e338 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7fa:	68ba      	ldr	r2, [r7, #8]
 800d7fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d7fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d800:	88db      	ldrh	r3, [r3, #6]
 800d802:	b29a      	uxth	r2, r3
 800d804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d806:	889b      	ldrh	r3, [r3, #4]
 800d808:	b29b      	uxth	r3, r3
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d010      	beq.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	623b      	str	r3, [r7, #32]
 800d812:	e00d      	b.n	800d830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d006      	beq.n	800d82a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d81c:	4b38      	ldr	r3, [pc, #224]	@ (800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d81e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800d822:	493a      	ldr	r1, [pc, #232]	@ (800d90c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d824:	4838      	ldr	r0, [pc, #224]	@ (800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d826:	f000 fd87 	bl	800e338 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d105      	bne.n	800d842 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	7f9b      	ldrb	r3, [r3, #30]
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d059      	beq.n	800d8f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d842:	6a3b      	ldr	r3, [r7, #32]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d04f      	beq.n	800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	685b      	ldr	r3, [r3, #4]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d006      	beq.n	800d85e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	685b      	ldr	r3, [r3, #4]
 800d856:	889b      	ldrh	r3, [r3, #4]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d002      	beq.n	800d864 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	623b      	str	r3, [r7, #32]
 800d862:	e041      	b.n	800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d866:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800d868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d86e:	e012      	b.n	800d896 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800d876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d878:	88db      	ldrh	r3, [r3, #6]
 800d87a:	b29a      	uxth	r2, r3
 800d87c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d87e:	889b      	ldrh	r3, [r3, #4]
 800d880:	b29b      	uxth	r3, r3
 800d882:	429a      	cmp	r2, r3
 800d884:	d002      	beq.n	800d88c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	623b      	str	r3, [r7, #32]
            break;
 800d88a:	e007      	b.n	800d89c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d88c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d88e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800d890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800d896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d1e9      	bne.n	800d870 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d022      	beq.n	800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d106      	bne.n	800d8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d8aa:	4b15      	ldr	r3, [pc, #84]	@ (800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8ac:	f240 12df 	movw	r2, #479	@ 0x1df
 800d8b0:	4917      	ldr	r1, [pc, #92]	@ (800d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d8b2:	4815      	ldr	r0, [pc, #84]	@ (800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8b4:	f000 fd40 	bl	800e338 <iprintf>
          LWIP_ASSERT("sanity check",
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d106      	bne.n	800d8d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8c6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d8ca:	4911      	ldr	r1, [pc, #68]	@ (800d910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d8cc:	480e      	ldr	r0, [pc, #56]	@ (800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8ce:	f000 fd33 	bl	800e338 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d006      	beq.n	800d8e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d8da:	4b09      	ldr	r3, [pc, #36]	@ (800d900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d8dc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800d8e0:	490c      	ldr	r1, [pc, #48]	@ (800d914 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d8e2:	4809      	ldr	r0, [pc, #36]	@ (800d908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d8e4:	f000 fd28 	bl	800e338 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	bf14      	ite	ne
 800d8ee:	2301      	movne	r3, #1
 800d8f0:	2300      	moveq	r3, #0
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	e000      	b.n	800d8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d8f6:	2300      	movs	r3, #0
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	3730      	adds	r7, #48	@ 0x30
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd80      	pop	{r7, pc}
 800d900:	08011888 	.word	0x08011888
 800d904:	0801196c 	.word	0x0801196c
 800d908:	080118d0 	.word	0x080118d0
 800d90c:	0801198c 	.word	0x0801198c
 800d910:	080119c4 	.word	0x080119c4
 800d914:	080119d4 	.word	0x080119d4

0800d918 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08e      	sub	sp, #56	@ 0x38
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	f003 030f 	and.w	r3, r3, #15
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b14      	cmp	r3, #20
 800d936:	f040 8171 	bne.w	800dc1c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	88db      	ldrh	r3, [r3, #6]
 800d93e:	b29b      	uxth	r3, r3
 800d940:	4618      	mov	r0, r3
 800d942:	f7f6 fe0d 	bl	8004560 <lwip_htons>
 800d946:	4603      	mov	r3, r0
 800d948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d94c:	b29b      	uxth	r3, r3
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d954:	885b      	ldrh	r3, [r3, #2]
 800d956:	b29b      	uxth	r3, r3
 800d958:	4618      	mov	r0, r3
 800d95a:	f7f6 fe01 	bl	8004560 <lwip_htons>
 800d95e:	4603      	mov	r3, r0
 800d960:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	f003 030f 	and.w	r3, r3, #15
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800d972:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d976:	b29b      	uxth	r3, r3
 800d978:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d97a:	429a      	cmp	r2, r3
 800d97c:	f0c0 8150 	bcc.w	800dc20 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d980:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800d984:	b29b      	uxth	r3, r3
 800d986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d988:	1ad3      	subs	r3, r2, r3
 800d98a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f7f8 fa85 	bl	8005e9c <pbuf_clen>
 800d992:	4603      	mov	r3, r0
 800d994:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d996:	4b8c      	ldr	r3, [pc, #560]	@ (800dbc8 <ip4_reass+0x2b0>)
 800d998:	881b      	ldrh	r3, [r3, #0]
 800d99a:	461a      	mov	r2, r3
 800d99c:	8c3b      	ldrh	r3, [r7, #32]
 800d99e:	4413      	add	r3, r2
 800d9a0:	2b0a      	cmp	r3, #10
 800d9a2:	dd10      	ble.n	800d9c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d9a4:	8c3b      	ldrh	r3, [r7, #32]
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9aa:	f7ff fd81 	bl	800d4b0 <ip_reass_remove_oldest_datagram>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f000 8137 	beq.w	800dc24 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d9b6:	4b84      	ldr	r3, [pc, #528]	@ (800dbc8 <ip4_reass+0x2b0>)
 800d9b8:	881b      	ldrh	r3, [r3, #0]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	8c3b      	ldrh	r3, [r7, #32]
 800d9be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d9c0:	2b0a      	cmp	r3, #10
 800d9c2:	f300 812f 	bgt.w	800dc24 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d9c6:	4b81      	ldr	r3, [pc, #516]	@ (800dbcc <ip4_reass+0x2b4>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9cc:	e015      	b.n	800d9fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9d0:	695a      	ldr	r2, [r3, #20]
 800d9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d4:	68db      	ldr	r3, [r3, #12]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d10c      	bne.n	800d9f4 <ip4_reass+0xdc>
 800d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d106      	bne.n	800d9f4 <ip4_reass+0xdc>
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e8:	899a      	ldrh	r2, [r3, #12]
 800d9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9ec:	889b      	ldrh	r3, [r3, #4]
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d006      	beq.n	800da02 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1e6      	bne.n	800d9ce <ip4_reass+0xb6>
 800da00:	e000      	b.n	800da04 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800da02:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da06:	2b00      	cmp	r3, #0
 800da08:	d109      	bne.n	800da1e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800da0a:	8c3b      	ldrh	r3, [r7, #32]
 800da0c:	4619      	mov	r1, r3
 800da0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800da10:	f7ff fdb0 	bl	800d574 <ip_reass_enqueue_new_datagram>
 800da14:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800da16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d11c      	bne.n	800da56 <ip4_reass+0x13e>
      goto nullreturn;
 800da1c:	e105      	b.n	800dc2a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800da1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da20:	88db      	ldrh	r3, [r3, #6]
 800da22:	b29b      	uxth	r3, r3
 800da24:	4618      	mov	r0, r3
 800da26:	f7f6 fd9b 	bl	8004560 <lwip_htons>
 800da2a:	4603      	mov	r3, r0
 800da2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800da30:	2b00      	cmp	r3, #0
 800da32:	d110      	bne.n	800da56 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800da34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da36:	89db      	ldrh	r3, [r3, #14]
 800da38:	4618      	mov	r0, r3
 800da3a:	f7f6 fd91 	bl	8004560 <lwip_htons>
 800da3e:	4603      	mov	r3, r0
 800da40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800da44:	2b00      	cmp	r3, #0
 800da46:	d006      	beq.n	800da56 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800da48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4a:	3308      	adds	r3, #8
 800da4c:	2214      	movs	r2, #20
 800da4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da50:	4618      	mov	r0, r3
 800da52:	f000 fd4c 	bl	800e4ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800da56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da58:	88db      	ldrh	r3, [r3, #6]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	f003 0320 	and.w	r3, r3, #32
 800da60:	2b00      	cmp	r3, #0
 800da62:	bf0c      	ite	eq
 800da64:	2301      	moveq	r3, #1
 800da66:	2300      	movne	r3, #0
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800da6c:	69fb      	ldr	r3, [r7, #28]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00e      	beq.n	800da90 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800da72:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800da74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da76:	4413      	add	r3, r2
 800da78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800da7a:	8b7a      	ldrh	r2, [r7, #26]
 800da7c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da7e:	429a      	cmp	r2, r3
 800da80:	f0c0 80a0 	bcc.w	800dbc4 <ip4_reass+0x2ac>
 800da84:	8b7b      	ldrh	r3, [r7, #26]
 800da86:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800da8a:	4293      	cmp	r3, r2
 800da8c:	f200 809a 	bhi.w	800dbc4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800da90:	69fa      	ldr	r2, [r7, #28]
 800da92:	6879      	ldr	r1, [r7, #4]
 800da94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da96:	f7ff fdd5 	bl	800d644 <ip_reass_chain_frag_into_datagram_and_validate>
 800da9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daa2:	f000 809b 	beq.w	800dbdc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800daa6:	4b48      	ldr	r3, [pc, #288]	@ (800dbc8 <ip4_reass+0x2b0>)
 800daa8:	881a      	ldrh	r2, [r3, #0]
 800daaa:	8c3b      	ldrh	r3, [r7, #32]
 800daac:	4413      	add	r3, r2
 800daae:	b29a      	uxth	r2, r3
 800dab0:	4b45      	ldr	r3, [pc, #276]	@ (800dbc8 <ip4_reass+0x2b0>)
 800dab2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d00d      	beq.n	800dad6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800daba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dabc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800dabe:	4413      	add	r3, r2
 800dac0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac4:	8a7a      	ldrh	r2, [r7, #18]
 800dac6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daca:	7f9b      	ldrb	r3, [r3, #30]
 800dacc:	f043 0301 	orr.w	r3, r3, #1
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d171      	bne.n	800dbc0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800dadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dade:	8b9b      	ldrh	r3, [r3, #28]
 800dae0:	3314      	adds	r3, #20
 800dae2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800dae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800daee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800daf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daf8:	3308      	adds	r3, #8
 800dafa:	2214      	movs	r2, #20
 800dafc:	4619      	mov	r1, r3
 800dafe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db00:	f000 fcf5 	bl	800e4ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800db04:	8a3b      	ldrh	r3, [r7, #16]
 800db06:	4618      	mov	r0, r3
 800db08:	f7f6 fd2a 	bl	8004560 <lwip_htons>
 800db0c:	4603      	mov	r3, r0
 800db0e:	461a      	mov	r2, r3
 800db10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800db14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db16:	2200      	movs	r2, #0
 800db18:	719a      	strb	r2, [r3, #6]
 800db1a:	2200      	movs	r2, #0
 800db1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800db1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db20:	2200      	movs	r2, #0
 800db22:	729a      	strb	r2, [r3, #10]
 800db24:	2200      	movs	r2, #0
 800db26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800db28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800db2e:	e00d      	b.n	800db4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800db30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800db36:	2114      	movs	r1, #20
 800db38:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800db3a:	f7f8 f8a1 	bl	8005c80 <pbuf_remove_header>
      pbuf_cat(p, r);
 800db3e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7f8 f9e5 	bl	8005f10 <pbuf_cat>
      r = iprh->next_pbuf;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800db4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d1ee      	bne.n	800db30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800db52:	4b1e      	ldr	r3, [pc, #120]	@ (800dbcc <ip4_reass+0x2b4>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db58:	429a      	cmp	r2, r3
 800db5a:	d102      	bne.n	800db62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800db5c:	2300      	movs	r3, #0
 800db5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db60:	e010      	b.n	800db84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800db62:	4b1a      	ldr	r3, [pc, #104]	@ (800dbcc <ip4_reass+0x2b4>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db68:	e007      	b.n	800db7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db70:	429a      	cmp	r2, r3
 800db72:	d006      	beq.n	800db82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800db74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1f4      	bne.n	800db6a <ip4_reass+0x252>
 800db80:	e000      	b.n	800db84 <ip4_reass+0x26c>
          break;
 800db82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800db84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800db86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800db88:	f7ff fd2e 	bl	800d5e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7f8 f985 	bl	8005e9c <pbuf_clen>
 800db92:	4603      	mov	r3, r0
 800db94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800db96:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <ip4_reass+0x2b0>)
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	8c3a      	ldrh	r2, [r7, #32]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d906      	bls.n	800dbae <ip4_reass+0x296>
 800dba0:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd0 <ip4_reass+0x2b8>)
 800dba2:	f240 229b 	movw	r2, #667	@ 0x29b
 800dba6:	490b      	ldr	r1, [pc, #44]	@ (800dbd4 <ip4_reass+0x2bc>)
 800dba8:	480b      	ldr	r0, [pc, #44]	@ (800dbd8 <ip4_reass+0x2c0>)
 800dbaa:	f000 fbc5 	bl	800e338 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800dbae:	4b06      	ldr	r3, [pc, #24]	@ (800dbc8 <ip4_reass+0x2b0>)
 800dbb0:	881a      	ldrh	r2, [r3, #0]
 800dbb2:	8c3b      	ldrh	r3, [r7, #32]
 800dbb4:	1ad3      	subs	r3, r2, r3
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	4b03      	ldr	r3, [pc, #12]	@ (800dbc8 <ip4_reass+0x2b0>)
 800dbba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	e038      	b.n	800dc32 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	e036      	b.n	800dc32 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800dbc4:	bf00      	nop
 800dbc6:	e00a      	b.n	800dbde <ip4_reass+0x2c6>
 800dbc8:	24007cc4 	.word	0x24007cc4
 800dbcc:	24007cc0 	.word	0x24007cc0
 800dbd0:	08011888 	.word	0x08011888
 800dbd4:	080119f8 	.word	0x080119f8
 800dbd8:	080118d0 	.word	0x080118d0
    goto nullreturn_ipr;
 800dbdc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800dbde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d106      	bne.n	800dbf2 <ip4_reass+0x2da>
 800dbe4:	4b15      	ldr	r3, [pc, #84]	@ (800dc3c <ip4_reass+0x324>)
 800dbe6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800dbea:	4915      	ldr	r1, [pc, #84]	@ (800dc40 <ip4_reass+0x328>)
 800dbec:	4815      	ldr	r0, [pc, #84]	@ (800dc44 <ip4_reass+0x32c>)
 800dbee:	f000 fba3 	bl	800e338 <iprintf>
  if (ipr->p == NULL) {
 800dbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d116      	bne.n	800dc28 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dbfa:	4b13      	ldr	r3, [pc, #76]	@ (800dc48 <ip4_reass+0x330>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d006      	beq.n	800dc12 <ip4_reass+0x2fa>
 800dc04:	4b0d      	ldr	r3, [pc, #52]	@ (800dc3c <ip4_reass+0x324>)
 800dc06:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800dc0a:	4910      	ldr	r1, [pc, #64]	@ (800dc4c <ip4_reass+0x334>)
 800dc0c:	480d      	ldr	r0, [pc, #52]	@ (800dc44 <ip4_reass+0x32c>)
 800dc0e:	f000 fb93 	bl	800e338 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dc12:	2100      	movs	r1, #0
 800dc14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dc16:	f7ff fce7 	bl	800d5e8 <ip_reass_dequeue_datagram>
 800dc1a:	e006      	b.n	800dc2a <ip4_reass+0x312>
    goto nullreturn;
 800dc1c:	bf00      	nop
 800dc1e:	e004      	b.n	800dc2a <ip4_reass+0x312>
    goto nullreturn;
 800dc20:	bf00      	nop
 800dc22:	e002      	b.n	800dc2a <ip4_reass+0x312>
      goto nullreturn;
 800dc24:	bf00      	nop
 800dc26:	e000      	b.n	800dc2a <ip4_reass+0x312>
  }

nullreturn:
 800dc28:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7f8 f8ae 	bl	8005d8c <pbuf_free>
  return NULL;
 800dc30:	2300      	movs	r3, #0
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3738      	adds	r7, #56	@ 0x38
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	08011888 	.word	0x08011888
 800dc40:	08011a14 	.word	0x08011a14
 800dc44:	080118d0 	.word	0x080118d0
 800dc48:	24007cc0 	.word	0x24007cc0
 800dc4c:	08011a20 	.word	0x08011a20

0800dc50 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dc54:	2005      	movs	r0, #5
 800dc56:	f7f7 f9b3 	bl	8004fc0 <memp_malloc>
 800dc5a:	4603      	mov	r3, r0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d106      	bne.n	800dc7c <ip_frag_free_pbuf_custom_ref+0x1c>
 800dc6e:	4b07      	ldr	r3, [pc, #28]	@ (800dc8c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800dc70:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800dc74:	4906      	ldr	r1, [pc, #24]	@ (800dc90 <ip_frag_free_pbuf_custom_ref+0x30>)
 800dc76:	4807      	ldr	r0, [pc, #28]	@ (800dc94 <ip_frag_free_pbuf_custom_ref+0x34>)
 800dc78:	f000 fb5e 	bl	800e338 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800dc7c:	6879      	ldr	r1, [r7, #4]
 800dc7e:	2005      	movs	r0, #5
 800dc80:	f7f7 fa0e 	bl	80050a0 <memp_free>
}
 800dc84:	bf00      	nop
 800dc86:	3708      	adds	r7, #8
 800dc88:	46bd      	mov	sp, r7
 800dc8a:	bd80      	pop	{r7, pc}
 800dc8c:	08011888 	.word	0x08011888
 800dc90:	08011a40 	.word	0x08011a40
 800dc94:	080118d0 	.word	0x080118d0

0800dc98 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <ipfrag_free_pbuf_custom+0x20>
 800dcaa:	4b11      	ldr	r3, [pc, #68]	@ (800dcf0 <ipfrag_free_pbuf_custom+0x58>)
 800dcac:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800dcb0:	4910      	ldr	r1, [pc, #64]	@ (800dcf4 <ipfrag_free_pbuf_custom+0x5c>)
 800dcb2:	4811      	ldr	r0, [pc, #68]	@ (800dcf8 <ipfrag_free_pbuf_custom+0x60>)
 800dcb4:	f000 fb40 	bl	800e338 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d006      	beq.n	800dcce <ipfrag_free_pbuf_custom+0x36>
 800dcc0:	4b0b      	ldr	r3, [pc, #44]	@ (800dcf0 <ipfrag_free_pbuf_custom+0x58>)
 800dcc2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800dcc6:	490d      	ldr	r1, [pc, #52]	@ (800dcfc <ipfrag_free_pbuf_custom+0x64>)
 800dcc8:	480b      	ldr	r0, [pc, #44]	@ (800dcf8 <ipfrag_free_pbuf_custom+0x60>)
 800dcca:	f000 fb35 	bl	800e338 <iprintf>
  if (pcr->original != NULL) {
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	695b      	ldr	r3, [r3, #20]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d004      	beq.n	800dce0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7f8 f856 	bl	8005d8c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800dce0:	68f8      	ldr	r0, [r7, #12]
 800dce2:	f7ff ffbd 	bl	800dc60 <ip_frag_free_pbuf_custom_ref>
}
 800dce6:	bf00      	nop
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	08011888 	.word	0x08011888
 800dcf4:	08011a4c 	.word	0x08011a4c
 800dcf8:	080118d0 	.word	0x080118d0
 800dcfc:	08011a58 	.word	0x08011a58

0800dd00 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b094      	sub	sp, #80	@ 0x50
 800dd04:	af02      	add	r7, sp, #8
 800dd06:	60f8      	str	r0, [r7, #12]
 800dd08:	60b9      	str	r1, [r7, #8]
 800dd0a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800dd16:	3b14      	subs	r3, #20
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da00      	bge.n	800dd1e <ip4_frag+0x1e>
 800dd1c:	3307      	adds	r3, #7
 800dd1e:	10db      	asrs	r3, r3, #3
 800dd20:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800dd22:	2314      	movs	r3, #20
 800dd24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800dd2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800dd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	f003 030f 	and.w	r3, r3, #15
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	009b      	lsls	r3, r3, #2
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b14      	cmp	r3, #20
 800dd40:	d002      	beq.n	800dd48 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800dd42:	f06f 0305 	mvn.w	r3, #5
 800dd46:	e110      	b.n	800df6a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	895b      	ldrh	r3, [r3, #10]
 800dd4c:	2b13      	cmp	r3, #19
 800dd4e:	d809      	bhi.n	800dd64 <ip4_frag+0x64>
 800dd50:	4b88      	ldr	r3, [pc, #544]	@ (800df74 <ip4_frag+0x274>)
 800dd52:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800dd56:	4988      	ldr	r1, [pc, #544]	@ (800df78 <ip4_frag+0x278>)
 800dd58:	4888      	ldr	r0, [pc, #544]	@ (800df7c <ip4_frag+0x27c>)
 800dd5a:	f000 faed 	bl	800e338 <iprintf>
 800dd5e:	f06f 0305 	mvn.w	r3, #5
 800dd62:	e102      	b.n	800df6a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dd64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd66:	88db      	ldrh	r3, [r3, #6]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7f6 fbf8 	bl	8004560 <lwip_htons>
 800dd70:	4603      	mov	r3, r0
 800dd72:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800dd74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dd76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dd7e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800dd80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dd84:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	891b      	ldrh	r3, [r3, #8]
 800dd8a:	3b14      	subs	r3, #20
 800dd8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800dd90:	e0e1      	b.n	800df56 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dd92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	bf28      	it	cs
 800dda0:	4613      	movcs	r3, r2
 800dda2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dda4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dda8:	2114      	movs	r1, #20
 800ddaa:	200e      	movs	r0, #14
 800ddac:	f7f7 fd0a 	bl	80057c4 <pbuf_alloc>
 800ddb0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f000 80d5 	beq.w	800df64 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	895b      	ldrh	r3, [r3, #10]
 800ddbe:	2b13      	cmp	r3, #19
 800ddc0:	d806      	bhi.n	800ddd0 <ip4_frag+0xd0>
 800ddc2:	4b6c      	ldr	r3, [pc, #432]	@ (800df74 <ip4_frag+0x274>)
 800ddc4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800ddc8:	496d      	ldr	r1, [pc, #436]	@ (800df80 <ip4_frag+0x280>)
 800ddca:	486c      	ldr	r0, [pc, #432]	@ (800df7c <ip4_frag+0x27c>)
 800ddcc:	f000 fab4 	bl	800e338 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ddd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	2214      	movs	r2, #20
 800ddd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f000 fb88 	bl	800e4ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ddde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800dde4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800dde6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800ddea:	e064      	b.n	800deb6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	895a      	ldrh	r2, [r3, #10]
 800ddf0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d906      	bls.n	800de0e <ip4_frag+0x10e>
 800de00:	4b5c      	ldr	r3, [pc, #368]	@ (800df74 <ip4_frag+0x274>)
 800de02:	f240 322d 	movw	r2, #813	@ 0x32d
 800de06:	495f      	ldr	r1, [pc, #380]	@ (800df84 <ip4_frag+0x284>)
 800de08:	485c      	ldr	r0, [pc, #368]	@ (800df7c <ip4_frag+0x27c>)
 800de0a:	f000 fa95 	bl	800e338 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800de0e:	8bfa      	ldrh	r2, [r7, #30]
 800de10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800de14:	4293      	cmp	r3, r2
 800de16:	bf28      	it	cs
 800de18:	4613      	movcs	r3, r2
 800de1a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800de1e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800de22:	2b00      	cmp	r3, #0
 800de24:	d105      	bne.n	800de32 <ip4_frag+0x132>
        poff = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	60fb      	str	r3, [r7, #12]
        continue;
 800de30:	e041      	b.n	800deb6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800de32:	f7ff ff0d 	bl	800dc50 <ip_frag_alloc_pbuf_custom_ref>
 800de36:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d103      	bne.n	800de46 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800de3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de40:	f7f7 ffa4 	bl	8005d8c <pbuf_free>
        goto memerr;
 800de44:	e08f      	b.n	800df66 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de46:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800de4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800de4e:	4413      	add	r3, r2
 800de50:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800de54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800de58:	9201      	str	r2, [sp, #4]
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	4603      	mov	r3, r0
 800de5e:	2241      	movs	r2, #65	@ 0x41
 800de60:	2000      	movs	r0, #0
 800de62:	f7f7 fdd9 	bl	8005a18 <pbuf_alloced_custom>
 800de66:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d106      	bne.n	800de7c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800de6e:	69b8      	ldr	r0, [r7, #24]
 800de70:	f7ff fef6 	bl	800dc60 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800de74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de76:	f7f7 ff89 	bl	8005d8c <pbuf_free>
        goto memerr;
 800de7a:	e074      	b.n	800df66 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7f8 f825 	bl	8005ecc <pbuf_ref>
      pcr->original = p;
 800de82:	69bb      	ldr	r3, [r7, #24]
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800de88:	69bb      	ldr	r3, [r7, #24]
 800de8a:	4a3f      	ldr	r2, [pc, #252]	@ (800df88 <ip4_frag+0x288>)
 800de8c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800de8e:	6979      	ldr	r1, [r7, #20]
 800de90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800de92:	f7f8 f83d 	bl	8005f10 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800de96:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800de9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800de9e:	1ad3      	subs	r3, r2, r3
 800dea0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800dea4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d004      	beq.n	800deb6 <ip4_frag+0x1b6>
        poff = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800deb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800deba:	2b00      	cmp	r3, #0
 800debc:	d196      	bne.n	800ddec <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800debe:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800dec0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dec4:	4413      	add	r3, r2
 800dec6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800decc:	f1a3 0213 	sub.w	r2, r3, #19
 800ded0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ded4:	429a      	cmp	r2, r3
 800ded6:	bfcc      	ite	gt
 800ded8:	2301      	movgt	r3, #1
 800deda:	2300      	movle	r3, #0
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dee0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dee4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dee8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800deea:	6a3b      	ldr	r3, [r7, #32]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d002      	beq.n	800def6 <ip4_frag+0x1f6>
 800def0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def2:	2b00      	cmp	r3, #0
 800def4:	d003      	beq.n	800defe <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800def6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800def8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800defc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800defe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800df00:	4618      	mov	r0, r3
 800df02:	f7f6 fb2d 	bl	8004560 <lwip_htons>
 800df06:	4603      	mov	r3, r0
 800df08:	461a      	mov	r2, r3
 800df0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df0c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800df0e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df10:	3314      	adds	r3, #20
 800df12:	b29b      	uxth	r3, r3
 800df14:	4618      	mov	r0, r3
 800df16:	f7f6 fb23 	bl	8004560 <lwip_htons>
 800df1a:	4603      	mov	r3, r0
 800df1c:	461a      	mov	r2, r3
 800df1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df20:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	2200      	movs	r2, #0
 800df26:	729a      	strb	r2, [r3, #10]
 800df28:	2200      	movs	r2, #0
 800df2a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	695b      	ldr	r3, [r3, #20]
 800df30:	687a      	ldr	r2, [r7, #4]
 800df32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800df34:	68b8      	ldr	r0, [r7, #8]
 800df36:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800df38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df3a:	f7f7 ff27 	bl	8005d8c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800df3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800df42:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800df4a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800df4e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800df50:	4413      	add	r3, r2
 800df52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800df56:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f47f af19 	bne.w	800dd92 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800df60:	2300      	movs	r3, #0
 800df62:	e002      	b.n	800df6a <ip4_frag+0x26a>
      goto memerr;
 800df64:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800df66:	f04f 33ff 	mov.w	r3, #4294967295
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3748      	adds	r7, #72	@ 0x48
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	08011888 	.word	0x08011888
 800df78:	08011a64 	.word	0x08011a64
 800df7c:	080118d0 	.word	0x080118d0
 800df80:	08011a80 	.word	0x08011a80
 800df84:	08011aa0 	.word	0x08011aa0
 800df88:	0800dc99 	.word	0x0800dc99

0800df8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800df96:	230e      	movs	r3, #14
 800df98:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	895b      	ldrh	r3, [r3, #10]
 800df9e:	2b0e      	cmp	r3, #14
 800dfa0:	d96e      	bls.n	800e080 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	7bdb      	ldrb	r3, [r3, #15]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d106      	bne.n	800dfb8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	685b      	ldr	r3, [r3, #4]
 800dfbc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	7b1a      	ldrb	r2, [r3, #12]
 800dfc2:	7b5b      	ldrb	r3, [r3, #13]
 800dfc4:	021b      	lsls	r3, r3, #8
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	f003 0301 	and.w	r3, r3, #1
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d023      	beq.n	800e01e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d10f      	bne.n	800dffe <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	785b      	ldrb	r3, [r3, #1]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d11b      	bne.n	800e01e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800dfea:	2b5e      	cmp	r3, #94	@ 0x5e
 800dfec:	d117      	bne.n	800e01e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	7b5b      	ldrb	r3, [r3, #13]
 800dff2:	f043 0310 	orr.w	r3, r3, #16
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	735a      	strb	r2, [r3, #13]
 800dffc:	e00f      	b.n	800e01e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2206      	movs	r2, #6
 800e002:	4928      	ldr	r1, [pc, #160]	@ (800e0a4 <ethernet_input+0x118>)
 800e004:	4618      	mov	r0, r3
 800e006:	f000 f9ec 	bl	800e3e2 <memcmp>
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d106      	bne.n	800e01e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7b5b      	ldrb	r3, [r3, #13]
 800e014:	f043 0308 	orr.w	r3, r3, #8
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e01e:	89fb      	ldrh	r3, [r7, #14]
 800e020:	2b08      	cmp	r3, #8
 800e022:	d003      	beq.n	800e02c <ethernet_input+0xa0>
 800e024:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e028:	d014      	beq.n	800e054 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e02a:	e032      	b.n	800e092 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e032:	f003 0308 	and.w	r3, r3, #8
 800e036:	2b00      	cmp	r3, #0
 800e038:	d024      	beq.n	800e084 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e03a:	8afb      	ldrh	r3, [r7, #22]
 800e03c:	4619      	mov	r1, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7f7 fe1e 	bl	8005c80 <pbuf_remove_header>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d11e      	bne.n	800e088 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e04a:	6839      	ldr	r1, [r7, #0]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7fe ff21 	bl	800ce94 <ip4_input>
      break;
 800e052:	e013      	b.n	800e07c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e05a:	f003 0308 	and.w	r3, r3, #8
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d014      	beq.n	800e08c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e062:	8afb      	ldrh	r3, [r7, #22]
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7f7 fe0a 	bl	8005c80 <pbuf_remove_header>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10e      	bne.n	800e090 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7fe f89b 	bl	800c1b0 <etharp_input>
      break;
 800e07a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e07c:	2300      	movs	r3, #0
 800e07e:	e00c      	b.n	800e09a <ethernet_input+0x10e>
    goto free_and_return;
 800e080:	bf00      	nop
 800e082:	e006      	b.n	800e092 <ethernet_input+0x106>
        goto free_and_return;
 800e084:	bf00      	nop
 800e086:	e004      	b.n	800e092 <ethernet_input+0x106>
        goto free_and_return;
 800e088:	bf00      	nop
 800e08a:	e002      	b.n	800e092 <ethernet_input+0x106>
        goto free_and_return;
 800e08c:	bf00      	nop
 800e08e:	e000      	b.n	800e092 <ethernet_input+0x106>
        goto free_and_return;
 800e090:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f7f7 fe7a 	bl	8005d8c <pbuf_free>
  return ERR_OK;
 800e098:	2300      	movs	r3, #0
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	3718      	adds	r7, #24
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	08011c34 	.word	0x08011c34

0800e0a8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	60f8      	str	r0, [r7, #12]
 800e0b0:	60b9      	str	r1, [r7, #8]
 800e0b2:	607a      	str	r2, [r7, #4]
 800e0b4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e0b6:	8c3b      	ldrh	r3, [r7, #32]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f7f6 fa51 	bl	8004560 <lwip_htons>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e0c2:	210e      	movs	r1, #14
 800e0c4:	68b8      	ldr	r0, [r7, #8]
 800e0c6:	f7f7 fdcb 	bl	8005c60 <pbuf_add_header>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d125      	bne.n	800e11c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	685b      	ldr	r3, [r3, #4]
 800e0d4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	8afa      	ldrh	r2, [r7, #22]
 800e0da:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2206      	movs	r2, #6
 800e0e0:	6839      	ldr	r1, [r7, #0]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fa03 	bl	800e4ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	3306      	adds	r3, #6
 800e0ec:	2206      	movs	r2, #6
 800e0ee:	6879      	ldr	r1, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f000 f9fc 	bl	800e4ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e0fc:	2b06      	cmp	r3, #6
 800e0fe:	d006      	beq.n	800e10e <ethernet_output+0x66>
 800e100:	4b0a      	ldr	r3, [pc, #40]	@ (800e12c <ethernet_output+0x84>)
 800e102:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800e106:	490a      	ldr	r1, [pc, #40]	@ (800e130 <ethernet_output+0x88>)
 800e108:	480a      	ldr	r0, [pc, #40]	@ (800e134 <ethernet_output+0x8c>)
 800e10a:	f000 f915 	bl	800e338 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	68b9      	ldr	r1, [r7, #8]
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	4798      	blx	r3
 800e118:	4603      	mov	r3, r0
 800e11a:	e002      	b.n	800e122 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e11c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e11e:	f06f 0301 	mvn.w	r3, #1
}
 800e122:	4618      	mov	r0, r3
 800e124:	3718      	adds	r7, #24
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	08011ab0 	.word	0x08011ab0
 800e130:	08011ae8 	.word	0x08011ae8
 800e134:	08011b1c 	.word	0x08011b1c

0800e138 <rand>:
 800e138:	4b16      	ldr	r3, [pc, #88]	@ (800e194 <rand+0x5c>)
 800e13a:	b510      	push	{r4, lr}
 800e13c:	681c      	ldr	r4, [r3, #0]
 800e13e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e140:	b9b3      	cbnz	r3, 800e170 <rand+0x38>
 800e142:	2018      	movs	r0, #24
 800e144:	f000 fa4a 	bl	800e5dc <malloc>
 800e148:	4602      	mov	r2, r0
 800e14a:	6320      	str	r0, [r4, #48]	@ 0x30
 800e14c:	b920      	cbnz	r0, 800e158 <rand+0x20>
 800e14e:	4b12      	ldr	r3, [pc, #72]	@ (800e198 <rand+0x60>)
 800e150:	4812      	ldr	r0, [pc, #72]	@ (800e19c <rand+0x64>)
 800e152:	2152      	movs	r1, #82	@ 0x52
 800e154:	f000 f9da 	bl	800e50c <__assert_func>
 800e158:	4911      	ldr	r1, [pc, #68]	@ (800e1a0 <rand+0x68>)
 800e15a:	4b12      	ldr	r3, [pc, #72]	@ (800e1a4 <rand+0x6c>)
 800e15c:	e9c0 1300 	strd	r1, r3, [r0]
 800e160:	4b11      	ldr	r3, [pc, #68]	@ (800e1a8 <rand+0x70>)
 800e162:	6083      	str	r3, [r0, #8]
 800e164:	230b      	movs	r3, #11
 800e166:	8183      	strh	r3, [r0, #12]
 800e168:	2100      	movs	r1, #0
 800e16a:	2001      	movs	r0, #1
 800e16c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800e170:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e172:	480e      	ldr	r0, [pc, #56]	@ (800e1ac <rand+0x74>)
 800e174:	690b      	ldr	r3, [r1, #16]
 800e176:	694c      	ldr	r4, [r1, #20]
 800e178:	4a0d      	ldr	r2, [pc, #52]	@ (800e1b0 <rand+0x78>)
 800e17a:	4358      	muls	r0, r3
 800e17c:	fb02 0004 	mla	r0, r2, r4, r0
 800e180:	fba3 3202 	umull	r3, r2, r3, r2
 800e184:	3301      	adds	r3, #1
 800e186:	eb40 0002 	adc.w	r0, r0, r2
 800e18a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800e18e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800e192:	bd10      	pop	{r4, pc}
 800e194:	2400003c 	.word	0x2400003c
 800e198:	08011c42 	.word	0x08011c42
 800e19c:	08011c59 	.word	0x08011c59
 800e1a0:	abcd330e 	.word	0xabcd330e
 800e1a4:	e66d1234 	.word	0xe66d1234
 800e1a8:	0005deec 	.word	0x0005deec
 800e1ac:	5851f42d 	.word	0x5851f42d
 800e1b0:	4c957f2d 	.word	0x4c957f2d

0800e1b4 <std>:
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	b510      	push	{r4, lr}
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	e9c0 3300 	strd	r3, r3, [r0]
 800e1be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e1c2:	6083      	str	r3, [r0, #8]
 800e1c4:	8181      	strh	r1, [r0, #12]
 800e1c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800e1c8:	81c2      	strh	r2, [r0, #14]
 800e1ca:	6183      	str	r3, [r0, #24]
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	2208      	movs	r2, #8
 800e1d0:	305c      	adds	r0, #92	@ 0x5c
 800e1d2:	f000 f916 	bl	800e402 <memset>
 800e1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e20c <std+0x58>)
 800e1d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800e1da:	4b0d      	ldr	r3, [pc, #52]	@ (800e210 <std+0x5c>)
 800e1dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e1de:	4b0d      	ldr	r3, [pc, #52]	@ (800e214 <std+0x60>)
 800e1e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e218 <std+0x64>)
 800e1e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800e1e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e21c <std+0x68>)
 800e1e8:	6224      	str	r4, [r4, #32]
 800e1ea:	429c      	cmp	r4, r3
 800e1ec:	d006      	beq.n	800e1fc <std+0x48>
 800e1ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e1f2:	4294      	cmp	r4, r2
 800e1f4:	d002      	beq.n	800e1fc <std+0x48>
 800e1f6:	33d0      	adds	r3, #208	@ 0xd0
 800e1f8:	429c      	cmp	r4, r3
 800e1fa:	d105      	bne.n	800e208 <std+0x54>
 800e1fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e204:	f000 b970 	b.w	800e4e8 <__retarget_lock_init_recursive>
 800e208:	bd10      	pop	{r4, pc}
 800e20a:	bf00      	nop
 800e20c:	0800e35d 	.word	0x0800e35d
 800e210:	0800e37f 	.word	0x0800e37f
 800e214:	0800e3b7 	.word	0x0800e3b7
 800e218:	0800e3db 	.word	0x0800e3db
 800e21c:	24007cc8 	.word	0x24007cc8

0800e220 <stdio_exit_handler>:
 800e220:	4a02      	ldr	r2, [pc, #8]	@ (800e22c <stdio_exit_handler+0xc>)
 800e222:	4903      	ldr	r1, [pc, #12]	@ (800e230 <stdio_exit_handler+0x10>)
 800e224:	4803      	ldr	r0, [pc, #12]	@ (800e234 <stdio_exit_handler+0x14>)
 800e226:	f000 b869 	b.w	800e2fc <_fwalk_sglue>
 800e22a:	bf00      	nop
 800e22c:	24000030 	.word	0x24000030
 800e230:	0800edf1 	.word	0x0800edf1
 800e234:	24000040 	.word	0x24000040

0800e238 <cleanup_stdio>:
 800e238:	6841      	ldr	r1, [r0, #4]
 800e23a:	4b0c      	ldr	r3, [pc, #48]	@ (800e26c <cleanup_stdio+0x34>)
 800e23c:	4299      	cmp	r1, r3
 800e23e:	b510      	push	{r4, lr}
 800e240:	4604      	mov	r4, r0
 800e242:	d001      	beq.n	800e248 <cleanup_stdio+0x10>
 800e244:	f000 fdd4 	bl	800edf0 <_fflush_r>
 800e248:	68a1      	ldr	r1, [r4, #8]
 800e24a:	4b09      	ldr	r3, [pc, #36]	@ (800e270 <cleanup_stdio+0x38>)
 800e24c:	4299      	cmp	r1, r3
 800e24e:	d002      	beq.n	800e256 <cleanup_stdio+0x1e>
 800e250:	4620      	mov	r0, r4
 800e252:	f000 fdcd 	bl	800edf0 <_fflush_r>
 800e256:	68e1      	ldr	r1, [r4, #12]
 800e258:	4b06      	ldr	r3, [pc, #24]	@ (800e274 <cleanup_stdio+0x3c>)
 800e25a:	4299      	cmp	r1, r3
 800e25c:	d004      	beq.n	800e268 <cleanup_stdio+0x30>
 800e25e:	4620      	mov	r0, r4
 800e260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e264:	f000 bdc4 	b.w	800edf0 <_fflush_r>
 800e268:	bd10      	pop	{r4, pc}
 800e26a:	bf00      	nop
 800e26c:	24007cc8 	.word	0x24007cc8
 800e270:	24007d30 	.word	0x24007d30
 800e274:	24007d98 	.word	0x24007d98

0800e278 <global_stdio_init.part.0>:
 800e278:	b510      	push	{r4, lr}
 800e27a:	4b0b      	ldr	r3, [pc, #44]	@ (800e2a8 <global_stdio_init.part.0+0x30>)
 800e27c:	4c0b      	ldr	r4, [pc, #44]	@ (800e2ac <global_stdio_init.part.0+0x34>)
 800e27e:	4a0c      	ldr	r2, [pc, #48]	@ (800e2b0 <global_stdio_init.part.0+0x38>)
 800e280:	601a      	str	r2, [r3, #0]
 800e282:	4620      	mov	r0, r4
 800e284:	2200      	movs	r2, #0
 800e286:	2104      	movs	r1, #4
 800e288:	f7ff ff94 	bl	800e1b4 <std>
 800e28c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e290:	2201      	movs	r2, #1
 800e292:	2109      	movs	r1, #9
 800e294:	f7ff ff8e 	bl	800e1b4 <std>
 800e298:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e29c:	2202      	movs	r2, #2
 800e29e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a2:	2112      	movs	r1, #18
 800e2a4:	f7ff bf86 	b.w	800e1b4 <std>
 800e2a8:	24007e00 	.word	0x24007e00
 800e2ac:	24007cc8 	.word	0x24007cc8
 800e2b0:	0800e221 	.word	0x0800e221

0800e2b4 <__sfp_lock_acquire>:
 800e2b4:	4801      	ldr	r0, [pc, #4]	@ (800e2bc <__sfp_lock_acquire+0x8>)
 800e2b6:	f000 b918 	b.w	800e4ea <__retarget_lock_acquire_recursive>
 800e2ba:	bf00      	nop
 800e2bc:	24007e09 	.word	0x24007e09

0800e2c0 <__sfp_lock_release>:
 800e2c0:	4801      	ldr	r0, [pc, #4]	@ (800e2c8 <__sfp_lock_release+0x8>)
 800e2c2:	f000 b913 	b.w	800e4ec <__retarget_lock_release_recursive>
 800e2c6:	bf00      	nop
 800e2c8:	24007e09 	.word	0x24007e09

0800e2cc <__sinit>:
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	4604      	mov	r4, r0
 800e2d0:	f7ff fff0 	bl	800e2b4 <__sfp_lock_acquire>
 800e2d4:	6a23      	ldr	r3, [r4, #32]
 800e2d6:	b11b      	cbz	r3, 800e2e0 <__sinit+0x14>
 800e2d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2dc:	f7ff bff0 	b.w	800e2c0 <__sfp_lock_release>
 800e2e0:	4b04      	ldr	r3, [pc, #16]	@ (800e2f4 <__sinit+0x28>)
 800e2e2:	6223      	str	r3, [r4, #32]
 800e2e4:	4b04      	ldr	r3, [pc, #16]	@ (800e2f8 <__sinit+0x2c>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1f5      	bne.n	800e2d8 <__sinit+0xc>
 800e2ec:	f7ff ffc4 	bl	800e278 <global_stdio_init.part.0>
 800e2f0:	e7f2      	b.n	800e2d8 <__sinit+0xc>
 800e2f2:	bf00      	nop
 800e2f4:	0800e239 	.word	0x0800e239
 800e2f8:	24007e00 	.word	0x24007e00

0800e2fc <_fwalk_sglue>:
 800e2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e300:	4607      	mov	r7, r0
 800e302:	4688      	mov	r8, r1
 800e304:	4614      	mov	r4, r2
 800e306:	2600      	movs	r6, #0
 800e308:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e30c:	f1b9 0901 	subs.w	r9, r9, #1
 800e310:	d505      	bpl.n	800e31e <_fwalk_sglue+0x22>
 800e312:	6824      	ldr	r4, [r4, #0]
 800e314:	2c00      	cmp	r4, #0
 800e316:	d1f7      	bne.n	800e308 <_fwalk_sglue+0xc>
 800e318:	4630      	mov	r0, r6
 800e31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e31e:	89ab      	ldrh	r3, [r5, #12]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d907      	bls.n	800e334 <_fwalk_sglue+0x38>
 800e324:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e328:	3301      	adds	r3, #1
 800e32a:	d003      	beq.n	800e334 <_fwalk_sglue+0x38>
 800e32c:	4629      	mov	r1, r5
 800e32e:	4638      	mov	r0, r7
 800e330:	47c0      	blx	r8
 800e332:	4306      	orrs	r6, r0
 800e334:	3568      	adds	r5, #104	@ 0x68
 800e336:	e7e9      	b.n	800e30c <_fwalk_sglue+0x10>

0800e338 <iprintf>:
 800e338:	b40f      	push	{r0, r1, r2, r3}
 800e33a:	b507      	push	{r0, r1, r2, lr}
 800e33c:	4906      	ldr	r1, [pc, #24]	@ (800e358 <iprintf+0x20>)
 800e33e:	ab04      	add	r3, sp, #16
 800e340:	6808      	ldr	r0, [r1, #0]
 800e342:	f853 2b04 	ldr.w	r2, [r3], #4
 800e346:	6881      	ldr	r1, [r0, #8]
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	f000 fa27 	bl	800e79c <_vfiprintf_r>
 800e34e:	b003      	add	sp, #12
 800e350:	f85d eb04 	ldr.w	lr, [sp], #4
 800e354:	b004      	add	sp, #16
 800e356:	4770      	bx	lr
 800e358:	2400003c 	.word	0x2400003c

0800e35c <__sread>:
 800e35c:	b510      	push	{r4, lr}
 800e35e:	460c      	mov	r4, r1
 800e360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e364:	f000 f878 	bl	800e458 <_read_r>
 800e368:	2800      	cmp	r0, #0
 800e36a:	bfab      	itete	ge
 800e36c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e36e:	89a3      	ldrhlt	r3, [r4, #12]
 800e370:	181b      	addge	r3, r3, r0
 800e372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e376:	bfac      	ite	ge
 800e378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e37a:	81a3      	strhlt	r3, [r4, #12]
 800e37c:	bd10      	pop	{r4, pc}

0800e37e <__swrite>:
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	461f      	mov	r7, r3
 800e384:	898b      	ldrh	r3, [r1, #12]
 800e386:	05db      	lsls	r3, r3, #23
 800e388:	4605      	mov	r5, r0
 800e38a:	460c      	mov	r4, r1
 800e38c:	4616      	mov	r6, r2
 800e38e:	d505      	bpl.n	800e39c <__swrite+0x1e>
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2302      	movs	r3, #2
 800e396:	2200      	movs	r2, #0
 800e398:	f000 f84c 	bl	800e434 <_lseek_r>
 800e39c:	89a3      	ldrh	r3, [r4, #12]
 800e39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e3a6:	81a3      	strh	r3, [r4, #12]
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	463b      	mov	r3, r7
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b2:	f000 b863 	b.w	800e47c <_write_r>

0800e3b6 <__sseek>:
 800e3b6:	b510      	push	{r4, lr}
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3be:	f000 f839 	bl	800e434 <_lseek_r>
 800e3c2:	1c43      	adds	r3, r0, #1
 800e3c4:	89a3      	ldrh	r3, [r4, #12]
 800e3c6:	bf15      	itete	ne
 800e3c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e3ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e3ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e3d2:	81a3      	strheq	r3, [r4, #12]
 800e3d4:	bf18      	it	ne
 800e3d6:	81a3      	strhne	r3, [r4, #12]
 800e3d8:	bd10      	pop	{r4, pc}

0800e3da <__sclose>:
 800e3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3de:	f000 b819 	b.w	800e414 <_close_r>

0800e3e2 <memcmp>:
 800e3e2:	b510      	push	{r4, lr}
 800e3e4:	3901      	subs	r1, #1
 800e3e6:	4402      	add	r2, r0
 800e3e8:	4290      	cmp	r0, r2
 800e3ea:	d101      	bne.n	800e3f0 <memcmp+0xe>
 800e3ec:	2000      	movs	r0, #0
 800e3ee:	e005      	b.n	800e3fc <memcmp+0x1a>
 800e3f0:	7803      	ldrb	r3, [r0, #0]
 800e3f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e3f6:	42a3      	cmp	r3, r4
 800e3f8:	d001      	beq.n	800e3fe <memcmp+0x1c>
 800e3fa:	1b18      	subs	r0, r3, r4
 800e3fc:	bd10      	pop	{r4, pc}
 800e3fe:	3001      	adds	r0, #1
 800e400:	e7f2      	b.n	800e3e8 <memcmp+0x6>

0800e402 <memset>:
 800e402:	4402      	add	r2, r0
 800e404:	4603      	mov	r3, r0
 800e406:	4293      	cmp	r3, r2
 800e408:	d100      	bne.n	800e40c <memset+0xa>
 800e40a:	4770      	bx	lr
 800e40c:	f803 1b01 	strb.w	r1, [r3], #1
 800e410:	e7f9      	b.n	800e406 <memset+0x4>
	...

0800e414 <_close_r>:
 800e414:	b538      	push	{r3, r4, r5, lr}
 800e416:	4d06      	ldr	r5, [pc, #24]	@ (800e430 <_close_r+0x1c>)
 800e418:	2300      	movs	r3, #0
 800e41a:	4604      	mov	r4, r0
 800e41c:	4608      	mov	r0, r1
 800e41e:	602b      	str	r3, [r5, #0]
 800e420:	f7f2 f9c6 	bl	80007b0 <_close>
 800e424:	1c43      	adds	r3, r0, #1
 800e426:	d102      	bne.n	800e42e <_close_r+0x1a>
 800e428:	682b      	ldr	r3, [r5, #0]
 800e42a:	b103      	cbz	r3, 800e42e <_close_r+0x1a>
 800e42c:	6023      	str	r3, [r4, #0]
 800e42e:	bd38      	pop	{r3, r4, r5, pc}
 800e430:	24007e04 	.word	0x24007e04

0800e434 <_lseek_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	4d07      	ldr	r5, [pc, #28]	@ (800e454 <_lseek_r+0x20>)
 800e438:	4604      	mov	r4, r0
 800e43a:	4608      	mov	r0, r1
 800e43c:	4611      	mov	r1, r2
 800e43e:	2200      	movs	r2, #0
 800e440:	602a      	str	r2, [r5, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	f7f2 f9db 	bl	80007fe <_lseek>
 800e448:	1c43      	adds	r3, r0, #1
 800e44a:	d102      	bne.n	800e452 <_lseek_r+0x1e>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	b103      	cbz	r3, 800e452 <_lseek_r+0x1e>
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	24007e04 	.word	0x24007e04

0800e458 <_read_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4d07      	ldr	r5, [pc, #28]	@ (800e478 <_read_r+0x20>)
 800e45c:	4604      	mov	r4, r0
 800e45e:	4608      	mov	r0, r1
 800e460:	4611      	mov	r1, r2
 800e462:	2200      	movs	r2, #0
 800e464:	602a      	str	r2, [r5, #0]
 800e466:	461a      	mov	r2, r3
 800e468:	f7f2 f969 	bl	800073e <_read>
 800e46c:	1c43      	adds	r3, r0, #1
 800e46e:	d102      	bne.n	800e476 <_read_r+0x1e>
 800e470:	682b      	ldr	r3, [r5, #0]
 800e472:	b103      	cbz	r3, 800e476 <_read_r+0x1e>
 800e474:	6023      	str	r3, [r4, #0]
 800e476:	bd38      	pop	{r3, r4, r5, pc}
 800e478:	24007e04 	.word	0x24007e04

0800e47c <_write_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4d07      	ldr	r5, [pc, #28]	@ (800e49c <_write_r+0x20>)
 800e480:	4604      	mov	r4, r0
 800e482:	4608      	mov	r0, r1
 800e484:	4611      	mov	r1, r2
 800e486:	2200      	movs	r2, #0
 800e488:	602a      	str	r2, [r5, #0]
 800e48a:	461a      	mov	r2, r3
 800e48c:	f7f2 f974 	bl	8000778 <_write>
 800e490:	1c43      	adds	r3, r0, #1
 800e492:	d102      	bne.n	800e49a <_write_r+0x1e>
 800e494:	682b      	ldr	r3, [r5, #0]
 800e496:	b103      	cbz	r3, 800e49a <_write_r+0x1e>
 800e498:	6023      	str	r3, [r4, #0]
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
 800e49c:	24007e04 	.word	0x24007e04

0800e4a0 <__libc_init_array>:
 800e4a0:	b570      	push	{r4, r5, r6, lr}
 800e4a2:	4d0d      	ldr	r5, [pc, #52]	@ (800e4d8 <__libc_init_array+0x38>)
 800e4a4:	4c0d      	ldr	r4, [pc, #52]	@ (800e4dc <__libc_init_array+0x3c>)
 800e4a6:	1b64      	subs	r4, r4, r5
 800e4a8:	10a4      	asrs	r4, r4, #2
 800e4aa:	2600      	movs	r6, #0
 800e4ac:	42a6      	cmp	r6, r4
 800e4ae:	d109      	bne.n	800e4c4 <__libc_init_array+0x24>
 800e4b0:	4d0b      	ldr	r5, [pc, #44]	@ (800e4e0 <__libc_init_array+0x40>)
 800e4b2:	4c0c      	ldr	r4, [pc, #48]	@ (800e4e4 <__libc_init_array+0x44>)
 800e4b4:	f000 fe4a 	bl	800f14c <_init>
 800e4b8:	1b64      	subs	r4, r4, r5
 800e4ba:	10a4      	asrs	r4, r4, #2
 800e4bc:	2600      	movs	r6, #0
 800e4be:	42a6      	cmp	r6, r4
 800e4c0:	d105      	bne.n	800e4ce <__libc_init_array+0x2e>
 800e4c2:	bd70      	pop	{r4, r5, r6, pc}
 800e4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4c8:	4798      	blx	r3
 800e4ca:	3601      	adds	r6, #1
 800e4cc:	e7ee      	b.n	800e4ac <__libc_init_array+0xc>
 800e4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4d2:	4798      	blx	r3
 800e4d4:	3601      	adds	r6, #1
 800e4d6:	e7f2      	b.n	800e4be <__libc_init_array+0x1e>
 800e4d8:	08011d28 	.word	0x08011d28
 800e4dc:	08011d28 	.word	0x08011d28
 800e4e0:	08011d28 	.word	0x08011d28
 800e4e4:	08011d2c 	.word	0x08011d2c

0800e4e8 <__retarget_lock_init_recursive>:
 800e4e8:	4770      	bx	lr

0800e4ea <__retarget_lock_acquire_recursive>:
 800e4ea:	4770      	bx	lr

0800e4ec <__retarget_lock_release_recursive>:
 800e4ec:	4770      	bx	lr

0800e4ee <memcpy>:
 800e4ee:	440a      	add	r2, r1
 800e4f0:	4291      	cmp	r1, r2
 800e4f2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4f6:	d100      	bne.n	800e4fa <memcpy+0xc>
 800e4f8:	4770      	bx	lr
 800e4fa:	b510      	push	{r4, lr}
 800e4fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e500:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e504:	4291      	cmp	r1, r2
 800e506:	d1f9      	bne.n	800e4fc <memcpy+0xe>
 800e508:	bd10      	pop	{r4, pc}
	...

0800e50c <__assert_func>:
 800e50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e50e:	4614      	mov	r4, r2
 800e510:	461a      	mov	r2, r3
 800e512:	4b09      	ldr	r3, [pc, #36]	@ (800e538 <__assert_func+0x2c>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4605      	mov	r5, r0
 800e518:	68d8      	ldr	r0, [r3, #12]
 800e51a:	b954      	cbnz	r4, 800e532 <__assert_func+0x26>
 800e51c:	4b07      	ldr	r3, [pc, #28]	@ (800e53c <__assert_func+0x30>)
 800e51e:	461c      	mov	r4, r3
 800e520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e524:	9100      	str	r1, [sp, #0]
 800e526:	462b      	mov	r3, r5
 800e528:	4905      	ldr	r1, [pc, #20]	@ (800e540 <__assert_func+0x34>)
 800e52a:	f000 fc89 	bl	800ee40 <fiprintf>
 800e52e:	f000 fd3d 	bl	800efac <abort>
 800e532:	4b04      	ldr	r3, [pc, #16]	@ (800e544 <__assert_func+0x38>)
 800e534:	e7f4      	b.n	800e520 <__assert_func+0x14>
 800e536:	bf00      	nop
 800e538:	2400003c 	.word	0x2400003c
 800e53c:	08011cec 	.word	0x08011cec
 800e540:	08011cbe 	.word	0x08011cbe
 800e544:	08011cb1 	.word	0x08011cb1

0800e548 <_free_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4605      	mov	r5, r0
 800e54c:	2900      	cmp	r1, #0
 800e54e:	d041      	beq.n	800e5d4 <_free_r+0x8c>
 800e550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e554:	1f0c      	subs	r4, r1, #4
 800e556:	2b00      	cmp	r3, #0
 800e558:	bfb8      	it	lt
 800e55a:	18e4      	addlt	r4, r4, r3
 800e55c:	f000 f8e8 	bl	800e730 <__malloc_lock>
 800e560:	4a1d      	ldr	r2, [pc, #116]	@ (800e5d8 <_free_r+0x90>)
 800e562:	6813      	ldr	r3, [r2, #0]
 800e564:	b933      	cbnz	r3, 800e574 <_free_r+0x2c>
 800e566:	6063      	str	r3, [r4, #4]
 800e568:	6014      	str	r4, [r2, #0]
 800e56a:	4628      	mov	r0, r5
 800e56c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e570:	f000 b8e4 	b.w	800e73c <__malloc_unlock>
 800e574:	42a3      	cmp	r3, r4
 800e576:	d908      	bls.n	800e58a <_free_r+0x42>
 800e578:	6820      	ldr	r0, [r4, #0]
 800e57a:	1821      	adds	r1, r4, r0
 800e57c:	428b      	cmp	r3, r1
 800e57e:	bf01      	itttt	eq
 800e580:	6819      	ldreq	r1, [r3, #0]
 800e582:	685b      	ldreq	r3, [r3, #4]
 800e584:	1809      	addeq	r1, r1, r0
 800e586:	6021      	streq	r1, [r4, #0]
 800e588:	e7ed      	b.n	800e566 <_free_r+0x1e>
 800e58a:	461a      	mov	r2, r3
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	b10b      	cbz	r3, 800e594 <_free_r+0x4c>
 800e590:	42a3      	cmp	r3, r4
 800e592:	d9fa      	bls.n	800e58a <_free_r+0x42>
 800e594:	6811      	ldr	r1, [r2, #0]
 800e596:	1850      	adds	r0, r2, r1
 800e598:	42a0      	cmp	r0, r4
 800e59a:	d10b      	bne.n	800e5b4 <_free_r+0x6c>
 800e59c:	6820      	ldr	r0, [r4, #0]
 800e59e:	4401      	add	r1, r0
 800e5a0:	1850      	adds	r0, r2, r1
 800e5a2:	4283      	cmp	r3, r0
 800e5a4:	6011      	str	r1, [r2, #0]
 800e5a6:	d1e0      	bne.n	800e56a <_free_r+0x22>
 800e5a8:	6818      	ldr	r0, [r3, #0]
 800e5aa:	685b      	ldr	r3, [r3, #4]
 800e5ac:	6053      	str	r3, [r2, #4]
 800e5ae:	4408      	add	r0, r1
 800e5b0:	6010      	str	r0, [r2, #0]
 800e5b2:	e7da      	b.n	800e56a <_free_r+0x22>
 800e5b4:	d902      	bls.n	800e5bc <_free_r+0x74>
 800e5b6:	230c      	movs	r3, #12
 800e5b8:	602b      	str	r3, [r5, #0]
 800e5ba:	e7d6      	b.n	800e56a <_free_r+0x22>
 800e5bc:	6820      	ldr	r0, [r4, #0]
 800e5be:	1821      	adds	r1, r4, r0
 800e5c0:	428b      	cmp	r3, r1
 800e5c2:	bf04      	itt	eq
 800e5c4:	6819      	ldreq	r1, [r3, #0]
 800e5c6:	685b      	ldreq	r3, [r3, #4]
 800e5c8:	6063      	str	r3, [r4, #4]
 800e5ca:	bf04      	itt	eq
 800e5cc:	1809      	addeq	r1, r1, r0
 800e5ce:	6021      	streq	r1, [r4, #0]
 800e5d0:	6054      	str	r4, [r2, #4]
 800e5d2:	e7ca      	b.n	800e56a <_free_r+0x22>
 800e5d4:	bd38      	pop	{r3, r4, r5, pc}
 800e5d6:	bf00      	nop
 800e5d8:	24007e10 	.word	0x24007e10

0800e5dc <malloc>:
 800e5dc:	4b02      	ldr	r3, [pc, #8]	@ (800e5e8 <malloc+0xc>)
 800e5de:	4601      	mov	r1, r0
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	f000 b825 	b.w	800e630 <_malloc_r>
 800e5e6:	bf00      	nop
 800e5e8:	2400003c 	.word	0x2400003c

0800e5ec <sbrk_aligned>:
 800e5ec:	b570      	push	{r4, r5, r6, lr}
 800e5ee:	4e0f      	ldr	r6, [pc, #60]	@ (800e62c <sbrk_aligned+0x40>)
 800e5f0:	460c      	mov	r4, r1
 800e5f2:	6831      	ldr	r1, [r6, #0]
 800e5f4:	4605      	mov	r5, r0
 800e5f6:	b911      	cbnz	r1, 800e5fe <sbrk_aligned+0x12>
 800e5f8:	f000 fcc8 	bl	800ef8c <_sbrk_r>
 800e5fc:	6030      	str	r0, [r6, #0]
 800e5fe:	4621      	mov	r1, r4
 800e600:	4628      	mov	r0, r5
 800e602:	f000 fcc3 	bl	800ef8c <_sbrk_r>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d103      	bne.n	800e612 <sbrk_aligned+0x26>
 800e60a:	f04f 34ff 	mov.w	r4, #4294967295
 800e60e:	4620      	mov	r0, r4
 800e610:	bd70      	pop	{r4, r5, r6, pc}
 800e612:	1cc4      	adds	r4, r0, #3
 800e614:	f024 0403 	bic.w	r4, r4, #3
 800e618:	42a0      	cmp	r0, r4
 800e61a:	d0f8      	beq.n	800e60e <sbrk_aligned+0x22>
 800e61c:	1a21      	subs	r1, r4, r0
 800e61e:	4628      	mov	r0, r5
 800e620:	f000 fcb4 	bl	800ef8c <_sbrk_r>
 800e624:	3001      	adds	r0, #1
 800e626:	d1f2      	bne.n	800e60e <sbrk_aligned+0x22>
 800e628:	e7ef      	b.n	800e60a <sbrk_aligned+0x1e>
 800e62a:	bf00      	nop
 800e62c:	24007e0c 	.word	0x24007e0c

0800e630 <_malloc_r>:
 800e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e634:	1ccd      	adds	r5, r1, #3
 800e636:	f025 0503 	bic.w	r5, r5, #3
 800e63a:	3508      	adds	r5, #8
 800e63c:	2d0c      	cmp	r5, #12
 800e63e:	bf38      	it	cc
 800e640:	250c      	movcc	r5, #12
 800e642:	2d00      	cmp	r5, #0
 800e644:	4606      	mov	r6, r0
 800e646:	db01      	blt.n	800e64c <_malloc_r+0x1c>
 800e648:	42a9      	cmp	r1, r5
 800e64a:	d904      	bls.n	800e656 <_malloc_r+0x26>
 800e64c:	230c      	movs	r3, #12
 800e64e:	6033      	str	r3, [r6, #0]
 800e650:	2000      	movs	r0, #0
 800e652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e72c <_malloc_r+0xfc>
 800e65a:	f000 f869 	bl	800e730 <__malloc_lock>
 800e65e:	f8d8 3000 	ldr.w	r3, [r8]
 800e662:	461c      	mov	r4, r3
 800e664:	bb44      	cbnz	r4, 800e6b8 <_malloc_r+0x88>
 800e666:	4629      	mov	r1, r5
 800e668:	4630      	mov	r0, r6
 800e66a:	f7ff ffbf 	bl	800e5ec <sbrk_aligned>
 800e66e:	1c43      	adds	r3, r0, #1
 800e670:	4604      	mov	r4, r0
 800e672:	d158      	bne.n	800e726 <_malloc_r+0xf6>
 800e674:	f8d8 4000 	ldr.w	r4, [r8]
 800e678:	4627      	mov	r7, r4
 800e67a:	2f00      	cmp	r7, #0
 800e67c:	d143      	bne.n	800e706 <_malloc_r+0xd6>
 800e67e:	2c00      	cmp	r4, #0
 800e680:	d04b      	beq.n	800e71a <_malloc_r+0xea>
 800e682:	6823      	ldr	r3, [r4, #0]
 800e684:	4639      	mov	r1, r7
 800e686:	4630      	mov	r0, r6
 800e688:	eb04 0903 	add.w	r9, r4, r3
 800e68c:	f000 fc7e 	bl	800ef8c <_sbrk_r>
 800e690:	4581      	cmp	r9, r0
 800e692:	d142      	bne.n	800e71a <_malloc_r+0xea>
 800e694:	6821      	ldr	r1, [r4, #0]
 800e696:	1a6d      	subs	r5, r5, r1
 800e698:	4629      	mov	r1, r5
 800e69a:	4630      	mov	r0, r6
 800e69c:	f7ff ffa6 	bl	800e5ec <sbrk_aligned>
 800e6a0:	3001      	adds	r0, #1
 800e6a2:	d03a      	beq.n	800e71a <_malloc_r+0xea>
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	442b      	add	r3, r5
 800e6a8:	6023      	str	r3, [r4, #0]
 800e6aa:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ae:	685a      	ldr	r2, [r3, #4]
 800e6b0:	bb62      	cbnz	r2, 800e70c <_malloc_r+0xdc>
 800e6b2:	f8c8 7000 	str.w	r7, [r8]
 800e6b6:	e00f      	b.n	800e6d8 <_malloc_r+0xa8>
 800e6b8:	6822      	ldr	r2, [r4, #0]
 800e6ba:	1b52      	subs	r2, r2, r5
 800e6bc:	d420      	bmi.n	800e700 <_malloc_r+0xd0>
 800e6be:	2a0b      	cmp	r2, #11
 800e6c0:	d917      	bls.n	800e6f2 <_malloc_r+0xc2>
 800e6c2:	1961      	adds	r1, r4, r5
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	6025      	str	r5, [r4, #0]
 800e6c8:	bf18      	it	ne
 800e6ca:	6059      	strne	r1, [r3, #4]
 800e6cc:	6863      	ldr	r3, [r4, #4]
 800e6ce:	bf08      	it	eq
 800e6d0:	f8c8 1000 	streq.w	r1, [r8]
 800e6d4:	5162      	str	r2, [r4, r5]
 800e6d6:	604b      	str	r3, [r1, #4]
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f000 f82f 	bl	800e73c <__malloc_unlock>
 800e6de:	f104 000b 	add.w	r0, r4, #11
 800e6e2:	1d23      	adds	r3, r4, #4
 800e6e4:	f020 0007 	bic.w	r0, r0, #7
 800e6e8:	1ac2      	subs	r2, r0, r3
 800e6ea:	bf1c      	itt	ne
 800e6ec:	1a1b      	subne	r3, r3, r0
 800e6ee:	50a3      	strne	r3, [r4, r2]
 800e6f0:	e7af      	b.n	800e652 <_malloc_r+0x22>
 800e6f2:	6862      	ldr	r2, [r4, #4]
 800e6f4:	42a3      	cmp	r3, r4
 800e6f6:	bf0c      	ite	eq
 800e6f8:	f8c8 2000 	streq.w	r2, [r8]
 800e6fc:	605a      	strne	r2, [r3, #4]
 800e6fe:	e7eb      	b.n	800e6d8 <_malloc_r+0xa8>
 800e700:	4623      	mov	r3, r4
 800e702:	6864      	ldr	r4, [r4, #4]
 800e704:	e7ae      	b.n	800e664 <_malloc_r+0x34>
 800e706:	463c      	mov	r4, r7
 800e708:	687f      	ldr	r7, [r7, #4]
 800e70a:	e7b6      	b.n	800e67a <_malloc_r+0x4a>
 800e70c:	461a      	mov	r2, r3
 800e70e:	685b      	ldr	r3, [r3, #4]
 800e710:	42a3      	cmp	r3, r4
 800e712:	d1fb      	bne.n	800e70c <_malloc_r+0xdc>
 800e714:	2300      	movs	r3, #0
 800e716:	6053      	str	r3, [r2, #4]
 800e718:	e7de      	b.n	800e6d8 <_malloc_r+0xa8>
 800e71a:	230c      	movs	r3, #12
 800e71c:	6033      	str	r3, [r6, #0]
 800e71e:	4630      	mov	r0, r6
 800e720:	f000 f80c 	bl	800e73c <__malloc_unlock>
 800e724:	e794      	b.n	800e650 <_malloc_r+0x20>
 800e726:	6005      	str	r5, [r0, #0]
 800e728:	e7d6      	b.n	800e6d8 <_malloc_r+0xa8>
 800e72a:	bf00      	nop
 800e72c:	24007e10 	.word	0x24007e10

0800e730 <__malloc_lock>:
 800e730:	4801      	ldr	r0, [pc, #4]	@ (800e738 <__malloc_lock+0x8>)
 800e732:	f7ff beda 	b.w	800e4ea <__retarget_lock_acquire_recursive>
 800e736:	bf00      	nop
 800e738:	24007e08 	.word	0x24007e08

0800e73c <__malloc_unlock>:
 800e73c:	4801      	ldr	r0, [pc, #4]	@ (800e744 <__malloc_unlock+0x8>)
 800e73e:	f7ff bed5 	b.w	800e4ec <__retarget_lock_release_recursive>
 800e742:	bf00      	nop
 800e744:	24007e08 	.word	0x24007e08

0800e748 <__sfputc_r>:
 800e748:	6893      	ldr	r3, [r2, #8]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	b410      	push	{r4}
 800e750:	6093      	str	r3, [r2, #8]
 800e752:	da08      	bge.n	800e766 <__sfputc_r+0x1e>
 800e754:	6994      	ldr	r4, [r2, #24]
 800e756:	42a3      	cmp	r3, r4
 800e758:	db01      	blt.n	800e75e <__sfputc_r+0x16>
 800e75a:	290a      	cmp	r1, #10
 800e75c:	d103      	bne.n	800e766 <__sfputc_r+0x1e>
 800e75e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e762:	f000 bb7f 	b.w	800ee64 <__swbuf_r>
 800e766:	6813      	ldr	r3, [r2, #0]
 800e768:	1c58      	adds	r0, r3, #1
 800e76a:	6010      	str	r0, [r2, #0]
 800e76c:	7019      	strb	r1, [r3, #0]
 800e76e:	4608      	mov	r0, r1
 800e770:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <__sfputs_r>:
 800e776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e778:	4606      	mov	r6, r0
 800e77a:	460f      	mov	r7, r1
 800e77c:	4614      	mov	r4, r2
 800e77e:	18d5      	adds	r5, r2, r3
 800e780:	42ac      	cmp	r4, r5
 800e782:	d101      	bne.n	800e788 <__sfputs_r+0x12>
 800e784:	2000      	movs	r0, #0
 800e786:	e007      	b.n	800e798 <__sfputs_r+0x22>
 800e788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e78c:	463a      	mov	r2, r7
 800e78e:	4630      	mov	r0, r6
 800e790:	f7ff ffda 	bl	800e748 <__sfputc_r>
 800e794:	1c43      	adds	r3, r0, #1
 800e796:	d1f3      	bne.n	800e780 <__sfputs_r+0xa>
 800e798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e79c <_vfiprintf_r>:
 800e79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7a0:	460d      	mov	r5, r1
 800e7a2:	b09d      	sub	sp, #116	@ 0x74
 800e7a4:	4614      	mov	r4, r2
 800e7a6:	4698      	mov	r8, r3
 800e7a8:	4606      	mov	r6, r0
 800e7aa:	b118      	cbz	r0, 800e7b4 <_vfiprintf_r+0x18>
 800e7ac:	6a03      	ldr	r3, [r0, #32]
 800e7ae:	b90b      	cbnz	r3, 800e7b4 <_vfiprintf_r+0x18>
 800e7b0:	f7ff fd8c 	bl	800e2cc <__sinit>
 800e7b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7b6:	07d9      	lsls	r1, r3, #31
 800e7b8:	d405      	bmi.n	800e7c6 <_vfiprintf_r+0x2a>
 800e7ba:	89ab      	ldrh	r3, [r5, #12]
 800e7bc:	059a      	lsls	r2, r3, #22
 800e7be:	d402      	bmi.n	800e7c6 <_vfiprintf_r+0x2a>
 800e7c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7c2:	f7ff fe92 	bl	800e4ea <__retarget_lock_acquire_recursive>
 800e7c6:	89ab      	ldrh	r3, [r5, #12]
 800e7c8:	071b      	lsls	r3, r3, #28
 800e7ca:	d501      	bpl.n	800e7d0 <_vfiprintf_r+0x34>
 800e7cc:	692b      	ldr	r3, [r5, #16]
 800e7ce:	b99b      	cbnz	r3, 800e7f8 <_vfiprintf_r+0x5c>
 800e7d0:	4629      	mov	r1, r5
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f000 fb84 	bl	800eee0 <__swsetup_r>
 800e7d8:	b170      	cbz	r0, 800e7f8 <_vfiprintf_r+0x5c>
 800e7da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7dc:	07dc      	lsls	r4, r3, #31
 800e7de:	d504      	bpl.n	800e7ea <_vfiprintf_r+0x4e>
 800e7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7e4:	b01d      	add	sp, #116	@ 0x74
 800e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ea:	89ab      	ldrh	r3, [r5, #12]
 800e7ec:	0598      	lsls	r0, r3, #22
 800e7ee:	d4f7      	bmi.n	800e7e0 <_vfiprintf_r+0x44>
 800e7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7f2:	f7ff fe7b 	bl	800e4ec <__retarget_lock_release_recursive>
 800e7f6:	e7f3      	b.n	800e7e0 <_vfiprintf_r+0x44>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7fc:	2320      	movs	r3, #32
 800e7fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e802:	f8cd 800c 	str.w	r8, [sp, #12]
 800e806:	2330      	movs	r3, #48	@ 0x30
 800e808:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e9b8 <_vfiprintf_r+0x21c>
 800e80c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e810:	f04f 0901 	mov.w	r9, #1
 800e814:	4623      	mov	r3, r4
 800e816:	469a      	mov	sl, r3
 800e818:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e81c:	b10a      	cbz	r2, 800e822 <_vfiprintf_r+0x86>
 800e81e:	2a25      	cmp	r2, #37	@ 0x25
 800e820:	d1f9      	bne.n	800e816 <_vfiprintf_r+0x7a>
 800e822:	ebba 0b04 	subs.w	fp, sl, r4
 800e826:	d00b      	beq.n	800e840 <_vfiprintf_r+0xa4>
 800e828:	465b      	mov	r3, fp
 800e82a:	4622      	mov	r2, r4
 800e82c:	4629      	mov	r1, r5
 800e82e:	4630      	mov	r0, r6
 800e830:	f7ff ffa1 	bl	800e776 <__sfputs_r>
 800e834:	3001      	adds	r0, #1
 800e836:	f000 80a7 	beq.w	800e988 <_vfiprintf_r+0x1ec>
 800e83a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e83c:	445a      	add	r2, fp
 800e83e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e840:	f89a 3000 	ldrb.w	r3, [sl]
 800e844:	2b00      	cmp	r3, #0
 800e846:	f000 809f 	beq.w	800e988 <_vfiprintf_r+0x1ec>
 800e84a:	2300      	movs	r3, #0
 800e84c:	f04f 32ff 	mov.w	r2, #4294967295
 800e850:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e854:	f10a 0a01 	add.w	sl, sl, #1
 800e858:	9304      	str	r3, [sp, #16]
 800e85a:	9307      	str	r3, [sp, #28]
 800e85c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e860:	931a      	str	r3, [sp, #104]	@ 0x68
 800e862:	4654      	mov	r4, sl
 800e864:	2205      	movs	r2, #5
 800e866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e86a:	4853      	ldr	r0, [pc, #332]	@ (800e9b8 <_vfiprintf_r+0x21c>)
 800e86c:	f7f1 fd38 	bl	80002e0 <memchr>
 800e870:	9a04      	ldr	r2, [sp, #16]
 800e872:	b9d8      	cbnz	r0, 800e8ac <_vfiprintf_r+0x110>
 800e874:	06d1      	lsls	r1, r2, #27
 800e876:	bf44      	itt	mi
 800e878:	2320      	movmi	r3, #32
 800e87a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e87e:	0713      	lsls	r3, r2, #28
 800e880:	bf44      	itt	mi
 800e882:	232b      	movmi	r3, #43	@ 0x2b
 800e884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e888:	f89a 3000 	ldrb.w	r3, [sl]
 800e88c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e88e:	d015      	beq.n	800e8bc <_vfiprintf_r+0x120>
 800e890:	9a07      	ldr	r2, [sp, #28]
 800e892:	4654      	mov	r4, sl
 800e894:	2000      	movs	r0, #0
 800e896:	f04f 0c0a 	mov.w	ip, #10
 800e89a:	4621      	mov	r1, r4
 800e89c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8a0:	3b30      	subs	r3, #48	@ 0x30
 800e8a2:	2b09      	cmp	r3, #9
 800e8a4:	d94b      	bls.n	800e93e <_vfiprintf_r+0x1a2>
 800e8a6:	b1b0      	cbz	r0, 800e8d6 <_vfiprintf_r+0x13a>
 800e8a8:	9207      	str	r2, [sp, #28]
 800e8aa:	e014      	b.n	800e8d6 <_vfiprintf_r+0x13a>
 800e8ac:	eba0 0308 	sub.w	r3, r0, r8
 800e8b0:	fa09 f303 	lsl.w	r3, r9, r3
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	9304      	str	r3, [sp, #16]
 800e8b8:	46a2      	mov	sl, r4
 800e8ba:	e7d2      	b.n	800e862 <_vfiprintf_r+0xc6>
 800e8bc:	9b03      	ldr	r3, [sp, #12]
 800e8be:	1d19      	adds	r1, r3, #4
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	9103      	str	r1, [sp, #12]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	bfbb      	ittet	lt
 800e8c8:	425b      	neglt	r3, r3
 800e8ca:	f042 0202 	orrlt.w	r2, r2, #2
 800e8ce:	9307      	strge	r3, [sp, #28]
 800e8d0:	9307      	strlt	r3, [sp, #28]
 800e8d2:	bfb8      	it	lt
 800e8d4:	9204      	strlt	r2, [sp, #16]
 800e8d6:	7823      	ldrb	r3, [r4, #0]
 800e8d8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e8da:	d10a      	bne.n	800e8f2 <_vfiprintf_r+0x156>
 800e8dc:	7863      	ldrb	r3, [r4, #1]
 800e8de:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8e0:	d132      	bne.n	800e948 <_vfiprintf_r+0x1ac>
 800e8e2:	9b03      	ldr	r3, [sp, #12]
 800e8e4:	1d1a      	adds	r2, r3, #4
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	9203      	str	r2, [sp, #12]
 800e8ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e8ee:	3402      	adds	r4, #2
 800e8f0:	9305      	str	r3, [sp, #20]
 800e8f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e9c8 <_vfiprintf_r+0x22c>
 800e8f6:	7821      	ldrb	r1, [r4, #0]
 800e8f8:	2203      	movs	r2, #3
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	f7f1 fcf0 	bl	80002e0 <memchr>
 800e900:	b138      	cbz	r0, 800e912 <_vfiprintf_r+0x176>
 800e902:	9b04      	ldr	r3, [sp, #16]
 800e904:	eba0 000a 	sub.w	r0, r0, sl
 800e908:	2240      	movs	r2, #64	@ 0x40
 800e90a:	4082      	lsls	r2, r0
 800e90c:	4313      	orrs	r3, r2
 800e90e:	3401      	adds	r4, #1
 800e910:	9304      	str	r3, [sp, #16]
 800e912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e916:	4829      	ldr	r0, [pc, #164]	@ (800e9bc <_vfiprintf_r+0x220>)
 800e918:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e91c:	2206      	movs	r2, #6
 800e91e:	f7f1 fcdf 	bl	80002e0 <memchr>
 800e922:	2800      	cmp	r0, #0
 800e924:	d03f      	beq.n	800e9a6 <_vfiprintf_r+0x20a>
 800e926:	4b26      	ldr	r3, [pc, #152]	@ (800e9c0 <_vfiprintf_r+0x224>)
 800e928:	bb1b      	cbnz	r3, 800e972 <_vfiprintf_r+0x1d6>
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	3307      	adds	r3, #7
 800e92e:	f023 0307 	bic.w	r3, r3, #7
 800e932:	3308      	adds	r3, #8
 800e934:	9303      	str	r3, [sp, #12]
 800e936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e938:	443b      	add	r3, r7
 800e93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e93c:	e76a      	b.n	800e814 <_vfiprintf_r+0x78>
 800e93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e942:	460c      	mov	r4, r1
 800e944:	2001      	movs	r0, #1
 800e946:	e7a8      	b.n	800e89a <_vfiprintf_r+0xfe>
 800e948:	2300      	movs	r3, #0
 800e94a:	3401      	adds	r4, #1
 800e94c:	9305      	str	r3, [sp, #20]
 800e94e:	4619      	mov	r1, r3
 800e950:	f04f 0c0a 	mov.w	ip, #10
 800e954:	4620      	mov	r0, r4
 800e956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e95a:	3a30      	subs	r2, #48	@ 0x30
 800e95c:	2a09      	cmp	r2, #9
 800e95e:	d903      	bls.n	800e968 <_vfiprintf_r+0x1cc>
 800e960:	2b00      	cmp	r3, #0
 800e962:	d0c6      	beq.n	800e8f2 <_vfiprintf_r+0x156>
 800e964:	9105      	str	r1, [sp, #20]
 800e966:	e7c4      	b.n	800e8f2 <_vfiprintf_r+0x156>
 800e968:	fb0c 2101 	mla	r1, ip, r1, r2
 800e96c:	4604      	mov	r4, r0
 800e96e:	2301      	movs	r3, #1
 800e970:	e7f0      	b.n	800e954 <_vfiprintf_r+0x1b8>
 800e972:	ab03      	add	r3, sp, #12
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	462a      	mov	r2, r5
 800e978:	4b12      	ldr	r3, [pc, #72]	@ (800e9c4 <_vfiprintf_r+0x228>)
 800e97a:	a904      	add	r1, sp, #16
 800e97c:	4630      	mov	r0, r6
 800e97e:	f3af 8000 	nop.w
 800e982:	4607      	mov	r7, r0
 800e984:	1c78      	adds	r0, r7, #1
 800e986:	d1d6      	bne.n	800e936 <_vfiprintf_r+0x19a>
 800e988:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e98a:	07d9      	lsls	r1, r3, #31
 800e98c:	d405      	bmi.n	800e99a <_vfiprintf_r+0x1fe>
 800e98e:	89ab      	ldrh	r3, [r5, #12]
 800e990:	059a      	lsls	r2, r3, #22
 800e992:	d402      	bmi.n	800e99a <_vfiprintf_r+0x1fe>
 800e994:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e996:	f7ff fda9 	bl	800e4ec <__retarget_lock_release_recursive>
 800e99a:	89ab      	ldrh	r3, [r5, #12]
 800e99c:	065b      	lsls	r3, r3, #25
 800e99e:	f53f af1f 	bmi.w	800e7e0 <_vfiprintf_r+0x44>
 800e9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9a4:	e71e      	b.n	800e7e4 <_vfiprintf_r+0x48>
 800e9a6:	ab03      	add	r3, sp, #12
 800e9a8:	9300      	str	r3, [sp, #0]
 800e9aa:	462a      	mov	r2, r5
 800e9ac:	4b05      	ldr	r3, [pc, #20]	@ (800e9c4 <_vfiprintf_r+0x228>)
 800e9ae:	a904      	add	r1, sp, #16
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f000 f879 	bl	800eaa8 <_printf_i>
 800e9b6:	e7e4      	b.n	800e982 <_vfiprintf_r+0x1e6>
 800e9b8:	08011ced 	.word	0x08011ced
 800e9bc:	08011cf7 	.word	0x08011cf7
 800e9c0:	00000000 	.word	0x00000000
 800e9c4:	0800e777 	.word	0x0800e777
 800e9c8:	08011cf3 	.word	0x08011cf3

0800e9cc <_printf_common>:
 800e9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	4616      	mov	r6, r2
 800e9d2:	4698      	mov	r8, r3
 800e9d4:	688a      	ldr	r2, [r1, #8]
 800e9d6:	690b      	ldr	r3, [r1, #16]
 800e9d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	bfb8      	it	lt
 800e9e0:	4613      	movlt	r3, r2
 800e9e2:	6033      	str	r3, [r6, #0]
 800e9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e9e8:	4607      	mov	r7, r0
 800e9ea:	460c      	mov	r4, r1
 800e9ec:	b10a      	cbz	r2, 800e9f2 <_printf_common+0x26>
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	6033      	str	r3, [r6, #0]
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	0699      	lsls	r1, r3, #26
 800e9f6:	bf42      	ittt	mi
 800e9f8:	6833      	ldrmi	r3, [r6, #0]
 800e9fa:	3302      	addmi	r3, #2
 800e9fc:	6033      	strmi	r3, [r6, #0]
 800e9fe:	6825      	ldr	r5, [r4, #0]
 800ea00:	f015 0506 	ands.w	r5, r5, #6
 800ea04:	d106      	bne.n	800ea14 <_printf_common+0x48>
 800ea06:	f104 0a19 	add.w	sl, r4, #25
 800ea0a:	68e3      	ldr	r3, [r4, #12]
 800ea0c:	6832      	ldr	r2, [r6, #0]
 800ea0e:	1a9b      	subs	r3, r3, r2
 800ea10:	42ab      	cmp	r3, r5
 800ea12:	dc26      	bgt.n	800ea62 <_printf_common+0x96>
 800ea14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea18:	6822      	ldr	r2, [r4, #0]
 800ea1a:	3b00      	subs	r3, #0
 800ea1c:	bf18      	it	ne
 800ea1e:	2301      	movne	r3, #1
 800ea20:	0692      	lsls	r2, r2, #26
 800ea22:	d42b      	bmi.n	800ea7c <_printf_common+0xb0>
 800ea24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea28:	4641      	mov	r1, r8
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c8      	blx	r9
 800ea2e:	3001      	adds	r0, #1
 800ea30:	d01e      	beq.n	800ea70 <_printf_common+0xa4>
 800ea32:	6823      	ldr	r3, [r4, #0]
 800ea34:	6922      	ldr	r2, [r4, #16]
 800ea36:	f003 0306 	and.w	r3, r3, #6
 800ea3a:	2b04      	cmp	r3, #4
 800ea3c:	bf02      	ittt	eq
 800ea3e:	68e5      	ldreq	r5, [r4, #12]
 800ea40:	6833      	ldreq	r3, [r6, #0]
 800ea42:	1aed      	subeq	r5, r5, r3
 800ea44:	68a3      	ldr	r3, [r4, #8]
 800ea46:	bf0c      	ite	eq
 800ea48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea4c:	2500      	movne	r5, #0
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	bfc4      	itt	gt
 800ea52:	1a9b      	subgt	r3, r3, r2
 800ea54:	18ed      	addgt	r5, r5, r3
 800ea56:	2600      	movs	r6, #0
 800ea58:	341a      	adds	r4, #26
 800ea5a:	42b5      	cmp	r5, r6
 800ea5c:	d11a      	bne.n	800ea94 <_printf_common+0xc8>
 800ea5e:	2000      	movs	r0, #0
 800ea60:	e008      	b.n	800ea74 <_printf_common+0xa8>
 800ea62:	2301      	movs	r3, #1
 800ea64:	4652      	mov	r2, sl
 800ea66:	4641      	mov	r1, r8
 800ea68:	4638      	mov	r0, r7
 800ea6a:	47c8      	blx	r9
 800ea6c:	3001      	adds	r0, #1
 800ea6e:	d103      	bne.n	800ea78 <_printf_common+0xac>
 800ea70:	f04f 30ff 	mov.w	r0, #4294967295
 800ea74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea78:	3501      	adds	r5, #1
 800ea7a:	e7c6      	b.n	800ea0a <_printf_common+0x3e>
 800ea7c:	18e1      	adds	r1, r4, r3
 800ea7e:	1c5a      	adds	r2, r3, #1
 800ea80:	2030      	movs	r0, #48	@ 0x30
 800ea82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ea86:	4422      	add	r2, r4
 800ea88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ea8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ea90:	3302      	adds	r3, #2
 800ea92:	e7c7      	b.n	800ea24 <_printf_common+0x58>
 800ea94:	2301      	movs	r3, #1
 800ea96:	4622      	mov	r2, r4
 800ea98:	4641      	mov	r1, r8
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c8      	blx	r9
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d0e6      	beq.n	800ea70 <_printf_common+0xa4>
 800eaa2:	3601      	adds	r6, #1
 800eaa4:	e7d9      	b.n	800ea5a <_printf_common+0x8e>
	...

0800eaa8 <_printf_i>:
 800eaa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eaac:	7e0f      	ldrb	r7, [r1, #24]
 800eaae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eab0:	2f78      	cmp	r7, #120	@ 0x78
 800eab2:	4691      	mov	r9, r2
 800eab4:	4680      	mov	r8, r0
 800eab6:	460c      	mov	r4, r1
 800eab8:	469a      	mov	sl, r3
 800eaba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eabe:	d807      	bhi.n	800ead0 <_printf_i+0x28>
 800eac0:	2f62      	cmp	r7, #98	@ 0x62
 800eac2:	d80a      	bhi.n	800eada <_printf_i+0x32>
 800eac4:	2f00      	cmp	r7, #0
 800eac6:	f000 80d2 	beq.w	800ec6e <_printf_i+0x1c6>
 800eaca:	2f58      	cmp	r7, #88	@ 0x58
 800eacc:	f000 80b9 	beq.w	800ec42 <_printf_i+0x19a>
 800ead0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ead4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ead8:	e03a      	b.n	800eb50 <_printf_i+0xa8>
 800eada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eade:	2b15      	cmp	r3, #21
 800eae0:	d8f6      	bhi.n	800ead0 <_printf_i+0x28>
 800eae2:	a101      	add	r1, pc, #4	@ (adr r1, 800eae8 <_printf_i+0x40>)
 800eae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eae8:	0800eb41 	.word	0x0800eb41
 800eaec:	0800eb55 	.word	0x0800eb55
 800eaf0:	0800ead1 	.word	0x0800ead1
 800eaf4:	0800ead1 	.word	0x0800ead1
 800eaf8:	0800ead1 	.word	0x0800ead1
 800eafc:	0800ead1 	.word	0x0800ead1
 800eb00:	0800eb55 	.word	0x0800eb55
 800eb04:	0800ead1 	.word	0x0800ead1
 800eb08:	0800ead1 	.word	0x0800ead1
 800eb0c:	0800ead1 	.word	0x0800ead1
 800eb10:	0800ead1 	.word	0x0800ead1
 800eb14:	0800ec55 	.word	0x0800ec55
 800eb18:	0800eb7f 	.word	0x0800eb7f
 800eb1c:	0800ec0f 	.word	0x0800ec0f
 800eb20:	0800ead1 	.word	0x0800ead1
 800eb24:	0800ead1 	.word	0x0800ead1
 800eb28:	0800ec77 	.word	0x0800ec77
 800eb2c:	0800ead1 	.word	0x0800ead1
 800eb30:	0800eb7f 	.word	0x0800eb7f
 800eb34:	0800ead1 	.word	0x0800ead1
 800eb38:	0800ead1 	.word	0x0800ead1
 800eb3c:	0800ec17 	.word	0x0800ec17
 800eb40:	6833      	ldr	r3, [r6, #0]
 800eb42:	1d1a      	adds	r2, r3, #4
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	6032      	str	r2, [r6, #0]
 800eb48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eb50:	2301      	movs	r3, #1
 800eb52:	e09d      	b.n	800ec90 <_printf_i+0x1e8>
 800eb54:	6833      	ldr	r3, [r6, #0]
 800eb56:	6820      	ldr	r0, [r4, #0]
 800eb58:	1d19      	adds	r1, r3, #4
 800eb5a:	6031      	str	r1, [r6, #0]
 800eb5c:	0606      	lsls	r6, r0, #24
 800eb5e:	d501      	bpl.n	800eb64 <_printf_i+0xbc>
 800eb60:	681d      	ldr	r5, [r3, #0]
 800eb62:	e003      	b.n	800eb6c <_printf_i+0xc4>
 800eb64:	0645      	lsls	r5, r0, #25
 800eb66:	d5fb      	bpl.n	800eb60 <_printf_i+0xb8>
 800eb68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eb6c:	2d00      	cmp	r5, #0
 800eb6e:	da03      	bge.n	800eb78 <_printf_i+0xd0>
 800eb70:	232d      	movs	r3, #45	@ 0x2d
 800eb72:	426d      	negs	r5, r5
 800eb74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb78:	4859      	ldr	r0, [pc, #356]	@ (800ece0 <_printf_i+0x238>)
 800eb7a:	230a      	movs	r3, #10
 800eb7c:	e011      	b.n	800eba2 <_printf_i+0xfa>
 800eb7e:	6821      	ldr	r1, [r4, #0]
 800eb80:	6833      	ldr	r3, [r6, #0]
 800eb82:	0608      	lsls	r0, r1, #24
 800eb84:	f853 5b04 	ldr.w	r5, [r3], #4
 800eb88:	d402      	bmi.n	800eb90 <_printf_i+0xe8>
 800eb8a:	0649      	lsls	r1, r1, #25
 800eb8c:	bf48      	it	mi
 800eb8e:	b2ad      	uxthmi	r5, r5
 800eb90:	2f6f      	cmp	r7, #111	@ 0x6f
 800eb92:	4853      	ldr	r0, [pc, #332]	@ (800ece0 <_printf_i+0x238>)
 800eb94:	6033      	str	r3, [r6, #0]
 800eb96:	bf14      	ite	ne
 800eb98:	230a      	movne	r3, #10
 800eb9a:	2308      	moveq	r3, #8
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eba2:	6866      	ldr	r6, [r4, #4]
 800eba4:	60a6      	str	r6, [r4, #8]
 800eba6:	2e00      	cmp	r6, #0
 800eba8:	bfa2      	ittt	ge
 800ebaa:	6821      	ldrge	r1, [r4, #0]
 800ebac:	f021 0104 	bicge.w	r1, r1, #4
 800ebb0:	6021      	strge	r1, [r4, #0]
 800ebb2:	b90d      	cbnz	r5, 800ebb8 <_printf_i+0x110>
 800ebb4:	2e00      	cmp	r6, #0
 800ebb6:	d04b      	beq.n	800ec50 <_printf_i+0x1a8>
 800ebb8:	4616      	mov	r6, r2
 800ebba:	fbb5 f1f3 	udiv	r1, r5, r3
 800ebbe:	fb03 5711 	mls	r7, r3, r1, r5
 800ebc2:	5dc7      	ldrb	r7, [r0, r7]
 800ebc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ebc8:	462f      	mov	r7, r5
 800ebca:	42bb      	cmp	r3, r7
 800ebcc:	460d      	mov	r5, r1
 800ebce:	d9f4      	bls.n	800ebba <_printf_i+0x112>
 800ebd0:	2b08      	cmp	r3, #8
 800ebd2:	d10b      	bne.n	800ebec <_printf_i+0x144>
 800ebd4:	6823      	ldr	r3, [r4, #0]
 800ebd6:	07df      	lsls	r7, r3, #31
 800ebd8:	d508      	bpl.n	800ebec <_printf_i+0x144>
 800ebda:	6923      	ldr	r3, [r4, #16]
 800ebdc:	6861      	ldr	r1, [r4, #4]
 800ebde:	4299      	cmp	r1, r3
 800ebe0:	bfde      	ittt	le
 800ebe2:	2330      	movle	r3, #48	@ 0x30
 800ebe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ebe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ebec:	1b92      	subs	r2, r2, r6
 800ebee:	6122      	str	r2, [r4, #16]
 800ebf0:	f8cd a000 	str.w	sl, [sp]
 800ebf4:	464b      	mov	r3, r9
 800ebf6:	aa03      	add	r2, sp, #12
 800ebf8:	4621      	mov	r1, r4
 800ebfa:	4640      	mov	r0, r8
 800ebfc:	f7ff fee6 	bl	800e9cc <_printf_common>
 800ec00:	3001      	adds	r0, #1
 800ec02:	d14a      	bne.n	800ec9a <_printf_i+0x1f2>
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	b004      	add	sp, #16
 800ec0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec0e:	6823      	ldr	r3, [r4, #0]
 800ec10:	f043 0320 	orr.w	r3, r3, #32
 800ec14:	6023      	str	r3, [r4, #0]
 800ec16:	4833      	ldr	r0, [pc, #204]	@ (800ece4 <_printf_i+0x23c>)
 800ec18:	2778      	movs	r7, #120	@ 0x78
 800ec1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec1e:	6823      	ldr	r3, [r4, #0]
 800ec20:	6831      	ldr	r1, [r6, #0]
 800ec22:	061f      	lsls	r7, r3, #24
 800ec24:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec28:	d402      	bmi.n	800ec30 <_printf_i+0x188>
 800ec2a:	065f      	lsls	r7, r3, #25
 800ec2c:	bf48      	it	mi
 800ec2e:	b2ad      	uxthmi	r5, r5
 800ec30:	6031      	str	r1, [r6, #0]
 800ec32:	07d9      	lsls	r1, r3, #31
 800ec34:	bf44      	itt	mi
 800ec36:	f043 0320 	orrmi.w	r3, r3, #32
 800ec3a:	6023      	strmi	r3, [r4, #0]
 800ec3c:	b11d      	cbz	r5, 800ec46 <_printf_i+0x19e>
 800ec3e:	2310      	movs	r3, #16
 800ec40:	e7ac      	b.n	800eb9c <_printf_i+0xf4>
 800ec42:	4827      	ldr	r0, [pc, #156]	@ (800ece0 <_printf_i+0x238>)
 800ec44:	e7e9      	b.n	800ec1a <_printf_i+0x172>
 800ec46:	6823      	ldr	r3, [r4, #0]
 800ec48:	f023 0320 	bic.w	r3, r3, #32
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	e7f6      	b.n	800ec3e <_printf_i+0x196>
 800ec50:	4616      	mov	r6, r2
 800ec52:	e7bd      	b.n	800ebd0 <_printf_i+0x128>
 800ec54:	6833      	ldr	r3, [r6, #0]
 800ec56:	6825      	ldr	r5, [r4, #0]
 800ec58:	6961      	ldr	r1, [r4, #20]
 800ec5a:	1d18      	adds	r0, r3, #4
 800ec5c:	6030      	str	r0, [r6, #0]
 800ec5e:	062e      	lsls	r6, r5, #24
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	d501      	bpl.n	800ec68 <_printf_i+0x1c0>
 800ec64:	6019      	str	r1, [r3, #0]
 800ec66:	e002      	b.n	800ec6e <_printf_i+0x1c6>
 800ec68:	0668      	lsls	r0, r5, #25
 800ec6a:	d5fb      	bpl.n	800ec64 <_printf_i+0x1bc>
 800ec6c:	8019      	strh	r1, [r3, #0]
 800ec6e:	2300      	movs	r3, #0
 800ec70:	6123      	str	r3, [r4, #16]
 800ec72:	4616      	mov	r6, r2
 800ec74:	e7bc      	b.n	800ebf0 <_printf_i+0x148>
 800ec76:	6833      	ldr	r3, [r6, #0]
 800ec78:	1d1a      	adds	r2, r3, #4
 800ec7a:	6032      	str	r2, [r6, #0]
 800ec7c:	681e      	ldr	r6, [r3, #0]
 800ec7e:	6862      	ldr	r2, [r4, #4]
 800ec80:	2100      	movs	r1, #0
 800ec82:	4630      	mov	r0, r6
 800ec84:	f7f1 fb2c 	bl	80002e0 <memchr>
 800ec88:	b108      	cbz	r0, 800ec8e <_printf_i+0x1e6>
 800ec8a:	1b80      	subs	r0, r0, r6
 800ec8c:	6060      	str	r0, [r4, #4]
 800ec8e:	6863      	ldr	r3, [r4, #4]
 800ec90:	6123      	str	r3, [r4, #16]
 800ec92:	2300      	movs	r3, #0
 800ec94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ec98:	e7aa      	b.n	800ebf0 <_printf_i+0x148>
 800ec9a:	6923      	ldr	r3, [r4, #16]
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	4649      	mov	r1, r9
 800eca0:	4640      	mov	r0, r8
 800eca2:	47d0      	blx	sl
 800eca4:	3001      	adds	r0, #1
 800eca6:	d0ad      	beq.n	800ec04 <_printf_i+0x15c>
 800eca8:	6823      	ldr	r3, [r4, #0]
 800ecaa:	079b      	lsls	r3, r3, #30
 800ecac:	d413      	bmi.n	800ecd6 <_printf_i+0x22e>
 800ecae:	68e0      	ldr	r0, [r4, #12]
 800ecb0:	9b03      	ldr	r3, [sp, #12]
 800ecb2:	4298      	cmp	r0, r3
 800ecb4:	bfb8      	it	lt
 800ecb6:	4618      	movlt	r0, r3
 800ecb8:	e7a6      	b.n	800ec08 <_printf_i+0x160>
 800ecba:	2301      	movs	r3, #1
 800ecbc:	4632      	mov	r2, r6
 800ecbe:	4649      	mov	r1, r9
 800ecc0:	4640      	mov	r0, r8
 800ecc2:	47d0      	blx	sl
 800ecc4:	3001      	adds	r0, #1
 800ecc6:	d09d      	beq.n	800ec04 <_printf_i+0x15c>
 800ecc8:	3501      	adds	r5, #1
 800ecca:	68e3      	ldr	r3, [r4, #12]
 800eccc:	9903      	ldr	r1, [sp, #12]
 800ecce:	1a5b      	subs	r3, r3, r1
 800ecd0:	42ab      	cmp	r3, r5
 800ecd2:	dcf2      	bgt.n	800ecba <_printf_i+0x212>
 800ecd4:	e7eb      	b.n	800ecae <_printf_i+0x206>
 800ecd6:	2500      	movs	r5, #0
 800ecd8:	f104 0619 	add.w	r6, r4, #25
 800ecdc:	e7f5      	b.n	800ecca <_printf_i+0x222>
 800ecde:	bf00      	nop
 800ece0:	08011cfe 	.word	0x08011cfe
 800ece4:	08011d0f 	.word	0x08011d0f

0800ece8 <__sflush_r>:
 800ece8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecf0:	0716      	lsls	r6, r2, #28
 800ecf2:	4605      	mov	r5, r0
 800ecf4:	460c      	mov	r4, r1
 800ecf6:	d454      	bmi.n	800eda2 <__sflush_r+0xba>
 800ecf8:	684b      	ldr	r3, [r1, #4]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	dc02      	bgt.n	800ed04 <__sflush_r+0x1c>
 800ecfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dd48      	ble.n	800ed96 <__sflush_r+0xae>
 800ed04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed06:	2e00      	cmp	r6, #0
 800ed08:	d045      	beq.n	800ed96 <__sflush_r+0xae>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed10:	682f      	ldr	r7, [r5, #0]
 800ed12:	6a21      	ldr	r1, [r4, #32]
 800ed14:	602b      	str	r3, [r5, #0]
 800ed16:	d030      	beq.n	800ed7a <__sflush_r+0x92>
 800ed18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	0759      	lsls	r1, r3, #29
 800ed1e:	d505      	bpl.n	800ed2c <__sflush_r+0x44>
 800ed20:	6863      	ldr	r3, [r4, #4]
 800ed22:	1ad2      	subs	r2, r2, r3
 800ed24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed26:	b10b      	cbz	r3, 800ed2c <__sflush_r+0x44>
 800ed28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed2a:	1ad2      	subs	r2, r2, r3
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed30:	6a21      	ldr	r1, [r4, #32]
 800ed32:	4628      	mov	r0, r5
 800ed34:	47b0      	blx	r6
 800ed36:	1c43      	adds	r3, r0, #1
 800ed38:	89a3      	ldrh	r3, [r4, #12]
 800ed3a:	d106      	bne.n	800ed4a <__sflush_r+0x62>
 800ed3c:	6829      	ldr	r1, [r5, #0]
 800ed3e:	291d      	cmp	r1, #29
 800ed40:	d82b      	bhi.n	800ed9a <__sflush_r+0xb2>
 800ed42:	4a2a      	ldr	r2, [pc, #168]	@ (800edec <__sflush_r+0x104>)
 800ed44:	410a      	asrs	r2, r1
 800ed46:	07d6      	lsls	r6, r2, #31
 800ed48:	d427      	bmi.n	800ed9a <__sflush_r+0xb2>
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	6062      	str	r2, [r4, #4]
 800ed4e:	04d9      	lsls	r1, r3, #19
 800ed50:	6922      	ldr	r2, [r4, #16]
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	d504      	bpl.n	800ed60 <__sflush_r+0x78>
 800ed56:	1c42      	adds	r2, r0, #1
 800ed58:	d101      	bne.n	800ed5e <__sflush_r+0x76>
 800ed5a:	682b      	ldr	r3, [r5, #0]
 800ed5c:	b903      	cbnz	r3, 800ed60 <__sflush_r+0x78>
 800ed5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ed60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed62:	602f      	str	r7, [r5, #0]
 800ed64:	b1b9      	cbz	r1, 800ed96 <__sflush_r+0xae>
 800ed66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ed6a:	4299      	cmp	r1, r3
 800ed6c:	d002      	beq.n	800ed74 <__sflush_r+0x8c>
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f7ff fbea 	bl	800e548 <_free_r>
 800ed74:	2300      	movs	r3, #0
 800ed76:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed78:	e00d      	b.n	800ed96 <__sflush_r+0xae>
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	47b0      	blx	r6
 800ed80:	4602      	mov	r2, r0
 800ed82:	1c50      	adds	r0, r2, #1
 800ed84:	d1c9      	bne.n	800ed1a <__sflush_r+0x32>
 800ed86:	682b      	ldr	r3, [r5, #0]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d0c6      	beq.n	800ed1a <__sflush_r+0x32>
 800ed8c:	2b1d      	cmp	r3, #29
 800ed8e:	d001      	beq.n	800ed94 <__sflush_r+0xac>
 800ed90:	2b16      	cmp	r3, #22
 800ed92:	d11e      	bne.n	800edd2 <__sflush_r+0xea>
 800ed94:	602f      	str	r7, [r5, #0]
 800ed96:	2000      	movs	r0, #0
 800ed98:	e022      	b.n	800ede0 <__sflush_r+0xf8>
 800ed9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed9e:	b21b      	sxth	r3, r3
 800eda0:	e01b      	b.n	800edda <__sflush_r+0xf2>
 800eda2:	690f      	ldr	r7, [r1, #16]
 800eda4:	2f00      	cmp	r7, #0
 800eda6:	d0f6      	beq.n	800ed96 <__sflush_r+0xae>
 800eda8:	0793      	lsls	r3, r2, #30
 800edaa:	680e      	ldr	r6, [r1, #0]
 800edac:	bf08      	it	eq
 800edae:	694b      	ldreq	r3, [r1, #20]
 800edb0:	600f      	str	r7, [r1, #0]
 800edb2:	bf18      	it	ne
 800edb4:	2300      	movne	r3, #0
 800edb6:	eba6 0807 	sub.w	r8, r6, r7
 800edba:	608b      	str	r3, [r1, #8]
 800edbc:	f1b8 0f00 	cmp.w	r8, #0
 800edc0:	dde9      	ble.n	800ed96 <__sflush_r+0xae>
 800edc2:	6a21      	ldr	r1, [r4, #32]
 800edc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800edc6:	4643      	mov	r3, r8
 800edc8:	463a      	mov	r2, r7
 800edca:	4628      	mov	r0, r5
 800edcc:	47b0      	blx	r6
 800edce:	2800      	cmp	r0, #0
 800edd0:	dc08      	bgt.n	800ede4 <__sflush_r+0xfc>
 800edd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800edd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295
 800ede0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede4:	4407      	add	r7, r0
 800ede6:	eba8 0800 	sub.w	r8, r8, r0
 800edea:	e7e7      	b.n	800edbc <__sflush_r+0xd4>
 800edec:	dfbffffe 	.word	0xdfbffffe

0800edf0 <_fflush_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	690b      	ldr	r3, [r1, #16]
 800edf4:	4605      	mov	r5, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	b913      	cbnz	r3, 800ee00 <_fflush_r+0x10>
 800edfa:	2500      	movs	r5, #0
 800edfc:	4628      	mov	r0, r5
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	b118      	cbz	r0, 800ee0a <_fflush_r+0x1a>
 800ee02:	6a03      	ldr	r3, [r0, #32]
 800ee04:	b90b      	cbnz	r3, 800ee0a <_fflush_r+0x1a>
 800ee06:	f7ff fa61 	bl	800e2cc <__sinit>
 800ee0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d0f3      	beq.n	800edfa <_fflush_r+0xa>
 800ee12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee14:	07d0      	lsls	r0, r2, #31
 800ee16:	d404      	bmi.n	800ee22 <_fflush_r+0x32>
 800ee18:	0599      	lsls	r1, r3, #22
 800ee1a:	d402      	bmi.n	800ee22 <_fflush_r+0x32>
 800ee1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee1e:	f7ff fb64 	bl	800e4ea <__retarget_lock_acquire_recursive>
 800ee22:	4628      	mov	r0, r5
 800ee24:	4621      	mov	r1, r4
 800ee26:	f7ff ff5f 	bl	800ece8 <__sflush_r>
 800ee2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee2c:	07da      	lsls	r2, r3, #31
 800ee2e:	4605      	mov	r5, r0
 800ee30:	d4e4      	bmi.n	800edfc <_fflush_r+0xc>
 800ee32:	89a3      	ldrh	r3, [r4, #12]
 800ee34:	059b      	lsls	r3, r3, #22
 800ee36:	d4e1      	bmi.n	800edfc <_fflush_r+0xc>
 800ee38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee3a:	f7ff fb57 	bl	800e4ec <__retarget_lock_release_recursive>
 800ee3e:	e7dd      	b.n	800edfc <_fflush_r+0xc>

0800ee40 <fiprintf>:
 800ee40:	b40e      	push	{r1, r2, r3}
 800ee42:	b503      	push	{r0, r1, lr}
 800ee44:	4601      	mov	r1, r0
 800ee46:	ab03      	add	r3, sp, #12
 800ee48:	4805      	ldr	r0, [pc, #20]	@ (800ee60 <fiprintf+0x20>)
 800ee4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee4e:	6800      	ldr	r0, [r0, #0]
 800ee50:	9301      	str	r3, [sp, #4]
 800ee52:	f7ff fca3 	bl	800e79c <_vfiprintf_r>
 800ee56:	b002      	add	sp, #8
 800ee58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee5c:	b003      	add	sp, #12
 800ee5e:	4770      	bx	lr
 800ee60:	2400003c 	.word	0x2400003c

0800ee64 <__swbuf_r>:
 800ee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee66:	460e      	mov	r6, r1
 800ee68:	4614      	mov	r4, r2
 800ee6a:	4605      	mov	r5, r0
 800ee6c:	b118      	cbz	r0, 800ee76 <__swbuf_r+0x12>
 800ee6e:	6a03      	ldr	r3, [r0, #32]
 800ee70:	b90b      	cbnz	r3, 800ee76 <__swbuf_r+0x12>
 800ee72:	f7ff fa2b 	bl	800e2cc <__sinit>
 800ee76:	69a3      	ldr	r3, [r4, #24]
 800ee78:	60a3      	str	r3, [r4, #8]
 800ee7a:	89a3      	ldrh	r3, [r4, #12]
 800ee7c:	071a      	lsls	r2, r3, #28
 800ee7e:	d501      	bpl.n	800ee84 <__swbuf_r+0x20>
 800ee80:	6923      	ldr	r3, [r4, #16]
 800ee82:	b943      	cbnz	r3, 800ee96 <__swbuf_r+0x32>
 800ee84:	4621      	mov	r1, r4
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 f82a 	bl	800eee0 <__swsetup_r>
 800ee8c:	b118      	cbz	r0, 800ee96 <__swbuf_r+0x32>
 800ee8e:	f04f 37ff 	mov.w	r7, #4294967295
 800ee92:	4638      	mov	r0, r7
 800ee94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee96:	6823      	ldr	r3, [r4, #0]
 800ee98:	6922      	ldr	r2, [r4, #16]
 800ee9a:	1a98      	subs	r0, r3, r2
 800ee9c:	6963      	ldr	r3, [r4, #20]
 800ee9e:	b2f6      	uxtb	r6, r6
 800eea0:	4283      	cmp	r3, r0
 800eea2:	4637      	mov	r7, r6
 800eea4:	dc05      	bgt.n	800eeb2 <__swbuf_r+0x4e>
 800eea6:	4621      	mov	r1, r4
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7ff ffa1 	bl	800edf0 <_fflush_r>
 800eeae:	2800      	cmp	r0, #0
 800eeb0:	d1ed      	bne.n	800ee8e <__swbuf_r+0x2a>
 800eeb2:	68a3      	ldr	r3, [r4, #8]
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	60a3      	str	r3, [r4, #8]
 800eeb8:	6823      	ldr	r3, [r4, #0]
 800eeba:	1c5a      	adds	r2, r3, #1
 800eebc:	6022      	str	r2, [r4, #0]
 800eebe:	701e      	strb	r6, [r3, #0]
 800eec0:	6962      	ldr	r2, [r4, #20]
 800eec2:	1c43      	adds	r3, r0, #1
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d004      	beq.n	800eed2 <__swbuf_r+0x6e>
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	07db      	lsls	r3, r3, #31
 800eecc:	d5e1      	bpl.n	800ee92 <__swbuf_r+0x2e>
 800eece:	2e0a      	cmp	r6, #10
 800eed0:	d1df      	bne.n	800ee92 <__swbuf_r+0x2e>
 800eed2:	4621      	mov	r1, r4
 800eed4:	4628      	mov	r0, r5
 800eed6:	f7ff ff8b 	bl	800edf0 <_fflush_r>
 800eeda:	2800      	cmp	r0, #0
 800eedc:	d0d9      	beq.n	800ee92 <__swbuf_r+0x2e>
 800eede:	e7d6      	b.n	800ee8e <__swbuf_r+0x2a>

0800eee0 <__swsetup_r>:
 800eee0:	b538      	push	{r3, r4, r5, lr}
 800eee2:	4b29      	ldr	r3, [pc, #164]	@ (800ef88 <__swsetup_r+0xa8>)
 800eee4:	4605      	mov	r5, r0
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	460c      	mov	r4, r1
 800eeea:	b118      	cbz	r0, 800eef4 <__swsetup_r+0x14>
 800eeec:	6a03      	ldr	r3, [r0, #32]
 800eeee:	b90b      	cbnz	r3, 800eef4 <__swsetup_r+0x14>
 800eef0:	f7ff f9ec 	bl	800e2cc <__sinit>
 800eef4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eef8:	0719      	lsls	r1, r3, #28
 800eefa:	d422      	bmi.n	800ef42 <__swsetup_r+0x62>
 800eefc:	06da      	lsls	r2, r3, #27
 800eefe:	d407      	bmi.n	800ef10 <__swsetup_r+0x30>
 800ef00:	2209      	movs	r2, #9
 800ef02:	602a      	str	r2, [r5, #0]
 800ef04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef08:	81a3      	strh	r3, [r4, #12]
 800ef0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef0e:	e033      	b.n	800ef78 <__swsetup_r+0x98>
 800ef10:	0758      	lsls	r0, r3, #29
 800ef12:	d512      	bpl.n	800ef3a <__swsetup_r+0x5a>
 800ef14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef16:	b141      	cbz	r1, 800ef2a <__swsetup_r+0x4a>
 800ef18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef1c:	4299      	cmp	r1, r3
 800ef1e:	d002      	beq.n	800ef26 <__swsetup_r+0x46>
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7ff fb11 	bl	800e548 <_free_r>
 800ef26:	2300      	movs	r3, #0
 800ef28:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	2300      	movs	r3, #0
 800ef34:	6063      	str	r3, [r4, #4]
 800ef36:	6923      	ldr	r3, [r4, #16]
 800ef38:	6023      	str	r3, [r4, #0]
 800ef3a:	89a3      	ldrh	r3, [r4, #12]
 800ef3c:	f043 0308 	orr.w	r3, r3, #8
 800ef40:	81a3      	strh	r3, [r4, #12]
 800ef42:	6923      	ldr	r3, [r4, #16]
 800ef44:	b94b      	cbnz	r3, 800ef5a <__swsetup_r+0x7a>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef50:	d003      	beq.n	800ef5a <__swsetup_r+0x7a>
 800ef52:	4621      	mov	r1, r4
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 f856 	bl	800f006 <__smakebuf_r>
 800ef5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef5e:	f013 0201 	ands.w	r2, r3, #1
 800ef62:	d00a      	beq.n	800ef7a <__swsetup_r+0x9a>
 800ef64:	2200      	movs	r2, #0
 800ef66:	60a2      	str	r2, [r4, #8]
 800ef68:	6962      	ldr	r2, [r4, #20]
 800ef6a:	4252      	negs	r2, r2
 800ef6c:	61a2      	str	r2, [r4, #24]
 800ef6e:	6922      	ldr	r2, [r4, #16]
 800ef70:	b942      	cbnz	r2, 800ef84 <__swsetup_r+0xa4>
 800ef72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ef76:	d1c5      	bne.n	800ef04 <__swsetup_r+0x24>
 800ef78:	bd38      	pop	{r3, r4, r5, pc}
 800ef7a:	0799      	lsls	r1, r3, #30
 800ef7c:	bf58      	it	pl
 800ef7e:	6962      	ldrpl	r2, [r4, #20]
 800ef80:	60a2      	str	r2, [r4, #8]
 800ef82:	e7f4      	b.n	800ef6e <__swsetup_r+0x8e>
 800ef84:	2000      	movs	r0, #0
 800ef86:	e7f7      	b.n	800ef78 <__swsetup_r+0x98>
 800ef88:	2400003c 	.word	0x2400003c

0800ef8c <_sbrk_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d06      	ldr	r5, [pc, #24]	@ (800efa8 <_sbrk_r+0x1c>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	602b      	str	r3, [r5, #0]
 800ef98:	f7f1 fc3e 	bl	8000818 <_sbrk>
 800ef9c:	1c43      	adds	r3, r0, #1
 800ef9e:	d102      	bne.n	800efa6 <_sbrk_r+0x1a>
 800efa0:	682b      	ldr	r3, [r5, #0]
 800efa2:	b103      	cbz	r3, 800efa6 <_sbrk_r+0x1a>
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	bd38      	pop	{r3, r4, r5, pc}
 800efa8:	24007e04 	.word	0x24007e04

0800efac <abort>:
 800efac:	b508      	push	{r3, lr}
 800efae:	2006      	movs	r0, #6
 800efb0:	f000 f88e 	bl	800f0d0 <raise>
 800efb4:	2001      	movs	r0, #1
 800efb6:	f7f1 fbb7 	bl	8000728 <_exit>

0800efba <__swhatbuf_r>:
 800efba:	b570      	push	{r4, r5, r6, lr}
 800efbc:	460c      	mov	r4, r1
 800efbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efc2:	2900      	cmp	r1, #0
 800efc4:	b096      	sub	sp, #88	@ 0x58
 800efc6:	4615      	mov	r5, r2
 800efc8:	461e      	mov	r6, r3
 800efca:	da0d      	bge.n	800efe8 <__swhatbuf_r+0x2e>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800efd2:	f04f 0100 	mov.w	r1, #0
 800efd6:	bf14      	ite	ne
 800efd8:	2340      	movne	r3, #64	@ 0x40
 800efda:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800efde:	2000      	movs	r0, #0
 800efe0:	6031      	str	r1, [r6, #0]
 800efe2:	602b      	str	r3, [r5, #0]
 800efe4:	b016      	add	sp, #88	@ 0x58
 800efe6:	bd70      	pop	{r4, r5, r6, pc}
 800efe8:	466a      	mov	r2, sp
 800efea:	f000 f879 	bl	800f0e0 <_fstat_r>
 800efee:	2800      	cmp	r0, #0
 800eff0:	dbec      	blt.n	800efcc <__swhatbuf_r+0x12>
 800eff2:	9901      	ldr	r1, [sp, #4]
 800eff4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800eff8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800effc:	4259      	negs	r1, r3
 800effe:	4159      	adcs	r1, r3
 800f000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f004:	e7eb      	b.n	800efde <__swhatbuf_r+0x24>

0800f006 <__smakebuf_r>:
 800f006:	898b      	ldrh	r3, [r1, #12]
 800f008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f00a:	079d      	lsls	r5, r3, #30
 800f00c:	4606      	mov	r6, r0
 800f00e:	460c      	mov	r4, r1
 800f010:	d507      	bpl.n	800f022 <__smakebuf_r+0x1c>
 800f012:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f016:	6023      	str	r3, [r4, #0]
 800f018:	6123      	str	r3, [r4, #16]
 800f01a:	2301      	movs	r3, #1
 800f01c:	6163      	str	r3, [r4, #20]
 800f01e:	b003      	add	sp, #12
 800f020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f022:	ab01      	add	r3, sp, #4
 800f024:	466a      	mov	r2, sp
 800f026:	f7ff ffc8 	bl	800efba <__swhatbuf_r>
 800f02a:	9f00      	ldr	r7, [sp, #0]
 800f02c:	4605      	mov	r5, r0
 800f02e:	4639      	mov	r1, r7
 800f030:	4630      	mov	r0, r6
 800f032:	f7ff fafd 	bl	800e630 <_malloc_r>
 800f036:	b948      	cbnz	r0, 800f04c <__smakebuf_r+0x46>
 800f038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f03c:	059a      	lsls	r2, r3, #22
 800f03e:	d4ee      	bmi.n	800f01e <__smakebuf_r+0x18>
 800f040:	f023 0303 	bic.w	r3, r3, #3
 800f044:	f043 0302 	orr.w	r3, r3, #2
 800f048:	81a3      	strh	r3, [r4, #12]
 800f04a:	e7e2      	b.n	800f012 <__smakebuf_r+0xc>
 800f04c:	89a3      	ldrh	r3, [r4, #12]
 800f04e:	6020      	str	r0, [r4, #0]
 800f050:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	9b01      	ldr	r3, [sp, #4]
 800f058:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f05c:	b15b      	cbz	r3, 800f076 <__smakebuf_r+0x70>
 800f05e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f062:	4630      	mov	r0, r6
 800f064:	f000 f84e 	bl	800f104 <_isatty_r>
 800f068:	b128      	cbz	r0, 800f076 <__smakebuf_r+0x70>
 800f06a:	89a3      	ldrh	r3, [r4, #12]
 800f06c:	f023 0303 	bic.w	r3, r3, #3
 800f070:	f043 0301 	orr.w	r3, r3, #1
 800f074:	81a3      	strh	r3, [r4, #12]
 800f076:	89a3      	ldrh	r3, [r4, #12]
 800f078:	431d      	orrs	r5, r3
 800f07a:	81a5      	strh	r5, [r4, #12]
 800f07c:	e7cf      	b.n	800f01e <__smakebuf_r+0x18>

0800f07e <_raise_r>:
 800f07e:	291f      	cmp	r1, #31
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4605      	mov	r5, r0
 800f084:	460c      	mov	r4, r1
 800f086:	d904      	bls.n	800f092 <_raise_r+0x14>
 800f088:	2316      	movs	r3, #22
 800f08a:	6003      	str	r3, [r0, #0]
 800f08c:	f04f 30ff 	mov.w	r0, #4294967295
 800f090:	bd38      	pop	{r3, r4, r5, pc}
 800f092:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f094:	b112      	cbz	r2, 800f09c <_raise_r+0x1e>
 800f096:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f09a:	b94b      	cbnz	r3, 800f0b0 <_raise_r+0x32>
 800f09c:	4628      	mov	r0, r5
 800f09e:	f000 f853 	bl	800f148 <_getpid_r>
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	4601      	mov	r1, r0
 800f0a6:	4628      	mov	r0, r5
 800f0a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f0ac:	f000 b83a 	b.w	800f124 <_kill_r>
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d00a      	beq.n	800f0ca <_raise_r+0x4c>
 800f0b4:	1c59      	adds	r1, r3, #1
 800f0b6:	d103      	bne.n	800f0c0 <_raise_r+0x42>
 800f0b8:	2316      	movs	r3, #22
 800f0ba:	6003      	str	r3, [r0, #0]
 800f0bc:	2001      	movs	r0, #1
 800f0be:	e7e7      	b.n	800f090 <_raise_r+0x12>
 800f0c0:	2100      	movs	r1, #0
 800f0c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f0c6:	4620      	mov	r0, r4
 800f0c8:	4798      	blx	r3
 800f0ca:	2000      	movs	r0, #0
 800f0cc:	e7e0      	b.n	800f090 <_raise_r+0x12>
	...

0800f0d0 <raise>:
 800f0d0:	4b02      	ldr	r3, [pc, #8]	@ (800f0dc <raise+0xc>)
 800f0d2:	4601      	mov	r1, r0
 800f0d4:	6818      	ldr	r0, [r3, #0]
 800f0d6:	f7ff bfd2 	b.w	800f07e <_raise_r>
 800f0da:	bf00      	nop
 800f0dc:	2400003c 	.word	0x2400003c

0800f0e0 <_fstat_r>:
 800f0e0:	b538      	push	{r3, r4, r5, lr}
 800f0e2:	4d07      	ldr	r5, [pc, #28]	@ (800f100 <_fstat_r+0x20>)
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	4608      	mov	r0, r1
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	602b      	str	r3, [r5, #0]
 800f0ee:	f7f1 fb6b 	bl	80007c8 <_fstat>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d102      	bne.n	800f0fc <_fstat_r+0x1c>
 800f0f6:	682b      	ldr	r3, [r5, #0]
 800f0f8:	b103      	cbz	r3, 800f0fc <_fstat_r+0x1c>
 800f0fa:	6023      	str	r3, [r4, #0]
 800f0fc:	bd38      	pop	{r3, r4, r5, pc}
 800f0fe:	bf00      	nop
 800f100:	24007e04 	.word	0x24007e04

0800f104 <_isatty_r>:
 800f104:	b538      	push	{r3, r4, r5, lr}
 800f106:	4d06      	ldr	r5, [pc, #24]	@ (800f120 <_isatty_r+0x1c>)
 800f108:	2300      	movs	r3, #0
 800f10a:	4604      	mov	r4, r0
 800f10c:	4608      	mov	r0, r1
 800f10e:	602b      	str	r3, [r5, #0]
 800f110:	f7f1 fb6a 	bl	80007e8 <_isatty>
 800f114:	1c43      	adds	r3, r0, #1
 800f116:	d102      	bne.n	800f11e <_isatty_r+0x1a>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b103      	cbz	r3, 800f11e <_isatty_r+0x1a>
 800f11c:	6023      	str	r3, [r4, #0]
 800f11e:	bd38      	pop	{r3, r4, r5, pc}
 800f120:	24007e04 	.word	0x24007e04

0800f124 <_kill_r>:
 800f124:	b538      	push	{r3, r4, r5, lr}
 800f126:	4d07      	ldr	r5, [pc, #28]	@ (800f144 <_kill_r+0x20>)
 800f128:	2300      	movs	r3, #0
 800f12a:	4604      	mov	r4, r0
 800f12c:	4608      	mov	r0, r1
 800f12e:	4611      	mov	r1, r2
 800f130:	602b      	str	r3, [r5, #0]
 800f132:	f7f1 fae7 	bl	8000704 <_kill>
 800f136:	1c43      	adds	r3, r0, #1
 800f138:	d102      	bne.n	800f140 <_kill_r+0x1c>
 800f13a:	682b      	ldr	r3, [r5, #0]
 800f13c:	b103      	cbz	r3, 800f140 <_kill_r+0x1c>
 800f13e:	6023      	str	r3, [r4, #0]
 800f140:	bd38      	pop	{r3, r4, r5, pc}
 800f142:	bf00      	nop
 800f144:	24007e04 	.word	0x24007e04

0800f148 <_getpid_r>:
 800f148:	f7f1 bad3 	b.w	80006f2 <_getpid>

0800f14c <_init>:
 800f14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14e:	bf00      	nop
 800f150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f152:	bc08      	pop	{r3}
 800f154:	469e      	mov	lr, r3
 800f156:	4770      	bx	lr

0800f158 <_fini>:
 800f158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f15a:	bf00      	nop
 800f15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f15e:	bc08      	pop	{r3}
 800f160:	469e      	mov	lr, r3
 800f162:	4770      	bx	lr
