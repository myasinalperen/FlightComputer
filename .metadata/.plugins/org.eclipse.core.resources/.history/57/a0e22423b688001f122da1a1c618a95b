
FlightComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c7c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008f1c  08008f1c  00009f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009014  08009014  0000a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800901c  0800901c  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009020  08009020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009024  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009088  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  080090e8  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004810  24000124  08009148  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004934  08009148  0000b934  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f491  00000000  00000000  0000b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053e0  00000000  00000000  0003a5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be0  00000000  00000000  0003f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001597  00000000  00000000  000415a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee11  00000000  00000000  00042b3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026b42  00000000  00000000  00081950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176bc8  00000000  00000000  000a8492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021f05a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078f8  00000000  00000000  0021f0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00226998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008f04 	.word	0x08008f04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08008f04 	.word	0x08008f04

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZN3GKA8vGKAtaskEPKv>:
GKA::~GKA() {
	// TODO Auto-generated destructor stub
}

void GKA::vGKAtask(void const* argument)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
   while (1) {
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <_ZN3GKA8vGKAtaskEPKv+0x8>

080005dc <_ZN3GPS8vGPStaskEPKv>:
GPS::~GPS() {
	// TODO Auto-generated destructor stub
}

 void GPS::vGPStask(void const* argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
    while (1) {

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ea:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <_ZN3GPS8vGPStaskEPKv+0x18>)
 80005ec:	f001 fdc6 	bl	800217c <HAL_GPIO_WritePin>
 80005f0:	e7f8      	b.n	80005e4 <_ZN3GPS8vGPStaskEPKv+0x8>
 80005f2:	bf00      	nop
 80005f4:	58020400 	.word	0x58020400

080005f8 <_ZN3IMU8vIMUtaskEPKv>:
IMU::~IMU() {
	// TODO Auto-generated destructor stub
}

void IMU::vIMUtask(void const* argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4801      	ldr	r0, [pc, #4]	@ (800060c <_ZN3IMU8vIMUtaskEPKv+0x14>)
 8000606:	f001 fdb9 	bl	800217c <HAL_GPIO_WritePin>
 800060a:	e7f9      	b.n	8000600 <_ZN3IMU8vIMUtaskEPKv+0x8>
 800060c:	58020400 	.word	0x58020400

08000610 <_ZN3NAV8vNAVtaskEPKv>:
NAV::~NAV() {
	// TODO Auto-generated destructor stub
}

 void NAV::vNAVtask(void const* argument)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	4801      	ldr	r0, [pc, #4]	@ (8000624 <_ZN3NAV8vNAVtaskEPKv+0x14>)
 800061e:	f001 fdad 	bl	800217c <HAL_GPIO_WritePin>
 8000622:	e7f9      	b.n	8000618 <_ZN3NAV8vNAVtaskEPKv+0x8>
 8000624:	58021000 	.word	0x58021000

08000628 <_ZN19SistemYapilandiriciC1Ev>:

/**
 * @brief SistemYapilandirici constructor
 */

 SistemYapilandirici::SistemYapilandirici()
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
{
	 //Instance();
	islevBaslat();
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f811 	bl	8000658 <_ZN19SistemYapilandirici11islevBaslatEv>
}
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	4618      	mov	r0, r3
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <_ZN19SistemYapilandiriciD1Ev>:


/**
 * @brief SistemYapilandirici deconstructor
 */
 SistemYapilandirici::~SistemYapilandirici()
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
{
	}
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
	...

08000658 <_ZN19SistemYapilandirici11islevBaslatEv>:

/**
 * @brief Sistemde olan tasklari baslatir
 */
void SistemYapilandirici::islevBaslat()
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b0a2      	sub	sp, #136	@ 0x88
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]


    /* definition and creation of IMUtask */
    osThreadId IMUtaskHandle;
    osThreadDef(IMUtask, IMU::vIMUtask, osPriorityNormal, 0, configTOTAL_HEAP_SIZE);
 8000660:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <_ZN19SistemYapilandirici11islevBaslatEv+0x9c>)
 8000662:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000666:	461d      	mov	r5, r3
 8000668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8000674:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f006 fc36 	bl	8006eec <osThreadCreate>
 8000680:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    }

	  /* definition and creation of GPStask */
		osThreadId GPStaskHandle;
	  osThreadDef(GPStask, GPS::vGPStask, osPriorityNormal, 0, configTOTAL_HEAP_SIZE);
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <_ZN19SistemYapilandirici11islevBaslatEv+0xa0>)
 8000686:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  GPStaskHandle = osThreadCreate(osThread(GPStask), NULL);
 8000698:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fc24 	bl	8006eec <osThreadCreate>
 80006a4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80



	    /* definition and creation of GKAtask */
	    osThreadId GKAtaskHandle;
		osThreadDef(GKAtask, GKA::vGKAtask, osPriorityNormal, 0, configTOTAL_HEAP_SIZE);
 80006a8:	4b14      	ldr	r3, [pc, #80]	@ (80006fc <_ZN19SistemYapilandirici11islevBaslatEv+0xa4>)
 80006aa:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    GKAtaskHandle = osThreadCreate(osThread(GKAtask), NULL);
 80006bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fc12 	bl	8006eec <osThreadCreate>
 80006c8:	67f8      	str	r0, [r7, #124]	@ 0x7c

	    }

	    /* definition and creation of GKAtask */
	    osThreadId NAVtaskHandle;
	    osThreadDef(NAVtask,NAV::vNAVtask, osPriorityNormal, 0, configTOTAL_HEAP_SIZE);
 80006ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <_ZN19SistemYapilandirici11islevBaslatEv+0xa8>)
 80006cc:	f107 0408 	add.w	r4, r7, #8
 80006d0:	461d      	mov	r5, r3
 80006d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    NAVtaskHandle = osThreadCreate(osThread(NAVtask), NULL);
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f006 fc01 	bl	8006eec <osThreadCreate>
 80006ea:	67b8      	str	r0, [r7, #120]	@ 0x78





	}
 80006ec:	bf00      	nop
 80006ee:	3788      	adds	r7, #136	@ 0x88
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	08008f24 	.word	0x08008f24
 80006f8:	08008f48 	.word	0x08008f48
 80006fc:	08008f6c 	.word	0x08008f6c
 8000700:	08008f90 	.word	0x08008f90

08000704 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4a07      	ldr	r2, [pc, #28]	@ (8000730 <vApplicationGetIdleTaskMemory+0x2c>)
 8000714:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	4a06      	ldr	r2, [pc, #24]	@ (8000734 <vApplicationGetIdleTaskMemory+0x30>)
 800071a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	24000140 	.word	0x24000140
 8000734:	240001e0 	.word	0x240001e0

08000738 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000738:	b5b0      	push	{r4, r5, r7, lr}
 800073a:	b08a      	sub	sp, #40	@ 0x28
 800073c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800073e:	f000 fdb9 	bl	80012b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000742:	f000 f831 	bl	80007a8 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000746:	f000 f9a5 	bl	8000a94 <_ZL12MX_GPIO_Initv>
	MX_ETH_Init();
 800074a:	f000 f8bb 	bl	80008c4 <_ZL11MX_ETH_Initv>
	MX_USART3_UART_Init();
 800074e:	f000 f90b 	bl	8000968 <_ZL19MX_USART3_UART_Initv>
	MX_USB_OTG_FS_PCD_Init();
 8000752:	f000 f969 	bl	8000a28 <_ZL22MX_USB_OTG_FS_PCD_Initv>

	/* USER CODE END 2 */

	  /* Create the semaphores(s) */
	  /* definition and creation of BinSem */
	  osSemaphoreDef(BinSem);
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
	  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f006 fc0d 	bl	8006f84 <osSemaphoreCreate>
 800076a:	4603      	mov	r3, r0
 800076c:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <main+0x64>)
 800076e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 8000770:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <main+0x68>)
 8000772:	1d3c      	adds	r4, r7, #4
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fbb0 	bl	8006eec <osThreadCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	4a05      	ldr	r2, [pc, #20]	@ (80007a4 <main+0x6c>)
 8000790:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000792:	f006 fba4 	bl	8006ede <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000796:	bf00      	nop
 8000798:	e7fd      	b.n	8000796 <main+0x5e>
 800079a:	bf00      	nop
 800079c:	24000a44 	.word	0x24000a44
 80007a0:	08008fb8 	.word	0x08008fb8
 80007a4:	24000a40 	.word	0x24000a40

080007a8 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b09c      	sub	sp, #112	@ 0x70
 80007ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007b2:	224c      	movs	r2, #76	@ 0x4c
 80007b4:	2100      	movs	r1, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f008 fac8 	bl	8008d4c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fac2 	bl	8008d4c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007c8:	2002      	movs	r0, #2
 80007ca:	f001 fe21 	bl	8002410 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ce:	2300      	movs	r3, #0
 80007d0:	603b      	str	r3, [r7, #0]
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <_Z18SystemClock_Configv+0x114>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007d6:	4a39      	ldr	r2, [pc, #228]	@ (80008bc <_Z18SystemClock_Configv+0x114>)
 80007d8:	f023 0301 	bic.w	r3, r3, #1
 80007dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <_Z18SystemClock_Configv+0x114>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	f003 0301 	and.w	r3, r3, #1
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	4b35      	ldr	r3, [pc, #212]	@ (80008c0 <_Z18SystemClock_Configv+0x118>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007f0:	4a33      	ldr	r2, [pc, #204]	@ (80008c0 <_Z18SystemClock_Configv+0x118>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <_Z18SystemClock_Configv+0x118>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000804:	bf00      	nop
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <_Z18SystemClock_Configv+0x118>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800080e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000812:	bf14      	ite	ne
 8000814:	2301      	movne	r3, #1
 8000816:	2300      	moveq	r3, #0
 8000818:	b2db      	uxtb	r3, r3
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f3      	bne.n	8000806 <_Z18SystemClock_Configv+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800081e:	2303      	movs	r3, #3
 8000820:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000822:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000828:	2301      	movs	r3, #1
 800082a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000834:	2302      	movs	r3, #2
 8000836:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 24;
 800083c:	2318      	movs	r3, #24
 800083e:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000840:	2302      	movs	r3, #2
 8000842:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000844:	2304      	movs	r3, #4
 8000846:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000848:	2302      	movs	r3, #2
 800084a:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800084c:	230c      	movs	r3, #12
 800084e:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000850:	2300      	movs	r3, #0
 8000852:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000854:	2300      	movs	r3, #0
 8000856:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fe21 	bl	80024a4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	bf14      	ite	ne
 8000868:	2301      	movne	r3, #1
 800086a:	2300      	moveq	r3, #0
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <_Z18SystemClock_Configv+0xce>
		Error_Handler();
 8000872:	f000 fa0f 	bl	8000c94 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000876:	233f      	movs	r3, #63	@ 0x3f
 8000878:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800088a:	2340      	movs	r3, #64	@ 0x40
 800088c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2101      	movs	r1, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fa5c 	bl	8002d58 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	bf14      	ite	ne
 80008a6:	2301      	movne	r3, #1
 80008a8:	2300      	moveq	r3, #0
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <_Z18SystemClock_Configv+0x10c>
		Error_Handler();
 80008b0:	f000 f9f0 	bl	8000c94 <Error_Handler>
	}
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	@ 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	58000400 	.word	0x58000400
 80008c0:	58024800 	.word	0x58024800

080008c4 <_ZL11MX_ETH_Initv>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 80008ca:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <_ZL11MX_ETH_Initv+0x90>)
 80008cc:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80008ce:	4b22      	ldr	r3, [pc, #136]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80008d4:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008d6:	2280      	movs	r2, #128	@ 0x80
 80008d8:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80008da:	4b1f      	ldr	r3, [pc, #124]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008dc:	22e1      	movs	r2, #225	@ 0xe1
 80008de:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 80008f4:	4a18      	ldr	r2, [pc, #96]	@ (8000958 <_ZL11MX_ETH_Initv+0x94>)
 80008f6:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 8000900:	4a16      	ldr	r2, [pc, #88]	@ (800095c <_ZL11MX_ETH_Initv+0x98>)
 8000902:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 8000906:	4a16      	ldr	r2, [pc, #88]	@ (8000960 <_ZL11MX_ETH_Initv+0x9c>)
 8000908:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 800090c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000910:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000912:	480f      	ldr	r0, [pc, #60]	@ (8000950 <_ZL11MX_ETH_Initv+0x8c>)
 8000914:	f000 fe4e 	bl	80015b4 <HAL_ETH_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	bf14      	ite	ne
 800091e:	2301      	movne	r3, #1
 8000920:	2300      	moveq	r3, #0
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <_ZL11MX_ETH_Initv+0x68>
		Error_Handler();
 8000928:	f000 f9b4 	bl	8000c94 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 800092c:	2238      	movs	r2, #56	@ 0x38
 800092e:	2100      	movs	r1, #0
 8000930:	480c      	ldr	r0, [pc, #48]	@ (8000964 <_ZL11MX_ETH_Initv+0xa0>)
 8000932:	f008 fa0b 	bl	8008d4c <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <_ZL11MX_ETH_Initv+0xa0>)
 8000938:	2221      	movs	r2, #33	@ 0x21
 800093a:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800093c:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <_ZL11MX_ETH_Initv+0xa0>)
 800093e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000942:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000944:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <_ZL11MX_ETH_Initv+0xa0>)
 8000946:	2200      	movs	r2, #0
 8000948:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	24000418 	.word	0x24000418
 8000954:	40028000 	.word	0x40028000
 8000958:	24000a48 	.word	0x24000a48
 800095c:	240000c4 	.word	0x240000c4
 8000960:	24000064 	.word	0x24000064
 8000964:	240003e0 	.word	0x240003e0

08000968 <_ZL19MX_USART3_UART_Initv>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800096c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800096e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a24 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8000970:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000972:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b29      	ldr	r3, [pc, #164]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b27      	ldr	r3, [pc, #156]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000986:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b24      	ldr	r3, [pc, #144]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b23      	ldr	r3, [pc, #140]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b21      	ldr	r3, [pc, #132]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80009b0:	481b      	ldr	r0, [pc, #108]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b2:	f004 fe99 	bl	80056e8 <HAL_UART_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	bf14      	ite	ne
 80009bc:	2301      	movne	r3, #1
 80009be:	2300      	moveq	r3, #0
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_ZL19MX_USART3_UART_Initv+0x62>
		Error_Handler();
 80009c6:	f000 f965 	bl	8000c94 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4814      	ldr	r0, [pc, #80]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ce:	f005 fe9c 	bl	800670a <HAL_UARTEx_SetTxFifoThreshold>
 80009d2:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_ZL19MX_USART3_UART_Initv+0x7e>
		Error_Handler();
 80009e2:	f000 f957 	bl	8000c94 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 80009e6:	2100      	movs	r1, #0
 80009e8:	480d      	ldr	r0, [pc, #52]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ea:	f005 fecc 	bl	8006786 <HAL_UARTEx_SetRxFifoThreshold>
 80009ee:	4603      	mov	r3, r0
			!= HAL_OK) {
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <_ZL19MX_USART3_UART_Initv+0x9a>
		Error_Handler();
 80009fe:	f000 f949 	bl	8000c94 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000a02:	4807      	ldr	r0, [pc, #28]	@ (8000a20 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a04:	f005 fe48 	bl	8006698 <HAL_UARTEx_DisableFifoMode>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL19MX_USART3_UART_Initv+0xb4>
		Error_Handler();
 8000a18:	f000 f93c 	bl	8000c94 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	240004c8 	.word	0x240004c8
 8000a24:	40004800 	.word	0x40004800

08000a28 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a34:	2209      	movs	r2, #9
 8000a36:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a38:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a50:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a56:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	735a      	strb	r2, [r3, #13]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000a6e:	4807      	ldr	r0, [pc, #28]	@ (8000a8c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a70:	f001 fb9d 	bl	80021ae <HAL_PCD_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bf14      	ite	ne
 8000a7a:	2301      	movne	r3, #1
 8000a7c:	2300      	moveq	r3, #0
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
		Error_Handler();
 8000a84:	f000 f906 	bl	8000c94 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	2400055c 	.word	0x2400055c
 8000a90:	40080000 	.word	0x40080000

08000a94 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aaa:	4b62      	ldr	r3, [pc, #392]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a60      	ldr	r2, [pc, #384]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ab2:	f043 0304 	orr.w	r3, r3, #4
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b5e      	ldr	r3, [pc, #376]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ace:	4a59      	ldr	r2, [pc, #356]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad8:	4b56      	ldr	r3, [pc, #344]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	4b53      	ldr	r3, [pc, #332]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aec:	4a51      	ldr	r2, [pc, #324]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b04:	4b4b      	ldr	r3, [pc, #300]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b0c:	f043 0302 	orr.w	r3, r3, #2
 8000b10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b14:	4b47      	ldr	r3, [pc, #284]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b44      	ldr	r3, [pc, #272]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	4a42      	ldr	r2, [pc, #264]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b32:	4b40      	ldr	r3, [pc, #256]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b40:	4b3c      	ldr	r3, [pc, #240]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	4a3b      	ldr	r2, [pc, #236]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b50:	4b38      	ldr	r3, [pc, #224]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5e:	4b35      	ldr	r3, [pc, #212]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	4a33      	ldr	r2, [pc, #204]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b66:	f043 0310 	orr.w	r3, r3, #16
 8000b6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b6e:	4b31      	ldr	r3, [pc, #196]	@ (8000c34 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b74:	f003 0310 	and.w	r3, r3, #16
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b82:	482d      	ldr	r0, [pc, #180]	@ (8000c38 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000b84:	f001 fafa 	bl	800217c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b8e:	482b      	ldr	r0, [pc, #172]	@ (8000c3c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000b90:	f001 faf4 	bl	800217c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	2102      	movs	r1, #2
 8000b98:	4829      	ldr	r0, [pc, #164]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000b9a:	f001 faef 	bl	800217c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ba2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 031c 	add.w	r3, r7, #28
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4824      	ldr	r0, [pc, #144]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000bb4:	f001 f932 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin;
 8000bb8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4819      	ldr	r0, [pc, #100]	@ (8000c38 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000bd2:	f001 f923 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	4619      	mov	r1, r3
 8000bee:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <_ZL12MX_GPIO_Initv+0x1a8>)
 8000bf0:	f001 f914 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000bfc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000c0a:	f001 f907 	bl	8001e1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4806      	ldr	r0, [pc, #24]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000c26:	f001 f8f9 	bl	8001e1c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3730      	adds	r7, #48	@ 0x30
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020400 	.word	0x58020400
 8000c3c:	58020c00 	.word	0x58020c00
 8000c40:	58021000 	.word	0x58021000
 8000c44:	58020800 	.word	0x58020800
 8000c48:	58021800 	.word	0x58021800

08000c4c <_Z16StartDefaultTaskPKv>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */

	SistemYapilandirici();
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fce5 	bl	8000628 <_ZN19SistemYapilandiriciC1Ev>
 8000c5e:	f107 030c 	add.w	r3, r7, #12
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff fcec 	bl	8000640 <_ZN19SistemYapilandiriciD1Ev>
	/* USER CODE END 5 */
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a04      	ldr	r2, [pc, #16]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000c82:	f000 fb53 	bl	800132c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40010000 	.word	0x40010000

08000c94 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c98:	b672      	cpsid	i
}
 8000c9a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <Error_Handler+0x8>

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <HAL_MspInit+0x38>)
 8000ca8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <HAL_MspInit+0x38>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x38>)
 8000cb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f06f 0001 	mvn.w	r0, #1
 8000ccc:	f000 fc4a 	bl	8001564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a59      	ldr	r2, [pc, #356]	@ (8000e60 <HAL_ETH_MspInit+0x184>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 80ab 	bne.w	8000e56 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d00:	4b58      	ldr	r3, [pc, #352]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d06:	4a57      	ldr	r2, [pc, #348]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d10:	4b54      	ldr	r3, [pc, #336]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d1e:	4b51      	ldr	r3, [pc, #324]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d24:	4a4f      	ldr	r2, [pc, #316]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d3c:	4b49      	ldr	r3, [pc, #292]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	4a48      	ldr	r2, [pc, #288]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4c:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a40      	ldr	r2, [pc, #256]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a39      	ldr	r2, [pc, #228]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a31      	ldr	r2, [pc, #196]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	4a2a      	ldr	r2, [pc, #168]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc4:	4b27      	ldr	r3, [pc, #156]	@ (8000e64 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dd2:	2332      	movs	r3, #50	@ 0x32
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de2:	230b      	movs	r3, #11
 8000de4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	481e      	ldr	r0, [pc, #120]	@ (8000e68 <HAL_ETH_MspInit+0x18c>)
 8000dee:	f001 f815 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000df2:	2386      	movs	r3, #134	@ 0x86
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e02:	230b      	movs	r3, #11
 8000e04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4817      	ldr	r0, [pc, #92]	@ (8000e6c <HAL_ETH_MspInit+0x190>)
 8000e0e:	f001 f805 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e24:	230b      	movs	r3, #11
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4810      	ldr	r0, [pc, #64]	@ (8000e70 <HAL_ETH_MspInit+0x194>)
 8000e30:	f000 fff4 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e34:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e46:	230b      	movs	r3, #11
 8000e48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4808      	ldr	r0, [pc, #32]	@ (8000e74 <HAL_ETH_MspInit+0x198>)
 8000e52:	f000 ffe3 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	@ 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40028000 	.word	0x40028000
 8000e64:	58024400 	.word	0x58024400
 8000e68:	58020800 	.word	0x58020800
 8000e6c:	58020000 	.word	0x58020000
 8000e70:	58020400 	.word	0x58020400
 8000e74:	58021800 	.word	0x58021800

08000e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	22c0      	movs	r2, #192	@ 0xc0
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f007 ff57 	bl	8008d4c <memset>
  if(huart->Instance==USART3)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a27      	ldr	r2, [pc, #156]	@ (8000f40 <HAL_UART_MspInit+0xc8>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d146      	bne.n	8000f36 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ea8:	f04f 0202 	mov.w	r2, #2
 8000eac:	f04f 0300 	mov.w	r3, #0
 8000eb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fb18 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000eca:	f7ff fee3 	bl	8000c94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000ed6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ee4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef2:	4a14      	ldr	r2, [pc, #80]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <HAL_UART_MspInit+0xcc>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f24:	2307      	movs	r3, #7
 8000f26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f2a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	@ (8000f48 <HAL_UART_MspInit+0xd0>)
 8000f32:	f000 ff73 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f36:	bf00      	nop
 8000f38:	37e8      	adds	r7, #232	@ 0xe8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40004800 	.word	0x40004800
 8000f44:	58024400 	.word	0x58024400
 8000f48:	58020c00 	.word	0x58020c00

08000f4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	22c0      	movs	r2, #192	@ 0xc0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f007 feed 	bl	8008d4c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a30      	ldr	r2, [pc, #192]	@ (8001038 <HAL_PCD_MspInit+0xec>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d159      	bne.n	8001030 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f7c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f80:	f04f 0300 	mov.w	r3, #0
 8000f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f88:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 faad 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000fa0:	f7ff fe78 	bl	8000c94 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fa4:	f001 fa6e 	bl	8002484 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b24      	ldr	r3, [pc, #144]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fae:	4a23      	ldr	r2, [pc, #140]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000fc6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000fe0:	230a      	movs	r3, #10
 8000fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4814      	ldr	r0, [pc, #80]	@ (8001040 <HAL_PCD_MspInit+0xf4>)
 8000fee:	f000 ff15 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ff2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <HAL_PCD_MspInit+0xf4>)
 800100e:	f000 ff05 	bl	8001e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001018:	4a08      	ldr	r2, [pc, #32]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 800101a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800101e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_PCD_MspInit+0xf0>)
 8001024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001030:	bf00      	nop
 8001032:	37e8      	adds	r7, #232	@ 0xe8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40080000 	.word	0x40080000
 800103c:	58024400 	.word	0x58024400
 8001040:	58020000 	.word	0x58020000

08001044 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	@ 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b0f      	cmp	r3, #15
 8001050:	d842      	bhi.n	80010d8 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001052:	2200      	movs	r2, #0
 8001054:	6879      	ldr	r1, [r7, #4]
 8001056:	2019      	movs	r0, #25
 8001058:	f000 fa84 	bl	8001564 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800105c:	2019      	movs	r0, #25
 800105e:	f000 fa9b 	bl	8001598 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001062:	4a23      	ldr	r2, [pc, #140]	@ (80010f0 <HAL_InitTick+0xac>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001068:	4b22      	ldr	r3, [pc, #136]	@ (80010f4 <HAL_InitTick+0xb0>)
 800106a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800106e:	4a21      	ldr	r2, [pc, #132]	@ (80010f4 <HAL_InitTick+0xb0>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001078:	4b1e      	ldr	r3, [pc, #120]	@ (80010f4 <HAL_InitTick+0xb0>)
 800107a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001086:	f107 020c 	add.w	r2, r7, #12
 800108a:	f107 0310 	add.w	r3, r7, #16
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f002 f9ed 	bl	8003470 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001096:	f002 f9d5 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 800109a:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <HAL_InitTick+0xb4>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3b01      	subs	r3, #1
 80010a8:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_InitTick+0xb8>)
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <HAL_InitTick+0xbc>)
 80010ae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <HAL_InitTick+0xb8>)
 80010b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010b6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b8:	4a10      	ldr	r2, [pc, #64]	@ (80010fc <HAL_InitTick+0xb8>)
 80010ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010bc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010be:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <HAL_InitTick+0xb8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HAL_InitTick+0xb8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010ca:	480c      	ldr	r0, [pc, #48]	@ (80010fc <HAL_InitTick+0xb8>)
 80010cc:	f004 f83e 	bl	800514c <HAL_TIM_Base_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d107      	bne.n	80010e6 <HAL_InitTick+0xa2>
 80010d6:	e001      	b.n	80010dc <HAL_InitTick+0x98>
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e005      	b.n	80010e8 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <HAL_InitTick+0xb8>)
 80010de:	f004 f897 	bl	8005210 <HAL_TIM_Base_Start_IT>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e000      	b.n	80010e8 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3738      	adds	r7, #56	@ 0x38
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	24000008 	.word	0x24000008
 80010f4:	58024400 	.word	0x58024400
 80010f8:	431bde83 	.word	0x431bde83
 80010fc:	24000a50 	.word	0x24000a50
 8001100:	40010000 	.word	0x40010000

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <NMI_Handler+0x4>

0800110c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <MemManage_Handler+0x4>

0800111c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <BusFault_Handler+0x4>

08001124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <UsageFault_Handler+0x4>

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM1_UP_IRQHandler+0x10>)
 8001142:	f004 f8dd 	bl	8005300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	24000a50 	.word	0x24000a50

08001150 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001154:	4b37      	ldr	r3, [pc, #220]	@ (8001234 <SystemInit+0xe4>)
 8001156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800115a:	4a36      	ldr	r2, [pc, #216]	@ (8001234 <SystemInit+0xe4>)
 800115c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001160:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001164:	4b34      	ldr	r3, [pc, #208]	@ (8001238 <SystemInit+0xe8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 030f 	and.w	r3, r3, #15
 800116c:	2b06      	cmp	r3, #6
 800116e:	d807      	bhi.n	8001180 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001170:	4b31      	ldr	r3, [pc, #196]	@ (8001238 <SystemInit+0xe8>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f023 030f 	bic.w	r3, r3, #15
 8001178:	4a2f      	ldr	r2, [pc, #188]	@ (8001238 <SystemInit+0xe8>)
 800117a:	f043 0307 	orr.w	r3, r3, #7
 800117e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001180:	4b2e      	ldr	r3, [pc, #184]	@ (800123c <SystemInit+0xec>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a2d      	ldr	r2, [pc, #180]	@ (800123c <SystemInit+0xec>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800118c:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <SystemInit+0xec>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <SystemInit+0xec>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4929      	ldr	r1, [pc, #164]	@ (800123c <SystemInit+0xec>)
 8001198:	4b29      	ldr	r3, [pc, #164]	@ (8001240 <SystemInit+0xf0>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119e:	4b26      	ldr	r3, [pc, #152]	@ (8001238 <SystemInit+0xe8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011aa:	4b23      	ldr	r3, [pc, #140]	@ (8001238 <SystemInit+0xe8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 030f 	bic.w	r3, r3, #15
 80011b2:	4a21      	ldr	r2, [pc, #132]	@ (8001238 <SystemInit+0xe8>)
 80011b4:	f043 0307 	orr.w	r3, r3, #7
 80011b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011ba:	4b20      	ldr	r3, [pc, #128]	@ (800123c <SystemInit+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <SystemInit+0xec>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	@ (800123c <SystemInit+0xec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	@ (800123c <SystemInit+0xec>)
 80011ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001244 <SystemInit+0xf4>)
 80011d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <SystemInit+0xec>)
 80011d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <SystemInit+0xf8>)
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d8:	4b18      	ldr	r3, [pc, #96]	@ (800123c <SystemInit+0xec>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <SystemInit+0xfc>)
 80011dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <SystemInit+0xec>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011e4:	4b15      	ldr	r3, [pc, #84]	@ (800123c <SystemInit+0xec>)
 80011e6:	4a19      	ldr	r2, [pc, #100]	@ (800124c <SystemInit+0xfc>)
 80011e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <SystemInit+0xec>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011f0:	4b12      	ldr	r3, [pc, #72]	@ (800123c <SystemInit+0xec>)
 80011f2:	4a16      	ldr	r2, [pc, #88]	@ (800124c <SystemInit+0xfc>)
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <SystemInit+0xec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <SystemInit+0xec>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0e      	ldr	r2, [pc, #56]	@ (800123c <SystemInit+0xec>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001206:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <SystemInit+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <SystemInit+0x100>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <SystemInit+0x104>)
 8001214:	4013      	ands	r3, r2
 8001216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800121a:	d202      	bcs.n	8001222 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <SystemInit+0x108>)
 800121e:	2201      	movs	r2, #1
 8001220:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <SystemInit+0x10c>)
 8001224:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001228:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	52002000 	.word	0x52002000
 800123c:	58024400 	.word	0x58024400
 8001240:	eaf6ed7f 	.word	0xeaf6ed7f
 8001244:	02020200 	.word	0x02020200
 8001248:	01ff0000 	.word	0x01ff0000
 800124c:	01010280 	.word	0x01010280
 8001250:	5c001000 	.word	0x5c001000
 8001254:	ffff0000 	.word	0xffff0000
 8001258:	51008108 	.word	0x51008108
 800125c:	52004000 	.word	0x52004000

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001298 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001264:	f7ff ff74 	bl	8001150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f007 fdbb 	bl	8008e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fa51 	bl	8000738 <main>
  bx  lr
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800129c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012a0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80012a4:	08009024 	.word	0x08009024
  ldr r2, =_sbss
 80012a8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80012ac:	24004934 	.word	0x24004934

080012b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC3_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f947 	bl	800154e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012c0:	f001 ff00 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b15      	ldr	r3, [pc, #84]	@ (800131c <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	f003 030f 	and.w	r3, r3, #15
 80012d0:	4913      	ldr	r1, [pc, #76]	@ (8001320 <HAL_Init+0x6c>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	f003 031f 	and.w	r3, r3, #31
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_Init+0x68>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_Init+0x6c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	fa22 f303 	lsr.w	r3, r2, r3
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_Init+0x70>)
 80012f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001328 <HAL_Init+0x74>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fe:	200f      	movs	r0, #15
 8001300:	f7ff fea0 	bl	8001044 <HAL_InitTick>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e002      	b.n	8001314 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130e:	f7ff fcc7 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001312:	2300      	movs	r3, #0
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	58024400 	.word	0x58024400
 8001320:	08008fdc 	.word	0x08008fdc
 8001324:	24000004 	.word	0x24000004
 8001328:	24000000 	.word	0x24000000

0800132c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_IncTick+0x20>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	461a      	mov	r2, r3
 8001336:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x24>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4413      	add	r3, r2
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_IncTick+0x24>)
 800133e:	6013      	str	r3, [r2, #0]
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2400000c 	.word	0x2400000c
 8001350:	24000a9c 	.word	0x24000a9c

08001354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return uwTick;
 8001358:	4b03      	ldr	r3, [pc, #12]	@ (8001368 <HAL_GetTick+0x14>)
 800135a:	681b      	ldr	r3, [r3, #0]
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	24000a9c 	.word	0x24000a9c

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_Delay+0x44>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	461a      	mov	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4413      	add	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	bf00      	nop
 8001394:	f7ff ffde 	bl	8001354 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	2400000c 	.word	0x2400000c

080013b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetREVID+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0c1b      	lsrs	r3, r3, #16
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	5c001000 	.word	0x5c001000

080013cc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80013dc:	4904      	ldr	r1, [pc, #16]	@ (80013f0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	58000400 	.word	0x58000400

080013f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001404:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800140a:	68ba      	ldr	r2, [r7, #8]
 800140c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	4313      	orrs	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001422:	4a04      	ldr	r2, [pc, #16]	@ (8001434 <__NVIC_SetPriorityGrouping+0x40>)
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	60d3      	str	r3, [r2, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00
 8001438:	05fa0000 	.word	0x05fa0000

0800143c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001440:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <__NVIC_GetPriorityGrouping+0x18>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	0a1b      	lsrs	r3, r3, #8
 8001446:	f003 0307 	and.w	r3, r3, #7
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001462:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001466:	2b00      	cmp	r3, #0
 8001468:	db0b      	blt.n	8001482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146a:	88fb      	ldrh	r3, [r7, #6]
 800146c:	f003 021f 	and.w	r2, r3, #31
 8001470:	4907      	ldr	r1, [pc, #28]	@ (8001490 <__NVIC_EnableIRQ+0x38>)
 8001472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001476:	095b      	lsrs	r3, r3, #5
 8001478:	2001      	movs	r0, #1
 800147a:	fa00 f202 	lsl.w	r2, r0, r2
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000e100 	.word	0xe000e100

08001494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	6039      	str	r1, [r7, #0]
 800149e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	db0a      	blt.n	80014be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <__NVIC_SetPriority+0x4c>)
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	0112      	lsls	r2, r2, #4
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	440b      	add	r3, r1
 80014b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014bc:	e00a      	b.n	80014d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <__NVIC_SetPriority+0x50>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	3b04      	subs	r3, #4
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	b2d2      	uxtb	r2, r2
 80014d0:	440b      	add	r3, r1
 80014d2:	761a      	strb	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b089      	sub	sp, #36	@ 0x24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f1c3 0307 	rsb	r3, r3, #7
 8001502:	2b04      	cmp	r3, #4
 8001504:	bf28      	it	cs
 8001506:	2304      	movcs	r3, #4
 8001508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3304      	adds	r3, #4
 800150e:	2b06      	cmp	r3, #6
 8001510:	d902      	bls.n	8001518 <NVIC_EncodePriority+0x30>
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3b03      	subs	r3, #3
 8001516:	e000      	b.n	800151a <NVIC_EncodePriority+0x32>
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	f04f 32ff 	mov.w	r2, #4294967295
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43da      	mvns	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	401a      	ands	r2, r3
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001530:	f04f 31ff 	mov.w	r1, #4294967295
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	43d9      	mvns	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	4313      	orrs	r3, r2
         );
}
 8001542:	4618      	mov	r0, r3
 8001544:	3724      	adds	r7, #36	@ 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff4c 	bl	80013f4 <__NVIC_SetPriorityGrouping>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001572:	f7ff ff63 	bl	800143c <__NVIC_GetPriorityGrouping>
 8001576:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	6978      	ldr	r0, [r7, #20]
 800157e:	f7ff ffb3 	bl	80014e8 <NVIC_EncodePriority>
 8001582:	4602      	mov	r2, r0
 8001584:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001588:	4611      	mov	r1, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff82 	bl	8001494 <__NVIC_SetPriority>
}
 8001590:	bf00      	nop
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff56 	bl	8001458 <__NVIC_EnableIRQ>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e0e3      	b.n	800178e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d106      	bne.n	80015de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2223      	movs	r2, #35	@ 0x23
 80015d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fb7f 	bl	8000cdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <HAL_ETH_Init+0x1e4>)
 80015e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015e4:	4a6c      	ldr	r2, [pc, #432]	@ (8001798 <HAL_ETH_Init+0x1e4>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001798 <HAL_ETH_Init+0x1e4>)
 80015f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7a1b      	ldrb	r3, [r3, #8]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d103      	bne.n	800160c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fee1 	bl	80013cc <HAL_SYSCFG_ETHInterfaceSelect>
 800160a:	e003      	b.n	8001614 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800160c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001610:	f7ff fedc 	bl	80013cc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001614:	4b61      	ldr	r3, [pc, #388]	@ (800179c <HAL_ETH_Init+0x1e8>)
 8001616:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	f043 0301 	orr.w	r3, r3, #1
 800162a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800162e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7ff fe90 	bl	8001354 <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001636:	e011      	b.n	800165c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001638:	f7ff fe8c 	bl	8001354 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001646:	d909      	bls.n	800165c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2204      	movs	r2, #4
 800164c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	22e0      	movs	r2, #224	@ 0xe0
 8001654:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e098      	b.n	800178e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e4      	bne.n	8001638 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f89e 	bl	80017b0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001674:	f001 fea0 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8001678:	4603      	mov	r3, r0
 800167a:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <HAL_ETH_Init+0x1ec>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	0c9a      	lsrs	r2, r3, #18
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3a01      	subs	r2, #1
 8001688:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fa81 	bl	8001b94 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800169a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800169e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016ae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d009      	beq.n	80016d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	22e0      	movs	r2, #224	@ 0xe0
 80016ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e05d      	b.n	800178e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016da:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016de:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <HAL_ETH_Init+0x1f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6952      	ldr	r2, [r2, #20]
 80016e6:	0051      	lsls	r1, r2, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016f2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 fae9 	bl	8001cce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fb2f 	bl	8001d60 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	3305      	adds	r3, #5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	021a      	lsls	r2, r3, #8
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3304      	adds	r3, #4
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	3303      	adds	r3, #3
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	061a      	lsls	r2, r3, #24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	3302      	adds	r3, #2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	041b      	lsls	r3, r3, #16
 8001734:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001740:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800174e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001750:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <HAL_ETH_Init+0x1f4>)
 8001762:	430b      	orrs	r3, r1
 8001764:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <HAL_ETH_Init+0x1f8>)
 8001776:	430b      	orrs	r3, r1
 8001778:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2210      	movs	r2, #16
 8001788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	58024400 	.word	0x58024400
 800179c:	58000400 	.word	0x58000400
 80017a0:	431bde83 	.word	0x431bde83
 80017a4:	ffff8001 	.word	0xffff8001
 80017a8:	0c020060 	.word	0x0c020060
 80017ac:	0c20c000 	.word	0x0c20c000

080017b0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017ca:	f001 fdf5 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 80017ce:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4a1a      	ldr	r2, [pc, #104]	@ (800183c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d804      	bhi.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e022      	b.n	8001828 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d204      	bcs.n	80017f4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e019      	b.n	8001828 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	4a13      	ldr	r2, [pc, #76]	@ (8001844 <HAL_ETH_SetMDIOClockRange+0x94>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d915      	bls.n	8001828 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4a12      	ldr	r2, [pc, #72]	@ (8001848 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d804      	bhi.n	800180e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e00c      	b.n	8001828 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4a0e      	ldr	r2, [pc, #56]	@ (800184c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d804      	bhi.n	8001820 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e003      	b.n	8001828 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001826:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001832:	bf00      	nop
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	02160ebf 	.word	0x02160ebf
 8001840:	03938700 	.word	0x03938700
 8001844:	05f5e0ff 	.word	0x05f5e0ff
 8001848:	08f0d17f 	.word	0x08f0d17f
 800184c:	0ee6b27f 	.word	0x0ee6b27f

08001850 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	791b      	ldrb	r3, [r3, #4]
 8001868:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800186a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	7b1b      	ldrb	r3, [r3, #12]
 8001870:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7b5b      	ldrb	r3, [r3, #13]
 8001878:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800187a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	7b9b      	ldrb	r3, [r3, #14]
 8001880:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	7bdb      	ldrb	r3, [r3, #15]
 8001888:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800188a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	7c12      	ldrb	r2, [r2, #16]
 8001890:	2a00      	cmp	r2, #0
 8001892:	d102      	bne.n	800189a <ETH_SetMACConfig+0x4a>
 8001894:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001898:	e000      	b.n	800189c <ETH_SetMACConfig+0x4c>
 800189a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800189c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	7c52      	ldrb	r2, [r2, #17]
 80018a2:	2a00      	cmp	r2, #0
 80018a4:	d102      	bne.n	80018ac <ETH_SetMACConfig+0x5c>
 80018a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018aa:	e000      	b.n	80018ae <ETH_SetMACConfig+0x5e>
 80018ac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7c9b      	ldrb	r3, [r3, #18]
 80018b4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018b6:	431a      	orrs	r2, r3
               macconf->Speed |
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018bc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	7f1b      	ldrb	r3, [r3, #28]
 80018c8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	7f5b      	ldrb	r3, [r3, #29]
 80018d0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	7f92      	ldrb	r2, [r2, #30]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d102      	bne.n	80018e2 <ETH_SetMACConfig+0x92>
 80018dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e0:	e000      	b.n	80018e4 <ETH_SetMACConfig+0x94>
 80018e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018e4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	7fdb      	ldrb	r3, [r3, #31]
 80018ea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018f4:	2a00      	cmp	r2, #0
 80018f6:	d102      	bne.n	80018fe <ETH_SetMACConfig+0xae>
 80018f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018fc:	e000      	b.n	8001900 <ETH_SetMACConfig+0xb0>
 80018fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001900:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001906:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800190e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001910:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b56      	ldr	r3, [pc, #344]	@ (8001a7c <ETH_SetMACConfig+0x22c>)
 8001922:	4013      	ands	r3, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	68f9      	ldr	r1, [r7, #12]
 800192a:	430b      	orrs	r3, r1
 800192c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001932:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800193a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800193c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001944:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001946:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800194e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001950:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001958:	2a00      	cmp	r2, #0
 800195a:	d102      	bne.n	8001962 <ETH_SetMACConfig+0x112>
 800195c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001960:	e000      	b.n	8001964 <ETH_SetMACConfig+0x114>
 8001962:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001964:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800196a:	4313      	orrs	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4b42      	ldr	r3, [pc, #264]	@ (8001a80 <ETH_SetMACConfig+0x230>)
 8001976:	4013      	ands	r3, r2
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	430b      	orrs	r3, r1
 8001980:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001988:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800198e:	4313      	orrs	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4b3a      	ldr	r3, [pc, #232]	@ (8001a84 <ETH_SetMACConfig+0x234>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6812      	ldr	r2, [r2, #0]
 80019a0:	68f9      	ldr	r1, [r7, #12]
 80019a2:	430b      	orrs	r3, r1
 80019a4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019ac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019ba:	2a00      	cmp	r2, #0
 80019bc:	d101      	bne.n	80019c2 <ETH_SetMACConfig+0x172>
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	e000      	b.n	80019c4 <ETH_SetMACConfig+0x174>
 80019c2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019c4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019d6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019da:	4013      	ands	r3, r2
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	68f9      	ldr	r1, [r7, #12]
 80019e2:	430b      	orrs	r3, r1
 80019e4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019ec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019f4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a02:	f023 0103 	bic.w	r1, r3, #3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68fa      	ldr	r2, [r7, #12]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a1a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a36:	2a00      	cmp	r2, #0
 8001a38:	d101      	bne.n	8001a3e <ETH_SetMACConfig+0x1ee>
 8001a3a:	2240      	movs	r2, #64	@ 0x40
 8001a3c:	e000      	b.n	8001a40 <ETH_SetMACConfig+0x1f0>
 8001a3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a60:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	00048083 	.word	0x00048083
 8001a80:	c0f88000 	.word	0xc0f88000
 8001a84:	fffffef0 	.word	0xfffffef0

08001a88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <ETH_SetDMAConfig+0xf8>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	6811      	ldr	r1, [r2, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	6812      	ldr	r2, [r2, #0]
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001aae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	791b      	ldrb	r3, [r3, #4]
 8001ab4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	7b1b      	ldrb	r3, [r3, #12]
 8001ac0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b84 <ETH_SetDMAConfig+0xfc>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7b5b      	ldrb	r3, [r3, #13]
 8001ae6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001aec:	4313      	orrs	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001af8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <ETH_SetDMAConfig+0x100>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b0c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	7d1b      	ldrb	r3, [r3, #20]
 8001b18:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b1a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7f5b      	ldrb	r3, [r3, #29]
 8001b20:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b2e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b32:	4b16      	ldr	r3, [pc, #88]	@ (8001b8c <ETH_SetDMAConfig+0x104>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	68f9      	ldr	r1, [r7, #12]
 8001b3c:	430b      	orrs	r3, r1
 8001b3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b42:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
 8001b4a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b50:	4313      	orrs	r3, r2
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b60:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <ETH_SetDMAConfig+0x108>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b70:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b74:	bf00      	nop
 8001b76:	3714      	adds	r7, #20
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	ffff87fd 	.word	0xffff87fd
 8001b84:	ffff2ffe 	.word	0xffff2ffe
 8001b88:	fffec000 	.word	0xfffec000
 8001b8c:	ffc0efef 	.word	0xffc0efef
 8001b90:	7fc0ffff 	.word	0x7fc0ffff

08001b94 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b0a4      	sub	sp, #144	@ 0x90
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001bec:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001bf0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c16:	2300      	movs	r3, #0
 8001c18:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c2c:	2320      	movs	r3, #32
 8001c2e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c3e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c48:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c78:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fde6 	bl	8001850 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c84:	2301      	movs	r3, #1
 8001c86:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c9e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ca2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ca8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cb4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cba:	f107 0308 	add.w	r3, r7, #8
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fee1 	bl	8001a88 <ETH_SetDMAConfig>
}
 8001cc6:	bf00      	nop
 8001cc8:	3790      	adds	r7, #144	@ 0x90
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e01d      	b.n	8001d18 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68d9      	ldr	r1, [r3, #12]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	3206      	adds	r2, #6
 8001d0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2b03      	cmp	r3, #3
 8001d1c:	d9de      	bls.n	8001cdc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	2303      	movs	r3, #3
 8001d30:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d40:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d50:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e023      	b.n	8001db6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001da4:	68b9      	ldr	r1, [r7, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	3212      	adds	r2, #18
 8001dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d9d8      	bls.n	8001d6e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de2:	461a      	mov	r2, r3
 8001de4:	2303      	movs	r3, #3
 8001de6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001df6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e2a:	4b89      	ldr	r3, [pc, #548]	@ (8002050 <HAL_GPIO_Init+0x234>)
 8001e2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e2e:	e194      	b.n	800215a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8186 	beq.w	8002154 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d005      	beq.n	8001e60 <HAL_GPIO_Init+0x44>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d130      	bne.n	8001ec2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e96:	2201      	movs	r2, #1
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	091b      	lsrs	r3, r3, #4
 8001eac:	f003 0201 	and.w	r2, r3, #1
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d017      	beq.n	8001efe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d123      	bne.n	8001f52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	08da      	lsrs	r2, r3, #3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3208      	adds	r2, #8
 8001f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	220f      	movs	r2, #15
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	08da      	lsrs	r2, r3, #3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3208      	adds	r2, #8
 8001f4c:	69b9      	ldr	r1, [r7, #24]
 8001f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0203 	and.w	r2, r3, #3
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 80e0 	beq.w	8002154 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f94:	4b2f      	ldr	r3, [pc, #188]	@ (8002054 <HAL_GPIO_Init+0x238>)
 8001f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f9a:	4a2e      	ldr	r2, [pc, #184]	@ (8002054 <HAL_GPIO_Init+0x238>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_GPIO_Init+0x238>)
 8001fa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a29      	ldr	r2, [pc, #164]	@ (8002058 <HAL_GPIO_Init+0x23c>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a20      	ldr	r2, [pc, #128]	@ (800205c <HAL_GPIO_Init+0x240>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d052      	beq.n	8002084 <HAL_GPIO_Init+0x268>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <HAL_GPIO_Init+0x244>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_GPIO_Init+0x22e>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_GPIO_Init+0x248>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x22a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8002068 <HAL_GPIO_Init+0x24c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x226>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <HAL_GPIO_Init+0x250>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x222>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <HAL_GPIO_Init+0x254>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x21e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a1a      	ldr	r2, [pc, #104]	@ (8002074 <HAL_GPIO_Init+0x258>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <HAL_GPIO_Init+0x25c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a18      	ldr	r2, [pc, #96]	@ (800207c <HAL_GPIO_Init+0x260>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x212>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <HAL_GPIO_Init+0x264>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x20e>
 8002026:	2309      	movs	r3, #9
 8002028:	e02d      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800202a:	230a      	movs	r3, #10
 800202c:	e02b      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800202e:	2308      	movs	r3, #8
 8002030:	e029      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002032:	2307      	movs	r3, #7
 8002034:	e027      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002036:	2306      	movs	r3, #6
 8002038:	e025      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800203a:	2305      	movs	r3, #5
 800203c:	e023      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800203e:	2304      	movs	r3, #4
 8002040:	e021      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002042:	2303      	movs	r3, #3
 8002044:	e01f      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 8002046:	2302      	movs	r3, #2
 8002048:	e01d      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800204a:	2301      	movs	r3, #1
 800204c:	e01b      	b.n	8002086 <HAL_GPIO_Init+0x26a>
 800204e:	bf00      	nop
 8002050:	58000080 	.word	0x58000080
 8002054:	58024400 	.word	0x58024400
 8002058:	58000400 	.word	0x58000400
 800205c:	58020000 	.word	0x58020000
 8002060:	58020400 	.word	0x58020400
 8002064:	58020800 	.word	0x58020800
 8002068:	58020c00 	.word	0x58020c00
 800206c:	58021000 	.word	0x58021000
 8002070:	58021400 	.word	0x58021400
 8002074:	58021800 	.word	0x58021800
 8002078:	58021c00 	.word	0x58021c00
 800207c:	58022000 	.word	0x58022000
 8002080:	58022400 	.word	0x58022400
 8002084:	2300      	movs	r3, #0
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002096:	4938      	ldr	r1, [pc, #224]	@ (8002178 <HAL_GPIO_Init+0x35c>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	43db      	mvns	r3, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4013      	ands	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	3301      	adds	r3, #1
 8002158:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa22 f303 	lsr.w	r3, r2, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f ae63 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 800216a:	bf00      	nop
 800216c:	bf00      	nop
 800216e:	3724      	adds	r7, #36	@ 0x24
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	58000400 	.word	0x58000400

0800217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
 8002188:	4613      	mov	r3, r2
 800218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800218c:	787b      	ldrb	r3, [r7, #1]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002192:	887a      	ldrh	r2, [r7, #2]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002198:	e003      	b.n	80021a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800219a:	887b      	ldrh	r3, [r7, #2]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	619a      	str	r2, [r3, #24]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af02      	add	r7, sp, #8
 80021b4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0fe      	b.n	80023be <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d106      	bne.n	80021da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7fe feb9 	bl	8000f4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2203      	movs	r2, #3
 80021de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 fbcc 	bl	8006984 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7c1a      	ldrb	r2, [r3, #16]
 80021f4:	f88d 2000 	strb.w	r2, [sp]
 80021f8:	3304      	adds	r3, #4
 80021fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021fc:	f004 fb50 	bl	80068a0 <USB_CoreInit>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2202      	movs	r2, #2
 800220a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0d5      	b.n	80023be <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f004 fbc4 	bl	80069a6 <USB_SetCurrentMode>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2202      	movs	r2, #2
 8002228:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0c6      	b.n	80023be <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
 8002234:	e04a      	b.n	80022cc <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3315      	adds	r3, #21
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3314      	adds	r3, #20
 800225a:	7bfa      	ldrb	r2, [r7, #15]
 800225c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	b298      	uxth	r0, r3
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	332e      	adds	r3, #46	@ 0x2e
 8002272:	4602      	mov	r2, r0
 8002274:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3318      	adds	r3, #24
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	331c      	adds	r3, #28
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	3320      	adds	r3, #32
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b2:	7bfa      	ldrb	r2, [r7, #15]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	3324      	adds	r3, #36	@ 0x24
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	3301      	adds	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	791b      	ldrb	r3, [r3, #4]
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d3af      	bcc.n	8002236 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	73fb      	strb	r3, [r7, #15]
 80022da:	e044      	b.n	8002366 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002304:	7bfa      	ldrb	r2, [r7, #15]
 8002306:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	3301      	adds	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	791b      	ldrb	r3, [r3, #4]
 800236a:	7bfa      	ldrb	r2, [r7, #15]
 800236c:	429a      	cmp	r2, r3
 800236e:	d3b5      	bcc.n	80022dc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7c1a      	ldrb	r2, [r3, #16]
 8002378:	f88d 2000 	strb.w	r2, [sp]
 800237c:	3304      	adds	r3, #4
 800237e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002380:	f004 fb5e 	bl	8006a40 <USB_DevInit>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e013      	b.n	80023be <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7b1b      	ldrb	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d102      	bne.n	80023b2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f80b 	bl	80023c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f004 fd19 	bl	8006dee <USB_DevDisconnect>

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
	...

080023c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023f6:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_PCDEx_ActivateLPM+0x44>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	10000003 	.word	0x10000003

08002410 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_PWREx_ConfigSupply+0x70>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b04      	cmp	r3, #4
 8002422:	d00a      	beq.n	800243a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002424:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_PWREx_ConfigSupply+0x70>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	429a      	cmp	r2, r3
 8002430:	d001      	beq.n	8002436 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e01f      	b.n	8002476 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e01d      	b.n	8002476 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <HAL_PWREx_ConfigSupply+0x70>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	490f      	ldr	r1, [pc, #60]	@ (8002480 <HAL_PWREx_ConfigSupply+0x70>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800244a:	f7fe ff83 	bl	8001354 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002450:	e009      	b.n	8002466 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002452:	f7fe ff7f 	bl	8001354 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002460:	d901      	bls.n	8002466 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e007      	b.n	8002476 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_PWREx_ConfigSupply+0x70>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002472:	d1ee      	bne.n	8002452 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	58024800 	.word	0x58024800

08002484 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002488:	4b05      	ldr	r3, [pc, #20]	@ (80024a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4a04      	ldr	r2, [pc, #16]	@ (80024a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800248e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002492:	60d3      	str	r3, [r2, #12]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	58024800 	.word	0x58024800

080024a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b08c      	sub	sp, #48	@ 0x30
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	f000 bc48 	b.w	8002d48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 8088 	beq.w	80025d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c6:	4b99      	ldr	r3, [pc, #612]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d0:	4b96      	ldr	r3, [pc, #600]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d007      	beq.n	80024ec <HAL_RCC_OscConfig+0x48>
 80024dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024de:	2b18      	cmp	r3, #24
 80024e0:	d111      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d10c      	bne.n	8002506 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b8f      	ldr	r3, [pc, #572]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d06d      	beq.n	80025d4 <HAL_RCC_OscConfig+0x130>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d169      	bne.n	80025d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	f000 bc21 	b.w	8002d48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800250e:	d106      	bne.n	800251e <HAL_RCC_OscConfig+0x7a>
 8002510:	4b86      	ldr	r3, [pc, #536]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a85      	ldr	r2, [pc, #532]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002516:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e02e      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x9c>
 8002526:	4b81      	ldr	r3, [pc, #516]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a80      	ldr	r2, [pc, #512]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800252c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b7e      	ldr	r3, [pc, #504]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a7d      	ldr	r2, [pc, #500]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002538:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e01d      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002548:	d10c      	bne.n	8002564 <HAL_RCC_OscConfig+0xc0>
 800254a:	4b78      	ldr	r3, [pc, #480]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a77      	ldr	r2, [pc, #476]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002550:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	4b75      	ldr	r3, [pc, #468]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a74      	ldr	r2, [pc, #464]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e00b      	b.n	800257c <HAL_RCC_OscConfig+0xd8>
 8002564:	4b71      	ldr	r3, [pc, #452]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a70      	ldr	r2, [pc, #448]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800256a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b6e      	ldr	r3, [pc, #440]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a6d      	ldr	r2, [pc, #436]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002576:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d013      	beq.n	80025ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fee6 	bl	8001354 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800258c:	f7fe fee2 	bl	8001354 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b64      	cmp	r3, #100	@ 0x64
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e3d4      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800259e:	4b63      	ldr	r3, [pc, #396]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0xe8>
 80025aa:	e014      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7fe fed2 	bl	8001354 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b4:	f7fe fece 	bl	8001354 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b64      	cmp	r3, #100	@ 0x64
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e3c0      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025c6:	4b59      	ldr	r3, [pc, #356]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x110>
 80025d2:	e000      	b.n	80025d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 80ca 	beq.w	8002778 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e4:	4b51      	ldr	r3, [pc, #324]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025ee:	4b4f      	ldr	r3, [pc, #316]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <HAL_RCC_OscConfig+0x166>
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	2b18      	cmp	r3, #24
 80025fe:	d156      	bne.n	80026ae <HAL_RCC_OscConfig+0x20a>
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d151      	bne.n	80026ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260a:	4b48      	ldr	r3, [pc, #288]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x17e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e392      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002622:	4b42      	ldr	r3, [pc, #264]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 0219 	bic.w	r2, r3, #25
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	493f      	ldr	r1, [pc, #252]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fe8e 	bl	8001354 <HAL_GetTick>
 8002638:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800263c:	f7fe fe8a 	bl	8001354 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e37c      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800264e:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	f7fe feab 	bl	80013b4 <HAL_GetREVID>
 800265e:	4603      	mov	r3, r0
 8002660:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002664:	4293      	cmp	r3, r2
 8002666:	d817      	bhi.n	8002698 <HAL_RCC_OscConfig+0x1f4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b40      	cmp	r3, #64	@ 0x40
 800266e:	d108      	bne.n	8002682 <HAL_RCC_OscConfig+0x1de>
 8002670:	4b2e      	ldr	r3, [pc, #184]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002678:	4a2c      	ldr	r2, [pc, #176]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800267a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002680:	e07a      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b2a      	ldr	r3, [pc, #168]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	031b      	lsls	r3, r3, #12
 8002690:	4926      	ldr	r1, [pc, #152]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002696:	e06f      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002698:	4b24      	ldr	r3, [pc, #144]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	4921      	ldr	r1, [pc, #132]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	e064      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d047      	beq.n	8002746 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b6:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0219 	bic.w	r2, r3, #25
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	491a      	ldr	r1, [pc, #104]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe fe44 	bl	8001354 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe fe40 	bl	8001354 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e332      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e2:	4b12      	ldr	r3, [pc, #72]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	f7fe fe61 	bl	80013b4 <HAL_GetREVID>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d819      	bhi.n	8002730 <HAL_RCC_OscConfig+0x28c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b40      	cmp	r3, #64	@ 0x40
 8002702:	d108      	bne.n	8002716 <HAL_RCC_OscConfig+0x272>
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800270c:	4a07      	ldr	r2, [pc, #28]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002712:	6053      	str	r3, [r2, #4]
 8002714:	e030      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
 8002716:	4b05      	ldr	r3, [pc, #20]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	031b      	lsls	r3, r3, #12
 8002724:	4901      	ldr	r1, [pc, #4]	@ (800272c <HAL_RCC_OscConfig+0x288>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
 800272a:	e025      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
 800272c:	58024400 	.word	0x58024400
 8002730:	4b9a      	ldr	r3, [pc, #616]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	061b      	lsls	r3, r3, #24
 800273e:	4997      	ldr	r1, [pc, #604]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002740:	4313      	orrs	r3, r2
 8002742:	604b      	str	r3, [r1, #4]
 8002744:	e018      	b.n	8002778 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002746:	4b95      	ldr	r3, [pc, #596]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a94      	ldr	r2, [pc, #592]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fdff 	bl	8001354 <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fdfb 	bl	8001354 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e2ed      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800276c:	4b8b      	ldr	r3, [pc, #556]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0304 	and.w	r3, r3, #4
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1f0      	bne.n	800275a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a9 	beq.w	80028d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002786:	4b85      	ldr	r3, [pc, #532]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800278e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002790:	4b82      	ldr	r3, [pc, #520]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d007      	beq.n	80027ac <HAL_RCC_OscConfig+0x308>
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b18      	cmp	r3, #24
 80027a0:	d13a      	bne.n	8002818 <HAL_RCC_OscConfig+0x374>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d135      	bne.n	8002818 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ac:	4b7b      	ldr	r3, [pc, #492]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_OscConfig+0x320>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	2b80      	cmp	r3, #128	@ 0x80
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e2c1      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c4:	f7fe fdf6 	bl	80013b4 <HAL_GetREVID>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d817      	bhi.n	8002802 <HAL_RCC_OscConfig+0x35e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d108      	bne.n	80027ec <HAL_RCC_OscConfig+0x348>
 80027da:	4b70      	ldr	r3, [pc, #448]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027e2:	4a6e      	ldr	r2, [pc, #440]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ea:	e075      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ec:	4b6b      	ldr	r3, [pc, #428]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	069b      	lsls	r3, r3, #26
 80027fa:	4968      	ldr	r1, [pc, #416]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002800:	e06a      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002802:	4b66      	ldr	r3, [pc, #408]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	061b      	lsls	r3, r3, #24
 8002810:	4962      	ldr	r1, [pc, #392]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002816:	e05f      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69db      	ldr	r3, [r3, #28]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d042      	beq.n	80028a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002820:	4b5e      	ldr	r3, [pc, #376]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5d      	ldr	r2, [pc, #372]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fd92 	bl	8001354 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002834:	f7fe fd8e 	bl	8001354 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e280      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002846:	4b55      	ldr	r3, [pc, #340]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002852:	f7fe fdaf 	bl	80013b4 <HAL_GetREVID>
 8002856:	4603      	mov	r3, r0
 8002858:	f241 0203 	movw	r2, #4099	@ 0x1003
 800285c:	4293      	cmp	r3, r2
 800285e:	d817      	bhi.n	8002890 <HAL_RCC_OscConfig+0x3ec>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	2b20      	cmp	r3, #32
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x3d6>
 8002868:	4b4c      	ldr	r3, [pc, #304]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002870:	4a4a      	ldr	r2, [pc, #296]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002872:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002876:	6053      	str	r3, [r2, #4]
 8002878:	e02e      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
 800287a:	4b48      	ldr	r3, [pc, #288]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	4944      	ldr	r1, [pc, #272]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
 800288e:	e023      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
 8002890:	4b42      	ldr	r3, [pc, #264]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	493f      	ldr	r1, [pc, #252]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60cb      	str	r3, [r1, #12]
 80028a4:	e018      	b.n	80028d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028a6:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a3c      	ldr	r2, [pc, #240]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fd4f 	bl	8001354 <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028ba:	f7fe fd4b 	bl	8001354 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e23d      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028cc:	4b33      	ldr	r3, [pc, #204]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1f0      	bne.n	80028ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0308 	and.w	r3, r3, #8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d036      	beq.n	8002952 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d019      	beq.n	8002920 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ec:	4b2b      	ldr	r3, [pc, #172]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f0:	4a2a      	ldr	r2, [pc, #168]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe fd2c 	bl	8001354 <HAL_GetTick>
 80028fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002900:	f7fe fd28 	bl	8001354 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e21a      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002912:	4b22      	ldr	r3, [pc, #136]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x45c>
 800291e:	e018      	b.n	8002952 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002920:	4b1e      	ldr	r3, [pc, #120]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002924:	4a1d      	ldr	r2, [pc, #116]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292c:	f7fe fd12 	bl	8001354 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002934:	f7fe fd0e 	bl	8001354 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e200      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002946:	4b15      	ldr	r3, [pc, #84]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	2b00      	cmp	r3, #0
 800295c:	d039      	beq.n	80029d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d01c      	beq.n	80029a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a0c      	ldr	r2, [pc, #48]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002970:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002972:	f7fe fcef 	bl	8001354 <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297a:	f7fe fceb 	bl	8001354 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e1dd      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x4d6>
 8002998:	e01b      	b.n	80029d2 <HAL_RCC_OscConfig+0x52e>
 800299a:	bf00      	nop
 800299c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9a      	ldr	r2, [pc, #616]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fcd2 	bl	8001354 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b4:	f7fe fcce 	bl	8001354 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1c0      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029c6:	4b92      	ldr	r3, [pc, #584]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0304 	and.w	r3, r3, #4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8081 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002c14 <HAL_RCC_OscConfig+0x770>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a8b      	ldr	r2, [pc, #556]	@ (8002c14 <HAL_RCC_OscConfig+0x770>)
 80029e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ec:	f7fe fcb2 	bl	8001354 <HAL_GetTick>
 80029f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f4:	f7fe fcae 	bl	8001354 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b64      	cmp	r3, #100	@ 0x64
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e1a0      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a06:	4b83      	ldr	r3, [pc, #524]	@ (8002c14 <HAL_RCC_OscConfig+0x770>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x584>
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	f043 0301 	orr.w	r3, r3, #1
 8002a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a26:	e02d      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10c      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5a6>
 8002a30:	4b77      	ldr	r3, [pc, #476]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a76      	ldr	r2, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	f023 0301 	bic.w	r3, r3, #1
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a3c:	4b74      	ldr	r3, [pc, #464]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a40:	4a73      	ldr	r2, [pc, #460]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	f023 0304 	bic.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a48:	e01c      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c8>
 8002a52:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a56:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	4a6b      	ldr	r2, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6a:	e00b      	b.n	8002a84 <HAL_RCC_OscConfig+0x5e0>
 8002a6c:	4b68      	ldr	r3, [pc, #416]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a70:	4a67      	ldr	r2, [pc, #412]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	f023 0301 	bic.w	r3, r3, #1
 8002a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a78:	4b65      	ldr	r3, [pc, #404]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7c:	4a64      	ldr	r2, [pc, #400]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	f023 0304 	bic.w	r3, r3, #4
 8002a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fc62 	bl	8001354 <HAL_GetTick>
 8002a90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a92:	e00a      	b.n	8002aaa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a94:	f7fe fc5e 	bl	8001354 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e14e      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aaa:	4b59      	ldr	r3, [pc, #356]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ee      	beq.n	8002a94 <HAL_RCC_OscConfig+0x5f0>
 8002ab6:	e014      	b.n	8002ae2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fc4c 	bl	8001354 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fc48 	bl	8001354 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e138      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ee      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 812d 	beq.w	8002d46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aec:	4b48      	ldr	r3, [pc, #288]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af4:	2b18      	cmp	r3, #24
 8002af6:	f000 80bd 	beq.w	8002c74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	f040 809e 	bne.w	8002c40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b42      	ldr	r3, [pc, #264]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a41      	ldr	r2, [pc, #260]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fc20 	bl	8001354 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fc1c 	bl	8001354 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e10e      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2a:	4b39      	ldr	r3, [pc, #228]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b36:	4b36      	ldr	r3, [pc, #216]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b3a:	4b37      	ldr	r3, [pc, #220]	@ (8002c18 <HAL_RCC_OscConfig+0x774>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	4931      	ldr	r1, [pc, #196]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	3b01      	subs	r3, #1
 8002b56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	025b      	lsls	r3, r3, #9
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	061b      	lsls	r3, r3, #24
 8002b7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b80:	4923      	ldr	r1, [pc, #140]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b86:	4b22      	ldr	r3, [pc, #136]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	4a21      	ldr	r2, [pc, #132]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	f023 0301 	bic.w	r3, r3, #1
 8002b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b92:	4b1f      	ldr	r3, [pc, #124]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b96:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_RCC_OscConfig+0x778>)
 8002b98:	4013      	ands	r3, r2
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b9e:	00d2      	lsls	r2, r2, #3
 8002ba0:	491b      	ldr	r1, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	f023 020c 	bic.w	r2, r3, #12
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4917      	ldr	r1, [pc, #92]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	f023 0202 	bic.w	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc4:	4912      	ldr	r1, [pc, #72]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bca:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4a10      	ldr	r2, [pc, #64]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bda:	4a0d      	ldr	r2, [pc, #52]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf2:	4a07      	ldr	r2, [pc, #28]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfa:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c06:	f7fe fba5 	bl	8001354 <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c0c:	e011      	b.n	8002c32 <HAL_RCC_OscConfig+0x78e>
 8002c0e:	bf00      	nop
 8002c10:	58024400 	.word	0x58024400
 8002c14:	58024800 	.word	0x58024800
 8002c18:	fffffc0c 	.word	0xfffffc0c
 8002c1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c20:	f7fe fb98 	bl	8001354 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e08a      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c32:	4b47      	ldr	r3, [pc, #284]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0x77c>
 8002c3e:	e082      	b.n	8002d46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c40:	4b43      	ldr	r3, [pc, #268]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a42      	ldr	r2, [pc, #264]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fb82 	bl	8001354 <HAL_GetTick>
 8002c50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fb7e 	bl	8001354 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e070      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c66:	4b3a      	ldr	r3, [pc, #232]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x7b0>
 8002c72:	e068      	b.n	8002d46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c74:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c7a:	4b35      	ldr	r3, [pc, #212]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d031      	beq.n	8002cec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f003 0203 	and.w	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d12a      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d122      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d11a      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0a5b      	lsrs	r3, r3, #9
 8002cba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d111      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d108      	bne.n	8002cec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	0e1b      	lsrs	r3, r3, #24
 8002cde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e02b      	b.n	8002d48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cf0:	4b17      	ldr	r3, [pc, #92]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d01f      	beq.n	8002d46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d06:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0a:	4a11      	ldr	r2, [pc, #68]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	f023 0301 	bic.w	r3, r3, #1
 8002d10:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d12:	f7fe fb1f 	bl	8001354 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d18:	bf00      	nop
 8002d1a:	f7fe fb1b 	bl	8001354 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d0f9      	beq.n	8002d1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d26:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_RCC_OscConfig+0x8b0>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d32:	00d2      	lsls	r2, r2, #3
 8002d34:	4906      	ldr	r1, [pc, #24]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d3a:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3730      	adds	r7, #48	@ 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	58024400 	.word	0x58024400
 8002d54:	ffff0007 	.word	0xffff0007

08002d58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e19c      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d6c:	4b8a      	ldr	r3, [pc, #552]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d910      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7a:	4b87      	ldr	r3, [pc, #540]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 020f 	bic.w	r2, r3, #15
 8002d82:	4985      	ldr	r1, [pc, #532]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b83      	ldr	r3, [pc, #524]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e184      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691a      	ldr	r2, [r3, #16]
 8002dac:	4b7b      	ldr	r3, [pc, #492]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d908      	bls.n	8002dca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db8:	4b78      	ldr	r3, [pc, #480]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	4975      	ldr	r1, [pc, #468]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d010      	beq.n	8002df8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	4b70      	ldr	r3, [pc, #448]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d908      	bls.n	8002df8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002de6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	496a      	ldr	r1, [pc, #424]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0310 	and.w	r3, r3, #16
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699a      	ldr	r2, [r3, #24]
 8002e08:	4b64      	ldr	r3, [pc, #400]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d908      	bls.n	8002e26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e14:	4b61      	ldr	r3, [pc, #388]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	495e      	ldr	r1, [pc, #376]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0320 	and.w	r3, r3, #32
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69da      	ldr	r2, [r3, #28]
 8002e36:	4b59      	ldr	r3, [pc, #356]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d908      	bls.n	8002e54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e42:	4b56      	ldr	r3, [pc, #344]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4953      	ldr	r1, [pc, #332]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d010      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	4b4d      	ldr	r3, [pc, #308]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d908      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f023 020f 	bic.w	r2, r3, #15
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	4947      	ldr	r1, [pc, #284]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d055      	beq.n	8002f3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e8e:	4b43      	ldr	r3, [pc, #268]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4940      	ldr	r1, [pc, #256]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d107      	bne.n	8002eb8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d121      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e0f6      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec0:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d115      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0ea      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d107      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ed8:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0de      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0d6      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4925      	ldr	r1, [pc, #148]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0a:	f7fe fa23 	bl	8001354 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f10:	e00a      	b.n	8002f28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f12:	f7fe fa1f 	bl	8001354 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e0be      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f28:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d1eb      	bne.n	8002f12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d208      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f023 020f 	bic.w	r2, r3, #15
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	490e      	ldr	r1, [pc, #56]	@ (8002f9c <HAL_RCC_ClockConfig+0x244>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d214      	bcs.n	8002fa0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4906      	ldr	r1, [pc, #24]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b04      	ldr	r3, [pc, #16]	@ (8002f98 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d005      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e086      	b.n	80030a6 <HAL_RCC_ClockConfig+0x34e>
 8002f98:	52002000 	.word	0x52002000
 8002f9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d208      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fbc:	4b3c      	ldr	r3, [pc, #240]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	4939      	ldr	r1, [pc, #228]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d208      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fea:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	492e      	ldr	r1, [pc, #184]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	2b00      	cmp	r3, #0
 8003006:	d010      	beq.n	800302a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	4b28      	ldr	r3, [pc, #160]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003014:	429a      	cmp	r2, r3
 8003016:	d208      	bcs.n	800302a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003018:	4b25      	ldr	r3, [pc, #148]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4922      	ldr	r1, [pc, #136]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8003026:	4313      	orrs	r3, r2
 8003028:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d010      	beq.n	8003058 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003042:	429a      	cmp	r2, r3
 8003044:	d208      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003046:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	4917      	ldr	r1, [pc, #92]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8003054:	4313      	orrs	r3, r2
 8003056:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003058:	f000 f834 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	4912      	ldr	r1, [pc, #72]	@ (80030b4 <HAL_RCC_ClockConfig+0x35c>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
 8003074:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003076:	4b0e      	ldr	r3, [pc, #56]	@ (80030b0 <HAL_RCC_ClockConfig+0x358>)
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	4a0d      	ldr	r2, [pc, #52]	@ (80030b4 <HAL_RCC_ClockConfig+0x35c>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	fa22 f303 	lsr.w	r3, r2, r3
 800308c:	4a0a      	ldr	r2, [pc, #40]	@ (80030b8 <HAL_RCC_ClockConfig+0x360>)
 800308e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003090:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_RCC_ClockConfig+0x364>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003096:	4b0a      	ldr	r3, [pc, #40]	@ (80030c0 <HAL_RCC_ClockConfig+0x368>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ffd2 	bl	8001044 <HAL_InitTick>
 80030a0:	4603      	mov	r3, r0
 80030a2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	58024400 	.word	0x58024400
 80030b4:	08008fdc 	.word	0x08008fdc
 80030b8:	24000004 	.word	0x24000004
 80030bc:	24000000 	.word	0x24000000
 80030c0:	24000008 	.word	0x24000008

080030c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b089      	sub	sp, #36	@ 0x24
 80030c8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ca:	4bb3      	ldr	r3, [pc, #716]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030d2:	2b18      	cmp	r3, #24
 80030d4:	f200 8155 	bhi.w	8003382 <HAL_RCC_GetSysClockFreq+0x2be>
 80030d8:	a201      	add	r2, pc, #4	@ (adr r2, 80030e0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003145 	.word	0x08003145
 80030e4:	08003383 	.word	0x08003383
 80030e8:	08003383 	.word	0x08003383
 80030ec:	08003383 	.word	0x08003383
 80030f0:	08003383 	.word	0x08003383
 80030f4:	08003383 	.word	0x08003383
 80030f8:	08003383 	.word	0x08003383
 80030fc:	08003383 	.word	0x08003383
 8003100:	0800316b 	.word	0x0800316b
 8003104:	08003383 	.word	0x08003383
 8003108:	08003383 	.word	0x08003383
 800310c:	08003383 	.word	0x08003383
 8003110:	08003383 	.word	0x08003383
 8003114:	08003383 	.word	0x08003383
 8003118:	08003383 	.word	0x08003383
 800311c:	08003383 	.word	0x08003383
 8003120:	08003171 	.word	0x08003171
 8003124:	08003383 	.word	0x08003383
 8003128:	08003383 	.word	0x08003383
 800312c:	08003383 	.word	0x08003383
 8003130:	08003383 	.word	0x08003383
 8003134:	08003383 	.word	0x08003383
 8003138:	08003383 	.word	0x08003383
 800313c:	08003383 	.word	0x08003383
 8003140:	08003177 	.word	0x08003177
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003144:	4b94      	ldr	r3, [pc, #592]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d009      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003150:	4b91      	ldr	r3, [pc, #580]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	08db      	lsrs	r3, r3, #3
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	4a90      	ldr	r2, [pc, #576]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003162:	e111      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003164:	4b8d      	ldr	r3, [pc, #564]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003166:	61bb      	str	r3, [r7, #24]
      break;
 8003168:	e10e      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800316a:	4b8d      	ldr	r3, [pc, #564]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800316c:	61bb      	str	r3, [r7, #24]
      break;
 800316e:	e10b      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003170:	4b8c      	ldr	r3, [pc, #560]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003172:	61bb      	str	r3, [r7, #24]
      break;
 8003174:	e108      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003176:	4b88      	ldr	r3, [pc, #544]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003180:	4b85      	ldr	r3, [pc, #532]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800318c:	4b82      	ldr	r3, [pc, #520]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003196:	4b80      	ldr	r3, [pc, #512]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f000 80e1 	beq.w	800337c <HAL_RCC_GetSysClockFreq+0x2b8>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b02      	cmp	r3, #2
 80031be:	f000 8083 	beq.w	80032c8 <HAL_RCC_GetSysClockFreq+0x204>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f200 80a1 	bhi.w	800330c <HAL_RCC_GetSysClockFreq+0x248>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x114>
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d056      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031d6:	e099      	b.n	800330c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d02d      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031e4:	4b6c      	ldr	r3, [pc, #432]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	4a6b      	ldr	r2, [pc, #428]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	4b62      	ldr	r3, [pc, #392]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003222:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800323e:	e087      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b51      	ldr	r3, [pc, #324]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003282:	e065      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b40      	ldr	r3, [pc, #256]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032aa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032c6:	e043      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800330a:	e021      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b1e      	ldr	r3, [pc, #120]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800334e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003354:	0a5b      	lsrs	r3, r3, #9
 8003356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800335a:	3301      	adds	r3, #1
 800335c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	ee07 3a90 	vmov	s15, r3
 8003364:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003368:	edd7 6a07 	vldr	s13, [r7, #28]
 800336c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003374:	ee17 3a90 	vmov	r3, s15
 8003378:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800337a:	e005      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	61bb      	str	r3, [r7, #24]
      break;
 8003380:	e002      	b.n	8003388 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003384:	61bb      	str	r3, [r7, #24]
      break;
 8003386:	bf00      	nop
  }

  return sysclockfreq;
 8003388:	69bb      	ldr	r3, [r7, #24]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	@ 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	58024400 	.word	0x58024400
 800339c:	03d09000 	.word	0x03d09000
 80033a0:	003d0900 	.word	0x003d0900
 80033a4:	007a1200 	.word	0x007a1200
 80033a8:	46000000 	.word	0x46000000
 80033ac:	4c742400 	.word	0x4c742400
 80033b0:	4a742400 	.word	0x4a742400
 80033b4:	4af42400 	.word	0x4af42400

080033b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033be:	f7ff fe81 	bl	80030c4 <HAL_RCC_GetSysClockFreq>
 80033c2:	4602      	mov	r2, r0
 80033c4:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <HAL_RCC_GetHCLKFreq+0x50>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	0a1b      	lsrs	r3, r3, #8
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	490f      	ldr	r1, [pc, #60]	@ (800340c <HAL_RCC_GetHCLKFreq+0x54>)
 80033d0:	5ccb      	ldrb	r3, [r1, r3]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	fa22 f303 	lsr.w	r3, r2, r3
 80033da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003408 <HAL_RCC_GetHCLKFreq+0x50>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 030f 	and.w	r3, r3, #15
 80033e4:	4a09      	ldr	r2, [pc, #36]	@ (800340c <HAL_RCC_GetHCLKFreq+0x54>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a07      	ldr	r2, [pc, #28]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x58>)
 80033f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033f6:	4a07      	ldr	r2, [pc, #28]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x58>)
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	58024400 	.word	0x58024400
 800340c:	08008fdc 	.word	0x08008fdc
 8003410:	24000004 	.word	0x24000004
 8003414:	24000000 	.word	0x24000000

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800341c:	f7ff ffcc 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b06      	ldr	r3, [pc, #24]	@ (800343c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	4904      	ldr	r1, [pc, #16]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x28>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	58024400 	.word	0x58024400
 8003440:	08008fdc 	.word	0x08008fdc

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003448:	f7ff ffb6 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	0a1b      	lsrs	r3, r3, #8
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4904      	ldr	r1, [pc, #16]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x28>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	58024400 	.word	0x58024400
 800346c:	08008fdc 	.word	0x08008fdc

08003470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	223f      	movs	r2, #63	@ 0x3f
 800347e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003480:	4b1a      	ldr	r3, [pc, #104]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0207 	and.w	r2, r3, #7
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800348c:	4b17      	ldr	r3, [pc, #92]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034a4:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_RCC_GetClockConfig+0x7c>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_RCC_GetClockConfig+0x80>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 020f 	and.w	r2, r3, #15
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	601a      	str	r2, [r3, #0]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	58024400 	.word	0x58024400
 80034f0:	52002000 	.word	0x52002000

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b0ca      	sub	sp, #296	@ 0x128
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003500:	2300      	movs	r3, #0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003506:	2300      	movs	r3, #0
 8003508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003518:	2500      	movs	r5, #0
 800351a:	ea54 0305 	orrs.w	r3, r4, r5
 800351e:	d049      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003524:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003526:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800352a:	d02f      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800352c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003530:	d828      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003532:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003536:	d01a      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003538:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800353c:	d822      	bhi.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003546:	d007      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003548:	e01c      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800354a:	4bb8      	ldr	r3, [pc, #736]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354e:	4ab7      	ldr	r2, [pc, #732]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003556:	e01a      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355c:	3308      	adds	r3, #8
 800355e:	2102      	movs	r1, #2
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fc8f 	bl	8004e84 <RCCEx_PLL2_Config>
 8003566:	4603      	mov	r3, r0
 8003568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800356c:	e00f      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003572:	3328      	adds	r3, #40	@ 0x28
 8003574:	2102      	movs	r1, #2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 fd36 	bl	8004fe8 <RCCEx_PLL3_Config>
 800357c:	4603      	mov	r3, r0
 800357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003582:	e004      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800358a:	e000      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800358c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10a      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003596:	4ba5      	ldr	r3, [pc, #660]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800359e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a4:	4aa1      	ldr	r2, [pc, #644]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a6:	430b      	orrs	r3, r1
 80035a8:	6513      	str	r3, [r2, #80]	@ 0x50
 80035aa:	e003      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035c0:	f04f 0900 	mov.w	r9, #0
 80035c4:	ea58 0309 	orrs.w	r3, r8, r9
 80035c8:	d047      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d82a      	bhi.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	080035f1 	.word	0x080035f1
 80035e0:	080035ff 	.word	0x080035ff
 80035e4:	08003615 	.word	0x08003615
 80035e8:	08003633 	.word	0x08003633
 80035ec:	08003633 	.word	0x08003633
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f0:	4b8e      	ldr	r3, [pc, #568]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	4a8d      	ldr	r2, [pc, #564]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fc:	e01a      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003602:	3308      	adds	r3, #8
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f001 fc3c 	bl	8004e84 <RCCEx_PLL2_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003612:	e00f      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	3328      	adds	r3, #40	@ 0x28
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f001 fce3 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003628:	e004      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003630:	e000      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800363c:	4b7b      	ldr	r3, [pc, #492]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800363e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003640:	f023 0107 	bic.w	r1, r3, #7
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	4a78      	ldr	r2, [pc, #480]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003650:	e003      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800365a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003666:	f04f 0b00 	mov.w	fp, #0
 800366a:	ea5a 030b 	orrs.w	r3, sl, fp
 800366e:	d04c      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800367a:	d030      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800367c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003680:	d829      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003682:	2bc0      	cmp	r3, #192	@ 0xc0
 8003684:	d02d      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003686:	2bc0      	cmp	r3, #192	@ 0xc0
 8003688:	d825      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800368a:	2b80      	cmp	r3, #128	@ 0x80
 800368c:	d018      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800368e:	2b80      	cmp	r3, #128	@ 0x80
 8003690:	d821      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003696:	2b40      	cmp	r3, #64	@ 0x40
 8003698:	d007      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800369a:	e01c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b63      	ldr	r3, [pc, #396]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a62      	ldr	r2, [pc, #392]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036a8:	e01c      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	3308      	adds	r3, #8
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fbe6 	bl	8004e84 <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036be:	e011      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	3328      	adds	r3, #40	@ 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fc8d 	bl	8004fe8 <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036d4:	e006      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036ec:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fa:	4a4c      	ldr	r2, [pc, #304]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003716:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003720:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d053      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003732:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003736:	d035      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003738:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800373c:	d82e      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800373e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003742:	d031      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003744:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003748:	d828      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800374a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800374e:	d01a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003754:	d822      	bhi.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800375a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375e:	d007      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003760:	e01c      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003762:	4b32      	ldr	r3, [pc, #200]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003766:	4a31      	ldr	r2, [pc, #196]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800376e:	e01c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	3308      	adds	r3, #8
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fb83 	bl	8004e84 <RCCEx_PLL2_Config>
 800377e:	4603      	mov	r3, r0
 8003780:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003784:	e011      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378a:	3328      	adds	r3, #40	@ 0x28
 800378c:	2100      	movs	r1, #0
 800378e:	4618      	mov	r0, r3
 8003790:	f001 fc2a 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003794:	4603      	mov	r3, r0
 8003796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379a:	e006      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a2:	e002      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037a4:	bf00      	nop
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037b2:	4b1e      	ldr	r3, [pc, #120]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037c2:	4a1a      	ldr	r2, [pc, #104]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037e2:	2300      	movs	r3, #0
 80037e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037e8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037ec:	460b      	mov	r3, r1
 80037ee:	4313      	orrs	r3, r2
 80037f0:	d056      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037fe:	d038      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003800:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003804:	d831      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003806:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800380a:	d034      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800380c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003810:	d82b      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003812:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003816:	d01d      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003818:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800381c:	d825      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003826:	d00a      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003828:	e01f      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800382a:	bf00      	nop
 800382c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4ba2      	ldr	r3, [pc, #648]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	4aa1      	ldr	r2, [pc, #644]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800383c:	e01c      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003842:	3308      	adds	r3, #8
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fb1c 	bl	8004e84 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fbc3 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10b      	bne.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003880:	4b8e      	ldr	r3, [pc, #568]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003890:	4a8a      	ldr	r2, [pc, #552]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003892:	430b      	orrs	r3, r1
 8003894:	6593      	str	r3, [r2, #88]	@ 0x58
 8003896:	e003      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800389c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038ba:	460b      	mov	r3, r1
 80038bc:	4313      	orrs	r3, r2
 80038be:	d03a      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	2b30      	cmp	r3, #48	@ 0x30
 80038c8:	d01f      	beq.n	800390a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038ca:	2b30      	cmp	r3, #48	@ 0x30
 80038cc:	d819      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d00c      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d815      	bhi.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d019      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d111      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038de:	4b77      	ldr	r3, [pc, #476]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	4a76      	ldr	r2, [pc, #472]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ea:	e011      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	3308      	adds	r3, #8
 80038f2:	2102      	movs	r1, #2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 fac5 	bl	8004e84 <RCCEx_PLL2_Config>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003900:	e006      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003908:	e002      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800390e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10a      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003918:	4b68      	ldr	r3, [pc, #416]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	4a65      	ldr	r2, [pc, #404]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003928:	430b      	orrs	r3, r1
 800392a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003942:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003946:	2300      	movs	r3, #0
 8003948:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800394c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003950:	460b      	mov	r3, r1
 8003952:	4313      	orrs	r3, r2
 8003954:	d051      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800395a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800395c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003960:	d035      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003962:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003966:	d82e      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003968:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800396c:	d031      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800396e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003972:	d828      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003978:	d01a      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800397a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800397e:	d822      	bhi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003988:	d007      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800398a:	e01c      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800398c:	4b4b      	ldr	r3, [pc, #300]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003992:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003996:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003998:	e01c      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	3308      	adds	r3, #8
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f001 fa6e 	bl	8004e84 <RCCEx_PLL2_Config>
 80039a8:	4603      	mov	r3, r0
 80039aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039ae:	e011      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	3328      	adds	r3, #40	@ 0x28
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 fb15 	bl	8004fe8 <RCCEx_PLL3_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039c4:	e006      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039cc:	e002      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039dc:	4b37      	ldr	r3, [pc, #220]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ea:	4a34      	ldr	r2, [pc, #208]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80039f0:	e003      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a02:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a10:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a14:	460b      	mov	r3, r1
 8003a16:	4313      	orrs	r3, r2
 8003a18:	d056      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a24:	d033      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2a:	d82c      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a30:	d02f      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a36:	d826      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a3c:	d02b      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a42:	d820      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a48:	d012      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a4e:	d81a      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d022      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a58:	d115      	bne.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	3308      	adds	r3, #8
 8003a60:	2101      	movs	r1, #1
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 fa0e 	bl	8004e84 <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a6e:	e015      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a74:	3328      	adds	r3, #40	@ 0x28
 8003a76:	2101      	movs	r1, #1
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 fab5 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a84:	e00a      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a8c:	e006      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a8e:	bf00      	nop
 8003a90:	e004      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a92:	bf00      	nop
 8003a94:	e002      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a96:	bf00      	nop
 8003a98:	e000      	b.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10d      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003aa4:	4b05      	ldr	r3, [pc, #20]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aa8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab2:	4a02      	ldr	r2, [pc, #8]	@ (8003abc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ab8:	e006      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003aba:	bf00      	nop
 8003abc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ade:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d055      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003af0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af4:	d033      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003af6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003afa:	d82c      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b00:	d02f      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b06:	d826      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b0c:	d02b      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b0e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b12:	d820      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b18:	d012      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b1e:	d81a      	bhi.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d022      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b28:	d115      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 f9a6 	bl	8004e84 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b3e:	e015      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	3328      	adds	r3, #40	@ 0x28
 8003b46:	2101      	movs	r1, #1
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f001 fa4d 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b54:	e00a      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b5c:	e006      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b5e:	bf00      	nop
 8003b60:	e004      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b62:	bf00      	nop
 8003b64:	e002      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b66:	bf00      	nop
 8003b68:	e000      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10b      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b74:	4ba3      	ldr	r3, [pc, #652]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b78:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b84:	4a9f      	ldr	r2, [pc, #636]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b86:	430b      	orrs	r3, r1
 8003b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8a:	e003      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b9c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ba0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	d037      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bbe:	d00e      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bc4:	d816      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d018      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bce:	d111      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bd0:	4b8c      	ldr	r3, [pc, #560]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd4:	4a8b      	ldr	r2, [pc, #556]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bdc:	e00f      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	3308      	adds	r3, #8
 8003be4:	2101      	movs	r1, #1
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f94c 	bl	8004e84 <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bf2:	e004      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfa:	e000      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003bfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10a      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c06:	4b7f      	ldr	r3, [pc, #508]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c14:	4a7b      	ldr	r2, [pc, #492]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c16:	430b      	orrs	r3, r1
 8003c18:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	d039      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4a:	2b03      	cmp	r3, #3
 8003c4c:	d81c      	bhi.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c54:	08003c91 	.word	0x08003c91
 8003c58:	08003c65 	.word	0x08003c65
 8003c5c:	08003c73 	.word	0x08003c73
 8003c60:	08003c91 	.word	0x08003c91
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c64:	4b67      	ldr	r3, [pc, #412]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	4a66      	ldr	r2, [pc, #408]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c70:	e00f      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	3308      	adds	r3, #8
 8003c78:	2102      	movs	r1, #2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 f902 	bl	8004e84 <RCCEx_PLL2_Config>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c86:	e004      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c8e:	e000      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9e:	f023 0103 	bic.w	r1, r3, #3
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca8:	4a56      	ldr	r2, [pc, #344]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003caa:	430b      	orrs	r3, r1
 8003cac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cae:	e003      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f000 809f 	beq.w	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cda:	4b4b      	ldr	r3, [pc, #300]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4a      	ldr	r2, [pc, #296]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ce6:	f7fd fb35 	bl	8001354 <HAL_GetTick>
 8003cea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cee:	e00b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf0:	f7fd fb30 	bl	8001354 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b64      	cmp	r3, #100	@ 0x64
 8003cfe:	d903      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d06:	e005      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d08:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0ed      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d179      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d1c:	4b39      	ldr	r3, [pc, #228]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d1e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d28:	4053      	eors	r3, r2
 8003d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d32:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d3e:	4b31      	ldr	r3, [pc, #196]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	4a30      	ldr	r2, [pc, #192]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d54:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d56:	4a2b      	ldr	r2, [pc, #172]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d5c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d6a:	d118      	bne.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd faf2 	bl	8001354 <HAL_GetTick>
 8003d70:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d74:	e00d      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d76:	f7fd faed 	bl	8001354 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d80:	1ad2      	subs	r2, r2, r3
 8003d82:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d903      	bls.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d90:	e005      	b.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d92:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0eb      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d129      	bne.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003db6:	d10e      	bne.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003db8:	4b12      	ldr	r3, [pc, #72]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dc8:	091a      	lsrs	r2, r3, #4
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	4a0d      	ldr	r2, [pc, #52]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	6113      	str	r3, [r2, #16]
 8003dd4:	e005      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4a0a      	ldr	r2, [pc, #40]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ddc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003de0:	6113      	str	r3, [r2, #16]
 8003de2:	4b08      	ldr	r3, [pc, #32]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df4:	430b      	orrs	r3, r1
 8003df6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df8:	e00e      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e02:	e009      	b.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e04:	58024400 	.word	0x58024400
 8003e08:	58024800 	.word	0x58024800
 8003e0c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e20:	f002 0301 	and.w	r3, r2, #1
 8003e24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e2e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e32:	460b      	mov	r3, r1
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f000 8089 	beq.w	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e40:	2b28      	cmp	r3, #40	@ 0x28
 8003e42:	d86b      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e44:	a201      	add	r2, pc, #4	@ (adr r2, 8003e4c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003f25 	.word	0x08003f25
 8003e50:	08003f1d 	.word	0x08003f1d
 8003e54:	08003f1d 	.word	0x08003f1d
 8003e58:	08003f1d 	.word	0x08003f1d
 8003e5c:	08003f1d 	.word	0x08003f1d
 8003e60:	08003f1d 	.word	0x08003f1d
 8003e64:	08003f1d 	.word	0x08003f1d
 8003e68:	08003f1d 	.word	0x08003f1d
 8003e6c:	08003ef1 	.word	0x08003ef1
 8003e70:	08003f1d 	.word	0x08003f1d
 8003e74:	08003f1d 	.word	0x08003f1d
 8003e78:	08003f1d 	.word	0x08003f1d
 8003e7c:	08003f1d 	.word	0x08003f1d
 8003e80:	08003f1d 	.word	0x08003f1d
 8003e84:	08003f1d 	.word	0x08003f1d
 8003e88:	08003f1d 	.word	0x08003f1d
 8003e8c:	08003f07 	.word	0x08003f07
 8003e90:	08003f1d 	.word	0x08003f1d
 8003e94:	08003f1d 	.word	0x08003f1d
 8003e98:	08003f1d 	.word	0x08003f1d
 8003e9c:	08003f1d 	.word	0x08003f1d
 8003ea0:	08003f1d 	.word	0x08003f1d
 8003ea4:	08003f1d 	.word	0x08003f1d
 8003ea8:	08003f1d 	.word	0x08003f1d
 8003eac:	08003f25 	.word	0x08003f25
 8003eb0:	08003f1d 	.word	0x08003f1d
 8003eb4:	08003f1d 	.word	0x08003f1d
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003f1d 	.word	0x08003f1d
 8003ec0:	08003f1d 	.word	0x08003f1d
 8003ec4:	08003f1d 	.word	0x08003f1d
 8003ec8:	08003f1d 	.word	0x08003f1d
 8003ecc:	08003f25 	.word	0x08003f25
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003f1d 	.word	0x08003f1d
 8003ed8:	08003f1d 	.word	0x08003f1d
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f1d 	.word	0x08003f1d
 8003ee4:	08003f1d 	.word	0x08003f1d
 8003ee8:	08003f1d 	.word	0x08003f1d
 8003eec:	08003f25 	.word	0x08003f25
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 ffc3 	bl	8004e84 <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f04:	e00f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f0a:	3328      	adds	r3, #40	@ 0x28
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f001 f86a 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f22:	e000      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f2e:	4bbf      	ldr	r3, [pc, #764]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f32:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f3c:	4abb      	ldr	r2, [pc, #748]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3e:	430b      	orrs	r3, r1
 8003f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f002 0302 	and.w	r3, r2, #2
 8003f58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f66:	460b      	mov	r3, r1
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	d041      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d824      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f76:	a201      	add	r2, pc, #4	@ (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003f95 	.word	0x08003f95
 8003f84:	08003fab 	.word	0x08003fab
 8003f88:	08003fc9 	.word	0x08003fc9
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fc9 	.word	0x08003fc9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f98:	3308      	adds	r3, #8
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 ff71 	bl	8004e84 <RCCEx_PLL2_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	3328      	adds	r3, #40	@ 0x28
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 f818 	bl	8004fe8 <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10a      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fd2:	4b96      	ldr	r3, [pc, #600]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f023 0107 	bic.w	r1, r3, #7
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fe0:	4a92      	ldr	r2, [pc, #584]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe2:	430b      	orrs	r3, r1
 8003fe4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fe6:	e003      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f002 0304 	and.w	r3, r2, #4
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004006:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800400a:	460b      	mov	r3, r1
 800400c:	4313      	orrs	r3, r2
 800400e:	d044      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004018:	2b05      	cmp	r3, #5
 800401a:	d825      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800401c:	a201      	add	r2, pc, #4	@ (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004071 	.word	0x08004071
 8004028:	0800403d 	.word	0x0800403d
 800402c:	08004053 	.word	0x08004053
 8004030:	08004071 	.word	0x08004071
 8004034:	08004071 	.word	0x08004071
 8004038:	08004071 	.word	0x08004071
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	3308      	adds	r3, #8
 8004042:	2101      	movs	r1, #1
 8004044:	4618      	mov	r0, r3
 8004046:	f000 ff1d 	bl	8004e84 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004050:	e00f      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	3328      	adds	r3, #40	@ 0x28
 8004058:	2101      	movs	r1, #1
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ffc4 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800407a:	4b6c      	ldr	r3, [pc, #432]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	f023 0107 	bic.w	r1, r3, #7
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800408a:	4a68      	ldr	r2, [pc, #416]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f002 0320 	and.w	r3, r2, #32
 80040a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040b4:	460b      	mov	r3, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d055      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040c6:	d033      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040cc:	d82c      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d2:	d02f      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d8:	d826      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040de:	d02b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040e4:	d820      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040ea:	d012      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040f0:	d81a      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d022      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040fa:	d115      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	3308      	adds	r3, #8
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 febd 	bl	8004e84 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004110:	e015      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 ff64 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10b      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004146:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004156:	4a35      	ldr	r2, [pc, #212]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6553      	str	r3, [r2, #84]	@ 0x54
 800415c:	e003      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800415e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800417c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d058      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800418e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004192:	d033      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004194:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004198:	d82c      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800419e:	d02f      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a4:	d826      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041aa:	d02b      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041b0:	d820      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b6:	d012      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041bc:	d81a      	bhi.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d022      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c6:	d115      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041cc:	3308      	adds	r3, #8
 80041ce:	2100      	movs	r1, #0
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fe57 	bl	8004e84 <RCCEx_PLL2_Config>
 80041d6:	4603      	mov	r3, r0
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041dc:	e015      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e2:	3328      	adds	r3, #40	@ 0x28
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fefe 	bl	8004fe8 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041f2:	e00a      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fa:	e006      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041fc:	bf00      	nop
 80041fe:	e004      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004200:	bf00      	nop
 8004202:	e002      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004204:	bf00      	nop
 8004206:	e000      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10e      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004212:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004222:	4a02      	ldr	r2, [pc, #8]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6593      	str	r3, [r2, #88]	@ 0x58
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800422a:	bf00      	nop
 800422c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800424e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d055      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004260:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004264:	d033      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004266:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800426a:	d82c      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800426c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004270:	d02f      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004272:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004276:	d826      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004278:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800427c:	d02b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800427e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004282:	d820      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004284:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004288:	d012      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428e:	d81a      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004298:	d115      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	3308      	adds	r3, #8
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fdee 	bl	8004e84 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042ae:	e015      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	3328      	adds	r3, #40	@ 0x28
 80042b6:	2102      	movs	r1, #2
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fe95 	bl	8004fe8 <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042c4:	e00a      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042e4:	4ba1      	ldr	r3, [pc, #644]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042f4:	4a9d      	ldr	r2, [pc, #628]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042fa:	e003      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f002 0308 	and.w	r3, r2, #8
 8004310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800431a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d01e      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004330:	d10c      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 fe54 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d002      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800434c:	4b87      	ldr	r3, [pc, #540]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004350:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435c:	4a83      	ldr	r2, [pc, #524]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435e:	430b      	orrs	r3, r1
 8004360:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f002 0310 	and.w	r3, r2, #16
 800436e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004372:	2300      	movs	r3, #0
 8004374:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004378:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d01e      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800438a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800438e:	d10c      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004394:	3328      	adds	r3, #40	@ 0x28
 8004396:	2102      	movs	r1, #2
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fe25 	bl	8004fe8 <RCCEx_PLL3_Config>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d002      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043aa:	4b70      	ldr	r3, [pc, #448]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ba:	4a6c      	ldr	r2, [pc, #432]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043bc:	430b      	orrs	r3, r1
 80043be:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d03e      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043ec:	d022      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043f2:	d81b      	bhi.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d003      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043fc:	d00b      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043fe:	e015      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004404:	3308      	adds	r3, #8
 8004406:	2100      	movs	r1, #0
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fd3b 	bl	8004e84 <RCCEx_PLL2_Config>
 800440e:	4603      	mov	r3, r0
 8004410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004414:	e00f      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	3328      	adds	r3, #40	@ 0x28
 800441c:	2102      	movs	r1, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fde2 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004424:	4603      	mov	r3, r0
 8004426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800442a:	e004      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004432:	e000      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10b      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800443e:	4b4b      	ldr	r3, [pc, #300]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800444e:	4a47      	ldr	r2, [pc, #284]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004450:	430b      	orrs	r3, r1
 8004452:	6593      	str	r3, [r2, #88]	@ 0x58
 8004454:	e003      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800446a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800446c:	2300      	movs	r3, #0
 800446e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004470:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d03b      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004482:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004486:	d01f      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004488:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800448c:	d818      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800448e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004492:	d003      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004494:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004498:	d007      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800449a:	e011      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449c:	4b33      	ldr	r3, [pc, #204]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	4a32      	ldr	r2, [pc, #200]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044a8:	e00f      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd98 	bl	8004fe8 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044be:	e004      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044d2:	4b26      	ldr	r3, [pc, #152]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e2:	4a22      	ldr	r2, [pc, #136]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80044e8:	e003      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004500:	2300      	movs	r3, #0
 8004502:	677b      	str	r3, [r7, #116]	@ 0x74
 8004504:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004508:	460b      	mov	r3, r1
 800450a:	4313      	orrs	r3, r2
 800450c:	d034      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800451c:	d007      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800451e:	e011      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004520:	4b12      	ldr	r3, [pc, #72]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	4a11      	ldr	r2, [pc, #68]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004526:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800452a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800452c:	e00e      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	3308      	adds	r3, #8
 8004534:	2102      	movs	r1, #2
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fca4 	bl	8004e84 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004542:	e003      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800454a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800454c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004554:	4b05      	ldr	r3, [pc, #20]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004558:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800455c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	4a02      	ldr	r2, [pc, #8]	@ (800456c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004564:	430b      	orrs	r3, r1
 8004566:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004568:	e006      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800456a:	bf00      	nop
 800456c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004584:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004586:	2300      	movs	r3, #0
 8004588:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800458a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d00c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	3328      	adds	r3, #40	@ 0x28
 800459a:	2102      	movs	r1, #2
 800459c:	4618      	mov	r0, r3
 800459e:	f000 fd23 	bl	8004fe8 <RCCEx_PLL3_Config>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80045bc:	2300      	movs	r3, #0
 80045be:	667b      	str	r3, [r7, #100]	@ 0x64
 80045c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045c4:	460b      	mov	r3, r1
 80045c6:	4313      	orrs	r3, r2
 80045c8:	d038      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d6:	d018      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045dc:	d811      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e2:	d014      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e8:	d80b      	bhi.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d011      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f2:	d106      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f4:	4bc3      	ldr	r3, [pc, #780]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	4ac2      	ldr	r2, [pc, #776]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004600:	e008      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800460a:	bf00      	nop
 800460c:	e002      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800460e:	bf00      	nop
 8004610:	e000      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004614:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800461c:	4bb9      	ldr	r3, [pc, #740]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004620:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004628:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800462c:	4ab5      	ldr	r2, [pc, #724]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462e:	430b      	orrs	r3, r1
 8004630:	6553      	str	r3, [r2, #84]	@ 0x54
 8004632:	e003      	b.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004648:	65bb      	str	r3, [r7, #88]	@ 0x58
 800464a:	2300      	movs	r3, #0
 800464c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800464e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004658:	4baa      	ldr	r3, [pc, #680]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004666:	4aa7      	ldr	r2, [pc, #668]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004668:	430b      	orrs	r3, r1
 800466a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004678:	653b      	str	r3, [r7, #80]	@ 0x50
 800467a:	2300      	movs	r3, #0
 800467c:	657b      	str	r3, [r7, #84]	@ 0x54
 800467e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004688:	4b9e      	ldr	r3, [pc, #632]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004698:	4a9a      	ldr	r2, [pc, #616]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	430b      	orrs	r3, r1
 800469c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046ac:	2300      	movs	r3, #0
 80046ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046b0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d009      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ba:	4b92      	ldr	r3, [pc, #584]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046be:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c8:	4a8e      	ldr	r2, [pc, #568]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046da:	643b      	str	r3, [r7, #64]	@ 0x40
 80046dc:	2300      	movs	r3, #0
 80046de:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046e4:	460b      	mov	r3, r1
 80046e6:	4313      	orrs	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046ea:	4b86      	ldr	r3, [pc, #536]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4a85      	ldr	r2, [pc, #532]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046f4:	6113      	str	r3, [r2, #16]
 80046f6:	4b83      	ldr	r3, [pc, #524]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f8:	6919      	ldr	r1, [r3, #16]
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004702:	4a80      	ldr	r2, [pc, #512]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004716:	2300      	movs	r3, #0
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d009      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004724:	4b77      	ldr	r3, [pc, #476]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004726:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004728:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800472c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004732:	4a74      	ldr	r2, [pc, #464]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004734:	430b      	orrs	r3, r1
 8004736:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004740:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004744:	633b      	str	r3, [r7, #48]	@ 0x30
 8004746:	2300      	movs	r3, #0
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
 800474a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d00a      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004754:	4b6b      	ldr	r3, [pc, #428]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004764:	4a67      	ldr	r2, [pc, #412]	@ (8004904 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004766:	430b      	orrs	r3, r1
 8004768:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	2100      	movs	r1, #0
 8004774:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800477c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	3308      	adds	r3, #8
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f000 fb78 	bl	8004e84 <RCCEx_PLL2_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	2100      	movs	r1, #0
 80047b4:	6239      	str	r1, [r7, #32]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80047bc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	3308      	adds	r3, #8
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f000 fb58 	bl	8004e84 <RCCEx_PLL2_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	2100      	movs	r1, #0
 80047f4:	61b9      	str	r1, [r7, #24]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d011      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	3308      	adds	r3, #8
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fb38 	bl	8004e84 <RCCEx_PLL2_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	2100      	movs	r1, #0
 8004834:	6139      	str	r1, [r7, #16]
 8004836:	f003 0308 	and.w	r3, r3, #8
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	3328      	adds	r3, #40	@ 0x28
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fbca 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004872:	2100      	movs	r1, #0
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	f003 0310 	and.w	r3, r3, #16
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004880:	460b      	mov	r3, r1
 8004882:	4313      	orrs	r3, r2
 8004884:	d011      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800488a:	3328      	adds	r3, #40	@ 0x28
 800488c:	2101      	movs	r1, #1
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fbaa 	bl	8004fe8 <RCCEx_PLL3_Config>
 8004894:	4603      	mov	r3, r0
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800489a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	2100      	movs	r1, #0
 80048b4:	6039      	str	r1, [r7, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	607b      	str	r3, [r7, #4]
 80048bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048c0:	460b      	mov	r3, r1
 80048c2:	4313      	orrs	r3, r2
 80048c4:	d011      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ca:	3328      	adds	r3, #40	@ 0x28
 80048cc:	2102      	movs	r1, #2
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fb8a 	bl	8004fe8 <RCCEx_PLL3_Config>
 80048d4:	4603      	mov	r3, r0
 80048d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048fe:	46bd      	mov	sp, r7
 8004900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004904:	58024400 	.word	0x58024400

08004908 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800490c:	f7fe fd54 	bl	80033b8 <HAL_RCC_GetHCLKFreq>
 8004910:	4602      	mov	r2, r0
 8004912:	4b06      	ldr	r3, [pc, #24]	@ (800492c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	4904      	ldr	r1, [pc, #16]	@ (8004930 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800491e:	5ccb      	ldrb	r3, [r1, r3]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	58024400 	.word	0x58024400
 8004930:	08008fdc 	.word	0x08008fdc

08004934 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	@ 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800493c:	4ba1      	ldr	r3, [pc, #644]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004946:	4b9f      	ldr	r3, [pc, #636]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	0b1b      	lsrs	r3, r3, #12
 800494c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004950:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004952:	4b9c      	ldr	r3, [pc, #624]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	091b      	lsrs	r3, r3, #4
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800495e:	4b99      	ldr	r3, [pc, #612]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004960:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004962:	08db      	lsrs	r3, r3, #3
 8004964:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	fb02 f303 	mul.w	r3, r2, r3
 800496e:	ee07 3a90 	vmov	s15, r3
 8004972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004976:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8111 	beq.w	8004ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b02      	cmp	r3, #2
 8004986:	f000 8083 	beq.w	8004a90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	2b02      	cmp	r3, #2
 800498e:	f200 80a1 	bhi.w	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d003      	beq.n	80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d056      	beq.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800499e:	e099      	b.n	8004ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049a0:	4b88      	ldr	r3, [pc, #544]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0320 	and.w	r3, r3, #32
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d02d      	beq.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049ac:	4b85      	ldr	r3, [pc, #532]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	08db      	lsrs	r3, r3, #3
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	4a84      	ldr	r2, [pc, #528]	@ (8004bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
 80049bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a06:	e087      	b.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4a:	e065      	b.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b59      	ldr	r3, [pc, #356]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8e:	e043      	b.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b48      	ldr	r3, [pc, #288]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad2:	e021      	b.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b37      	ldr	r3, [pc, #220]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bcc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b18:	4b2a      	ldr	r3, [pc, #168]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	0a5b      	lsrs	r3, r3, #9
 8004b1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3e:	ee17 2a90 	vmov	r2, s15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b46:	4b1f      	ldr	r3, [pc, #124]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b50:	ee07 3a90 	vmov	s15, r3
 8004b54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b60:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6c:	ee17 2a90 	vmov	r2, s15
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b74:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	0e1b      	lsrs	r3, r3, #24
 8004b7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b9a:	ee17 2a90 	vmov	r2, s15
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
}
 8004bb6:	bf00      	nop
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	58024400 	.word	0x58024400
 8004bc8:	03d09000 	.word	0x03d09000
 8004bcc:	46000000 	.word	0x46000000
 8004bd0:	4c742400 	.word	0x4c742400
 8004bd4:	4a742400 	.word	0x4a742400
 8004bd8:	4af42400 	.word	0x4af42400

08004bdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	@ 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004be4:	4ba1      	ldr	r3, [pc, #644]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bee:	4b9f      	ldr	r3, [pc, #636]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	0d1b      	lsrs	r3, r3, #20
 8004bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004bfa:	4b9c      	ldr	r3, [pc, #624]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c06:	4b99      	ldr	r3, [pc, #612]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	08db      	lsrs	r3, r3, #3
 8004c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 8111 	beq.w	8004e4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	f000 8083 	beq.w	8004d38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	f200 80a1 	bhi.w	8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d056      	beq.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c46:	e099      	b.n	8004d7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c48:	4b88      	ldr	r3, [pc, #544]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d02d      	beq.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c54:	4b85      	ldr	r3, [pc, #532]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	08db      	lsrs	r3, r3, #3
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	4a84      	ldr	r2, [pc, #528]	@ (8004e70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c60:	fa22 f303 	lsr.w	r3, r2, r3
 8004c64:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c92:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cae:	e087      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf2:	e065      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b59      	ldr	r3, [pc, #356]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d36:	e043      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d42:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d4a:	4b48      	ldr	r3, [pc, #288]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d52:	ee07 3a90 	vmov	s15, r3
 8004d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d5e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d7a:	e021      	b.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d8e:	4b37      	ldr	r3, [pc, #220]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	ee07 3a90 	vmov	s15, r3
 8004d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004da2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	0a5b      	lsrs	r3, r3, #9
 8004dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004de6:	ee17 2a90 	vmov	r2, s15
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dee:	4b1f      	ldr	r3, [pc, #124]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	0c1b      	lsrs	r3, r3, #16
 8004df4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df8:	ee07 3a90 	vmov	s15, r3
 8004dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e14:	ee17 2a90 	vmov	r2, s15
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e1c:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e20:	0e1b      	lsrs	r3, r3, #24
 8004e22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e42:	ee17 2a90 	vmov	r2, s15
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e4a:	e008      	b.n	8004e5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	609a      	str	r2, [r3, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	3724      	adds	r7, #36	@ 0x24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	03d09000 	.word	0x03d09000
 8004e74:	46000000 	.word	0x46000000
 8004e78:	4c742400 	.word	0x4c742400
 8004e7c:	4a742400 	.word	0x4a742400
 8004e80:	4af42400 	.word	0x4af42400

08004e84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e92:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d101      	bne.n	8004ea2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e099      	b.n	8004fd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004ea8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eae:	f7fc fa51 	bl	8001354 <HAL_GetTick>
 8004eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb4:	e008      	b.n	8004ec8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eb6:	f7fc fa4d 	bl	8001354 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e086      	b.n	8004fd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ec8:	4b45      	ldr	r3, [pc, #276]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ed4:	4b42      	ldr	r3, [pc, #264]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	031b      	lsls	r3, r3, #12
 8004ee2:	493f      	ldr	r1, [pc, #252]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	3b01      	subs	r3, #1
 8004eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	025b      	lsls	r3, r3, #9
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	3b01      	subs	r3, #1
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	061b      	lsls	r3, r3, #24
 8004f14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f18:	4931      	ldr	r1, [pc, #196]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f1e:	4b30      	ldr	r3, [pc, #192]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f22:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	492d      	ldr	r1, [pc, #180]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f30:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	f023 0220 	bic.w	r2, r3, #32
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	4928      	ldr	r1, [pc, #160]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f42:	4b27      	ldr	r3, [pc, #156]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f46:	4a26      	ldr	r2, [pc, #152]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	f023 0310 	bic.w	r3, r3, #16
 8004f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f4e:	4b24      	ldr	r3, [pc, #144]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f52:	4b24      	ldr	r3, [pc, #144]	@ (8004fe4 <RCCEx_PLL2_Config+0x160>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	69d2      	ldr	r2, [r2, #28]
 8004f5a:	00d2      	lsls	r2, r2, #3
 8004f5c:	4920      	ldr	r1, [pc, #128]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f62:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f74:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e00f      	b.n	8004fa2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d106      	bne.n	8004f96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f88:	4b15      	ldr	r3, [pc, #84]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	4a14      	ldr	r2, [pc, #80]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f94:	e005      	b.n	8004fa2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	4a11      	ldr	r2, [pc, #68]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004f9c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fa0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fc f9d1 	bl	8001354 <HAL_GetTick>
 8004fb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fb6:	f7fc f9cd 	bl	8001354 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e006      	b.n	8004fd6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fc8:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <RCCEx_PLL2_Config+0x15c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	58024400 	.word	0x58024400
 8004fe4:	ffff0007 	.word	0xffff0007

08004fe8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ff6:	4b53      	ldr	r3, [pc, #332]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d101      	bne.n	8005006 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e099      	b.n	800513a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005006:	4b4f      	ldr	r3, [pc, #316]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a4e      	ldr	r2, [pc, #312]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005012:	f7fc f99f 	bl	8001354 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005018:	e008      	b.n	800502c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800501a:	f7fc f99b 	bl	8001354 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e086      	b.n	800513a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800502c:	4b45      	ldr	r3, [pc, #276]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f0      	bne.n	800501a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005038:	4b42      	ldr	r3, [pc, #264]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	051b      	lsls	r3, r3, #20
 8005046:	493f      	ldr	r1, [pc, #252]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	628b      	str	r3, [r1, #40]	@ 0x28
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	3b01      	subs	r3, #1
 8005052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	3b01      	subs	r3, #1
 800505c:	025b      	lsls	r3, r3, #9
 800505e:	b29b      	uxth	r3, r3
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	3b01      	subs	r3, #1
 8005068:	041b      	lsls	r3, r3, #16
 800506a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	3b01      	subs	r3, #1
 8005076:	061b      	lsls	r3, r3, #24
 8005078:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800507c:	4931      	ldr	r1, [pc, #196]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005082:	4b30      	ldr	r3, [pc, #192]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	492d      	ldr	r1, [pc, #180]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005090:	4313      	orrs	r3, r2
 8005092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005094:	4b2b      	ldr	r3, [pc, #172]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	4928      	ldr	r1, [pc, #160]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050a6:	4b27      	ldr	r3, [pc, #156]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050aa:	4a26      	ldr	r2, [pc, #152]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050b2:	4b24      	ldr	r3, [pc, #144]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b6:	4b24      	ldr	r3, [pc, #144]	@ (8005148 <RCCEx_PLL3_Config+0x160>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	69d2      	ldr	r2, [r2, #28]
 80050be:	00d2      	lsls	r2, r2, #3
 80050c0:	4920      	ldr	r1, [pc, #128]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a19      	ldr	r2, [pc, #100]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e4:	e00f      	b.n	8005106 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d106      	bne.n	80050fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050ec:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	4a14      	ldr	r2, [pc, #80]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050f8:	e005      	b.n	8005106 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050fa:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 80050fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fe:	4a11      	ldr	r2, [pc, #68]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005100:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005104:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800510c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005112:	f7fc f91f 	bl	8001354 <HAL_GetTick>
 8005116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005118:	e008      	b.n	800512c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800511a:	f7fc f91b 	bl	8001354 <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800512c:	4b05      	ldr	r3, [pc, #20]	@ (8005144 <RCCEx_PLL3_Config+0x15c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0f0      	beq.n	800511a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	58024400 	.word	0x58024400
 8005148:	ffff0007 	.word	0xffff0007

0800514c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e049      	b.n	80051f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f841 	bl	80051fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4619      	mov	r1, r3
 800518a:	4610      	mov	r0, r2
 800518c:	f000 f9e8 	bl	8005560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b083      	sub	sp, #12
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
	...

08005210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b085      	sub	sp, #20
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e054      	b.n	80052d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0201 	orr.w	r2, r2, #1
 800523e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a26      	ldr	r2, [pc, #152]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005252:	d01d      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a22      	ldr	r2, [pc, #136]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a21      	ldr	r2, [pc, #132]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_Base_Start_IT+0xdc>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x80>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d115      	bne.n	80052bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b19      	ldr	r3, [pc, #100]	@ (80052fc <HAL_TIM_Base_Start_IT+0xec>)
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b06      	cmp	r3, #6
 80052a0:	d015      	beq.n	80052ce <HAL_TIM_Base_Start_IT+0xbe>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052a8:	d011      	beq.n	80052ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f042 0201 	orr.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ba:	e008      	b.n	80052ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0201 	orr.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]
 80052cc:	e000      	b.n	80052d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40010400 	.word	0x40010400
 80052f4:	40001800 	.word	0x40001800
 80052f8:	40014000 	.word	0x40014000
 80052fc:	00010007 	.word	0x00010007

08005300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d020      	beq.n	8005364 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0302 	and.w	r3, r3, #2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0202 	mvn.w	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8e9 	bl	8005522 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8db 	bl	800550e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8ec 	bl	8005536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b00      	cmp	r3, #0
 800536c:	d020      	beq.n	80053b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0204 	mvn.w	r2, #4
 8005380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8c3 	bl	8005522 <HAL_TIM_IC_CaptureCallback>
 800539c:	e005      	b.n	80053aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8b5 	bl	800550e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f8c6 	bl	8005536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d020      	beq.n	80053fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0208 	mvn.w	r2, #8
 80053cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2204      	movs	r2, #4
 80053d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f89d 	bl	8005522 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f88f 	bl	800550e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f8a0 	bl	8005536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b00      	cmp	r3, #0
 8005404:	d020      	beq.n	8005448 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0310 	and.w	r3, r3, #16
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0210 	mvn.w	r2, #16
 8005418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2208      	movs	r2, #8
 800541e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f877 	bl	8005522 <HAL_TIM_IC_CaptureCallback>
 8005434:	e005      	b.n	8005442 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f869 	bl	800550e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f87a 	bl	8005536 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00c      	beq.n	800546c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d007      	beq.n	800546c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fc02 	bl	8000c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d104      	bne.n	8005480 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 f913 	bl	80056c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f90b 	bl	80056d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d00c      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d007      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80054da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f834 	bl	800554a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00c      	beq.n	8005506 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d007      	beq.n	8005506 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f06f 0220 	mvn.w	r2, #32
 80054fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8d3 	bl	80056ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
	...

08005560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a46      	ldr	r2, [pc, #280]	@ (800568c <TIM_Base_SetConfig+0x12c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800557e:	d00f      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a43      	ldr	r2, [pc, #268]	@ (8005690 <TIM_Base_SetConfig+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a42      	ldr	r2, [pc, #264]	@ (8005694 <TIM_Base_SetConfig+0x134>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a41      	ldr	r2, [pc, #260]	@ (8005698 <TIM_Base_SetConfig+0x138>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_Base_SetConfig+0x40>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a40      	ldr	r2, [pc, #256]	@ (800569c <TIM_Base_SetConfig+0x13c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d108      	bne.n	80055b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a35      	ldr	r2, [pc, #212]	@ (800568c <TIM_Base_SetConfig+0x12c>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d01f      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c0:	d01b      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a32      	ldr	r2, [pc, #200]	@ (8005690 <TIM_Base_SetConfig+0x130>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d017      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a31      	ldr	r2, [pc, #196]	@ (8005694 <TIM_Base_SetConfig+0x134>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <TIM_Base_SetConfig+0x138>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00f      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a2f      	ldr	r2, [pc, #188]	@ (800569c <TIM_Base_SetConfig+0x13c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a2e      	ldr	r2, [pc, #184]	@ (80056a0 <TIM_Base_SetConfig+0x140>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a2d      	ldr	r2, [pc, #180]	@ (80056a4 <TIM_Base_SetConfig+0x144>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_Base_SetConfig+0x9a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2c      	ldr	r2, [pc, #176]	@ (80056a8 <TIM_Base_SetConfig+0x148>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d108      	bne.n	800560c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a16      	ldr	r2, [pc, #88]	@ (800568c <TIM_Base_SetConfig+0x12c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a18      	ldr	r2, [pc, #96]	@ (800569c <TIM_Base_SetConfig+0x13c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <TIM_Base_SetConfig+0x140>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <TIM_Base_SetConfig+0x144>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_Base_SetConfig+0xf8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a15      	ldr	r2, [pc, #84]	@ (80056a8 <TIM_Base_SetConfig+0x148>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d103      	bne.n	8005660 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	691a      	ldr	r2, [r3, #16]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d105      	bne.n	800567e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	611a      	str	r2, [r3, #16]
  }
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40010400 	.word	0x40010400
 80056a0:	40014000 	.word	0x40014000
 80056a4:	40014400 	.word	0x40014400
 80056a8:	40014800 	.word	0x40014800

080056ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e042      	b.n	8005780 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fb fbb3 	bl	8000e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2224      	movs	r2, #36	@ 0x24
 8005716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 0201 	bic.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fd90 	bl	8006258 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f825 	bl	8005788 <UART_SetConfig>
 800573e:	4603      	mov	r3, r0
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e01b      	b.n	8005780 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685a      	ldr	r2, [r3, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fe0f 	bl	800639c <UART_CheckIdleState>
 800577e:	4603      	mov	r3, r0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800578c:	b092      	sub	sp, #72	@ 0x48
 800578e:	af00      	add	r7, sp, #0
 8005790:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	689a      	ldr	r2, [r3, #8]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	431a      	orrs	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ab0 <UART_SetConfig+0x328>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	6812      	ldr	r2, [r2, #0]
 80057be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4ab3      	ldr	r2, [pc, #716]	@ (8005ab4 <UART_SetConfig+0x32c>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d004      	beq.n	80057f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f0:	4313      	orrs	r3, r2
 80057f2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	4baf      	ldr	r3, [pc, #700]	@ (8005ab8 <UART_SetConfig+0x330>)
 80057fc:	4013      	ands	r3, r2
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005804:	430b      	orrs	r3, r1
 8005806:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580e:	f023 010f 	bic.w	r1, r3, #15
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	430a      	orrs	r2, r1
 800581c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4aa6      	ldr	r2, [pc, #664]	@ (8005abc <UART_SetConfig+0x334>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d177      	bne.n	8005918 <UART_SetConfig+0x190>
 8005828:	4ba5      	ldr	r3, [pc, #660]	@ (8005ac0 <UART_SetConfig+0x338>)
 800582a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005830:	2b28      	cmp	r3, #40	@ 0x28
 8005832:	d86d      	bhi.n	8005910 <UART_SetConfig+0x188>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <UART_SetConfig+0xb4>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	080058e1 	.word	0x080058e1
 8005840:	08005911 	.word	0x08005911
 8005844:	08005911 	.word	0x08005911
 8005848:	08005911 	.word	0x08005911
 800584c:	08005911 	.word	0x08005911
 8005850:	08005911 	.word	0x08005911
 8005854:	08005911 	.word	0x08005911
 8005858:	08005911 	.word	0x08005911
 800585c:	080058e9 	.word	0x080058e9
 8005860:	08005911 	.word	0x08005911
 8005864:	08005911 	.word	0x08005911
 8005868:	08005911 	.word	0x08005911
 800586c:	08005911 	.word	0x08005911
 8005870:	08005911 	.word	0x08005911
 8005874:	08005911 	.word	0x08005911
 8005878:	08005911 	.word	0x08005911
 800587c:	080058f1 	.word	0x080058f1
 8005880:	08005911 	.word	0x08005911
 8005884:	08005911 	.word	0x08005911
 8005888:	08005911 	.word	0x08005911
 800588c:	08005911 	.word	0x08005911
 8005890:	08005911 	.word	0x08005911
 8005894:	08005911 	.word	0x08005911
 8005898:	08005911 	.word	0x08005911
 800589c:	080058f9 	.word	0x080058f9
 80058a0:	08005911 	.word	0x08005911
 80058a4:	08005911 	.word	0x08005911
 80058a8:	08005911 	.word	0x08005911
 80058ac:	08005911 	.word	0x08005911
 80058b0:	08005911 	.word	0x08005911
 80058b4:	08005911 	.word	0x08005911
 80058b8:	08005911 	.word	0x08005911
 80058bc:	08005901 	.word	0x08005901
 80058c0:	08005911 	.word	0x08005911
 80058c4:	08005911 	.word	0x08005911
 80058c8:	08005911 	.word	0x08005911
 80058cc:	08005911 	.word	0x08005911
 80058d0:	08005911 	.word	0x08005911
 80058d4:	08005911 	.word	0x08005911
 80058d8:	08005911 	.word	0x08005911
 80058dc:	08005909 	.word	0x08005909
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e222      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e21e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e21a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e216      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005900:	2320      	movs	r3, #32
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e212      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005908:	2340      	movs	r3, #64	@ 0x40
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e20e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e20a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a69      	ldr	r2, [pc, #420]	@ (8005ac4 <UART_SetConfig+0x33c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d130      	bne.n	8005984 <UART_SetConfig+0x1fc>
 8005922:	4b67      	ldr	r3, [pc, #412]	@ (8005ac0 <UART_SetConfig+0x338>)
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b05      	cmp	r3, #5
 800592c:	d826      	bhi.n	800597c <UART_SetConfig+0x1f4>
 800592e:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x1ac>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	0800594d 	.word	0x0800594d
 8005938:	08005955 	.word	0x08005955
 800593c:	0800595d 	.word	0x0800595d
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005975 	.word	0x08005975
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e1ec      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e1e8      	b.n	8005d2e <UART_SetConfig+0x5a6>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e1e4      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e1e0      	b.n	8005d2e <UART_SetConfig+0x5a6>
 800596c:	2320      	movs	r3, #32
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e1dc      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005974:	2340      	movs	r3, #64	@ 0x40
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e1d8      	b.n	8005d2e <UART_SetConfig+0x5a6>
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e1d4      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac8 <UART_SetConfig+0x340>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d130      	bne.n	80059f0 <UART_SetConfig+0x268>
 800598e:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac0 <UART_SetConfig+0x338>)
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b05      	cmp	r3, #5
 8005998:	d826      	bhi.n	80059e8 <UART_SetConfig+0x260>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <UART_SetConfig+0x218>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e1b6      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e1b2      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e1ae      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e1aa      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059d8:	2320      	movs	r3, #32
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e1a6      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059e0:	2340      	movs	r3, #64	@ 0x40
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e1a2      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059e8:	2380      	movs	r3, #128	@ 0x80
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e19e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a35      	ldr	r2, [pc, #212]	@ (8005acc <UART_SetConfig+0x344>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d130      	bne.n	8005a5c <UART_SetConfig+0x2d4>
 80059fa:	4b31      	ldr	r3, [pc, #196]	@ (8005ac0 <UART_SetConfig+0x338>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	d826      	bhi.n	8005a54 <UART_SetConfig+0x2cc>
 8005a06:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <UART_SetConfig+0x284>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a25 	.word	0x08005a25
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a45 	.word	0x08005a45
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e180      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e17c      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e178      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e174      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a44:	2320      	movs	r3, #32
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e170      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a4c:	2340      	movs	r3, #64	@ 0x40
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e16c      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a54:	2380      	movs	r3, #128	@ 0x80
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5a:	e168      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <UART_SetConfig+0x348>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d142      	bne.n	8005aec <UART_SetConfig+0x364>
 8005a66:	4b16      	ldr	r3, [pc, #88]	@ (8005ac0 <UART_SetConfig+0x338>)
 8005a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a6a:	f003 0307 	and.w	r3, r3, #7
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d838      	bhi.n	8005ae4 <UART_SetConfig+0x35c>
 8005a72:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <UART_SetConfig+0x2f0>)
 8005a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a78:	08005a91 	.word	0x08005a91
 8005a7c:	08005a99 	.word	0x08005a99
 8005a80:	08005aa1 	.word	0x08005aa1
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ad5 	.word	0x08005ad5
 8005a8c:	08005add 	.word	0x08005add
 8005a90:	2300      	movs	r3, #0
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e14a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005a98:	2304      	movs	r3, #4
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e146      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e142      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e13e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005ab0:	cfff69f3 	.word	0xcfff69f3
 8005ab4:	58000c00 	.word	0x58000c00
 8005ab8:	11fff4ff 	.word	0x11fff4ff
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	40004400 	.word	0x40004400
 8005ac8:	40004800 	.word	0x40004800
 8005acc:	40004c00 	.word	0x40004c00
 8005ad0:	40005000 	.word	0x40005000
 8005ad4:	2320      	movs	r3, #32
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e128      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005adc:	2340      	movs	r3, #64	@ 0x40
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e124      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005ae4:	2380      	movs	r3, #128	@ 0x80
 8005ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aea:	e120      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4acb      	ldr	r2, [pc, #812]	@ (8005e20 <UART_SetConfig+0x698>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d176      	bne.n	8005be4 <UART_SetConfig+0x45c>
 8005af6:	4bcb      	ldr	r3, [pc, #812]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005afa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005afe:	2b28      	cmp	r3, #40	@ 0x28
 8005b00:	d86c      	bhi.n	8005bdc <UART_SetConfig+0x454>
 8005b02:	a201      	add	r2, pc, #4	@ (adr r2, 8005b08 <UART_SetConfig+0x380>)
 8005b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b08:	08005bad 	.word	0x08005bad
 8005b0c:	08005bdd 	.word	0x08005bdd
 8005b10:	08005bdd 	.word	0x08005bdd
 8005b14:	08005bdd 	.word	0x08005bdd
 8005b18:	08005bdd 	.word	0x08005bdd
 8005b1c:	08005bdd 	.word	0x08005bdd
 8005b20:	08005bdd 	.word	0x08005bdd
 8005b24:	08005bdd 	.word	0x08005bdd
 8005b28:	08005bb5 	.word	0x08005bb5
 8005b2c:	08005bdd 	.word	0x08005bdd
 8005b30:	08005bdd 	.word	0x08005bdd
 8005b34:	08005bdd 	.word	0x08005bdd
 8005b38:	08005bdd 	.word	0x08005bdd
 8005b3c:	08005bdd 	.word	0x08005bdd
 8005b40:	08005bdd 	.word	0x08005bdd
 8005b44:	08005bdd 	.word	0x08005bdd
 8005b48:	08005bbd 	.word	0x08005bbd
 8005b4c:	08005bdd 	.word	0x08005bdd
 8005b50:	08005bdd 	.word	0x08005bdd
 8005b54:	08005bdd 	.word	0x08005bdd
 8005b58:	08005bdd 	.word	0x08005bdd
 8005b5c:	08005bdd 	.word	0x08005bdd
 8005b60:	08005bdd 	.word	0x08005bdd
 8005b64:	08005bdd 	.word	0x08005bdd
 8005b68:	08005bc5 	.word	0x08005bc5
 8005b6c:	08005bdd 	.word	0x08005bdd
 8005b70:	08005bdd 	.word	0x08005bdd
 8005b74:	08005bdd 	.word	0x08005bdd
 8005b78:	08005bdd 	.word	0x08005bdd
 8005b7c:	08005bdd 	.word	0x08005bdd
 8005b80:	08005bdd 	.word	0x08005bdd
 8005b84:	08005bdd 	.word	0x08005bdd
 8005b88:	08005bcd 	.word	0x08005bcd
 8005b8c:	08005bdd 	.word	0x08005bdd
 8005b90:	08005bdd 	.word	0x08005bdd
 8005b94:	08005bdd 	.word	0x08005bdd
 8005b98:	08005bdd 	.word	0x08005bdd
 8005b9c:	08005bdd 	.word	0x08005bdd
 8005ba0:	08005bdd 	.word	0x08005bdd
 8005ba4:	08005bdd 	.word	0x08005bdd
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	2301      	movs	r3, #1
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e0bc      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e0b8      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e0b4      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e0b0      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e0ac      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bd4:	2340      	movs	r3, #64	@ 0x40
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e0a8      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e0a4      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a8f      	ldr	r2, [pc, #572]	@ (8005e28 <UART_SetConfig+0x6a0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d130      	bne.n	8005c50 <UART_SetConfig+0x4c8>
 8005bee:	4b8d      	ldr	r3, [pc, #564]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d826      	bhi.n	8005c48 <UART_SetConfig+0x4c0>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x478>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e086      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e082      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e07e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e07a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e076      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e072      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e06e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a75      	ldr	r2, [pc, #468]	@ (8005e2c <UART_SetConfig+0x6a4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d130      	bne.n	8005cbc <UART_SetConfig+0x534>
 8005c5a:	4b72      	ldr	r3, [pc, #456]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d826      	bhi.n	8005cb4 <UART_SetConfig+0x52c>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x4e4>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c85 	.word	0x08005c85
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	2300      	movs	r3, #0
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e050      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e04c      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e048      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e044      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e040      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e03c      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e038      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a5b      	ldr	r2, [pc, #364]	@ (8005e30 <UART_SetConfig+0x6a8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d130      	bne.n	8005d28 <UART_SetConfig+0x5a0>
 8005cc6:	4b57      	ldr	r3, [pc, #348]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	d826      	bhi.n	8005d20 <UART_SetConfig+0x598>
 8005cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd8 <UART_SetConfig+0x550>)
 8005cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd8:	08005cf1 	.word	0x08005cf1
 8005cdc:	08005cf9 	.word	0x08005cf9
 8005ce0:	08005d01 	.word	0x08005d01
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d11 	.word	0x08005d11
 8005cec:	08005d19 	.word	0x08005d19
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e01a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005cf8:	2304      	movs	r3, #4
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e016      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d00:	2308      	movs	r3, #8
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e012      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d08:	2310      	movs	r3, #16
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e00e      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d10:	2320      	movs	r3, #32
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e00a      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d18:	2340      	movs	r3, #64	@ 0x40
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e006      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e002      	b.n	8005d2e <UART_SetConfig+0x5a6>
 8005d28:	2380      	movs	r3, #128	@ 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3f      	ldr	r2, [pc, #252]	@ (8005e30 <UART_SetConfig+0x6a8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	f040 80f8 	bne.w	8005f2a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d3a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	dc46      	bgt.n	8005dd0 <UART_SetConfig+0x648>
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	f2c0 8082 	blt.w	8005e4c <UART_SetConfig+0x6c4>
 8005d48:	3b02      	subs	r3, #2
 8005d4a:	2b1e      	cmp	r3, #30
 8005d4c:	d87e      	bhi.n	8005e4c <UART_SetConfig+0x6c4>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0x5cc>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005dd7 	.word	0x08005dd7
 8005d58:	08005e4d 	.word	0x08005e4d
 8005d5c:	08005ddf 	.word	0x08005ddf
 8005d60:	08005e4d 	.word	0x08005e4d
 8005d64:	08005e4d 	.word	0x08005e4d
 8005d68:	08005e4d 	.word	0x08005e4d
 8005d6c:	08005def 	.word	0x08005def
 8005d70:	08005e4d 	.word	0x08005e4d
 8005d74:	08005e4d 	.word	0x08005e4d
 8005d78:	08005e4d 	.word	0x08005e4d
 8005d7c:	08005e4d 	.word	0x08005e4d
 8005d80:	08005e4d 	.word	0x08005e4d
 8005d84:	08005e4d 	.word	0x08005e4d
 8005d88:	08005e4d 	.word	0x08005e4d
 8005d8c:	08005dff 	.word	0x08005dff
 8005d90:	08005e4d 	.word	0x08005e4d
 8005d94:	08005e4d 	.word	0x08005e4d
 8005d98:	08005e4d 	.word	0x08005e4d
 8005d9c:	08005e4d 	.word	0x08005e4d
 8005da0:	08005e4d 	.word	0x08005e4d
 8005da4:	08005e4d 	.word	0x08005e4d
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e4d 	.word	0x08005e4d
 8005db0:	08005e4d 	.word	0x08005e4d
 8005db4:	08005e4d 	.word	0x08005e4d
 8005db8:	08005e4d 	.word	0x08005e4d
 8005dbc:	08005e4d 	.word	0x08005e4d
 8005dc0:	08005e4d 	.word	0x08005e4d
 8005dc4:	08005e4d 	.word	0x08005e4d
 8005dc8:	08005e4d 	.word	0x08005e4d
 8005dcc:	08005e3f 	.word	0x08005e3f
 8005dd0:	2b40      	cmp	r3, #64	@ 0x40
 8005dd2:	d037      	beq.n	8005e44 <UART_SetConfig+0x6bc>
 8005dd4:	e03a      	b.n	8005e4c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005dd6:	f7fe fd97 	bl	8004908 <HAL_RCCEx_GetD3PCLK1Freq>
 8005dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ddc:	e03c      	b.n	8005e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fe fda6 	bl	8004934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dec:	e034      	b.n	8005e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005dee:	f107 0318 	add.w	r3, r7, #24
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fef2 	bl	8004bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dfc:	e02c      	b.n	8005e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dfe:	4b09      	ldr	r3, [pc, #36]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d016      	beq.n	8005e38 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e0a:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <UART_SetConfig+0x69c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	08db      	lsrs	r3, r3, #3
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	4a07      	ldr	r2, [pc, #28]	@ (8005e34 <UART_SetConfig+0x6ac>)
 8005e16:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e1c:	e01c      	b.n	8005e58 <UART_SetConfig+0x6d0>
 8005e1e:	bf00      	nop
 8005e20:	40011400 	.word	0x40011400
 8005e24:	58024400 	.word	0x58024400
 8005e28:	40007800 	.word	0x40007800
 8005e2c:	40007c00 	.word	0x40007c00
 8005e30:	58000c00 	.word	0x58000c00
 8005e34:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e38:	4b9d      	ldr	r3, [pc, #628]	@ (80060b0 <UART_SetConfig+0x928>)
 8005e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3c:	e00c      	b.n	8005e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e3e:	4b9d      	ldr	r3, [pc, #628]	@ (80060b4 <UART_SetConfig+0x92c>)
 8005e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e42:	e009      	b.n	8005e58 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e4a:	e005      	b.n	8005e58 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e56:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 81de 	beq.w	800621c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	4a94      	ldr	r2, [pc, #592]	@ (80060b8 <UART_SetConfig+0x930>)
 8005e66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e72:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	4413      	add	r3, r2
 8005e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d305      	bcc.n	8005e90 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d903      	bls.n	8005e98 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e96:	e1c1      	b.n	800621c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
 8005e9e:	60fa      	str	r2, [r7, #12]
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea4:	4a84      	ldr	r2, [pc, #528]	@ (80060b8 <UART_SetConfig+0x930>)
 8005ea6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	2200      	movs	r2, #0
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eba:	f7fa fa11 	bl	80002e0 <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	020b      	lsls	r3, r1, #8
 8005ed0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ed4:	0202      	lsls	r2, r0, #8
 8005ed6:	6979      	ldr	r1, [r7, #20]
 8005ed8:	6849      	ldr	r1, [r1, #4]
 8005eda:	0849      	lsrs	r1, r1, #1
 8005edc:	2000      	movs	r0, #0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	4605      	mov	r5, r0
 8005ee2:	eb12 0804 	adds.w	r8, r2, r4
 8005ee6:	eb43 0905 	adc.w	r9, r3, r5
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	469a      	mov	sl, r3
 8005ef2:	4693      	mov	fp, r2
 8005ef4:	4652      	mov	r2, sl
 8005ef6:	465b      	mov	r3, fp
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4649      	mov	r1, r9
 8005efc:	f7fa f9f0 	bl	80002e0 <__aeabi_uldivmod>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4613      	mov	r3, r2
 8005f06:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f0e:	d308      	bcc.n	8005f22 <UART_SetConfig+0x79a>
 8005f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f16:	d204      	bcs.n	8005f22 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	e17c      	b.n	800621c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f28:	e178      	b.n	800621c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f32:	f040 80c5 	bne.w	80060c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	dc48      	bgt.n	8005fd0 <UART_SetConfig+0x848>
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	db7b      	blt.n	800603a <UART_SetConfig+0x8b2>
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d879      	bhi.n	800603a <UART_SetConfig+0x8b2>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x7c4>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005fd7 	.word	0x08005fd7
 8005f50:	08005fdf 	.word	0x08005fdf
 8005f54:	0800603b 	.word	0x0800603b
 8005f58:	0800603b 	.word	0x0800603b
 8005f5c:	08005fe7 	.word	0x08005fe7
 8005f60:	0800603b 	.word	0x0800603b
 8005f64:	0800603b 	.word	0x0800603b
 8005f68:	0800603b 	.word	0x0800603b
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	0800603b 	.word	0x0800603b
 8005f74:	0800603b 	.word	0x0800603b
 8005f78:	0800603b 	.word	0x0800603b
 8005f7c:	0800603b 	.word	0x0800603b
 8005f80:	0800603b 	.word	0x0800603b
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800603b 	.word	0x0800603b
 8005f8c:	08006007 	.word	0x08006007
 8005f90:	0800603b 	.word	0x0800603b
 8005f94:	0800603b 	.word	0x0800603b
 8005f98:	0800603b 	.word	0x0800603b
 8005f9c:	0800603b 	.word	0x0800603b
 8005fa0:	0800603b 	.word	0x0800603b
 8005fa4:	0800603b 	.word	0x0800603b
 8005fa8:	0800603b 	.word	0x0800603b
 8005fac:	0800603b 	.word	0x0800603b
 8005fb0:	0800603b 	.word	0x0800603b
 8005fb4:	0800603b 	.word	0x0800603b
 8005fb8:	0800603b 	.word	0x0800603b
 8005fbc:	0800603b 	.word	0x0800603b
 8005fc0:	0800603b 	.word	0x0800603b
 8005fc4:	0800603b 	.word	0x0800603b
 8005fc8:	0800603b 	.word	0x0800603b
 8005fcc:	0800602d 	.word	0x0800602d
 8005fd0:	2b40      	cmp	r3, #64	@ 0x40
 8005fd2:	d02e      	beq.n	8006032 <UART_SetConfig+0x8aa>
 8005fd4:	e031      	b.n	800603a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd6:	f7fd fa1f 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8005fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fdc:	e033      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fde:	f7fd fa31 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8005fe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fe4:	e02f      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fea:	4618      	mov	r0, r3
 8005fec:	f7fe fca2 	bl	8004934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff4:	e027      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ff6:	f107 0318 	add.w	r3, r7, #24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fdee 	bl	8004bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006004:	e01f      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006006:	4b2d      	ldr	r3, [pc, #180]	@ (80060bc <UART_SetConfig+0x934>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d009      	beq.n	8006026 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006012:	4b2a      	ldr	r3, [pc, #168]	@ (80060bc <UART_SetConfig+0x934>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	08db      	lsrs	r3, r3, #3
 8006018:	f003 0303 	and.w	r3, r3, #3
 800601c:	4a24      	ldr	r2, [pc, #144]	@ (80060b0 <UART_SetConfig+0x928>)
 800601e:	fa22 f303 	lsr.w	r3, r2, r3
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006024:	e00f      	b.n	8006046 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006026:	4b22      	ldr	r3, [pc, #136]	@ (80060b0 <UART_SetConfig+0x928>)
 8006028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800602a:	e00c      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800602c:	4b21      	ldr	r3, [pc, #132]	@ (80060b4 <UART_SetConfig+0x92c>)
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006030:	e009      	b.n	8006046 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006038:	e005      	b.n	8006046 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006044:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80e7 	beq.w	800621c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006052:	4a19      	ldr	r2, [pc, #100]	@ (80060b8 <UART_SetConfig+0x930>)
 8006054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006058:	461a      	mov	r2, r3
 800605a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800605c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006060:	005a      	lsls	r2, r3, #1
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	085b      	lsrs	r3, r3, #1
 8006068:	441a      	add	r2, r3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006072:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006076:	2b0f      	cmp	r3, #15
 8006078:	d916      	bls.n	80060a8 <UART_SetConfig+0x920>
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006080:	d212      	bcs.n	80060a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006084:	b29b      	uxth	r3, r3
 8006086:	f023 030f 	bic.w	r3, r3, #15
 800608a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800608c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	b29a      	uxth	r2, r3
 8006098:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800609a:	4313      	orrs	r3, r2
 800609c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060a4:	60da      	str	r2, [r3, #12]
 80060a6:	e0b9      	b.n	800621c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060ae:	e0b5      	b.n	800621c <UART_SetConfig+0xa94>
 80060b0:	03d09000 	.word	0x03d09000
 80060b4:	003d0900 	.word	0x003d0900
 80060b8:	08008fec 	.word	0x08008fec
 80060bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	dc49      	bgt.n	800615c <UART_SetConfig+0x9d4>
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	db7c      	blt.n	80061c6 <UART_SetConfig+0xa3e>
 80060cc:	2b20      	cmp	r3, #32
 80060ce:	d87a      	bhi.n	80061c6 <UART_SetConfig+0xa3e>
 80060d0:	a201      	add	r2, pc, #4	@ (adr r2, 80060d8 <UART_SetConfig+0x950>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	08006163 	.word	0x08006163
 80060dc:	0800616b 	.word	0x0800616b
 80060e0:	080061c7 	.word	0x080061c7
 80060e4:	080061c7 	.word	0x080061c7
 80060e8:	08006173 	.word	0x08006173
 80060ec:	080061c7 	.word	0x080061c7
 80060f0:	080061c7 	.word	0x080061c7
 80060f4:	080061c7 	.word	0x080061c7
 80060f8:	08006183 	.word	0x08006183
 80060fc:	080061c7 	.word	0x080061c7
 8006100:	080061c7 	.word	0x080061c7
 8006104:	080061c7 	.word	0x080061c7
 8006108:	080061c7 	.word	0x080061c7
 800610c:	080061c7 	.word	0x080061c7
 8006110:	080061c7 	.word	0x080061c7
 8006114:	080061c7 	.word	0x080061c7
 8006118:	08006193 	.word	0x08006193
 800611c:	080061c7 	.word	0x080061c7
 8006120:	080061c7 	.word	0x080061c7
 8006124:	080061c7 	.word	0x080061c7
 8006128:	080061c7 	.word	0x080061c7
 800612c:	080061c7 	.word	0x080061c7
 8006130:	080061c7 	.word	0x080061c7
 8006134:	080061c7 	.word	0x080061c7
 8006138:	080061c7 	.word	0x080061c7
 800613c:	080061c7 	.word	0x080061c7
 8006140:	080061c7 	.word	0x080061c7
 8006144:	080061c7 	.word	0x080061c7
 8006148:	080061c7 	.word	0x080061c7
 800614c:	080061c7 	.word	0x080061c7
 8006150:	080061c7 	.word	0x080061c7
 8006154:	080061c7 	.word	0x080061c7
 8006158:	080061b9 	.word	0x080061b9
 800615c:	2b40      	cmp	r3, #64	@ 0x40
 800615e:	d02e      	beq.n	80061be <UART_SetConfig+0xa36>
 8006160:	e031      	b.n	80061c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006162:	f7fd f959 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8006166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006168:	e033      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800616a:	f7fd f96b 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 800616e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006170:	e02f      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006176:	4618      	mov	r0, r3
 8006178:	f7fe fbdc 	bl	8004934 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800617c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006180:	e027      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006182:	f107 0318 	add.w	r3, r7, #24
 8006186:	4618      	mov	r0, r3
 8006188:	f7fe fd28 	bl	8004bdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006190:	e01f      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006192:	4b2d      	ldr	r3, [pc, #180]	@ (8006248 <UART_SetConfig+0xac0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d009      	beq.n	80061b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800619e:	4b2a      	ldr	r3, [pc, #168]	@ (8006248 <UART_SetConfig+0xac0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	4a28      	ldr	r2, [pc, #160]	@ (800624c <UART_SetConfig+0xac4>)
 80061aa:	fa22 f303 	lsr.w	r3, r2, r3
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061b0:	e00f      	b.n	80061d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061b2:	4b26      	ldr	r3, [pc, #152]	@ (800624c <UART_SetConfig+0xac4>)
 80061b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b6:	e00c      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061b8:	4b25      	ldr	r3, [pc, #148]	@ (8006250 <UART_SetConfig+0xac8>)
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e009      	b.n	80061d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	e005      	b.n	80061d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061d0:	bf00      	nop
    }

    if (pclk != 0U)
 80061d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d021      	beq.n	800621c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006254 <UART_SetConfig+0xacc>)
 80061de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e2:	461a      	mov	r2, r3
 80061e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	441a      	add	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fe:	2b0f      	cmp	r3, #15
 8006200:	d909      	bls.n	8006216 <UART_SetConfig+0xa8e>
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006208:	d205      	bcs.n	8006216 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	b29a      	uxth	r2, r3
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60da      	str	r2, [r3, #12]
 8006214:	e002      	b.n	800621c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2201      	movs	r2, #1
 8006220:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2201      	movs	r2, #1
 8006228:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	2200      	movs	r2, #0
 8006230:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2200      	movs	r2, #0
 8006236:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006238:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800623c:	4618      	mov	r0, r3
 800623e:	3748      	adds	r7, #72	@ 0x48
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006246:	bf00      	nop
 8006248:	58024400 	.word	0x58024400
 800624c:	03d09000 	.word	0x03d09000
 8006250:	003d0900 	.word	0x003d0900
 8006254:	08008fec 	.word	0x08008fec

08006258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006264:	f003 0308 	and.w	r3, r3, #8
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	430a      	orrs	r2, r1
 80062c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	f003 0320 	and.w	r3, r3, #32
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006334:	2b00      	cmp	r3, #0
 8006336:	d01a      	beq.n	800636e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006356:	d10a      	bne.n	800636e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	430a      	orrs	r2, r1
 800636c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	605a      	str	r2, [r3, #4]
  }
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr

0800639c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b098      	sub	sp, #96	@ 0x60
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063ac:	f7fa ffd2 	bl	8001354 <HAL_GetTick>
 80063b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b08      	cmp	r3, #8
 80063be:	d12f      	bne.n	8006420 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063c4:	9300      	str	r3, [sp, #0]
 80063c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c8:	2200      	movs	r2, #0
 80063ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f88e 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d022      	beq.n	8006420 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063e2:	e853 3f00 	ldrex	r3, [r3]
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80063fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e6      	bne.n	80063da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2220      	movs	r2, #32
 8006410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e063      	b.n	80064e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0304 	and.w	r3, r3, #4
 800642a:	2b04      	cmp	r3, #4
 800642c:	d149      	bne.n	80064c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800642e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006432:	9300      	str	r3, [sp, #0]
 8006434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006436:	2200      	movs	r2, #0
 8006438:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f857 	bl	80064f0 <UART_WaitOnFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d03c      	beq.n	80064c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	e853 3f00 	ldrex	r3, [r3]
 8006454:	623b      	str	r3, [r7, #32]
   return(result);
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800645c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006466:	633b      	str	r3, [r7, #48]	@ 0x30
 8006468:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800646c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646e:	e841 2300 	strex	r3, r2, [r1]
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1e6      	bne.n	8006448 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3308      	adds	r3, #8
 8006480:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	e853 3f00 	ldrex	r3, [r3]
 8006488:	60fb      	str	r3, [r7, #12]
   return(result);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f023 0301 	bic.w	r3, r3, #1
 8006490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3308      	adds	r3, #8
 8006498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800649a:	61fa      	str	r2, [r7, #28]
 800649c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	617b      	str	r3, [r7, #20]
   return(result);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e5      	bne.n	800647a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e012      	b.n	80064e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3758      	adds	r7, #88	@ 0x58
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006500:	e04f      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006508:	d04b      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800650a:	f7fa ff23 	bl	8001354 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	69ba      	ldr	r2, [r7, #24]
 8006516:	429a      	cmp	r2, r3
 8006518:	d302      	bcc.n	8006520 <UART_WaitOnFlagUntilTimeout+0x30>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e04e      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d037      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	2b80      	cmp	r3, #128	@ 0x80
 8006536:	d034      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b40      	cmp	r3, #64	@ 0x40
 800653c:	d031      	beq.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b08      	cmp	r3, #8
 800654a:	d110      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2208      	movs	r2, #8
 8006552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f839 	bl	80065cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2208      	movs	r2, #8
 800655e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e029      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69db      	ldr	r3, [r3, #28]
 8006574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800657c:	d111      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006586:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f81f 	bl	80065cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2220      	movs	r2, #32
 8006592:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e00f      	b.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4013      	ands	r3, r2
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	bf0c      	ite	eq
 80065b2:	2301      	moveq	r3, #1
 80065b4:	2300      	movne	r3, #0
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	79fb      	ldrb	r3, [r7, #7]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d0a0      	beq.n	8006502 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b095      	sub	sp, #84	@ 0x54
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065dc:	e853 3f00 	ldrex	r3, [r3]
 80065e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80065f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065fa:	e841 2300 	strex	r3, r2, [r1]
 80065fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1e6      	bne.n	80065d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3308      	adds	r3, #8
 800660c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	61fb      	str	r3, [r7, #28]
   return(result);
 8006616:	69fa      	ldr	r2, [r7, #28]
 8006618:	4b1e      	ldr	r3, [pc, #120]	@ (8006694 <UART_EndRxTransfer+0xc8>)
 800661a:	4013      	ands	r3, r2
 800661c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3308      	adds	r3, #8
 8006624:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800662c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800663e:	2b01      	cmp	r3, #1
 8006640:	d118      	bne.n	8006674 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	e853 3f00 	ldrex	r3, [r3]
 800664e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f023 0310 	bic.w	r3, r3, #16
 8006656:	647b      	str	r3, [r7, #68]	@ 0x44
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6979      	ldr	r1, [r7, #20]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	613b      	str	r3, [r7, #16]
   return(result);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e6      	bne.n	8006642 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2220      	movs	r2, #32
 8006678:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006688:	bf00      	nop
 800668a:	3754      	adds	r7, #84	@ 0x54
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	effffffe 	.word	0xeffffffe

08006698 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d101      	bne.n	80066ae <HAL_UARTEx_DisableFifoMode+0x16>
 80066aa:	2302      	movs	r3, #2
 80066ac:	e027      	b.n	80066fe <HAL_UARTEx_DisableFifoMode+0x66>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2224      	movs	r2, #36	@ 0x24
 80066ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 0201 	bic.w	r2, r2, #1
 80066d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80066dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68fa      	ldr	r2, [r7, #12]
 80066ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b084      	sub	sp, #16
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
 8006712:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800671e:	2302      	movs	r3, #2
 8006720:	e02d      	b.n	800677e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2224      	movs	r2, #36	@ 0x24
 800672e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 0201 	bic.w	r2, r2, #1
 8006748:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f850 	bl	8006804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b084      	sub	sp, #16
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800679a:	2302      	movs	r3, #2
 800679c:	e02d      	b.n	80067fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2224      	movs	r2, #36	@ 0x24
 80067aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0201 	bic.w	r2, r2, #1
 80067c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f812 	bl	8006804 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2220      	movs	r2, #32
 80067ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
	...

08006804 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006810:	2b00      	cmp	r3, #0
 8006812:	d108      	bne.n	8006826 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006824:	e031      	b.n	800688a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006826:	2310      	movs	r3, #16
 8006828:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800682a:	2310      	movs	r3, #16
 800682c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	0e5b      	lsrs	r3, r3, #25
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	0f5b      	lsrs	r3, r3, #29
 8006846:	b2db      	uxtb	r3, r3
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800684e:	7bbb      	ldrb	r3, [r7, #14]
 8006850:	7b3a      	ldrb	r2, [r7, #12]
 8006852:	4911      	ldr	r1, [pc, #68]	@ (8006898 <UARTEx_SetNbDataToProcess+0x94>)
 8006854:	5c8a      	ldrb	r2, [r1, r2]
 8006856:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800685a:	7b3a      	ldrb	r2, [r7, #12]
 800685c:	490f      	ldr	r1, [pc, #60]	@ (800689c <UARTEx_SetNbDataToProcess+0x98>)
 800685e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006860:	fb93 f3f2 	sdiv	r3, r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	7b7a      	ldrb	r2, [r7, #13]
 8006870:	4909      	ldr	r1, [pc, #36]	@ (8006898 <UARTEx_SetNbDataToProcess+0x94>)
 8006872:	5c8a      	ldrb	r2, [r1, r2]
 8006874:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006878:	7b7a      	ldrb	r2, [r7, #13]
 800687a:	4908      	ldr	r1, [pc, #32]	@ (800689c <UARTEx_SetNbDataToProcess+0x98>)
 800687c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800687e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006882:	b29a      	uxth	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800688a:	bf00      	nop
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	08009004 	.word	0x08009004
 800689c:	0800900c 	.word	0x0800900c

080068a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068a0:	b084      	sub	sp, #16
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	f107 001c 	add.w	r0, r7, #28
 80068ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d121      	bne.n	80068fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	4b2c      	ldr	r3, [pc, #176]	@ (800697c <USB_CoreInit+0xdc>)
 80068cc:	4013      	ands	r3, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80068de:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d105      	bne.n	80068f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 faaa 	bl	8006e4c <USB_CoreReset>
 80068f8:	4603      	mov	r3, r0
 80068fa:	73fb      	strb	r3, [r7, #15]
 80068fc:	e01b      	b.n	8006936 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fa9e 	bl	8006e4c <USB_CoreReset>
 8006910:	4603      	mov	r3, r0
 8006912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006914:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006918:	2b00      	cmp	r3, #0
 800691a:	d106      	bne.n	800692a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	639a      	str	r2, [r3, #56]	@ 0x38
 8006928:	e005      	b.n	8006936 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006936:	7fbb      	ldrb	r3, [r7, #30]
 8006938:	2b01      	cmp	r3, #1
 800693a:	d116      	bne.n	800696a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006940:	b29a      	uxth	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <USB_CoreInit+0xe0>)
 800694c:	4313      	orrs	r3, r2
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f043 0206 	orr.w	r2, r3, #6
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006976:	b004      	add	sp, #16
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	ffbdffbf 	.word	0xffbdffbf
 8006980:	03ee0000 	.word	0x03ee0000

08006984 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f023 0201 	bic.w	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d115      	bne.n	80069f4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80069d4:	200a      	movs	r0, #10
 80069d6:	f7fa fcc9 	bl	800136c <HAL_Delay>
      ms += 10U;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	330a      	adds	r3, #10
 80069de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fa25 	bl	8006e30 <USB_GetMode>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d01e      	beq.n	8006a2a <USB_SetCurrentMode+0x84>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80069f0:	d9f0      	bls.n	80069d4 <USB_SetCurrentMode+0x2e>
 80069f2:	e01a      	b.n	8006a2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80069f4:	78fb      	ldrb	r3, [r7, #3]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d115      	bne.n	8006a26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a06:	200a      	movs	r0, #10
 8006a08:	f7fa fcb0 	bl	800136c <HAL_Delay>
      ms += 10U;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	330a      	adds	r3, #10
 8006a10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa0c 	bl	8006e30 <USB_GetMode>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <USB_SetCurrentMode+0x84>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a22:	d9f0      	bls.n	8006a06 <USB_SetCurrentMode+0x60>
 8006a24:	e001      	b.n	8006a2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e005      	b.n	8006a36 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a2e:	d101      	bne.n	8006a34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a40:	b084      	sub	sp, #16
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b086      	sub	sp, #24
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
 8006a4a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	613b      	str	r3, [r7, #16]
 8006a5e:	e009      	b.n	8006a74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3340      	adds	r3, #64	@ 0x40
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3301      	adds	r3, #1
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b0e      	cmp	r3, #14
 8006a78:	d9f2      	bls.n	8006a60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d11c      	bne.n	8006abc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a90:	f043 0302 	orr.w	r3, r3, #2
 8006a94:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	e005      	b.n	8006ac8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006ace:	461a      	mov	r2, r3
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ad4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10d      	bne.n	8006af8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d104      	bne.n	8006aee <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f968 	bl	8006dbc <USB_SetDevSpeed>
 8006aec:	e008      	b.n	8006b00 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006aee:	2101      	movs	r1, #1
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f963 	bl	8006dbc <USB_SetDevSpeed>
 8006af6:	e003      	b.n	8006b00 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006af8:	2103      	movs	r1, #3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f95e 	bl	8006dbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b00:	2110      	movs	r1, #16
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f8fa 	bl	8006cfc <USB_FlushTxFifo>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f924 	bl	8006d60 <USB_FlushRxFifo>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b28:	461a      	mov	r2, r3
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b34:	461a      	mov	r2, r3
 8006b36:	2300      	movs	r3, #0
 8006b38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b40:	461a      	mov	r2, r3
 8006b42:	2300      	movs	r3, #0
 8006b44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	e043      	b.n	8006bd4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b62:	d118      	bne.n	8006b96 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10a      	bne.n	8006b80 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b76:	461a      	mov	r2, r3
 8006b78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006b7c:	6013      	str	r3, [r2, #0]
 8006b7e:	e013      	b.n	8006ba8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	015a      	lsls	r2, r3, #5
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	e008      	b.n	8006ba8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bd8:	461a      	mov	r2, r3
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d3b5      	bcc.n	8006b4c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e043      	b.n	8006c6e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bfc:	d118      	bne.n	8006c30 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10a      	bne.n	8006c1a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c16:	6013      	str	r3, [r2, #0]
 8006c18:	e013      	b.n	8006c42 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c26:	461a      	mov	r2, r3
 8006c28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	015a      	lsls	r2, r3, #5
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c60:	461a      	mov	r2, r3
 8006c62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c72:	461a      	mov	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d3b5      	bcc.n	8006be6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006c9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d105      	bne.n	8006cb0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	f043 0210 	orr.w	r2, r3, #16
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf4 <USB_DevInit+0x2b4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006cbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	f043 0208 	orr.w	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d105      	bne.n	8006ce4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	4b06      	ldr	r3, [pc, #24]	@ (8006cf8 <USB_DevInit+0x2b8>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cf0:	b004      	add	sp, #16
 8006cf2:	4770      	bx	lr
 8006cf4:	803c3800 	.word	0x803c3800
 8006cf8:	40000004 	.word	0x40000004

08006cfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d16:	d901      	bls.n	8006d1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e01b      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	daf2      	bge.n	8006d0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	019b      	lsls	r3, r3, #6
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	3301      	adds	r3, #1
 8006d38:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d40:	d901      	bls.n	8006d46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e006      	b.n	8006d54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f003 0320 	and.w	r3, r3, #32
 8006d4e:	2b20      	cmp	r3, #32
 8006d50:	d0f0      	beq.n	8006d34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d78:	d901      	bls.n	8006d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e018      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	daf2      	bge.n	8006d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2210      	movs	r2, #16
 8006d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3301      	adds	r3, #1
 8006d94:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d9c:	d901      	bls.n	8006da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e006      	b.n	8006db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0310 	and.w	r3, r3, #16
 8006daa:	2b10      	cmp	r3, #16
 8006dac:	d0f0      	beq.n	8006d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	78fb      	ldrb	r3, [r7, #3]
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr

08006dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b085      	sub	sp, #20
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68fa      	ldr	r2, [r7, #12]
 8006e04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e08:	f023 0303 	bic.w	r3, r3, #3
 8006e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e1c:	f043 0302 	orr.w	r3, r3, #2
 8006e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e22:	2300      	movs	r3, #0
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3714      	adds	r7, #20
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e64:	d901      	bls.n	8006e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e01b      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	daf2      	bge.n	8006e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e8e:	d901      	bls.n	8006e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e006      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d0f0      	beq.n	8006e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006ec0:	2b84      	cmp	r3, #132	@ 0x84
 8006ec2:	d005      	beq.n	8006ed0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ec4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	3303      	adds	r3, #3
 8006ece:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006ee2:	f000 fdfd 	bl	8007ae0 <vTaskStartScheduler>
  
  return osOK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}

08006eec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eee:	b089      	sub	sp, #36	@ 0x24
 8006ef0:	af04      	add	r7, sp, #16
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <osThreadCreate+0x54>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01c      	beq.n	8006f40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685c      	ldr	r4, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691e      	ldr	r6, [r3, #16]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ffc8 	bl	8006eae <makeFreeRtosPriority>
 8006f1e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f28:	9202      	str	r2, [sp, #8]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	9100      	str	r1, [sp, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4632      	mov	r2, r6
 8006f32:	4629      	mov	r1, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fc23 	bl	8007780 <xTaskCreateStatic>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e01c      	b.n	8006f7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685c      	ldr	r4, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f4c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff ffaa 	bl	8006eae <makeFreeRtosPriority>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	9200      	str	r2, [sp, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4632      	mov	r2, r6
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fc68 	bl	8007840 <xTaskCreate>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d001      	beq.n	8006f7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af02      	add	r7, sp, #8
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00f      	beq.n	8006fb6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d10a      	bne.n	8006fb2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2203      	movs	r2, #3
 8006fa2:	9200      	str	r2, [sp, #0]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f000 f93b 	bl	8007224 <xQueueGenericCreateStatic>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	e016      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e014      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d110      	bne.n	8006fde <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006fbc:	2203      	movs	r2, #3
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	2001      	movs	r0, #1
 8006fc2:	f000 f9ac 	bl	800731e <xQueueGenericCreate>
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d005      	beq.n	8006fda <osSemaphoreCreate+0x56>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 f9fd 	bl	80073d4 <xQueueGenericSend>
      return sema;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	e000      	b.n	8006fe0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006fde:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f103 0208 	add.w	r2, r3, #8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8007000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f103 0208 	add.w	r2, r3, #8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f103 0208 	add.w	r2, r3, #8
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007042:	b480      	push	{r7}
 8007044:	b085      	sub	sp, #20
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	1c5a      	adds	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	601a      	str	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
 8007092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a0:	d103      	bne.n	80070aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	e00c      	b.n	80070c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3308      	adds	r3, #8
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e002      	b.n	80070b8 <vListInsert+0x2e>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d2f6      	bcs.n	80070b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	601a      	str	r2, [r3, #0]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	6892      	ldr	r2, [r2, #8]
 8007112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6852      	ldr	r2, [r2, #4]
 800711c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	429a      	cmp	r2, r3
 8007126:	d103      	bne.n	8007130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	1e5a      	subs	r2, r3, #1
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800717c:	f001 fb0c 	bl	8008798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007188:	68f9      	ldr	r1, [r7, #12]
 800718a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	441a      	add	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ac:	3b01      	subs	r3, #1
 80071ae:	68f9      	ldr	r1, [r7, #12]
 80071b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071b2:	fb01 f303 	mul.w	r3, r1, r3
 80071b6:	441a      	add	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	22ff      	movs	r2, #255	@ 0xff
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	22ff      	movs	r2, #255	@ 0xff
 80071c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d114      	bne.n	80071fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d01a      	beq.n	8007210 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3310      	adds	r3, #16
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fed8 	bl	8007f94 <xTaskRemoveFromEventList>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d012      	beq.n	8007210 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80071ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007220 <xQueueGenericReset+0xd0>)
 80071ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	e009      	b.n	8007210 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3310      	adds	r3, #16
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fef1 	bl	8006fe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	3324      	adds	r3, #36	@ 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff feec 	bl	8006fe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007210:	f001 faf4 	bl	80087fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007214:	2301      	movs	r3, #1
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	e000ed04 	.word	0xe000ed04

08007224 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08e      	sub	sp, #56	@ 0x38
 8007228:	af02      	add	r7, sp, #8
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723c:	f383 8811 	msr	BASEPRI, r3
 8007240:	f3bf 8f6f 	isb	sy
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800724a:	bf00      	nop
 800724c:	bf00      	nop
 800724e:	e7fd      	b.n	800724c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <xQueueGenericCreateStatic+0x56>
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <xQueueGenericCreateStatic+0x5a>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <xQueueGenericCreateStatic+0x5c>
 800727e:	2300      	movs	r3, #0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10b      	bne.n	800729c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	623b      	str	r3, [r7, #32]
}
 8007296:	bf00      	nop
 8007298:	bf00      	nop
 800729a:	e7fd      	b.n	8007298 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <xQueueGenericCreateStatic+0x84>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <xQueueGenericCreateStatic+0x88>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e000      	b.n	80072ae <xQueueGenericCreateStatic+0x8a>
 80072ac:	2300      	movs	r3, #0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	61fb      	str	r3, [r7, #28]
}
 80072c4:	bf00      	nop
 80072c6:	bf00      	nop
 80072c8:	e7fd      	b.n	80072c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80072ca:	2348      	movs	r3, #72	@ 0x48
 80072cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b48      	cmp	r3, #72	@ 0x48
 80072d2:	d00b      	beq.n	80072ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	61bb      	str	r3, [r7, #24]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80072f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80072f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007300:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4613      	mov	r3, r2
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 f840 	bl	8007394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007316:	4618      	mov	r0, r3
 8007318:	3730      	adds	r7, #48	@ 0x30
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800731e:	b580      	push	{r7, lr}
 8007320:	b08a      	sub	sp, #40	@ 0x28
 8007322:	af02      	add	r7, sp, #8
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	4613      	mov	r3, r2
 800732a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <xQueueGenericCreate+0x2c>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	613b      	str	r3, [r7, #16]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	fb02 f303 	mul.w	r3, r2, r3
 8007352:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3348      	adds	r3, #72	@ 0x48
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fafd 	bl	8008958 <pvPortMalloc>
 800735e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d011      	beq.n	800738a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	3348      	adds	r3, #72	@ 0x48
 800736e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007378:	79fa      	ldrb	r2, [r7, #7]
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	9300      	str	r3, [sp, #0]
 800737e:	4613      	mov	r3, r2
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 f805 	bl	8007394 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800738a:	69bb      	ldr	r3, [r7, #24]
	}
 800738c:	4618      	mov	r0, r3
 800738e:	3720      	adds	r7, #32
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d103      	bne.n	80073b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	601a      	str	r2, [r3, #0]
 80073ae:	e002      	b.n	80073b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80073bc:	69bb      	ldr	r3, [r7, #24]
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073c2:	2101      	movs	r1, #1
 80073c4:	69b8      	ldr	r0, [r7, #24]
 80073c6:	f7ff fec3 	bl	8007150 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
	...

080073d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	@ 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80073e2:	2300      	movs	r3, #0
 80073e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10b      	bne.n	8007408 <xQueueGenericSend+0x34>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f4:	f383 8811 	msr	BASEPRI, r3
 80073f8:	f3bf 8f6f 	isb	sy
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007402:	bf00      	nop
 8007404:	bf00      	nop
 8007406:	e7fd      	b.n	8007404 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <xQueueGenericSend+0x42>
 800740e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <xQueueGenericSend+0x46>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <xQueueGenericSend+0x48>
 800741a:	2300      	movs	r3, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <xQueueGenericSend+0x64>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d103      	bne.n	8007446 <xQueueGenericSend+0x72>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <xQueueGenericSend+0x76>
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <xQueueGenericSend+0x78>
 800744a:	2300      	movs	r3, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <xQueueGenericSend+0x94>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	623b      	str	r3, [r7, #32]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007468:	f000 ff5a 	bl	8008320 <xTaskGetSchedulerState>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d102      	bne.n	8007478 <xQueueGenericSend+0xa4>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <xQueueGenericSend+0xa8>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <xQueueGenericSend+0xaa>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10b      	bne.n	800749a <xQueueGenericSend+0xc6>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	61fb      	str	r3, [r7, #28]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800749a:	f001 f97d 	bl	8008798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800749e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d302      	bcc.n	80074b0 <xQueueGenericSend+0xdc>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b02      	cmp	r3, #2
 80074ae:	d129      	bne.n	8007504 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80074b6:	f000 f88f 	bl	80075d8 <prvCopyDataToQueue>
 80074ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d010      	beq.n	80074e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c6:	3324      	adds	r3, #36	@ 0x24
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fd63 	bl	8007f94 <xTaskRemoveFromEventList>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d013      	beq.n	80074fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80074d4:	4b3f      	ldr	r3, [pc, #252]	@ (80075d4 <xQueueGenericSend+0x200>)
 80074d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	f3bf 8f6f 	isb	sy
 80074e4:	e00a      	b.n	80074fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80074ec:	4b39      	ldr	r3, [pc, #228]	@ (80075d4 <xQueueGenericSend+0x200>)
 80074ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074f2:	601a      	str	r2, [r3, #0]
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80074fc:	f001 f97e 	bl	80087fc <vPortExitCritical>
				return pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	e063      	b.n	80075cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d103      	bne.n	8007512 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800750a:	f001 f977 	bl	80087fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800750e:	2300      	movs	r3, #0
 8007510:	e05c      	b.n	80075cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007518:	f107 0314 	add.w	r3, r7, #20
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fd9d 	bl	800805c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007522:	2301      	movs	r3, #1
 8007524:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007526:	f001 f969 	bl	80087fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800752a:	f000 fb43 	bl	8007bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800752e:	f001 f933 	bl	8008798 <vPortEnterCritical>
 8007532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007534:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007538:	b25b      	sxtb	r3, r3
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d103      	bne.n	8007548 <xQueueGenericSend+0x174>
 8007540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800754a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800754e:	b25b      	sxtb	r3, r3
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d103      	bne.n	800755e <xQueueGenericSend+0x18a>
 8007556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800755e:	f001 f94d 	bl	80087fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007562:	1d3a      	adds	r2, r7, #4
 8007564:	f107 0314 	add.w	r3, r7, #20
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f000 fd8c 	bl	8008088 <xTaskCheckForTimeOut>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d124      	bne.n	80075c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007576:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007578:	f000 f8ea 	bl	8007750 <prvIsQueueFull>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d018      	beq.n	80075b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007584:	3310      	adds	r3, #16
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f000 fcdc 	bl	8007f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007592:	f000 f88b 	bl	80076ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007596:	f000 fb1b 	bl	8007bd0 <xTaskResumeAll>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f af7c 	bne.w	800749a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075a2:	4b0c      	ldr	r3, [pc, #48]	@ (80075d4 <xQueueGenericSend+0x200>)
 80075a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	e772      	b.n	800749a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80075b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075b6:	f000 f879 	bl	80076ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ba:	f000 fb09 	bl	8007bd0 <xTaskResumeAll>
 80075be:	e76c      	b.n	800749a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80075c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075c2:	f000 f873 	bl	80076ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075c6:	f000 fb03 	bl	8007bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80075ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3738      	adds	r7, #56	@ 0x38
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d10d      	bne.n	8007612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d14d      	bne.n	800769a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 feaa 	bl	800835c <xTaskPriorityDisinherit>
 8007608:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	e043      	b.n	800769a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d119      	bne.n	800764c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6858      	ldr	r0, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007620:	461a      	mov	r2, r3
 8007622:	68b9      	ldr	r1, [r7, #8]
 8007624:	f001 fc16 	bl	8008e54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007630:	441a      	add	r2, r3
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	429a      	cmp	r2, r3
 8007640:	d32b      	bcc.n	800769a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	e026      	b.n	800769a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	68d8      	ldr	r0, [r3, #12]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007654:	461a      	mov	r2, r3
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	f001 fbfc 	bl	8008e54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68da      	ldr	r2, [r3, #12]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007664:	425b      	negs	r3, r3
 8007666:	441a      	add	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	429a      	cmp	r2, r3
 8007676:	d207      	bcs.n	8007688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007680:	425b      	negs	r3, r3
 8007682:	441a      	add	r2, r3
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b02      	cmp	r3, #2
 800768c:	d105      	bne.n	800769a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	3b01      	subs	r3, #1
 8007698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076a2:	697b      	ldr	r3, [r7, #20]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 f870 	bl	8008798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076c0:	e011      	b.n	80076e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d012      	beq.n	80076f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	3324      	adds	r3, #36	@ 0x24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fc60 	bl	8007f94 <xTaskRemoveFromEventList>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80076da:	f000 fd39 	bl	8008150 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	3b01      	subs	r3, #1
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80076e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dce9      	bgt.n	80076c2 <prvUnlockQueue+0x16>
 80076ee:	e000      	b.n	80076f2 <prvUnlockQueue+0x46>
					break;
 80076f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	22ff      	movs	r2, #255	@ 0xff
 80076f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80076fa:	f001 f87f 	bl	80087fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076fe:	f001 f84b 	bl	8008798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007708:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800770a:	e011      	b.n	8007730 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d012      	beq.n	800773a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3310      	adds	r3, #16
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fc3b 	bl	8007f94 <xTaskRemoveFromEventList>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d001      	beq.n	8007728 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007724:	f000 fd14 	bl	8008150 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	3b01      	subs	r3, #1
 800772c:	b2db      	uxtb	r3, r3
 800772e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007730:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	dce9      	bgt.n	800770c <prvUnlockQueue+0x60>
 8007738:	e000      	b.n	800773c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800773a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	22ff      	movs	r2, #255	@ 0xff
 8007740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007744:	f001 f85a 	bl	80087fc <vPortExitCritical>
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007758:	f001 f81e 	bl	8008798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007764:	429a      	cmp	r2, r3
 8007766:	d102      	bne.n	800776e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007768:	2301      	movs	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	e001      	b.n	8007772 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007772:	f001 f843 	bl	80087fc <vPortExitCritical>

	return xReturn;
 8007776:	68fb      	ldr	r3, [r7, #12]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08e      	sub	sp, #56	@ 0x38
 8007784:	af04      	add	r7, sp, #16
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800778e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	623b      	str	r3, [r7, #32]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80077ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10b      	bne.n	80077ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	61fb      	str	r3, [r7, #28]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80077ca:	23a0      	movs	r3, #160	@ 0xa0
 80077cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	2ba0      	cmp	r3, #160	@ 0xa0
 80077d2:	d00b      	beq.n	80077ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	61bb      	str	r3, [r7, #24]
}
 80077e6:	bf00      	nop
 80077e8:	bf00      	nop
 80077ea:	e7fd      	b.n	80077e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80077ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d01e      	beq.n	8007832 <xTaskCreateStatic+0xb2>
 80077f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d01b      	beq.n	8007832 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007802:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007806:	2202      	movs	r2, #2
 8007808:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800780c:	2300      	movs	r3, #0
 800780e:	9303      	str	r3, [sp, #12]
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	9302      	str	r3, [sp, #8]
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68b9      	ldr	r1, [r7, #8]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f851 	bl	80078cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800782a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800782c:	f000 f8ee 	bl	8007a0c <prvAddNewTaskToReadyList>
 8007830:	e001      	b.n	8007836 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007836:	697b      	ldr	r3, [r7, #20]
	}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	@ 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	@ 0x30
 8007844:	af04      	add	r7, sp, #16
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	603b      	str	r3, [r7, #0]
 800784c:	4613      	mov	r3, r2
 800784e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007850:	88fb      	ldrh	r3, [r7, #6]
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4618      	mov	r0, r3
 8007856:	f001 f87f 	bl	8008958 <pvPortMalloc>
 800785a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00e      	beq.n	8007880 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007862:	20a0      	movs	r0, #160	@ 0xa0
 8007864:	f001 f878 	bl	8008958 <pvPortMalloc>
 8007868:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	631a      	str	r2, [r3, #48]	@ 0x30
 8007876:	e005      	b.n	8007884 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f001 f93b 	bl	8008af4 <vPortFree>
 800787e:	e001      	b.n	8007884 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d017      	beq.n	80078ba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007892:	88fa      	ldrh	r2, [r7, #6]
 8007894:	2300      	movs	r3, #0
 8007896:	9303      	str	r3, [sp, #12]
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	9302      	str	r3, [sp, #8]
 800789c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	68f8      	ldr	r0, [r7, #12]
 80078aa:	f000 f80f 	bl	80078cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078ae:	69f8      	ldr	r0, [r7, #28]
 80078b0:	f000 f8ac 	bl	8007a0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80078b4:	2301      	movs	r3, #1
 80078b6:	61bb      	str	r3, [r7, #24]
 80078b8:	e002      	b.n	80078c0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80078ba:	f04f 33ff 	mov.w	r3, #4294967295
 80078be:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80078c0:	69bb      	ldr	r3, [r7, #24]
	}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3720      	adds	r7, #32
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80078da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80078e4:	440b      	add	r3, r1
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	f023 0307 	bic.w	r3, r3, #7
 80078f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	617b      	str	r3, [r7, #20]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01f      	beq.n	800795c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800791c:	2300      	movs	r3, #0
 800791e:	61fb      	str	r3, [r7, #28]
 8007920:	e012      	b.n	8007948 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	7819      	ldrb	r1, [r3, #0]
 800792a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	4413      	add	r3, r2
 8007930:	3334      	adds	r3, #52	@ 0x34
 8007932:	460a      	mov	r2, r1
 8007934:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007936:	68ba      	ldr	r2, [r7, #8]
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d006      	beq.n	8007950 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	69fb      	ldr	r3, [r7, #28]
 800794a:	2b0f      	cmp	r3, #15
 800794c:	d9e9      	bls.n	8007922 <prvInitialiseNewTask+0x56>
 800794e:	e000      	b.n	8007952 <prvInitialiseNewTask+0x86>
			{
				break;
 8007950:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800795a:	e003      	b.n	8007964 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	2b06      	cmp	r3, #6
 8007968:	d901      	bls.n	800796e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800796a:	2306      	movs	r3, #6
 800796c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007972:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007978:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	2200      	movs	r2, #0
 800797e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	3304      	adds	r3, #4
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fb4f 	bl	8007028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800798a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798c:	3318      	adds	r3, #24
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff fb4a 	bl	8007028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007998:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	f1c3 0207 	rsb	r2, r3, #7
 80079a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80079ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079bc:	334c      	adds	r3, #76	@ 0x4c
 80079be:	224c      	movs	r2, #76	@ 0x4c
 80079c0:	2100      	movs	r1, #0
 80079c2:	4618      	mov	r0, r3
 80079c4:	f001 f9c2 	bl	8008d4c <memset>
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	4a0d      	ldr	r2, [pc, #52]	@ (8007a00 <prvInitialiseNewTask+0x134>)
 80079cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a04 <prvInitialiseNewTask+0x138>)
 80079d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a08 <prvInitialiseNewTask+0x13c>)
 80079d8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	69b8      	ldr	r0, [r7, #24]
 80079e0:	f000 fdaa 	bl	8008538 <pxPortInitialiseStack>
 80079e4:	4602      	mov	r2, r0
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80079ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d002      	beq.n	80079f6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079f6:	bf00      	nop
 80079f8:	3720      	adds	r7, #32
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	240047f8 	.word	0x240047f8
 8007a04:	24004860 	.word	0x24004860
 8007a08:	240048c8 	.word	0x240048c8

08007a0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a14:	f000 fec0 	bl	8008798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a18:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac4 <prvAddNewTaskToReadyList+0xb8>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	4a29      	ldr	r2, [pc, #164]	@ (8007ac4 <prvAddNewTaskToReadyList+0xb8>)
 8007a20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a22:	4b29      	ldr	r3, [pc, #164]	@ (8007ac8 <prvAddNewTaskToReadyList+0xbc>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a2a:	4a27      	ldr	r2, [pc, #156]	@ (8007ac8 <prvAddNewTaskToReadyList+0xbc>)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a30:	4b24      	ldr	r3, [pc, #144]	@ (8007ac4 <prvAddNewTaskToReadyList+0xb8>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d110      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a38:	f000 fbae 	bl	8008198 <prvInitialiseTaskLists>
 8007a3c:	e00d      	b.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a3e:	4b23      	ldr	r3, [pc, #140]	@ (8007acc <prvAddNewTaskToReadyList+0xc0>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d109      	bne.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a46:	4b20      	ldr	r3, [pc, #128]	@ (8007ac8 <prvAddNewTaskToReadyList+0xbc>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d802      	bhi.n	8007a5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a54:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac8 <prvAddNewTaskToReadyList+0xbc>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ad0 <prvAddNewTaskToReadyList+0xc4>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3301      	adds	r3, #1
 8007a60:	4a1b      	ldr	r2, [pc, #108]	@ (8007ad0 <prvAddNewTaskToReadyList+0xc4>)
 8007a62:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a68:	2201      	movs	r2, #1
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	4b19      	ldr	r3, [pc, #100]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	4a18      	ldr	r2, [pc, #96]	@ (8007ad4 <prvAddNewTaskToReadyList+0xc8>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a15      	ldr	r2, [pc, #84]	@ (8007ad8 <prvAddNewTaskToReadyList+0xcc>)
 8007a84:	441a      	add	r2, r3
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7ff fad8 	bl	8007042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a92:	f000 feb3 	bl	80087fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a96:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <prvAddNewTaskToReadyList+0xc0>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00e      	beq.n	8007abc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <prvAddNewTaskToReadyList+0xbc>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d207      	bcs.n	8007abc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007aac:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <prvAddNewTaskToReadyList+0xd0>)
 8007aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	24000ba0 	.word	0x24000ba0
 8007ac8:	24000aa0 	.word	0x24000aa0
 8007acc:	24000bac 	.word	0x24000bac
 8007ad0:	24000bbc 	.word	0x24000bbc
 8007ad4:	24000ba8 	.word	0x24000ba8
 8007ad8:	24000aa4 	.word	0x24000aa4
 8007adc:	e000ed04 	.word	0xe000ed04

08007ae0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	@ 0x28
 8007ae4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aee:	463a      	mov	r2, r7
 8007af0:	1d39      	adds	r1, r7, #4
 8007af2:	f107 0308 	add.w	r3, r7, #8
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7f8 fe04 	bl	8000704 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	9202      	str	r2, [sp, #8]
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	2300      	movs	r3, #0
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	460a      	mov	r2, r1
 8007b0e:	4921      	ldr	r1, [pc, #132]	@ (8007b94 <vTaskStartScheduler+0xb4>)
 8007b10:	4821      	ldr	r0, [pc, #132]	@ (8007b98 <vTaskStartScheduler+0xb8>)
 8007b12:	f7ff fe35 	bl	8007780 <xTaskCreateStatic>
 8007b16:	4603      	mov	r3, r0
 8007b18:	4a20      	ldr	r2, [pc, #128]	@ (8007b9c <vTaskStartScheduler+0xbc>)
 8007b1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8007b9c <vTaskStartScheduler+0xbc>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b24:	2301      	movs	r3, #1
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e001      	b.n	8007b2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d11b      	bne.n	8007b6c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	613b      	str	r3, [r7, #16]
}
 8007b46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b48:	4b15      	ldr	r3, [pc, #84]	@ (8007ba0 <vTaskStartScheduler+0xc0>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	334c      	adds	r3, #76	@ 0x4c
 8007b4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ba4 <vTaskStartScheduler+0xc4>)
 8007b50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b52:	4b15      	ldr	r3, [pc, #84]	@ (8007ba8 <vTaskStartScheduler+0xc8>)
 8007b54:	f04f 32ff 	mov.w	r2, #4294967295
 8007b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b5a:	4b14      	ldr	r3, [pc, #80]	@ (8007bac <vTaskStartScheduler+0xcc>)
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b60:	4b13      	ldr	r3, [pc, #76]	@ (8007bb0 <vTaskStartScheduler+0xd0>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b66:	f000 fd73 	bl	8008650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b6a:	e00f      	b.n	8007b8c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d10b      	bne.n	8007b8c <vTaskStartScheduler+0xac>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <vTaskStartScheduler+0xa8>
}
 8007b8c:	bf00      	nop
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	08008fd4 	.word	0x08008fd4
 8007b98:	08008169 	.word	0x08008169
 8007b9c:	24000bc4 	.word	0x24000bc4
 8007ba0:	24000aa0 	.word	0x24000aa0
 8007ba4:	24000014 	.word	0x24000014
 8007ba8:	24000bc0 	.word	0x24000bc0
 8007bac:	24000bac 	.word	0x24000bac
 8007bb0:	24000ba4 	.word	0x24000ba4

08007bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bb8:	4b04      	ldr	r3, [pc, #16]	@ (8007bcc <vTaskSuspendAll+0x18>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4a03      	ldr	r2, [pc, #12]	@ (8007bcc <vTaskSuspendAll+0x18>)
 8007bc0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bc2:	bf00      	nop
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr
 8007bcc:	24000bc8 	.word	0x24000bc8

08007bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bde:	4b42      	ldr	r3, [pc, #264]	@ (8007ce8 <xTaskResumeAll+0x118>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10b      	bne.n	8007bfe <xTaskResumeAll+0x2e>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	603b      	str	r3, [r7, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007bfe:	f000 fdcb 	bl	8008798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c02:	4b39      	ldr	r3, [pc, #228]	@ (8007ce8 <xTaskResumeAll+0x118>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	3b01      	subs	r3, #1
 8007c08:	4a37      	ldr	r2, [pc, #220]	@ (8007ce8 <xTaskResumeAll+0x118>)
 8007c0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c0c:	4b36      	ldr	r3, [pc, #216]	@ (8007ce8 <xTaskResumeAll+0x118>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d161      	bne.n	8007cd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c14:	4b35      	ldr	r3, [pc, #212]	@ (8007cec <xTaskResumeAll+0x11c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d05d      	beq.n	8007cd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c1c:	e02e      	b.n	8007c7c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c1e:	4b34      	ldr	r3, [pc, #208]	@ (8007cf0 <xTaskResumeAll+0x120>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	3318      	adds	r3, #24
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff fa66 	bl	80070fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fa61 	bl	80070fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	2201      	movs	r2, #1
 8007c40:	409a      	lsls	r2, r3
 8007c42:	4b2c      	ldr	r3, [pc, #176]	@ (8007cf4 <xTaskResumeAll+0x124>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	4a2a      	ldr	r2, [pc, #168]	@ (8007cf4 <xTaskResumeAll+0x124>)
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c50:	4613      	mov	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4a27      	ldr	r2, [pc, #156]	@ (8007cf8 <xTaskResumeAll+0x128>)
 8007c5a:	441a      	add	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f7ff f9ed 	bl	8007042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c6c:	4b23      	ldr	r3, [pc, #140]	@ (8007cfc <xTaskResumeAll+0x12c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d302      	bcc.n	8007c7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007c76:	4b22      	ldr	r3, [pc, #136]	@ (8007d00 <xTaskResumeAll+0x130>)
 8007c78:	2201      	movs	r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8007cf0 <xTaskResumeAll+0x120>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1cc      	bne.n	8007c1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c8a:	f000 fb29 	bl	80082e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8007d04 <xTaskResumeAll+0x134>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d010      	beq.n	8007cbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c9a:	f000 f837 	bl	8007d0c <xTaskIncrementTick>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ca4:	4b16      	ldr	r3, [pc, #88]	@ (8007d00 <xTaskResumeAll+0x130>)
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3b01      	subs	r3, #1
 8007cae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1f1      	bne.n	8007c9a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <xTaskResumeAll+0x134>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cbc:	4b10      	ldr	r3, [pc, #64]	@ (8007d00 <xTaskResumeAll+0x130>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d009      	beq.n	8007cd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d08 <xTaskResumeAll+0x138>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cd8:	f000 fd90 	bl	80087fc <vPortExitCritical>

	return xAlreadyYielded;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	24000bc8 	.word	0x24000bc8
 8007cec:	24000ba0 	.word	0x24000ba0
 8007cf0:	24000b60 	.word	0x24000b60
 8007cf4:	24000ba8 	.word	0x24000ba8
 8007cf8:	24000aa4 	.word	0x24000aa4
 8007cfc:	24000aa0 	.word	0x24000aa0
 8007d00:	24000bb4 	.word	0x24000bb4
 8007d04:	24000bb0 	.word	0x24000bb0
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d16:	4b4f      	ldr	r3, [pc, #316]	@ (8007e54 <xTaskIncrementTick+0x148>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f040 808f 	bne.w	8007e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d20:	4b4d      	ldr	r3, [pc, #308]	@ (8007e58 <xTaskIncrementTick+0x14c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d28:	4a4b      	ldr	r2, [pc, #300]	@ (8007e58 <xTaskIncrementTick+0x14c>)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d121      	bne.n	8007d78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d34:	4b49      	ldr	r3, [pc, #292]	@ (8007e5c <xTaskIncrementTick+0x150>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00b      	beq.n	8007d56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	603b      	str	r3, [r7, #0]
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop
 8007d54:	e7fd      	b.n	8007d52 <xTaskIncrementTick+0x46>
 8007d56:	4b41      	ldr	r3, [pc, #260]	@ (8007e5c <xTaskIncrementTick+0x150>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	4b40      	ldr	r3, [pc, #256]	@ (8007e60 <xTaskIncrementTick+0x154>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a3e      	ldr	r2, [pc, #248]	@ (8007e5c <xTaskIncrementTick+0x150>)
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4a3e      	ldr	r2, [pc, #248]	@ (8007e60 <xTaskIncrementTick+0x154>)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6013      	str	r3, [r2, #0]
 8007d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e64 <xTaskIncrementTick+0x158>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	4a3c      	ldr	r2, [pc, #240]	@ (8007e64 <xTaskIncrementTick+0x158>)
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	f000 fab4 	bl	80082e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d78:	4b3b      	ldr	r3, [pc, #236]	@ (8007e68 <xTaskIncrementTick+0x15c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d348      	bcc.n	8007e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d82:	4b36      	ldr	r3, [pc, #216]	@ (8007e5c <xTaskIncrementTick+0x150>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d104      	bne.n	8007d96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d8c:	4b36      	ldr	r3, [pc, #216]	@ (8007e68 <xTaskIncrementTick+0x15c>)
 8007d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d92:	601a      	str	r2, [r3, #0]
					break;
 8007d94:	e03e      	b.n	8007e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d96:	4b31      	ldr	r3, [pc, #196]	@ (8007e5c <xTaskIncrementTick+0x150>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d203      	bcs.n	8007db6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007dae:	4a2e      	ldr	r2, [pc, #184]	@ (8007e68 <xTaskIncrementTick+0x15c>)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007db4:	e02e      	b.n	8007e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	3304      	adds	r3, #4
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff f99e 	bl	80070fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d004      	beq.n	8007dd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	3318      	adds	r3, #24
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff f995 	bl	80070fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	4b24      	ldr	r3, [pc, #144]	@ (8007e6c <xTaskIncrementTick+0x160>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	4a22      	ldr	r2, [pc, #136]	@ (8007e6c <xTaskIncrementTick+0x160>)
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4a1f      	ldr	r2, [pc, #124]	@ (8007e70 <xTaskIncrementTick+0x164>)
 8007df2:	441a      	add	r2, r3
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f7ff f921 	bl	8007042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e04:	4b1b      	ldr	r3, [pc, #108]	@ (8007e74 <xTaskIncrementTick+0x168>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d3b9      	bcc.n	8007d82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e12:	e7b6      	b.n	8007d82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e14:	4b17      	ldr	r3, [pc, #92]	@ (8007e74 <xTaskIncrementTick+0x168>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	4915      	ldr	r1, [pc, #84]	@ (8007e70 <xTaskIncrementTick+0x164>)
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	440b      	add	r3, r1
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d901      	bls.n	8007e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e30:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <xTaskIncrementTick+0x16c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	617b      	str	r3, [r7, #20]
 8007e3c:	e004      	b.n	8007e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8007e7c <xTaskIncrementTick+0x170>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a0d      	ldr	r2, [pc, #52]	@ (8007e7c <xTaskIncrementTick+0x170>)
 8007e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e48:	697b      	ldr	r3, [r7, #20]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	24000bc8 	.word	0x24000bc8
 8007e58:	24000ba4 	.word	0x24000ba4
 8007e5c:	24000b58 	.word	0x24000b58
 8007e60:	24000b5c 	.word	0x24000b5c
 8007e64:	24000bb8 	.word	0x24000bb8
 8007e68:	24000bc0 	.word	0x24000bc0
 8007e6c:	24000ba8 	.word	0x24000ba8
 8007e70:	24000aa4 	.word	0x24000aa4
 8007e74:	24000aa0 	.word	0x24000aa0
 8007e78:	24000bb4 	.word	0x24000bb4
 8007e7c:	24000bb0 	.word	0x24000bb0

08007e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e86:	4b2a      	ldr	r3, [pc, #168]	@ (8007f30 <vTaskSwitchContext+0xb0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d003      	beq.n	8007e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e8e:	4b29      	ldr	r3, [pc, #164]	@ (8007f34 <vTaskSwitchContext+0xb4>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e94:	e045      	b.n	8007f22 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007e96:	4b27      	ldr	r3, [pc, #156]	@ (8007f34 <vTaskSwitchContext+0xb4>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9c:	4b26      	ldr	r3, [pc, #152]	@ (8007f38 <vTaskSwitchContext+0xb8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	fab3 f383 	clz	r3, r3
 8007ea8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007eaa:	7afb      	ldrb	r3, [r7, #11]
 8007eac:	f1c3 031f 	rsb	r3, r3, #31
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	4922      	ldr	r1, [pc, #136]	@ (8007f3c <vTaskSwitchContext+0xbc>)
 8007eb4:	697a      	ldr	r2, [r7, #20]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	440b      	add	r3, r1
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d10b      	bne.n	8007ede <vTaskSwitchContext+0x5e>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	607b      	str	r3, [r7, #4]
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	e7fd      	b.n	8007eda <vTaskSwitchContext+0x5a>
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4a14      	ldr	r2, [pc, #80]	@ (8007f3c <vTaskSwitchContext+0xbc>)
 8007eea:	4413      	add	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	605a      	str	r2, [r3, #4]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	685a      	ldr	r2, [r3, #4]
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	3308      	adds	r3, #8
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d104      	bne.n	8007f0e <vTaskSwitchContext+0x8e>
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	605a      	str	r2, [r3, #4]
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	4a0a      	ldr	r2, [pc, #40]	@ (8007f40 <vTaskSwitchContext+0xc0>)
 8007f16:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f18:	4b09      	ldr	r3, [pc, #36]	@ (8007f40 <vTaskSwitchContext+0xc0>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	334c      	adds	r3, #76	@ 0x4c
 8007f1e:	4a09      	ldr	r2, [pc, #36]	@ (8007f44 <vTaskSwitchContext+0xc4>)
 8007f20:	6013      	str	r3, [r2, #0]
}
 8007f22:	bf00      	nop
 8007f24:	371c      	adds	r7, #28
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	24000bc8 	.word	0x24000bc8
 8007f34:	24000bb4 	.word	0x24000bb4
 8007f38:	24000ba8 	.word	0x24000ba8
 8007f3c:	24000aa4 	.word	0x24000aa4
 8007f40:	24000aa0 	.word	0x24000aa0
 8007f44:	24000014 	.word	0x24000014

08007f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d10b      	bne.n	8007f70 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f5c:	f383 8811 	msr	BASEPRI, r3
 8007f60:	f3bf 8f6f 	isb	sy
 8007f64:	f3bf 8f4f 	dsb	sy
 8007f68:	60fb      	str	r3, [r7, #12]
}
 8007f6a:	bf00      	nop
 8007f6c:	bf00      	nop
 8007f6e:	e7fd      	b.n	8007f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f70:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <vTaskPlaceOnEventList+0x48>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3318      	adds	r3, #24
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7ff f886 	bl	800708a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6838      	ldr	r0, [r7, #0]
 8007f82:	f000 fa73 	bl	800846c <prvAddCurrentTaskToDelayedList>
}
 8007f86:	bf00      	nop
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	24000aa0 	.word	0x24000aa0

08007f94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10b      	bne.n	8007fc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fae:	f383 8811 	msr	BASEPRI, r3
 8007fb2:	f3bf 8f6f 	isb	sy
 8007fb6:	f3bf 8f4f 	dsb	sy
 8007fba:	60fb      	str	r3, [r7, #12]
}
 8007fbc:	bf00      	nop
 8007fbe:	bf00      	nop
 8007fc0:	e7fd      	b.n	8007fbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff f898 	bl	80070fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8008044 <xTaskRemoveFromEventList+0xb0>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d11c      	bne.n	800800e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7ff f88f 	bl	80070fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	409a      	lsls	r2, r3
 8007fe6:	4b18      	ldr	r3, [pc, #96]	@ (8008048 <xTaskRemoveFromEventList+0xb4>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	4a16      	ldr	r2, [pc, #88]	@ (8008048 <xTaskRemoveFromEventList+0xb4>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4413      	add	r3, r2
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	4a13      	ldr	r2, [pc, #76]	@ (800804c <xTaskRemoveFromEventList+0xb8>)
 8007ffe:	441a      	add	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	3304      	adds	r3, #4
 8008004:	4619      	mov	r1, r3
 8008006:	4610      	mov	r0, r2
 8008008:	f7ff f81b 	bl	8007042 <vListInsertEnd>
 800800c:	e005      	b.n	800801a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3318      	adds	r3, #24
 8008012:	4619      	mov	r1, r3
 8008014:	480e      	ldr	r0, [pc, #56]	@ (8008050 <xTaskRemoveFromEventList+0xbc>)
 8008016:	f7ff f814 	bl	8007042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800801e:	4b0d      	ldr	r3, [pc, #52]	@ (8008054 <xTaskRemoveFromEventList+0xc0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008024:	429a      	cmp	r2, r3
 8008026:	d905      	bls.n	8008034 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008028:	2301      	movs	r3, #1
 800802a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800802c:	4b0a      	ldr	r3, [pc, #40]	@ (8008058 <xTaskRemoveFromEventList+0xc4>)
 800802e:	2201      	movs	r2, #1
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e001      	b.n	8008038 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008038:	697b      	ldr	r3, [r7, #20]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	24000bc8 	.word	0x24000bc8
 8008048:	24000ba8 	.word	0x24000ba8
 800804c:	24000aa4 	.word	0x24000aa4
 8008050:	24000b60 	.word	0x24000b60
 8008054:	24000aa0 	.word	0x24000aa0
 8008058:	24000bb4 	.word	0x24000bb4

0800805c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008064:	4b06      	ldr	r3, [pc, #24]	@ (8008080 <vTaskInternalSetTimeOutState+0x24>)
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800806c:	4b05      	ldr	r3, [pc, #20]	@ (8008084 <vTaskInternalSetTimeOutState+0x28>)
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	605a      	str	r2, [r3, #4]
}
 8008074:	bf00      	nop
 8008076:	370c      	adds	r7, #12
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr
 8008080:	24000bb8 	.word	0x24000bb8
 8008084:	24000ba4 	.word	0x24000ba4

08008088 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b088      	sub	sp, #32
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	613b      	str	r3, [r7, #16]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10b      	bne.n	80080ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	60fb      	str	r3, [r7, #12]
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	e7fd      	b.n	80080ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80080ce:	f000 fb63 	bl	8008798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008148 <xTaskCheckForTimeOut+0xc0>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	69ba      	ldr	r2, [r7, #24]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ea:	d102      	bne.n	80080f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080ec:	2300      	movs	r3, #0
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e023      	b.n	800813a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4b15      	ldr	r3, [pc, #84]	@ (800814c <xTaskCheckForTimeOut+0xc4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d007      	beq.n	800810e <xTaskCheckForTimeOut+0x86>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	429a      	cmp	r2, r3
 8008106:	d302      	bcc.n	800810e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008108:	2301      	movs	r3, #1
 800810a:	61fb      	str	r3, [r7, #28]
 800810c:	e015      	b.n	800813a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	429a      	cmp	r2, r3
 8008116:	d20b      	bcs.n	8008130 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff ff99 	bl	800805c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
 800812e:	e004      	b.n	800813a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2200      	movs	r2, #0
 8008134:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008136:	2301      	movs	r3, #1
 8008138:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800813a:	f000 fb5f 	bl	80087fc <vPortExitCritical>

	return xReturn;
 800813e:	69fb      	ldr	r3, [r7, #28]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3720      	adds	r7, #32
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	24000ba4 	.word	0x24000ba4
 800814c:	24000bb8 	.word	0x24000bb8

08008150 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008154:	4b03      	ldr	r3, [pc, #12]	@ (8008164 <vTaskMissedYield+0x14>)
 8008156:	2201      	movs	r2, #1
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	24000bb4 	.word	0x24000bb4

08008168 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008170:	f000 f852 	bl	8008218 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008174:	4b06      	ldr	r3, [pc, #24]	@ (8008190 <prvIdleTask+0x28>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d9f9      	bls.n	8008170 <prvIdleTask+0x8>
			{
				taskYIELD();
 800817c:	4b05      	ldr	r3, [pc, #20]	@ (8008194 <prvIdleTask+0x2c>)
 800817e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008182:	601a      	str	r2, [r3, #0]
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800818c:	e7f0      	b.n	8008170 <prvIdleTask+0x8>
 800818e:	bf00      	nop
 8008190:	24000aa4 	.word	0x24000aa4
 8008194:	e000ed04 	.word	0xe000ed04

08008198 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800819e:	2300      	movs	r3, #0
 80081a0:	607b      	str	r3, [r7, #4]
 80081a2:	e00c      	b.n	80081be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4a12      	ldr	r2, [pc, #72]	@ (80081f8 <prvInitialiseTaskLists+0x60>)
 80081b0:	4413      	add	r3, r2
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fe ff18 	bl	8006fe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	3301      	adds	r3, #1
 80081bc:	607b      	str	r3, [r7, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b06      	cmp	r3, #6
 80081c2:	d9ef      	bls.n	80081a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081c4:	480d      	ldr	r0, [pc, #52]	@ (80081fc <prvInitialiseTaskLists+0x64>)
 80081c6:	f7fe ff0f 	bl	8006fe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081ca:	480d      	ldr	r0, [pc, #52]	@ (8008200 <prvInitialiseTaskLists+0x68>)
 80081cc:	f7fe ff0c 	bl	8006fe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081d0:	480c      	ldr	r0, [pc, #48]	@ (8008204 <prvInitialiseTaskLists+0x6c>)
 80081d2:	f7fe ff09 	bl	8006fe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081d6:	480c      	ldr	r0, [pc, #48]	@ (8008208 <prvInitialiseTaskLists+0x70>)
 80081d8:	f7fe ff06 	bl	8006fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081dc:	480b      	ldr	r0, [pc, #44]	@ (800820c <prvInitialiseTaskLists+0x74>)
 80081de:	f7fe ff03 	bl	8006fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008210 <prvInitialiseTaskLists+0x78>)
 80081e4:	4a05      	ldr	r2, [pc, #20]	@ (80081fc <prvInitialiseTaskLists+0x64>)
 80081e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008214 <prvInitialiseTaskLists+0x7c>)
 80081ea:	4a05      	ldr	r2, [pc, #20]	@ (8008200 <prvInitialiseTaskLists+0x68>)
 80081ec:	601a      	str	r2, [r3, #0]
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	24000aa4 	.word	0x24000aa4
 80081fc:	24000b30 	.word	0x24000b30
 8008200:	24000b44 	.word	0x24000b44
 8008204:	24000b60 	.word	0x24000b60
 8008208:	24000b74 	.word	0x24000b74
 800820c:	24000b8c 	.word	0x24000b8c
 8008210:	24000b58 	.word	0x24000b58
 8008214:	24000b5c 	.word	0x24000b5c

08008218 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800821e:	e019      	b.n	8008254 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008220:	f000 faba 	bl	8008798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008224:	4b10      	ldr	r3, [pc, #64]	@ (8008268 <prvCheckTasksWaitingTermination+0x50>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	3304      	adds	r3, #4
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe ff63 	bl	80070fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008236:	4b0d      	ldr	r3, [pc, #52]	@ (800826c <prvCheckTasksWaitingTermination+0x54>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3b01      	subs	r3, #1
 800823c:	4a0b      	ldr	r2, [pc, #44]	@ (800826c <prvCheckTasksWaitingTermination+0x54>)
 800823e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008240:	4b0b      	ldr	r3, [pc, #44]	@ (8008270 <prvCheckTasksWaitingTermination+0x58>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	3b01      	subs	r3, #1
 8008246:	4a0a      	ldr	r2, [pc, #40]	@ (8008270 <prvCheckTasksWaitingTermination+0x58>)
 8008248:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800824a:	f000 fad7 	bl	80087fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f810 	bl	8008274 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008254:	4b06      	ldr	r3, [pc, #24]	@ (8008270 <prvCheckTasksWaitingTermination+0x58>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d1e1      	bne.n	8008220 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800825c:	bf00      	nop
 800825e:	bf00      	nop
 8008260:	3708      	adds	r7, #8
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	24000b74 	.word	0x24000b74
 800826c:	24000ba0 	.word	0x24000ba0
 8008270:	24000b88 	.word	0x24000b88

08008274 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	334c      	adds	r3, #76	@ 0x4c
 8008280:	4618      	mov	r0, r3
 8008282:	f000 fd6b 	bl	8008d5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	4618      	mov	r0, r3
 8008296:	f000 fc2d 	bl	8008af4 <vPortFree>
				vPortFree( pxTCB );
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fc2a 	bl	8008af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082a0:	e019      	b.n	80082d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d103      	bne.n	80082b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc21 	bl	8008af4 <vPortFree>
	}
 80082b2:	e010      	b.n	80082d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80082ba:	2b02      	cmp	r3, #2
 80082bc:	d00b      	beq.n	80082d6 <prvDeleteTCB+0x62>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	60fb      	str	r3, [r7, #12]
}
 80082d0:	bf00      	nop
 80082d2:	bf00      	nop
 80082d4:	e7fd      	b.n	80082d2 <prvDeleteTCB+0x5e>
	}
 80082d6:	bf00      	nop
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
	...

080082e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <prvResetNextTaskUnblockTime+0x38>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082f0:	4b0a      	ldr	r3, [pc, #40]	@ (800831c <prvResetNextTaskUnblockTime+0x3c>)
 80082f2:	f04f 32ff 	mov.w	r2, #4294967295
 80082f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082f8:	e008      	b.n	800830c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082fa:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <prvResetNextTaskUnblockTime+0x38>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	68db      	ldr	r3, [r3, #12]
 8008302:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4a04      	ldr	r2, [pc, #16]	@ (800831c <prvResetNextTaskUnblockTime+0x3c>)
 800830a:	6013      	str	r3, [r2, #0]
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	24000b58 	.word	0x24000b58
 800831c:	24000bc0 	.word	0x24000bc0

08008320 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008326:	4b0b      	ldr	r3, [pc, #44]	@ (8008354 <xTaskGetSchedulerState+0x34>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800832e:	2301      	movs	r3, #1
 8008330:	607b      	str	r3, [r7, #4]
 8008332:	e008      	b.n	8008346 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008334:	4b08      	ldr	r3, [pc, #32]	@ (8008358 <xTaskGetSchedulerState+0x38>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d102      	bne.n	8008342 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800833c:	2302      	movs	r3, #2
 800833e:	607b      	str	r3, [r7, #4]
 8008340:	e001      	b.n	8008346 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008346:	687b      	ldr	r3, [r7, #4]
	}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	24000bac 	.word	0x24000bac
 8008358:	24000bc8 	.word	0x24000bc8

0800835c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008368:	2300      	movs	r3, #0
 800836a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d070      	beq.n	8008454 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008372:	4b3b      	ldr	r3, [pc, #236]	@ (8008460 <xTaskPriorityDisinherit+0x104>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	d00b      	beq.n	8008394 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800837c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008380:	f383 8811 	msr	BASEPRI, r3
 8008384:	f3bf 8f6f 	isb	sy
 8008388:	f3bf 8f4f 	dsb	sy
 800838c:	60fb      	str	r3, [r7, #12]
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	e7fd      	b.n	8008390 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008398:	2b00      	cmp	r3, #0
 800839a:	d10b      	bne.n	80083b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	60bb      	str	r3, [r7, #8]
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	e7fd      	b.n	80083b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083b8:	1e5a      	subs	r2, r3, #1
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d044      	beq.n	8008454 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d140      	bne.n	8008454 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fe90 	bl	80070fc <uxListRemove>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d115      	bne.n	800840e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	491f      	ldr	r1, [pc, #124]	@ (8008464 <xTaskPriorityDisinherit+0x108>)
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	440b      	add	r3, r1
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10a      	bne.n	800840e <xTaskPriorityDisinherit+0xb2>
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	2201      	movs	r2, #1
 80083fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008402:	43da      	mvns	r2, r3
 8008404:	4b18      	ldr	r3, [pc, #96]	@ (8008468 <xTaskPriorityDisinherit+0x10c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4013      	ands	r3, r2
 800840a:	4a17      	ldr	r2, [pc, #92]	@ (8008468 <xTaskPriorityDisinherit+0x10c>)
 800840c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800841a:	f1c3 0207 	rsb	r2, r3, #7
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008426:	2201      	movs	r2, #1
 8008428:	409a      	lsls	r2, r3
 800842a:	4b0f      	ldr	r3, [pc, #60]	@ (8008468 <xTaskPriorityDisinherit+0x10c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4313      	orrs	r3, r2
 8008430:	4a0d      	ldr	r2, [pc, #52]	@ (8008468 <xTaskPriorityDisinherit+0x10c>)
 8008432:	6013      	str	r3, [r2, #0]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008438:	4613      	mov	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4a08      	ldr	r2, [pc, #32]	@ (8008464 <xTaskPriorityDisinherit+0x108>)
 8008442:	441a      	add	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	3304      	adds	r3, #4
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f7fe fdf9 	bl	8007042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008450:	2301      	movs	r3, #1
 8008452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008454:	697b      	ldr	r3, [r7, #20]
	}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	24000aa0 	.word	0x24000aa0
 8008464:	24000aa4 	.word	0x24000aa4
 8008468:	24000ba8 	.word	0x24000ba8

0800846c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008476:	4b29      	ldr	r3, [pc, #164]	@ (800851c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800847c:	4b28      	ldr	r3, [pc, #160]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fe3a 	bl	80070fc <uxListRemove>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d10b      	bne.n	80084a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800848e:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	2201      	movs	r2, #1
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	43da      	mvns	r2, r3
 800849c:	4b21      	ldr	r3, [pc, #132]	@ (8008524 <prvAddCurrentTaskToDelayedList+0xb8>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4013      	ands	r3, r2
 80084a2:	4a20      	ldr	r2, [pc, #128]	@ (8008524 <prvAddCurrentTaskToDelayedList+0xb8>)
 80084a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ac:	d10a      	bne.n	80084c4 <prvAddCurrentTaskToDelayedList+0x58>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d007      	beq.n	80084c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4619      	mov	r1, r3
 80084bc:	481a      	ldr	r0, [pc, #104]	@ (8008528 <prvAddCurrentTaskToDelayedList+0xbc>)
 80084be:	f7fe fdc0 	bl	8007042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084c2:	e026      	b.n	8008512 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4413      	add	r3, r2
 80084ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084cc:	4b14      	ldr	r3, [pc, #80]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d209      	bcs.n	80084f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084dc:	4b13      	ldr	r3, [pc, #76]	@ (800852c <prvAddCurrentTaskToDelayedList+0xc0>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	4b0f      	ldr	r3, [pc, #60]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3304      	adds	r3, #4
 80084e6:	4619      	mov	r1, r3
 80084e8:	4610      	mov	r0, r2
 80084ea:	f7fe fdce 	bl	800708a <vListInsert>
}
 80084ee:	e010      	b.n	8008512 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008530 <prvAddCurrentTaskToDelayedList+0xc4>)
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	4b0a      	ldr	r3, [pc, #40]	@ (8008520 <prvAddCurrentTaskToDelayedList+0xb4>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7fe fdc4 	bl	800708a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008502:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	429a      	cmp	r2, r3
 800850a:	d202      	bcs.n	8008512 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800850c:	4a09      	ldr	r2, [pc, #36]	@ (8008534 <prvAddCurrentTaskToDelayedList+0xc8>)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	6013      	str	r3, [r2, #0]
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	24000ba4 	.word	0x24000ba4
 8008520:	24000aa0 	.word	0x24000aa0
 8008524:	24000ba8 	.word	0x24000ba8
 8008528:	24000b8c 	.word	0x24000b8c
 800852c:	24000b5c 	.word	0x24000b5c
 8008530:	24000b58 	.word	0x24000b58
 8008534:	24000bc0 	.word	0x24000bc0

08008538 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	3b04      	subs	r3, #4
 8008548:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008550:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3b04      	subs	r3, #4
 8008556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f023 0201 	bic.w	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3b04      	subs	r3, #4
 8008566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008568:	4a0c      	ldr	r2, [pc, #48]	@ (800859c <pxPortInitialiseStack+0x64>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3b14      	subs	r3, #20
 8008572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	3b04      	subs	r3, #4
 800857e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f06f 0202 	mvn.w	r2, #2
 8008586:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3b20      	subs	r3, #32
 800858c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800858e:	68fb      	ldr	r3, [r7, #12]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	080085a1 	.word	0x080085a1

080085a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80085a6:	2300      	movs	r3, #0
 80085a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80085aa:	4b13      	ldr	r3, [pc, #76]	@ (80085f8 <prvTaskExitError+0x58>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d00b      	beq.n	80085cc <prvTaskExitError+0x2c>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	60fb      	str	r3, [r7, #12]
}
 80085c6:	bf00      	nop
 80085c8:	bf00      	nop
 80085ca:	e7fd      	b.n	80085c8 <prvTaskExitError+0x28>
	__asm volatile
 80085cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d0:	f383 8811 	msr	BASEPRI, r3
 80085d4:	f3bf 8f6f 	isb	sy
 80085d8:	f3bf 8f4f 	dsb	sy
 80085dc:	60bb      	str	r3, [r7, #8]
}
 80085de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80085e0:	bf00      	nop
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d0fc      	beq.n	80085e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	24000010 	.word	0x24000010
 80085fc:	00000000 	.word	0x00000000

08008600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008600:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <pxCurrentTCBConst2>)
 8008602:	6819      	ldr	r1, [r3, #0]
 8008604:	6808      	ldr	r0, [r1, #0]
 8008606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860a:	f380 8809 	msr	PSP, r0
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	f04f 0000 	mov.w	r0, #0
 8008616:	f380 8811 	msr	BASEPRI, r0
 800861a:	4770      	bx	lr
 800861c:	f3af 8000 	nop.w

08008620 <pxCurrentTCBConst2>:
 8008620:	24000aa0 	.word	0x24000aa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop

08008628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008628:	4808      	ldr	r0, [pc, #32]	@ (800864c <prvPortStartFirstTask+0x24>)
 800862a:	6800      	ldr	r0, [r0, #0]
 800862c:	6800      	ldr	r0, [r0, #0]
 800862e:	f380 8808 	msr	MSP, r0
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f380 8814 	msr	CONTROL, r0
 800863a:	b662      	cpsie	i
 800863c:	b661      	cpsie	f
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	df00      	svc	0
 8008648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800864a:	bf00      	nop
 800864c:	e000ed08 	.word	0xe000ed08

08008650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008656:	4b47      	ldr	r3, [pc, #284]	@ (8008774 <xPortStartScheduler+0x124>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a47      	ldr	r2, [pc, #284]	@ (8008778 <xPortStartScheduler+0x128>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d10b      	bne.n	8008678 <xPortStartScheduler+0x28>
	__asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	613b      	str	r3, [r7, #16]
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	e7fd      	b.n	8008674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008678:	4b3e      	ldr	r3, [pc, #248]	@ (8008774 <xPortStartScheduler+0x124>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a3f      	ldr	r2, [pc, #252]	@ (800877c <xPortStartScheduler+0x12c>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d10b      	bne.n	800869a <xPortStartScheduler+0x4a>
	__asm volatile
 8008682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008686:	f383 8811 	msr	BASEPRI, r3
 800868a:	f3bf 8f6f 	isb	sy
 800868e:	f3bf 8f4f 	dsb	sy
 8008692:	60fb      	str	r3, [r7, #12]
}
 8008694:	bf00      	nop
 8008696:	bf00      	nop
 8008698:	e7fd      	b.n	8008696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800869a:	4b39      	ldr	r3, [pc, #228]	@ (8008780 <xPortStartScheduler+0x130>)
 800869c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	22ff      	movs	r2, #255	@ 0xff
 80086aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80086b4:	78fb      	ldrb	r3, [r7, #3]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	4b31      	ldr	r3, [pc, #196]	@ (8008784 <xPortStartScheduler+0x134>)
 80086c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80086c2:	4b31      	ldr	r3, [pc, #196]	@ (8008788 <xPortStartScheduler+0x138>)
 80086c4:	2207      	movs	r2, #7
 80086c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086c8:	e009      	b.n	80086de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80086ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008788 <xPortStartScheduler+0x138>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008788 <xPortStartScheduler+0x138>)
 80086d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80086de:	78fb      	ldrb	r3, [r7, #3]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086e6:	2b80      	cmp	r3, #128	@ 0x80
 80086e8:	d0ef      	beq.n	80086ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80086ea:	4b27      	ldr	r3, [pc, #156]	@ (8008788 <xPortStartScheduler+0x138>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1c3 0307 	rsb	r3, r3, #7
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d00b      	beq.n	800870e <xPortStartScheduler+0xbe>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60bb      	str	r3, [r7, #8]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800870e:	4b1e      	ldr	r3, [pc, #120]	@ (8008788 <xPortStartScheduler+0x138>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	021b      	lsls	r3, r3, #8
 8008714:	4a1c      	ldr	r2, [pc, #112]	@ (8008788 <xPortStartScheduler+0x138>)
 8008716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008718:	4b1b      	ldr	r3, [pc, #108]	@ (8008788 <xPortStartScheduler+0x138>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008720:	4a19      	ldr	r2, [pc, #100]	@ (8008788 <xPortStartScheduler+0x138>)
 8008722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	b2da      	uxtb	r2, r3
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800872c:	4b17      	ldr	r3, [pc, #92]	@ (800878c <xPortStartScheduler+0x13c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a16      	ldr	r2, [pc, #88]	@ (800878c <xPortStartScheduler+0x13c>)
 8008732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008738:	4b14      	ldr	r3, [pc, #80]	@ (800878c <xPortStartScheduler+0x13c>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a13      	ldr	r2, [pc, #76]	@ (800878c <xPortStartScheduler+0x13c>)
 800873e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008744:	f000 f8da 	bl	80088fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008748:	4b11      	ldr	r3, [pc, #68]	@ (8008790 <xPortStartScheduler+0x140>)
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800874e:	f000 f8f9 	bl	8008944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <xPortStartScheduler+0x144>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a0f      	ldr	r2, [pc, #60]	@ (8008794 <xPortStartScheduler+0x144>)
 8008758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800875c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800875e:	f7ff ff63 	bl	8008628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008762:	f7ff fb8d 	bl	8007e80 <vTaskSwitchContext>
	prvTaskExitError();
 8008766:	f7ff ff1b 	bl	80085a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800876a:	2300      	movs	r3, #0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	e000ed00 	.word	0xe000ed00
 8008778:	410fc271 	.word	0x410fc271
 800877c:	410fc270 	.word	0x410fc270
 8008780:	e000e400 	.word	0xe000e400
 8008784:	24000bcc 	.word	0x24000bcc
 8008788:	24000bd0 	.word	0x24000bd0
 800878c:	e000ed20 	.word	0xe000ed20
 8008790:	24000010 	.word	0x24000010
 8008794:	e000ef34 	.word	0xe000ef34

08008798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
	__asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	607b      	str	r3, [r7, #4]
}
 80087b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80087b2:	4b10      	ldr	r3, [pc, #64]	@ (80087f4 <vPortEnterCritical+0x5c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	3301      	adds	r3, #1
 80087b8:	4a0e      	ldr	r2, [pc, #56]	@ (80087f4 <vPortEnterCritical+0x5c>)
 80087ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80087bc:	4b0d      	ldr	r3, [pc, #52]	@ (80087f4 <vPortEnterCritical+0x5c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d110      	bne.n	80087e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80087c4:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <vPortEnterCritical+0x60>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00b      	beq.n	80087e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80087ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	603b      	str	r3, [r7, #0]
}
 80087e0:	bf00      	nop
 80087e2:	bf00      	nop
 80087e4:	e7fd      	b.n	80087e2 <vPortEnterCritical+0x4a>
	}
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	24000010 	.word	0x24000010
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008802:	4b12      	ldr	r3, [pc, #72]	@ (800884c <vPortExitCritical+0x50>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10b      	bne.n	8008822 <vPortExitCritical+0x26>
	__asm volatile
 800880a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800880e:	f383 8811 	msr	BASEPRI, r3
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	f3bf 8f4f 	dsb	sy
 800881a:	607b      	str	r3, [r7, #4]
}
 800881c:	bf00      	nop
 800881e:	bf00      	nop
 8008820:	e7fd      	b.n	800881e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008822:	4b0a      	ldr	r3, [pc, #40]	@ (800884c <vPortExitCritical+0x50>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	3b01      	subs	r3, #1
 8008828:	4a08      	ldr	r2, [pc, #32]	@ (800884c <vPortExitCritical+0x50>)
 800882a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800882c:	4b07      	ldr	r3, [pc, #28]	@ (800884c <vPortExitCritical+0x50>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <vPortExitCritical+0x44>
 8008834:	2300      	movs	r3, #0
 8008836:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800883e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	24000010 	.word	0x24000010

08008850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008850:	f3ef 8009 	mrs	r0, PSP
 8008854:	f3bf 8f6f 	isb	sy
 8008858:	4b15      	ldr	r3, [pc, #84]	@ (80088b0 <pxCurrentTCBConst>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	f01e 0f10 	tst.w	lr, #16
 8008860:	bf08      	it	eq
 8008862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886a:	6010      	str	r0, [r2, #0]
 800886c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008874:	f380 8811 	msr	BASEPRI, r0
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	f7ff fafe 	bl	8007e80 <vTaskSwitchContext>
 8008884:	f04f 0000 	mov.w	r0, #0
 8008888:	f380 8811 	msr	BASEPRI, r0
 800888c:	bc09      	pop	{r0, r3}
 800888e:	6819      	ldr	r1, [r3, #0]
 8008890:	6808      	ldr	r0, [r1, #0]
 8008892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008896:	f01e 0f10 	tst.w	lr, #16
 800889a:	bf08      	it	eq
 800889c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80088a0:	f380 8809 	msr	PSP, r0
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w

080088b0 <pxCurrentTCBConst>:
 80088b0:	24000aa0 	.word	0x24000aa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop

080088b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	607b      	str	r3, [r7, #4]
}
 80088d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80088d2:	f7ff fa1b 	bl	8007d0c <xTaskIncrementTick>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d003      	beq.n	80088e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80088dc:	4b06      	ldr	r3, [pc, #24]	@ (80088f8 <SysTick_Handler+0x40>)
 80088de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088e2:	601a      	str	r2, [r3, #0]
 80088e4:	2300      	movs	r3, #0
 80088e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	f383 8811 	msr	BASEPRI, r3
}
 80088ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008900:	4b0b      	ldr	r3, [pc, #44]	@ (8008930 <vPortSetupTimerInterrupt+0x34>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008906:	4b0b      	ldr	r3, [pc, #44]	@ (8008934 <vPortSetupTimerInterrupt+0x38>)
 8008908:	2200      	movs	r2, #0
 800890a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800890c:	4b0a      	ldr	r3, [pc, #40]	@ (8008938 <vPortSetupTimerInterrupt+0x3c>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0a      	ldr	r2, [pc, #40]	@ (800893c <vPortSetupTimerInterrupt+0x40>)
 8008912:	fba2 2303 	umull	r2, r3, r2, r3
 8008916:	099b      	lsrs	r3, r3, #6
 8008918:	4a09      	ldr	r2, [pc, #36]	@ (8008940 <vPortSetupTimerInterrupt+0x44>)
 800891a:	3b01      	subs	r3, #1
 800891c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800891e:	4b04      	ldr	r3, [pc, #16]	@ (8008930 <vPortSetupTimerInterrupt+0x34>)
 8008920:	2207      	movs	r2, #7
 8008922:	601a      	str	r2, [r3, #0]
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	e000e010 	.word	0xe000e010
 8008934:	e000e018 	.word	0xe000e018
 8008938:	24000000 	.word	0x24000000
 800893c:	10624dd3 	.word	0x10624dd3
 8008940:	e000e014 	.word	0xe000e014

08008944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008954 <vPortEnableVFP+0x10>
 8008948:	6801      	ldr	r1, [r0, #0]
 800894a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800894e:	6001      	str	r1, [r0, #0]
 8008950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008952:	bf00      	nop
 8008954:	e000ed88 	.word	0xe000ed88

08008958 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b08a      	sub	sp, #40	@ 0x28
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008964:	f7ff f926 	bl	8007bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008968:	4b5c      	ldr	r3, [pc, #368]	@ (8008adc <pvPortMalloc+0x184>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d101      	bne.n	8008974 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008970:	f000 f924 	bl	8008bbc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008974:	4b5a      	ldr	r3, [pc, #360]	@ (8008ae0 <pvPortMalloc+0x188>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	f040 8095 	bne.w	8008aac <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d01e      	beq.n	80089c6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008988:	2208      	movs	r2, #8
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	2b00      	cmp	r3, #0
 8008998:	d015      	beq.n	80089c6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f023 0307 	bic.w	r3, r3, #7
 80089a0:	3308      	adds	r3, #8
 80089a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f003 0307 	and.w	r3, r3, #7
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <pvPortMalloc+0x6e>
	__asm volatile
 80089ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	617b      	str	r3, [r7, #20]
}
 80089c0:	bf00      	nop
 80089c2:	bf00      	nop
 80089c4:	e7fd      	b.n	80089c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d06f      	beq.n	8008aac <pvPortMalloc+0x154>
 80089cc:	4b45      	ldr	r3, [pc, #276]	@ (8008ae4 <pvPortMalloc+0x18c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d86a      	bhi.n	8008aac <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80089d6:	4b44      	ldr	r3, [pc, #272]	@ (8008ae8 <pvPortMalloc+0x190>)
 80089d8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80089da:	4b43      	ldr	r3, [pc, #268]	@ (8008ae8 <pvPortMalloc+0x190>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089e0:	e004      	b.n	80089ec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80089e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80089ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d903      	bls.n	80089fe <pvPortMalloc+0xa6>
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f1      	bne.n	80089e2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089fe:	4b37      	ldr	r3, [pc, #220]	@ (8008adc <pvPortMalloc+0x184>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d051      	beq.n	8008aac <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008a08:	6a3b      	ldr	r3, [r7, #32]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	4413      	add	r3, r2
 8008a10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	1ad2      	subs	r2, r2, r3
 8008a22:	2308      	movs	r3, #8
 8008a24:	005b      	lsls	r3, r3, #1
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d920      	bls.n	8008a6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4413      	add	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	f003 0307 	and.w	r3, r3, #7
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00b      	beq.n	8008a54 <pvPortMalloc+0xfc>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a40:	f383 8811 	msr	BASEPRI, r3
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	f3bf 8f4f 	dsb	sy
 8008a4c:	613b      	str	r3, [r7, #16]
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	e7fd      	b.n	8008a50 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	1ad2      	subs	r2, r2, r3
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a66:	69b8      	ldr	r0, [r7, #24]
 8008a68:	f000 f90a 	bl	8008c80 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae4 <pvPortMalloc+0x18c>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	4a1b      	ldr	r2, [pc, #108]	@ (8008ae4 <pvPortMalloc+0x18c>)
 8008a78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae4 <pvPortMalloc+0x18c>)
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008aec <pvPortMalloc+0x194>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d203      	bcs.n	8008a8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a86:	4b17      	ldr	r3, [pc, #92]	@ (8008ae4 <pvPortMalloc+0x18c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a18      	ldr	r2, [pc, #96]	@ (8008aec <pvPortMalloc+0x194>)
 8008a8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a90:	685a      	ldr	r2, [r3, #4]
 8008a92:	4b13      	ldr	r3, [pc, #76]	@ (8008ae0 <pvPortMalloc+0x188>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008aa2:	4b13      	ldr	r3, [pc, #76]	@ (8008af0 <pvPortMalloc+0x198>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	4a11      	ldr	r2, [pc, #68]	@ (8008af0 <pvPortMalloc+0x198>)
 8008aaa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008aac:	f7ff f890 	bl	8007bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f003 0307 	and.w	r3, r3, #7
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00b      	beq.n	8008ad2 <pvPortMalloc+0x17a>
	__asm volatile
 8008aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	60fb      	str	r3, [r7, #12]
}
 8008acc:	bf00      	nop
 8008ace:	bf00      	nop
 8008ad0:	e7fd      	b.n	8008ace <pvPortMalloc+0x176>
	return pvReturn;
 8008ad2:	69fb      	ldr	r3, [r7, #28]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3728      	adds	r7, #40	@ 0x28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	240047dc 	.word	0x240047dc
 8008ae0:	240047f0 	.word	0x240047f0
 8008ae4:	240047e0 	.word	0x240047e0
 8008ae8:	240047d4 	.word	0x240047d4
 8008aec:	240047e4 	.word	0x240047e4
 8008af0:	240047e8 	.word	0x240047e8

08008af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d04f      	beq.n	8008ba6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008b06:	2308      	movs	r3, #8
 8008b08:	425b      	negs	r3, r3
 8008b0a:	697a      	ldr	r2, [r7, #20]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	4b25      	ldr	r3, [pc, #148]	@ (8008bb0 <vPortFree+0xbc>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <vPortFree+0x46>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60fb      	str	r3, [r7, #12]
}
 8008b34:	bf00      	nop
 8008b36:	bf00      	nop
 8008b38:	e7fd      	b.n	8008b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d00b      	beq.n	8008b5a <vPortFree+0x66>
	__asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop
 8008b58:	e7fd      	b.n	8008b56 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	4b14      	ldr	r3, [pc, #80]	@ (8008bb0 <vPortFree+0xbc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4013      	ands	r3, r2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01e      	beq.n	8008ba6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d11a      	bne.n	8008ba6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	685a      	ldr	r2, [r3, #4]
 8008b74:	4b0e      	ldr	r3, [pc, #56]	@ (8008bb0 <vPortFree+0xbc>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b80:	f7ff f818 	bl	8007bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb4 <vPortFree+0xc0>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	4a09      	ldr	r2, [pc, #36]	@ (8008bb4 <vPortFree+0xc0>)
 8008b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b92:	6938      	ldr	r0, [r7, #16]
 8008b94:	f000 f874 	bl	8008c80 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b98:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <vPortFree+0xc4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	4a06      	ldr	r2, [pc, #24]	@ (8008bb8 <vPortFree+0xc4>)
 8008ba0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ba2:	f7ff f815 	bl	8007bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ba6:	bf00      	nop
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	240047f0 	.word	0x240047f0
 8008bb4:	240047e0 	.word	0x240047e0
 8008bb8:	240047ec 	.word	0x240047ec

08008bbc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b085      	sub	sp, #20
 8008bc0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008bc2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008bc6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008bc8:	4b27      	ldr	r3, [pc, #156]	@ (8008c68 <prvHeapInit+0xac>)
 8008bca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00c      	beq.n	8008bf0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3307      	adds	r3, #7
 8008bda:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0307 	bic.w	r3, r3, #7
 8008be2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	4a1f      	ldr	r2, [pc, #124]	@ (8008c68 <prvHeapInit+0xac>)
 8008bec:	4413      	add	r3, r2
 8008bee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8008c6c <prvHeapInit+0xb0>)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <prvHeapInit+0xb0>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	4413      	add	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008c08:	2208      	movs	r2, #8
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1a9b      	subs	r3, r3, r2
 8008c0e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f023 0307 	bic.w	r3, r3, #7
 8008c16:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a15      	ldr	r2, [pc, #84]	@ (8008c70 <prvHeapInit+0xb4>)
 8008c1c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008c1e:	4b14      	ldr	r3, [pc, #80]	@ (8008c70 <prvHeapInit+0xb4>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008c26:	4b12      	ldr	r3, [pc, #72]	@ (8008c70 <prvHeapInit+0xb4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	1ad2      	subs	r2, r2, r3
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008c70 <prvHeapInit+0xb4>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	4a0a      	ldr	r2, [pc, #40]	@ (8008c74 <prvHeapInit+0xb8>)
 8008c4a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4a09      	ldr	r2, [pc, #36]	@ (8008c78 <prvHeapInit+0xbc>)
 8008c52:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008c54:	4b09      	ldr	r3, [pc, #36]	@ (8008c7c <prvHeapInit+0xc0>)
 8008c56:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008c5a:	601a      	str	r2, [r3, #0]
}
 8008c5c:	bf00      	nop
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr
 8008c68:	24000bd4 	.word	0x24000bd4
 8008c6c:	240047d4 	.word	0x240047d4
 8008c70:	240047dc 	.word	0x240047dc
 8008c74:	240047e4 	.word	0x240047e4
 8008c78:	240047e0 	.word	0x240047e0
 8008c7c:	240047f0 	.word	0x240047f0

08008c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c88:	4b28      	ldr	r3, [pc, #160]	@ (8008d2c <prvInsertBlockIntoFreeList+0xac>)
 8008c8a:	60fb      	str	r3, [r7, #12]
 8008c8c:	e002      	b.n	8008c94 <prvInsertBlockIntoFreeList+0x14>
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d8f7      	bhi.n	8008c8e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	4413      	add	r3, r2
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d108      	bne.n	8008cc2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	441a      	add	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	441a      	add	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d118      	bne.n	8008d08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <prvInsertBlockIntoFreeList+0xb0>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d00d      	beq.n	8008cfe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685a      	ldr	r2, [r3, #4]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	441a      	add	r2, r3
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e008      	b.n	8008d10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <prvInsertBlockIntoFreeList+0xb0>)
 8008d00:	681a      	ldr	r2, [r3, #0]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e003      	b.n	8008d10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d002      	beq.n	8008d1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d1e:	bf00      	nop
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	240047d4 	.word	0x240047d4
 8008d30:	240047dc 	.word	0x240047dc

08008d34 <__malloc_lock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	@ (8008d3c <__malloc_lock+0x8>)
 8008d36:	f000 b88b 	b.w	8008e50 <__retarget_lock_acquire_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	24004930 	.word	0x24004930

08008d40 <__malloc_unlock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	@ (8008d48 <__malloc_unlock+0x8>)
 8008d42:	f000 b886 	b.w	8008e52 <__retarget_lock_release_recursive>
 8008d46:	bf00      	nop
 8008d48:	24004930 	.word	0x24004930

08008d4c <memset>:
 8008d4c:	4402      	add	r2, r0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d100      	bne.n	8008d56 <memset+0xa>
 8008d54:	4770      	bx	lr
 8008d56:	f803 1b01 	strb.w	r1, [r3], #1
 8008d5a:	e7f9      	b.n	8008d50 <memset+0x4>

08008d5c <_reclaim_reent>:
 8008d5c:	4b29      	ldr	r3, [pc, #164]	@ (8008e04 <_reclaim_reent+0xa8>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4283      	cmp	r3, r0
 8008d62:	b570      	push	{r4, r5, r6, lr}
 8008d64:	4604      	mov	r4, r0
 8008d66:	d04b      	beq.n	8008e00 <_reclaim_reent+0xa4>
 8008d68:	69c3      	ldr	r3, [r0, #28]
 8008d6a:	b1ab      	cbz	r3, 8008d98 <_reclaim_reent+0x3c>
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	b16b      	cbz	r3, 8008d8c <_reclaim_reent+0x30>
 8008d70:	2500      	movs	r5, #0
 8008d72:	69e3      	ldr	r3, [r4, #28]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	5959      	ldr	r1, [r3, r5]
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d13b      	bne.n	8008df4 <_reclaim_reent+0x98>
 8008d7c:	3504      	adds	r5, #4
 8008d7e:	2d80      	cmp	r5, #128	@ 0x80
 8008d80:	d1f7      	bne.n	8008d72 <_reclaim_reent+0x16>
 8008d82:	69e3      	ldr	r3, [r4, #28]
 8008d84:	4620      	mov	r0, r4
 8008d86:	68d9      	ldr	r1, [r3, #12]
 8008d88:	f000 f872 	bl	8008e70 <_free_r>
 8008d8c:	69e3      	ldr	r3, [r4, #28]
 8008d8e:	6819      	ldr	r1, [r3, #0]
 8008d90:	b111      	cbz	r1, 8008d98 <_reclaim_reent+0x3c>
 8008d92:	4620      	mov	r0, r4
 8008d94:	f000 f86c 	bl	8008e70 <_free_r>
 8008d98:	6961      	ldr	r1, [r4, #20]
 8008d9a:	b111      	cbz	r1, 8008da2 <_reclaim_reent+0x46>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 f867 	bl	8008e70 <_free_r>
 8008da2:	69e1      	ldr	r1, [r4, #28]
 8008da4:	b111      	cbz	r1, 8008dac <_reclaim_reent+0x50>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 f862 	bl	8008e70 <_free_r>
 8008dac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x5a>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 f85d 	bl	8008e70 <_free_r>
 8008db6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x64>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 f858 	bl	8008e70 <_free_r>
 8008dc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x6e>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 f853 	bl	8008e70 <_free_r>
 8008dca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x78>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 f84e 	bl	8008e70 <_free_r>
 8008dd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x82>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 f849 	bl	8008e70 <_free_r>
 8008dde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x8c>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 f844 	bl	8008e70 <_free_r>
 8008de8:	6a23      	ldr	r3, [r4, #32]
 8008dea:	b14b      	cbz	r3, 8008e00 <_reclaim_reent+0xa4>
 8008dec:	4620      	mov	r0, r4
 8008dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008df2:	4718      	bx	r3
 8008df4:	680e      	ldr	r6, [r1, #0]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 f83a 	bl	8008e70 <_free_r>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	e7bb      	b.n	8008d78 <_reclaim_reent+0x1c>
 8008e00:	bd70      	pop	{r4, r5, r6, pc}
 8008e02:	bf00      	nop
 8008e04:	24000014 	.word	0x24000014

08008e08 <__libc_init_array>:
 8008e08:	b570      	push	{r4, r5, r6, lr}
 8008e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8008e40 <__libc_init_array+0x38>)
 8008e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8008e44 <__libc_init_array+0x3c>)
 8008e0e:	1b64      	subs	r4, r4, r5
 8008e10:	10a4      	asrs	r4, r4, #2
 8008e12:	2600      	movs	r6, #0
 8008e14:	42a6      	cmp	r6, r4
 8008e16:	d109      	bne.n	8008e2c <__libc_init_array+0x24>
 8008e18:	4d0b      	ldr	r5, [pc, #44]	@ (8008e48 <__libc_init_array+0x40>)
 8008e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8008e4c <__libc_init_array+0x44>)
 8008e1c:	f000 f872 	bl	8008f04 <_init>
 8008e20:	1b64      	subs	r4, r4, r5
 8008e22:	10a4      	asrs	r4, r4, #2
 8008e24:	2600      	movs	r6, #0
 8008e26:	42a6      	cmp	r6, r4
 8008e28:	d105      	bne.n	8008e36 <__libc_init_array+0x2e>
 8008e2a:	bd70      	pop	{r4, r5, r6, pc}
 8008e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e30:	4798      	blx	r3
 8008e32:	3601      	adds	r6, #1
 8008e34:	e7ee      	b.n	8008e14 <__libc_init_array+0xc>
 8008e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3a:	4798      	blx	r3
 8008e3c:	3601      	adds	r6, #1
 8008e3e:	e7f2      	b.n	8008e26 <__libc_init_array+0x1e>
 8008e40:	0800901c 	.word	0x0800901c
 8008e44:	0800901c 	.word	0x0800901c
 8008e48:	0800901c 	.word	0x0800901c
 8008e4c:	08009020 	.word	0x08009020

08008e50 <__retarget_lock_acquire_recursive>:
 8008e50:	4770      	bx	lr

08008e52 <__retarget_lock_release_recursive>:
 8008e52:	4770      	bx	lr

08008e54 <memcpy>:
 8008e54:	440a      	add	r2, r1
 8008e56:	4291      	cmp	r1, r2
 8008e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e5c:	d100      	bne.n	8008e60 <memcpy+0xc>
 8008e5e:	4770      	bx	lr
 8008e60:	b510      	push	{r4, lr}
 8008e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d1f9      	bne.n	8008e62 <memcpy+0xe>
 8008e6e:	bd10      	pop	{r4, pc}

08008e70 <_free_r>:
 8008e70:	b538      	push	{r3, r4, r5, lr}
 8008e72:	4605      	mov	r5, r0
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d041      	beq.n	8008efc <_free_r+0x8c>
 8008e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e7c:	1f0c      	subs	r4, r1, #4
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	bfb8      	it	lt
 8008e82:	18e4      	addlt	r4, r4, r3
 8008e84:	f7ff ff56 	bl	8008d34 <__malloc_lock>
 8008e88:	4a1d      	ldr	r2, [pc, #116]	@ (8008f00 <_free_r+0x90>)
 8008e8a:	6813      	ldr	r3, [r2, #0]
 8008e8c:	b933      	cbnz	r3, 8008e9c <_free_r+0x2c>
 8008e8e:	6063      	str	r3, [r4, #4]
 8008e90:	6014      	str	r4, [r2, #0]
 8008e92:	4628      	mov	r0, r5
 8008e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e98:	f7ff bf52 	b.w	8008d40 <__malloc_unlock>
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d908      	bls.n	8008eb2 <_free_r+0x42>
 8008ea0:	6820      	ldr	r0, [r4, #0]
 8008ea2:	1821      	adds	r1, r4, r0
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf01      	itttt	eq
 8008ea8:	6819      	ldreq	r1, [r3, #0]
 8008eaa:	685b      	ldreq	r3, [r3, #4]
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	e7ed      	b.n	8008e8e <_free_r+0x1e>
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	b10b      	cbz	r3, 8008ebc <_free_r+0x4c>
 8008eb8:	42a3      	cmp	r3, r4
 8008eba:	d9fa      	bls.n	8008eb2 <_free_r+0x42>
 8008ebc:	6811      	ldr	r1, [r2, #0]
 8008ebe:	1850      	adds	r0, r2, r1
 8008ec0:	42a0      	cmp	r0, r4
 8008ec2:	d10b      	bne.n	8008edc <_free_r+0x6c>
 8008ec4:	6820      	ldr	r0, [r4, #0]
 8008ec6:	4401      	add	r1, r0
 8008ec8:	1850      	adds	r0, r2, r1
 8008eca:	4283      	cmp	r3, r0
 8008ecc:	6011      	str	r1, [r2, #0]
 8008ece:	d1e0      	bne.n	8008e92 <_free_r+0x22>
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6053      	str	r3, [r2, #4]
 8008ed6:	4408      	add	r0, r1
 8008ed8:	6010      	str	r0, [r2, #0]
 8008eda:	e7da      	b.n	8008e92 <_free_r+0x22>
 8008edc:	d902      	bls.n	8008ee4 <_free_r+0x74>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	602b      	str	r3, [r5, #0]
 8008ee2:	e7d6      	b.n	8008e92 <_free_r+0x22>
 8008ee4:	6820      	ldr	r0, [r4, #0]
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	bf04      	itt	eq
 8008eec:	6819      	ldreq	r1, [r3, #0]
 8008eee:	685b      	ldreq	r3, [r3, #4]
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	bf04      	itt	eq
 8008ef4:	1809      	addeq	r1, r1, r0
 8008ef6:	6021      	streq	r1, [r4, #0]
 8008ef8:	6054      	str	r4, [r2, #4]
 8008efa:	e7ca      	b.n	8008e92 <_free_r+0x22>
 8008efc:	bd38      	pop	{r3, r4, r5, pc}
 8008efe:	bf00      	nop
 8008f00:	240047f4 	.word	0x240047f4

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
