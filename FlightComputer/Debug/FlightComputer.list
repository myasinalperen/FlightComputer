
FlightComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d3c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008fdc  08008fdc  00009fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080090d4  080090d4  0000a0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080090dc  080090dc  0000a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  080090e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009148  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  080091a8  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004810  24000124  08009208  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004934  08009208  0000b934  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f17f  00000000  00000000  0000b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000534c  00000000  00000000  0003a2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd0  00000000  00000000  0003f620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000158b  00000000  00000000  000411f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ef5e  00000000  00000000  0004277b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026d4c  00000000  00000000  000816d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00176b74  00000000  00000000  000a8425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0021ef99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078a8  00000000  00000000  0021efdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00226884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008fc4 	.word	0x08008fc4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08008fc4 	.word	0x08008fc4

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <_ZN3GKA8vGKAtaskEPKv>:
GKA::~GKA() {
	// TODO Auto-generated destructor stub
}

void GKA::vGKAtask(void const* argument)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
   while (1) {
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <_ZN3GKA8vGKAtaskEPKv+0x8>

080005dc <_ZN3GPS8vGPStaskEPKv>:
GPS::~GPS() {
	// TODO Auto-generated destructor stub
}

 void GPS::vGPStask(void const* argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

    while (1) {

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005ea:	4802      	ldr	r0, [pc, #8]	@ (80005f4 <_ZN3GPS8vGPStaskEPKv+0x18>)
 80005ec:	f001 fddc 	bl	80021a8 <HAL_GPIO_WritePin>
 80005f0:	e7f8      	b.n	80005e4 <_ZN3GPS8vGPStaskEPKv+0x8>
 80005f2:	bf00      	nop
 80005f4:	58020400 	.word	0x58020400

080005f8 <_ZN3IMU8vIMUtaskEPKv>:
IMU::~IMU() {
	// TODO Auto-generated destructor stub
}

void IMU::vIMUtask(void const* argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2101      	movs	r1, #1
 8000604:	4801      	ldr	r0, [pc, #4]	@ (800060c <_ZN3IMU8vIMUtaskEPKv+0x14>)
 8000606:	f001 fdcf 	bl	80021a8 <HAL_GPIO_WritePin>
 800060a:	e7f9      	b.n	8000600 <_ZN3IMU8vIMUtaskEPKv+0x8>
 800060c:	58020400 	.word	0x58020400

08000610 <_ZN3NAV8vNAVtaskEPKv>:
NAV::~NAV() {
	// TODO Auto-generated destructor stub
}

 void NAV::vNAVtask(void const* argument)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
	while(1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <_ZN3NAV8vNAVtaskEPKv+0x8>

0800061c <_ZN19SistemYapilandiriciC1Ev>:

/**
 * @brief SistemYapilandirici constructor
 */

 SistemYapilandirici::SistemYapilandirici()
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
{
	 //Instance();
	islevBaslat();
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f811 	bl	800064c <_ZN19SistemYapilandirici11islevBaslatEv>
}
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN19SistemYapilandiriciD1Ev>:


/**
 * @brief SistemYapilandirici deconstructor
 */
 SistemYapilandirici::~SistemYapilandirici()
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
{
	}
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <_ZN19SistemYapilandirici11islevBaslatEv>:

/**
 * @brief Sistemde olan tasklari baslatir
 */
void SistemYapilandirici::islevBaslat()
{
 800064c:	b5b0      	push	{r4, r5, r7, lr}
 800064e:	b0a2      	sub	sp, #136	@ 0x88
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2102      	movs	r1, #2
 8000658:	4828      	ldr	r0, [pc, #160]	@ (80006fc <_ZN19SistemYapilandirici11islevBaslatEv+0xb0>)
 800065a:	f001 fda5 	bl	80021a8 <HAL_GPIO_WritePin>


    /* definition and creation of IMUtask */
    osThreadId IMUtaskHandle;
    osThreadDef(IMUtask, IMU::vIMUtask, osPriorityNormal, 0, taskSize);
 800065e:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <_ZN19SistemYapilandirici11islevBaslatEv+0xb4>)
 8000660:	f107 045c 	add.w	r4, r7, #92	@ 0x5c
 8000664:	461d      	mov	r5, r3
 8000666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000668:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800066a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800066e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8000672:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f006 fc4d 	bl	8006f18 <osThreadCreate>
 800067e:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    }


	  /* definition and creation of GPStask */
		osThreadId GPStaskHandle;
	  osThreadDef(GPStask, GPS::vGPStask, osPriorityNormal, 0, taskSize);
 8000682:	4b20      	ldr	r3, [pc, #128]	@ (8000704 <_ZN19SistemYapilandirici11islevBaslatEv+0xb8>)
 8000684:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000688:	461d      	mov	r5, r3
 800068a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  GPStaskHandle = osThreadCreate(osThread(GPStask), NULL);
 8000696:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f006 fc3b 	bl	8006f18 <osThreadCreate>
 80006a2:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80



	    /* definition and creation of GKAtask */
	    osThreadId GKAtaskHandle;
		osThreadDef(GKAtask, GKA::vGKAtask, osPriorityNormal, 0, taskSize);
 80006a6:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <_ZN19SistemYapilandirici11islevBaslatEv+0xbc>)
 80006a8:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    GKAtaskHandle = osThreadCreate(osThread(GKAtask), NULL);
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f006 fc29 	bl	8006f18 <osThreadCreate>
 80006c6:	67f8      	str	r0, [r7, #124]	@ 0x7c

	    }

	    /* definition and creation of GKAtask */
	    osThreadId NAVtaskHandle;
	    osThreadDef(NAVtask,NAV::vNAVtask, osPriorityNormal, 0, taskSize);
 80006c8:	4b10      	ldr	r3, [pc, #64]	@ (800070c <_ZN19SistemYapilandirici11islevBaslatEv+0xc0>)
 80006ca:	f107 0408 	add.w	r4, r7, #8
 80006ce:	461d      	mov	r5, r3
 80006d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	    NAVtaskHandle = osThreadCreate(osThread(NAVtask), NULL);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 fc18 	bl	8006f18 <osThreadCreate>
 80006e8:	67b8      	str	r0, [r7, #120]	@ 0x78
	    else
	    {

	    }

	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	2102      	movs	r1, #2
 80006ee:	4803      	ldr	r0, [pc, #12]	@ (80006fc <_ZN19SistemYapilandirici11islevBaslatEv+0xb0>)
 80006f0:	f001 fd5a 	bl	80021a8 <HAL_GPIO_WritePin>



	}
 80006f4:	bf00      	nop
 80006f6:	3788      	adds	r7, #136	@ 0x88
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bdb0      	pop	{r4, r5, r7, pc}
 80006fc:	58021000 	.word	0x58021000
 8000700:	08008fe4 	.word	0x08008fe4
 8000704:	08009008 	.word	0x08009008
 8000708:	0800902c 	.word	0x0800902c
 800070c:	08009050 	.word	0x08009050

08000710 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	4a07      	ldr	r2, [pc, #28]	@ (800073c <vApplicationGetIdleTaskMemory+0x2c>)
 8000720:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4a06      	ldr	r2, [pc, #24]	@ (8000740 <vApplicationGetIdleTaskMemory+0x30>)
 8000726:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2280      	movs	r2, #128	@ 0x80
 800072c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800072e:	bf00      	nop
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	24000140 	.word	0x24000140
 8000740:	240001e0 	.word	0x240001e0

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fdc9 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074e:	f000 f831 	bl	80007b4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000752:	f000 f9a5 	bl	8000aa0 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000756:	f000 f8bb 	bl	80008d0 <_ZL11MX_ETH_Initv>
  MX_USART3_UART_Init();
 800075a:	f000 f90b 	bl	8000974 <_ZL19MX_USART3_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 800075e:	f000 f969 	bl	8000a34 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
 8000766:	2300      	movs	r3, #0
 8000768:	627b      	str	r3, [r7, #36]	@ 0x24
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2101      	movs	r1, #1
 8000770:	4618      	mov	r0, r3
 8000772:	f006 fc31 	bl	8006fd8 <osSemaphoreCreate>
 8000776:	4603      	mov	r3, r0
 8000778:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <main+0x64>)
 800077a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800077c:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <main+0x68>)
 800077e:	1d3c      	adds	r4, r7, #4
 8000780:	461d      	mov	r5, r3
 8000782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000786:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800078a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f006 fbc0 	bl	8006f18 <osThreadCreate>
 8000798:	4603      	mov	r3, r0
 800079a:	4a05      	ldr	r2, [pc, #20]	@ (80007b0 <main+0x6c>)
 800079c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800079e:	f006 fbb4 	bl	8006f0a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a2:	bf00      	nop
 80007a4:	e7fd      	b.n	80007a2 <main+0x5e>
 80007a6:	bf00      	nop
 80007a8:	24000a44 	.word	0x24000a44
 80007ac:	08009078 	.word	0x08009078
 80007b0:	24000a40 	.word	0x24000a40

080007b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b09c      	sub	sp, #112	@ 0x70
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007be:	224c      	movs	r2, #76	@ 0x4c
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f008 fb22 	bl	8008e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f008 fb1c 	bl	8008e0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007d4:	2002      	movs	r0, #2
 80007d6:	f001 fe31 	bl	800243c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	4b3a      	ldr	r3, [pc, #232]	@ (80008c8 <_Z18SystemClock_Configv+0x114>)
 80007e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007e2:	4a39      	ldr	r2, [pc, #228]	@ (80008c8 <_Z18SystemClock_Configv+0x114>)
 80007e4:	f023 0301 	bic.w	r3, r3, #1
 80007e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007ea:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <_Z18SystemClock_Configv+0x114>)
 80007ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	4b35      	ldr	r3, [pc, #212]	@ (80008cc <_Z18SystemClock_Configv+0x118>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007fc:	4a33      	ldr	r2, [pc, #204]	@ (80008cc <_Z18SystemClock_Configv+0x118>)
 80007fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b31      	ldr	r3, [pc, #196]	@ (80008cc <_Z18SystemClock_Configv+0x118>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000810:	bf00      	nop
 8000812:	4b2e      	ldr	r3, [pc, #184]	@ (80008cc <_Z18SystemClock_Configv+0x118>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800081a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800081e:	bf14      	ite	ne
 8000820:	2301      	movne	r3, #1
 8000822:	2300      	moveq	r3, #0
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f3      	bne.n	8000812 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800082a:	2303      	movs	r3, #3
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000832:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000834:	2301      	movs	r3, #1
 8000836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000838:	2340      	movs	r3, #64	@ 0x40
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	2302      	movs	r3, #2
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000848:	2318      	movs	r3, #24
 800084a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084c:	2302      	movs	r3, #2
 800084e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000858:	230c      	movs	r3, #12
 800085a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800085c:	2300      	movs	r3, #0
 800085e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000868:	4618      	mov	r0, r3
 800086a:	f001 fe31 	bl	80024d0 <HAL_RCC_OscConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	bf14      	ite	ne
 8000874:	2301      	movne	r3, #1
 8000876:	2300      	moveq	r3, #0
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800087e:	f000 fa1f 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	233f      	movs	r3, #63	@ 0x3f
 8000884:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000896:	2340      	movs	r3, #64	@ 0x40
 8000898:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800089e:	2300      	movs	r3, #0
 80008a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2101      	movs	r1, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 fa6c 	bl	8002d84 <HAL_RCC_ClockConfig>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bf14      	ite	ne
 80008b2:	2301      	movne	r3, #1
 80008b4:	2300      	moveq	r3, #0
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 80008bc:	f000 fa00 	bl	8000cc0 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3770      	adds	r7, #112	@ 0x70
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58000400 	.word	0x58000400
 80008cc:	58024800 	.word	0x58024800

080008d0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008d4:	4b21      	ldr	r3, [pc, #132]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 80008d6:	4a22      	ldr	r2, [pc, #136]	@ (8000960 <_ZL11MX_ETH_Initv+0x90>)
 80008d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008e0:	4b20      	ldr	r3, [pc, #128]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008e8:	22e1      	movs	r2, #225	@ 0xe1
 80008ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008fe:	4b17      	ldr	r3, [pc, #92]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 8000900:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <_ZL11MX_ETH_Initv+0x94>)
 8000902:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000904:	4b15      	ldr	r3, [pc, #84]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 8000906:	2201      	movs	r2, #1
 8000908:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800090a:	4b14      	ldr	r3, [pc, #80]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 800090c:	4a16      	ldr	r2, [pc, #88]	@ (8000968 <_ZL11MX_ETH_Initv+0x98>)
 800090e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000910:	4b12      	ldr	r3, [pc, #72]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 8000912:	4a16      	ldr	r2, [pc, #88]	@ (800096c <_ZL11MX_ETH_Initv+0x9c>)
 8000914:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000916:	4b11      	ldr	r3, [pc, #68]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 8000918:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800091c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800091e:	480f      	ldr	r0, [pc, #60]	@ (800095c <_ZL11MX_ETH_Initv+0x8c>)
 8000920:	f000 fe5e 	bl	80015e0 <HAL_ETH_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	bf14      	ite	ne
 800092a:	2301      	movne	r3, #1
 800092c:	2300      	moveq	r3, #0
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8000934:	f000 f9c4 	bl	8000cc0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000938:	2238      	movs	r2, #56	@ 0x38
 800093a:	2100      	movs	r1, #0
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <_ZL11MX_ETH_Initv+0xa0>)
 800093e:	f008 fa65 	bl	8008e0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <_ZL11MX_ETH_Initv+0xa0>)
 8000944:	2221      	movs	r2, #33	@ 0x21
 8000946:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <_ZL11MX_ETH_Initv+0xa0>)
 800094a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800094e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <_ZL11MX_ETH_Initv+0xa0>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24000418 	.word	0x24000418
 8000960:	40028000 	.word	0x40028000
 8000964:	24000a48 	.word	0x24000a48
 8000968:	240000c4 	.word	0x240000c4
 800096c:	24000064 	.word	0x24000064
 8000970:	240003e0 	.word	0x240003e0

08000974 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800097a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800097c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800097e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b27      	ldr	r3, [pc, #156]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000992:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b24      	ldr	r3, [pc, #144]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b23      	ldr	r3, [pc, #140]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b21      	ldr	r3, [pc, #132]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b20      	ldr	r3, [pc, #128]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009be:	f004 fea9 	bl	8005714 <HAL_UART_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	bf14      	ite	ne
 80009c8:	2301      	movne	r3, #1
 80009ca:	2300      	moveq	r3, #0
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80009d2:	f000 f975 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d6:	2100      	movs	r1, #0
 80009d8:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009da:	f005 feac 	bl	8006736 <HAL_UARTEx_SetTxFifoThreshold>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 80009ee:	f000 f967 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 80009f6:	f005 fedc 	bl	80067b2 <HAL_UARTEx_SetRxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8000a0a:	f000 f959 	bl	8000cc0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8000a10:	f005 fe58 	bl	80066c4 <HAL_UARTEx_DisableFifoMode>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	bf14      	ite	ne
 8000a1a:	2301      	movne	r3, #1
 8000a1c:	2300      	moveq	r3, #0
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8000a24:	f000 f94c 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	240004c8 	.word	0x240004c8
 8000a30:	40004800 	.word	0x40004800

08000a34 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	@ (8000a9c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a40:	2209      	movs	r2, #9
 8000a42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a44:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a50:	4b11      	ldr	r3, [pc, #68]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a56:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a74:	4b08      	ldr	r3, [pc, #32]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a7a:	4807      	ldr	r0, [pc, #28]	@ (8000a98 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a7c:	f001 fbad 	bl	80021da <HAL_PCD_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	bf14      	ite	ne
 8000a86:	2301      	movne	r3, #1
 8000a88:	2300      	moveq	r3, #0
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000a90:	f000 f916 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	2400055c 	.word	0x2400055c
 8000a9c:	40080000 	.word	0x40080000

08000aa0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	@ 0x30
 8000aa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b62      	ldr	r3, [pc, #392]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	4a60      	ldr	r2, [pc, #384]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	4a59      	ldr	r2, [pc, #356]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae4:	4b56      	ldr	r3, [pc, #344]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aee:	617b      	str	r3, [r7, #20]
 8000af0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b53      	ldr	r3, [pc, #332]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a51      	ldr	r2, [pc, #324]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000afa:	f043 0301 	orr.w	r3, r3, #1
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b4f      	ldr	r3, [pc, #316]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b4b      	ldr	r3, [pc, #300]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	4a4a      	ldr	r2, [pc, #296]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b20:	4b47      	ldr	r3, [pc, #284]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b44      	ldr	r3, [pc, #272]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a42      	ldr	r2, [pc, #264]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b40      	ldr	r3, [pc, #256]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0308 	and.w	r3, r3, #8
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a3b      	ldr	r2, [pc, #236]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b38      	ldr	r3, [pc, #224]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6a:	4b35      	ldr	r3, [pc, #212]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a33      	ldr	r2, [pc, #204]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b72:	f043 0310 	orr.w	r3, r3, #16
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b31      	ldr	r3, [pc, #196]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000b8e:	482d      	ldr	r0, [pc, #180]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000b90:	f001 fb0a 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9a:	482b      	ldr	r0, [pc, #172]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000b9c:	f001 fb04 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <_ZL12MX_GPIO_Initv+0x1ac>)
 8000ba6:	f001 faff 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 031c 	add.w	r3, r7, #28
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4824      	ldr	r0, [pc, #144]	@ (8000c50 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000bc0:	f001 f942 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bc4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000bde:	f001 f933 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000be2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 031c 	add.w	r3, r7, #28
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000bfc:	f001 f924 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000c16:	f001 f917 	bl	8001e48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <_ZL12MX_GPIO_Initv+0x1ac>)
 8000c32:	f001 f909 	bl	8001e48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	@ 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020400 	.word	0x58020400
 8000c48:	58020c00 	.word	0x58020c00
 8000c4c:	58021000 	.word	0x58021000
 8000c50:	58020800 	.word	0x58020800
 8000c54:	58021800 	.word	0x58021800

08000c58 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2101      	movs	r1, #1
 8000c64:	480c      	ldr	r0, [pc, #48]	@ (8000c98 <_Z16StartDefaultTaskPKv+0x40>)
 8000c66:	f001 fa9f 	bl	80021a8 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6e:	f006 f99f 	bl	8006fb0 <osDelay>
	SistemYapilandirici();
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fcd0 	bl	800061c <_ZN19SistemYapilandiriciC1Ev>
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fcd7 	bl	8000634 <_ZN19SistemYapilandiriciD1Ev>
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin,GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <_Z16StartDefaultTaskPKv+0x40>)
 8000c8c:	f001 fa8c 	bl	80021a8 <HAL_GPIO_WritePin>
  /* USER CODE END 5 */
}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	58020400 	.word	0x58020400

08000c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cae:	f000 fb53 	bl	8001358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <Error_Handler+0x8>

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <HAL_MspInit+0x38>)
 8000cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_MspInit+0x38>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ce2:	4b08      	ldr	r3, [pc, #32]	@ (8000d04 <HAL_MspInit+0x38>)
 8000ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ce8:	f003 0302 	and.w	r3, r3, #2
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f06f 0001 	mvn.w	r0, #1
 8000cf8:	f000 fc4a 	bl	8001590 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	58024400 	.word	0x58024400

08000d08 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	@ 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a59      	ldr	r2, [pc, #356]	@ (8000e8c <HAL_ETH_MspInit+0x184>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	f040 80ab 	bne.w	8000e82 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d2c:	4b58      	ldr	r3, [pc, #352]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d32:	4a57      	ldr	r2, [pc, #348]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d3c:	4b54      	ldr	r3, [pc, #336]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d4a:	4b51      	ldr	r3, [pc, #324]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d50:	4a4f      	ldr	r2, [pc, #316]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d64:	61fb      	str	r3, [r7, #28]
 8000d66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d68:	4b49      	ldr	r3, [pc, #292]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d6e:	4a48      	ldr	r2, [pc, #288]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d78:	4b45      	ldr	r3, [pc, #276]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d86:	4b42      	ldr	r3, [pc, #264]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8c:	4a40      	ldr	r2, [pc, #256]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d96:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	f003 0304 	and.w	r3, r3, #4
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b3a      	ldr	r3, [pc, #232]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a39      	ldr	r2, [pc, #228]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b36      	ldr	r3, [pc, #216]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b33      	ldr	r3, [pc, #204]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc8:	4a31      	ldr	r2, [pc, #196]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	4b2b      	ldr	r3, [pc, #172]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de6:	4a2a      	ldr	r2, [pc, #168]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df0:	4b27      	ldr	r3, [pc, #156]	@ (8000e90 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dfe:	2332      	movs	r3, #50	@ 0x32
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	4619      	mov	r1, r3
 8000e18:	481e      	ldr	r0, [pc, #120]	@ (8000e94 <HAL_ETH_MspInit+0x18c>)
 8000e1a:	f001 f815 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e1e:	2386      	movs	r3, #134	@ 0x86
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <HAL_ETH_MspInit+0x190>)
 8000e3a:	f001 f805 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e50:	230b      	movs	r3, #11
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <HAL_ETH_MspInit+0x194>)
 8000e5c:	f000 fff4 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4808      	ldr	r0, [pc, #32]	@ (8000ea0 <HAL_ETH_MspInit+0x198>)
 8000e7e:	f000 ffe3 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000e82:	bf00      	nop
 8000e84:	3738      	adds	r7, #56	@ 0x38
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40028000 	.word	0x40028000
 8000e90:	58024400 	.word	0x58024400
 8000e94:	58020800 	.word	0x58020800
 8000e98:	58020000 	.word	0x58020000
 8000e9c:	58020400 	.word	0x58020400
 8000ea0:	58021800 	.word	0x58021800

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	22c0      	movs	r2, #192	@ 0xc0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f007 ffa1 	bl	8008e0c <memset>
  if(huart->Instance==USART3)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a27      	ldr	r2, [pc, #156]	@ (8000f6c <HAL_UART_MspInit+0xc8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d146      	bne.n	8000f62 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ed4:	f04f 0202 	mov.w	r2, #2
 8000ed8:	f04f 0300 	mov.w	r3, #0
 8000edc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4618      	mov	r0, r3
 8000eec:	f002 fb18 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ef6:	f7ff fee3 	bl	8000cc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000efc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f00:	4a1b      	ldr	r2, [pc, #108]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000f02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f0a:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f18:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1e:	4a14      	ldr	r2, [pc, #80]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_UART_MspInit+0xcc>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f50:	2307      	movs	r3, #7
 8000f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <HAL_UART_MspInit+0xd0>)
 8000f5e:	f000 ff73 	bl	8001e48 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	37e8      	adds	r7, #232	@ 0xe8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40004800 	.word	0x40004800
 8000f70:	58024400 	.word	0x58024400
 8000f74:	58020c00 	.word	0x58020c00

08000f78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	22c0      	movs	r2, #192	@ 0xc0
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 ff37 	bl	8008e0c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a30      	ldr	r2, [pc, #192]	@ (8001064 <HAL_PCD_MspInit+0xec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d159      	bne.n	800105c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fa8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fb4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f002 faad 	bl	8003520 <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000fcc:	f7ff fe78 	bl	8000cc0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fd0:	f001 fa6e 	bl	80024b0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b24      	ldr	r3, [pc, #144]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b20      	ldr	r3, [pc, #128]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ff2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800100c:	230a      	movs	r3, #10
 800100e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001016:	4619      	mov	r1, r3
 8001018:	4814      	ldr	r0, [pc, #80]	@ (800106c <HAL_PCD_MspInit+0xf4>)
 800101a:	f000 ff15 	bl	8001e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800101e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001022:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001026:	2300      	movs	r3, #0
 8001028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	@ (800106c <HAL_PCD_MspInit+0xf4>)
 800103a:	f000 ff05 	bl	8001e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8001040:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8001046:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800104a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_PCD_MspInit+0xf0>)
 8001050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800105c:	bf00      	nop
 800105e:	37e8      	adds	r7, #232	@ 0xe8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40080000 	.word	0x40080000
 8001068:	58024400 	.word	0x58024400
 800106c:	58020000 	.word	0x58020000

08001070 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08e      	sub	sp, #56	@ 0x38
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	d842      	bhi.n	8001104 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800107e:	2200      	movs	r2, #0
 8001080:	6879      	ldr	r1, [r7, #4]
 8001082:	2019      	movs	r0, #25
 8001084:	f000 fa84 	bl	8001590 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001088:	2019      	movs	r0, #25
 800108a:	f000 fa9b 	bl	80015c4 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800108e:	4a23      	ldr	r2, [pc, #140]	@ (800111c <HAL_InitTick+0xac>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001094:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <HAL_InitTick+0xb0>)
 8001096:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <HAL_InitTick+0xb0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001120 <HAL_InitTick+0xb0>)
 80010a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b2:	f107 020c 	add.w	r2, r7, #12
 80010b6:	f107 0310 	add.w	r3, r7, #16
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f002 f9ed 	bl	800349c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010c2:	f002 f9d5 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 80010c6:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ca:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_InitTick+0xb4>)
 80010cc:	fba2 2303 	umull	r2, r3, r2, r3
 80010d0:	0c9b      	lsrs	r3, r3, #18
 80010d2:	3b01      	subs	r3, #1
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_InitTick+0xb8>)
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <HAL_InitTick+0xbc>)
 80010da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <HAL_InitTick+0xb8>)
 80010de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010e4:	4a10      	ldr	r2, [pc, #64]	@ (8001128 <HAL_InitTick+0xb8>)
 80010e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <HAL_InitTick+0xb8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001128 <HAL_InitTick+0xb8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <HAL_InitTick+0xb8>)
 80010f8:	f004 f83e 	bl	8005178 <HAL_TIM_Base_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d107      	bne.n	8001112 <HAL_InitTick+0xa2>
 8001102:	e001      	b.n	8001108 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e005      	b.n	8001114 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001108:	4807      	ldr	r0, [pc, #28]	@ (8001128 <HAL_InitTick+0xb8>)
 800110a:	f004 f897 	bl	800523c <HAL_TIM_Base_Start_IT>
 800110e:	4603      	mov	r3, r0
 8001110:	e000      	b.n	8001114 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
}
 8001114:	4618      	mov	r0, r3
 8001116:	3738      	adds	r7, #56	@ 0x38
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	24000008 	.word	0x24000008
 8001120:	58024400 	.word	0x58024400
 8001124:	431bde83 	.word	0x431bde83
 8001128:	24000a50 	.word	0x24000a50
 800112c:	40010000 	.word	0x40010000

08001130 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <NMI_Handler+0x4>

08001138 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <MemManage_Handler+0x4>

08001148 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114c:	bf00      	nop
 800114e:	e7fd      	b.n	800114c <BusFault_Handler+0x4>

08001150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <UsageFault_Handler+0x4>

08001158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800116c:	4802      	ldr	r0, [pc, #8]	@ (8001178 <TIM1_UP_IRQHandler+0x10>)
 800116e:	f004 f8dd 	bl	800532c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	24000a50 	.word	0x24000a50

0800117c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001180:	4b37      	ldr	r3, [pc, #220]	@ (8001260 <SystemInit+0xe4>)
 8001182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001186:	4a36      	ldr	r2, [pc, #216]	@ (8001260 <SystemInit+0xe4>)
 8001188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800118c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001190:	4b34      	ldr	r3, [pc, #208]	@ (8001264 <SystemInit+0xe8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	2b06      	cmp	r3, #6
 800119a:	d807      	bhi.n	80011ac <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800119c:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <SystemInit+0xe8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 030f 	bic.w	r3, r3, #15
 80011a4:	4a2f      	ldr	r2, [pc, #188]	@ (8001264 <SystemInit+0xe8>)
 80011a6:	f043 0307 	orr.w	r3, r3, #7
 80011aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001268 <SystemInit+0xec>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <SystemInit+0xec>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001268 <SystemInit+0xec>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011be:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <SystemInit+0xec>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4929      	ldr	r1, [pc, #164]	@ (8001268 <SystemInit+0xec>)
 80011c4:	4b29      	ldr	r3, [pc, #164]	@ (800126c <SystemInit+0xf0>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <SystemInit+0xe8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d007      	beq.n	80011e6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <SystemInit+0xe8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 030f 	bic.w	r3, r3, #15
 80011de:	4a21      	ldr	r2, [pc, #132]	@ (8001264 <SystemInit+0xe8>)
 80011e0:	f043 0307 	orr.w	r3, r3, #7
 80011e4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <SystemInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <SystemInit+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <SystemInit+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <SystemInit+0xec>)
 80011fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001270 <SystemInit+0xf4>)
 80011fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <SystemInit+0xec>)
 8001200:	4a1c      	ldr	r2, [pc, #112]	@ (8001274 <SystemInit+0xf8>)
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <SystemInit+0xec>)
 8001206:	4a1c      	ldr	r2, [pc, #112]	@ (8001278 <SystemInit+0xfc>)
 8001208:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <SystemInit+0xec>)
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <SystemInit+0xec>)
 8001212:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <SystemInit+0xfc>)
 8001214:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <SystemInit+0xec>)
 8001218:	2200      	movs	r2, #0
 800121a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <SystemInit+0xec>)
 800121e:	4a16      	ldr	r2, [pc, #88]	@ (8001278 <SystemInit+0xfc>)
 8001220:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <SystemInit+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <SystemInit+0xec>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <SystemInit+0xec>)
 800122e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001232:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001234:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <SystemInit+0xec>)
 8001236:	2200      	movs	r2, #0
 8001238:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800123a:	4b10      	ldr	r3, [pc, #64]	@ (800127c <SystemInit+0x100>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b10      	ldr	r3, [pc, #64]	@ (8001280 <SystemInit+0x104>)
 8001240:	4013      	ands	r3, r2
 8001242:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001246:	d202      	bcs.n	800124e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <SystemInit+0x108>)
 800124a:	2201      	movs	r2, #1
 800124c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <SystemInit+0x10c>)
 8001250:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001254:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	52002000 	.word	0x52002000
 8001268:	58024400 	.word	0x58024400
 800126c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001270:	02020200 	.word	0x02020200
 8001274:	01ff0000 	.word	0x01ff0000
 8001278:	01010280 	.word	0x01010280
 800127c:	5c001000 	.word	0x5c001000
 8001280:	ffff0000 	.word	0xffff0000
 8001284:	51008108 	.word	0x51008108
 8001288:	52004000 	.word	0x52004000

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001290:	f7ff ff74 	bl	800117c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ba:	f007 fe05 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff fa41 	bl	8000744 <main>
  bx  lr
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012cc:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80012d0:	080090e4 	.word	0x080090e4
  ldr r2, =_sbss
 80012d4:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80012d8:	24004934 	.word	0x24004934

080012dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC3_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e6:	2003      	movs	r0, #3
 80012e8:	f000 f947 	bl	800157a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012ec:	f001 ff00 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80012f0:	4602      	mov	r2, r0
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <HAL_Init+0x68>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	0a1b      	lsrs	r3, r3, #8
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	4913      	ldr	r1, [pc, #76]	@ (800134c <HAL_Init+0x6c>)
 80012fe:	5ccb      	ldrb	r3, [r1, r3]
 8001300:	f003 031f 	and.w	r3, r3, #31
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
 8001308:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <HAL_Init+0x68>)
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	4a0e      	ldr	r2, [pc, #56]	@ (800134c <HAL_Init+0x6c>)
 8001314:	5cd3      	ldrb	r3, [r2, r3]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	fa22 f303 	lsr.w	r3, r2, r3
 8001320:	4a0b      	ldr	r2, [pc, #44]	@ (8001350 <HAL_Init+0x70>)
 8001322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_Init+0x74>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800132a:	200f      	movs	r0, #15
 800132c:	f7ff fea0 	bl	8001070 <HAL_InitTick>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e002      	b.n	8001340 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800133a:	f7ff fcc7 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	58024400 	.word	0x58024400
 800134c:	0800909c 	.word	0x0800909c
 8001350:	24000004 	.word	0x24000004
 8001354:	24000000 	.word	0x24000000

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	@ (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	2400000c 	.word	0x2400000c
 800137c:	24000a9c 	.word	0x24000a9c

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	24000a9c 	.word	0x24000a9c

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2400000c 	.word	0x2400000c

080013e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80013e4:	4b03      	ldr	r3, [pc, #12]	@ (80013f4 <HAL_GetREVID+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	5c001000 	.word	0x5c001000

080013f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001400:	4b06      	ldr	r3, [pc, #24]	@ (800141c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001408:	4904      	ldr	r1, [pc, #16]	@ (800141c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4313      	orrs	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	58000400 	.word	0x58000400

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <__NVIC_SetPriorityGrouping+0x40>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001448:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 800144a:	4313      	orrs	r3, r2
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <__NVIC_SetPriorityGrouping+0x40>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00
 8001464:	05fa0000 	.word	0x05fa0000

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	@ (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	@ (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	@ (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ff4c 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800159e:	f7ff ff63 	bl	8001468 <__NVIC_GetPriorityGrouping>
 80015a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	68b9      	ldr	r1, [r7, #8]
 80015a8:	6978      	ldr	r0, [r7, #20]
 80015aa:	f7ff ffb3 	bl	8001514 <NVIC_EncodePriority>
 80015ae:	4602      	mov	r2, r0
 80015b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b4:	4611      	mov	r1, r2
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff82 	bl	80014c0 <__NVIC_SetPriority>
}
 80015bc:	bf00      	nop
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ff56 	bl	8001484 <__NVIC_EnableIRQ>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e0e3      	b.n	80017ba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d106      	bne.n	800160a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2223      	movs	r2, #35	@ 0x23
 8001600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fb7f 	bl	8000d08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160a:	4b6e      	ldr	r3, [pc, #440]	@ (80017c4 <HAL_ETH_Init+0x1e4>)
 800160c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001610:	4a6c      	ldr	r2, [pc, #432]	@ (80017c4 <HAL_ETH_Init+0x1e4>)
 8001612:	f043 0302 	orr.w	r3, r3, #2
 8001616:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800161a:	4b6a      	ldr	r3, [pc, #424]	@ (80017c4 <HAL_ETH_Init+0x1e4>)
 800161c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7a1b      	ldrb	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fee1 	bl	80013f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8001636:	e003      	b.n	8001640 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001638:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800163c:	f7ff fedc 	bl	80013f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001640:	4b61      	ldr	r3, [pc, #388]	@ (80017c8 <HAL_ETH_Init+0x1e8>)
 8001642:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800165a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800165c:	f7ff fe90 	bl	8001380 <HAL_GetTick>
 8001660:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001662:	e011      	b.n	8001688 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001664:	f7ff fe8c 	bl	8001380 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001672:	d909      	bls.n	8001688 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2204      	movs	r2, #4
 8001678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	22e0      	movs	r2, #224	@ 0xe0
 8001680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e098      	b.n	80017ba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1e4      	bne.n	8001664 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f89e 	bl	80017dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016a0:	f001 fea0 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4a49      	ldr	r2, [pc, #292]	@ (80017cc <HAL_ETH_Init+0x1ec>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9a      	lsrs	r2, r3, #18
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	3a01      	subs	r2, #1
 80016b4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f000 fa81 	bl	8001bc0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80016ca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016da:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	22e0      	movs	r2, #224	@ 0xe0
 80016f6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e05d      	b.n	80017ba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001706:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_ETH_Init+0x1f0>)
 800170c:	4013      	ands	r3, r2
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6952      	ldr	r2, [r2, #20]
 8001712:	0051      	lsls	r1, r2, #1
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	430b      	orrs	r3, r1
 800171a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800171e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fae9 	bl	8001cfa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fb2f 	bl	8001d8c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	3305      	adds	r3, #5
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	3304      	adds	r3, #4
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3303      	adds	r3, #3
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	061a      	lsls	r2, r3, #24
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	3302      	adds	r3, #2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	3301      	adds	r3, #1
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800177a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800177c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_ETH_Init+0x1f4>)
 800178e:	430b      	orrs	r3, r1
 8001790:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <HAL_ETH_Init+0x1f8>)
 80017a2:	430b      	orrs	r3, r1
 80017a4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2210      	movs	r2, #16
 80017b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3710      	adds	r7, #16
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	58024400 	.word	0x58024400
 80017c8:	58000400 	.word	0x58000400
 80017cc:	431bde83 	.word	0x431bde83
 80017d0:	ffff8001 	.word	0xffff8001
 80017d4:	0c020060 	.word	0x0c020060
 80017d8:	0c20c000 	.word	0x0c20c000

080017dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80017ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80017f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017f6:	f001 fdf5 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 80017fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d804      	bhi.n	800180e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	e022      	b.n	8001854 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4a16      	ldr	r2, [pc, #88]	@ (800186c <HAL_ETH_SetMDIOClockRange+0x90>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d204      	bcs.n	8001820 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	e019      	b.n	8001854 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4a13      	ldr	r2, [pc, #76]	@ (8001870 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d915      	bls.n	8001854 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <HAL_ETH_SetMDIOClockRange+0x98>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d804      	bhi.n	800183a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	e00c      	b.n	8001854 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	4a0e      	ldr	r2, [pc, #56]	@ (8001878 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d804      	bhi.n	800184c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e003      	b.n	8001854 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001852:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	02160ebf 	.word	0x02160ebf
 800186c:	03938700 	.word	0x03938700
 8001870:	05f5e0ff 	.word	0x05f5e0ff
 8001874:	08f0d17f 	.word	0x08f0d17f
 8001878:	0ee6b27f 	.word	0x0ee6b27f

0800187c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800188e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	791b      	ldrb	r3, [r3, #4]
 8001894:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7b1b      	ldrb	r3, [r3, #12]
 800189c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7b5b      	ldrb	r3, [r3, #13]
 80018a4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7b9b      	ldrb	r3, [r3, #14]
 80018ac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7bdb      	ldrb	r3, [r3, #15]
 80018b4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	7c12      	ldrb	r2, [r2, #16]
 80018bc:	2a00      	cmp	r2, #0
 80018be:	d102      	bne.n	80018c6 <ETH_SetMACConfig+0x4a>
 80018c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80018c4:	e000      	b.n	80018c8 <ETH_SetMACConfig+0x4c>
 80018c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	7c52      	ldrb	r2, [r2, #17]
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	d102      	bne.n	80018d8 <ETH_SetMACConfig+0x5c>
 80018d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80018d6:	e000      	b.n	80018da <ETH_SetMACConfig+0x5e>
 80018d8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7c9b      	ldrb	r3, [r3, #18]
 80018e0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018e2:	431a      	orrs	r2, r3
               macconf->Speed |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018e8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	7f1b      	ldrb	r3, [r3, #28]
 80018f4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	7f5b      	ldrb	r3, [r3, #29]
 80018fc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	7f92      	ldrb	r2, [r2, #30]
 8001904:	2a00      	cmp	r2, #0
 8001906:	d102      	bne.n	800190e <ETH_SetMACConfig+0x92>
 8001908:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190c:	e000      	b.n	8001910 <ETH_SetMACConfig+0x94>
 800190e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001910:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	7fdb      	ldrb	r3, [r3, #31]
 8001916:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001918:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001920:	2a00      	cmp	r2, #0
 8001922:	d102      	bne.n	800192a <ETH_SetMACConfig+0xae>
 8001924:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001928:	e000      	b.n	800192c <ETH_SetMACConfig+0xb0>
 800192a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800192c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800193a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800193c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001942:	4313      	orrs	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b56      	ldr	r3, [pc, #344]	@ (8001aa8 <ETH_SetMACConfig+0x22c>)
 800194e:	4013      	ands	r3, r2
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	6812      	ldr	r2, [r2, #0]
 8001954:	68f9      	ldr	r1, [r7, #12]
 8001956:	430b      	orrs	r3, r1
 8001958:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001966:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001968:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001970:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001972:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800197a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800197c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001984:	2a00      	cmp	r2, #0
 8001986:	d102      	bne.n	800198e <ETH_SetMACConfig+0x112>
 8001988:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0x114>
 800198e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001990:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001996:	4313      	orrs	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	4b42      	ldr	r3, [pc, #264]	@ (8001aac <ETH_SetMACConfig+0x230>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	68f9      	ldr	r1, [r7, #12]
 80019aa:	430b      	orrs	r3, r1
 80019ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ab0 <ETH_SetMACConfig+0x234>)
 80019c6:	4013      	ands	r3, r2
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6812      	ldr	r2, [r2, #0]
 80019cc:	68f9      	ldr	r1, [r7, #12]
 80019ce:	430b      	orrs	r3, r1
 80019d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80019d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d101      	bne.n	80019ee <ETH_SetMACConfig+0x172>
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	e000      	b.n	80019f0 <ETH_SetMACConfig+0x174>
 80019ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a02:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a18:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a20:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a22:	4313      	orrs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2e:	f023 0103 	bic.w	r1, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a46:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a62:	2a00      	cmp	r2, #0
 8001a64:	d101      	bne.n	8001a6a <ETH_SetMACConfig+0x1ee>
 8001a66:	2240      	movs	r2, #64	@ 0x40
 8001a68:	e000      	b.n	8001a6c <ETH_SetMACConfig+0x1f0>
 8001a6a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a74:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a7e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a8c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	00048083 	.word	0x00048083
 8001aac:	c0f88000 	.word	0xc0f88000
 8001ab0:	fffffef0 	.word	0xfffffef0

08001ab4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b38      	ldr	r3, [pc, #224]	@ (8001bac <ETH_SetDMAConfig+0xf8>)
 8001aca:	4013      	ands	r3, r2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	6811      	ldr	r1, [r2, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	430b      	orrs	r3, r1
 8001ad6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ada:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	791b      	ldrb	r3, [r3, #4]
 8001ae0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ae6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7b1b      	ldrb	r3, [r3, #12]
 8001aec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb0 <ETH_SetDMAConfig+0xfc>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	68f9      	ldr	r1, [r7, #12]
 8001b06:	430b      	orrs	r3, r1
 8001b08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b0c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	7b5b      	ldrb	r3, [r3, #13]
 8001b12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b24:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b28:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <ETH_SetDMAConfig+0x100>)
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6812      	ldr	r2, [r2, #0]
 8001b30:	68f9      	ldr	r1, [r7, #12]
 8001b32:	430b      	orrs	r3, r1
 8001b34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b38:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	7d1b      	ldrb	r3, [r3, #20]
 8001b44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	7f5b      	ldrb	r3, [r3, #29]
 8001b4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b5e:	4b16      	ldr	r3, [pc, #88]	@ (8001bb8 <ETH_SetDMAConfig+0x104>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	6812      	ldr	r2, [r2, #0]
 8001b66:	68f9      	ldr	r1, [r7, #12]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b6e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	7f1b      	ldrb	r3, [r3, #28]
 8001b76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <ETH_SetDMAConfig+0x108>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b9c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ba0:	bf00      	nop
 8001ba2:	3714      	adds	r7, #20
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	ffff87fd 	.word	0xffff87fd
 8001bb0:	ffff2ffe 	.word	0xffff2ffe
 8001bb4:	fffec000 	.word	0xfffec000
 8001bb8:	ffc0efef 	.word	0xffc0efef
 8001bbc:	7fc0ffff 	.word	0x7fc0ffff

08001bc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0a4      	sub	sp, #144	@ 0x90
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bde:	2301      	movs	r3, #1
 8001be0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bfc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c00:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c18:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c1c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c24:	2300      	movs	r3, #0
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c42:	2300      	movs	r3, #0
 8001c44:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c6a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c70:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c74:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ca4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fde6 	bl	800187c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001cca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cd4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001cd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ce0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ce6:	f107 0308 	add.w	r3, r7, #8
 8001cea:	4619      	mov	r1, r3
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff fee1 	bl	8001ab4 <ETH_SetDMAConfig>
}
 8001cf2:	bf00      	nop
 8001cf4:	3790      	adds	r7, #144	@ 0x90
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e01d      	b.n	8001d44 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68d9      	ldr	r1, [r3, #12]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	3206      	adds	r2, #6
 8001d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3301      	adds	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d9de      	bls.n	8001d08 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d6c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	e023      	b.n	8001de2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6919      	ldr	r1, [r3, #16]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4613      	mov	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4413      	add	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	440b      	add	r3, r1
 8001daa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	3212      	adds	r2, #18
 8001dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3301      	adds	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b03      	cmp	r3, #3
 8001de6:	d9d8      	bls.n	8001d9a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2200      	movs	r2, #0
 8001df8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2303      	movs	r3, #3
 8001e12:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e22:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e36:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b089      	sub	sp, #36	@ 0x24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e56:	4b89      	ldr	r3, [pc, #548]	@ (800207c <HAL_GPIO_Init+0x234>)
 8001e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e5a:	e194      	b.n	8002186 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2101      	movs	r1, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f000 8186 	beq.w	8002180 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d005      	beq.n	8001e8c <HAL_GPIO_Init+0x44>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d130      	bne.n	8001eee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	f003 0201 	and.w	r2, r3, #1
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d017      	beq.n	8001f2a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d123      	bne.n	8001f7e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	220f      	movs	r2, #15
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	08da      	lsrs	r2, r3, #3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3208      	adds	r2, #8
 8001f78:	69b9      	ldr	r1, [r7, #24]
 8001f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	2203      	movs	r2, #3
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4013      	ands	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 0203 	and.w	r2, r3, #3
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80e0 	beq.w	8002180 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8002080 <HAL_GPIO_Init+0x238>)
 8001fc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8002080 <HAL_GPIO_Init+0x238>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_GPIO_Init+0x238>)
 8001fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fde:	4a29      	ldr	r2, [pc, #164]	@ (8002084 <HAL_GPIO_Init+0x23c>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	220f      	movs	r2, #15
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <HAL_GPIO_Init+0x240>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d052      	beq.n	80020b0 <HAL_GPIO_Init+0x268>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_GPIO_Init+0x244>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d031      	beq.n	8002076 <HAL_GPIO_Init+0x22e>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <HAL_GPIO_Init+0x248>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d02b      	beq.n	8002072 <HAL_GPIO_Init+0x22a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <HAL_GPIO_Init+0x24c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d025      	beq.n	800206e <HAL_GPIO_Init+0x226>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_GPIO_Init+0x250>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d01f      	beq.n	800206a <HAL_GPIO_Init+0x222>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_GPIO_Init+0x254>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d019      	beq.n	8002066 <HAL_GPIO_Init+0x21e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a1a      	ldr	r2, [pc, #104]	@ (80020a0 <HAL_GPIO_Init+0x258>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d013      	beq.n	8002062 <HAL_GPIO_Init+0x21a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a19      	ldr	r2, [pc, #100]	@ (80020a4 <HAL_GPIO_Init+0x25c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d00d      	beq.n	800205e <HAL_GPIO_Init+0x216>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a18      	ldr	r2, [pc, #96]	@ (80020a8 <HAL_GPIO_Init+0x260>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d007      	beq.n	800205a <HAL_GPIO_Init+0x212>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_GPIO_Init+0x264>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d101      	bne.n	8002056 <HAL_GPIO_Init+0x20e>
 8002052:	2309      	movs	r3, #9
 8002054:	e02d      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 8002056:	230a      	movs	r3, #10
 8002058:	e02b      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 800205a:	2308      	movs	r3, #8
 800205c:	e029      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 800205e:	2307      	movs	r3, #7
 8002060:	e027      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 8002062:	2306      	movs	r3, #6
 8002064:	e025      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 8002066:	2305      	movs	r3, #5
 8002068:	e023      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 800206a:	2304      	movs	r3, #4
 800206c:	e021      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 800206e:	2303      	movs	r3, #3
 8002070:	e01f      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 8002072:	2302      	movs	r3, #2
 8002074:	e01d      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 8002076:	2301      	movs	r3, #1
 8002078:	e01b      	b.n	80020b2 <HAL_GPIO_Init+0x26a>
 800207a:	bf00      	nop
 800207c:	58000080 	.word	0x58000080
 8002080:	58024400 	.word	0x58024400
 8002084:	58000400 	.word	0x58000400
 8002088:	58020000 	.word	0x58020000
 800208c:	58020400 	.word	0x58020400
 8002090:	58020800 	.word	0x58020800
 8002094:	58020c00 	.word	0x58020c00
 8002098:	58021000 	.word	0x58021000
 800209c:	58021400 	.word	0x58021400
 80020a0:	58021800 	.word	0x58021800
 80020a4:	58021c00 	.word	0x58021c00
 80020a8:	58022000 	.word	0x58022000
 80020ac:	58022400 	.word	0x58022400
 80020b0:	2300      	movs	r3, #0
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f002 0203 	and.w	r2, r2, #3
 80020b8:	0092      	lsls	r2, r2, #2
 80020ba:	4093      	lsls	r3, r2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020c2:	4938      	ldr	r1, [pc, #224]	@ (80021a4 <HAL_GPIO_Init+0x35c>)
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	089b      	lsrs	r3, r3, #2
 80020c8:	3302      	adds	r3, #2
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3301      	adds	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	f47f ae63 	bne.w	8001e5c <HAL_GPIO_Init+0x14>
  }
}
 8002196:	bf00      	nop
 8002198:	bf00      	nop
 800219a:	3724      	adds	r7, #36	@ 0x24
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	58000400 	.word	0x58000400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021c4:	e003      	b.n	80021ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021c6:	887b      	ldrh	r3, [r7, #2]
 80021c8:	041a      	lsls	r2, r3, #16
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	619a      	str	r2, [r3, #24]
}
 80021ce:	bf00      	nop
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af02      	add	r7, sp, #8
 80021e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e0fe      	b.n	80023ea <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7fe feb9 	bl	8000f78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f004 fbcc 	bl	80069b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6818      	ldr	r0, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7c1a      	ldrb	r2, [r3, #16]
 8002220:	f88d 2000 	strb.w	r2, [sp]
 8002224:	3304      	adds	r3, #4
 8002226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002228:	f004 fb50 	bl	80068cc <USB_CoreInit>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2202      	movs	r2, #2
 8002236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e0d5      	b.n	80023ea <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f004 fbc4 	bl	80069d2 <USB_SetCurrentMode>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d005      	beq.n	800225c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0c6      	b.n	80023ea <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	2300      	movs	r3, #0
 800225e:	73fb      	strb	r3, [r7, #15]
 8002260:	e04a      	b.n	80022f8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	4413      	add	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	3315      	adds	r3, #21
 8002272:	2201      	movs	r2, #1
 8002274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	3314      	adds	r3, #20
 8002286:	7bfa      	ldrb	r2, [r7, #15]
 8002288:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	b298      	uxth	r0, r3
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	332e      	adds	r3, #46	@ 0x2e
 800229e:	4602      	mov	r2, r0
 80022a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3318      	adds	r3, #24
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	331c      	adds	r3, #28
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3320      	adds	r3, #32
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022de:	7bfa      	ldrb	r2, [r7, #15]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	3324      	adds	r3, #36	@ 0x24
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	3301      	adds	r3, #1
 80022f6:	73fb      	strb	r3, [r7, #15]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	791b      	ldrb	r3, [r3, #4]
 80022fc:	7bfa      	ldrb	r2, [r7, #15]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3af      	bcc.n	8002262 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002302:	2300      	movs	r3, #0
 8002304:	73fb      	strb	r3, [r7, #15]
 8002306:	e044      	b.n	8002392 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800231a:	2200      	movs	r2, #0
 800231c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	3301      	adds	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	791b      	ldrb	r3, [r3, #4]
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	429a      	cmp	r2, r3
 800239a:	d3b5      	bcc.n	8002308 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6818      	ldr	r0, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7c1a      	ldrb	r2, [r3, #16]
 80023a4:	f88d 2000 	strb.w	r2, [sp]
 80023a8:	3304      	adds	r3, #4
 80023aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023ac:	f004 fb5e 	bl	8006a6c <USB_DevInit>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2202      	movs	r2, #2
 80023ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e013      	b.n	80023ea <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7b1b      	ldrb	r3, [r3, #12]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 f80b 	bl	80023f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 fd19 	bl	8006e1a <USB_DevDisconnect>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2201      	movs	r2, #1
 8002406:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_PCDEx_ActivateLPM+0x44>)
 8002424:	4313      	orrs	r3, r2
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	10000003 	.word	0x10000003

0800243c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002444:	4b19      	ldr	r3, [pc, #100]	@ (80024ac <HAL_PWREx_ConfigSupply+0x70>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b04      	cmp	r3, #4
 800244e:	d00a      	beq.n	8002466 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002450:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <HAL_PWREx_ConfigSupply+0x70>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	d001      	beq.n	8002462 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e01f      	b.n	80024a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002462:	2300      	movs	r3, #0
 8002464:	e01d      	b.n	80024a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002466:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_PWREx_ConfigSupply+0x70>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f023 0207 	bic.w	r2, r3, #7
 800246e:	490f      	ldr	r1, [pc, #60]	@ (80024ac <HAL_PWREx_ConfigSupply+0x70>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4313      	orrs	r3, r2
 8002474:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002476:	f7fe ff83 	bl	8001380 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800247c:	e009      	b.n	8002492 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800247e:	f7fe ff7f 	bl	8001380 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800248c:	d901      	bls.n	8002492 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e007      	b.n	80024a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_PWREx_ConfigSupply+0x70>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800249e:	d1ee      	bne.n	800247e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	58024800 	.word	0x58024800

080024b0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024be:	60d3      	str	r3, [r2, #12]
}
 80024c0:	bf00      	nop
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	58024800 	.word	0x58024800

080024d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	@ 0x30
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d102      	bne.n	80024e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	f000 bc48 	b.w	8002d74 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 8088 	beq.w	8002602 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b99      	ldr	r3, [pc, #612]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024fc:	4b96      	ldr	r3, [pc, #600]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	2b10      	cmp	r3, #16
 8002506:	d007      	beq.n	8002518 <HAL_RCC_OscConfig+0x48>
 8002508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250a:	2b18      	cmp	r3, #24
 800250c:	d111      	bne.n	8002532 <HAL_RCC_OscConfig+0x62>
 800250e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b8f      	ldr	r3, [pc, #572]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d06d      	beq.n	8002600 <HAL_RCC_OscConfig+0x130>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d169      	bne.n	8002600 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	f000 bc21 	b.w	8002d74 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x7a>
 800253c:	4b86      	ldr	r3, [pc, #536]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a85      	ldr	r2, [pc, #532]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002546:	6013      	str	r3, [r2, #0]
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x9c>
 8002552:	4b81      	ldr	r3, [pc, #516]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a80      	ldr	r2, [pc, #512]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b7e      	ldr	r3, [pc, #504]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7d      	ldr	r2, [pc, #500]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e01d      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0xc0>
 8002576:	4b78      	ldr	r3, [pc, #480]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a77      	ldr	r2, [pc, #476]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800257c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	4b75      	ldr	r3, [pc, #468]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a74      	ldr	r2, [pc, #464]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	e00b      	b.n	80025a8 <HAL_RCC_OscConfig+0xd8>
 8002590:	4b71      	ldr	r3, [pc, #452]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a70      	ldr	r2, [pc, #448]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800259a:	6013      	str	r3, [r2, #0]
 800259c:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a6d      	ldr	r2, [pc, #436]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80025a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d013      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fee6 	bl	8001380 <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fee2 	bl	8001380 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e3d4      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025ca:	4b63      	ldr	r3, [pc, #396]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0xe8>
 80025d6:	e014      	b.n	8002602 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fed2 	bl	8001380 <HAL_GetTick>
 80025dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fece 	bl	8001380 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	@ 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e3c0      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025f2:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x110>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80ca 	beq.w	80027a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002618:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800261a:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800261c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_RCC_OscConfig+0x166>
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	2b18      	cmp	r3, #24
 800262a:	d156      	bne.n	80026da <HAL_RCC_OscConfig+0x20a>
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d151      	bne.n	80026da <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002636:	4b48      	ldr	r3, [pc, #288]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	2b00      	cmp	r3, #0
 8002640:	d005      	beq.n	800264e <HAL_RCC_OscConfig+0x17e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e392      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0219 	bic.w	r2, r3, #25
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	493f      	ldr	r1, [pc, #252]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800265c:	4313      	orrs	r3, r2
 800265e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fe8e 	bl	8001380 <HAL_GetTick>
 8002664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002668:	f7fe fe8a 	bl	8001380 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e37c      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800267a:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	f7fe feab 	bl	80013e0 <HAL_GetREVID>
 800268a:	4603      	mov	r3, r0
 800268c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002690:	4293      	cmp	r3, r2
 8002692:	d817      	bhi.n	80026c4 <HAL_RCC_OscConfig+0x1f4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b40      	cmp	r3, #64	@ 0x40
 800269a:	d108      	bne.n	80026ae <HAL_RCC_OscConfig+0x1de>
 800269c:	4b2e      	ldr	r3, [pc, #184]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026aa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	e07a      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	031b      	lsls	r3, r3, #12
 80026bc:	4926      	ldr	r1, [pc, #152]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026c2:	e06f      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c4:	4b24      	ldr	r3, [pc, #144]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	061b      	lsls	r3, r3, #24
 80026d2:	4921      	ldr	r1, [pc, #132]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d8:	e064      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d047      	beq.n	8002772 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0219 	bic.w	r2, r3, #25
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	491a      	ldr	r1, [pc, #104]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe44 	bl	8001380 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe40 	bl	8001380 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e332      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	f7fe fe61 	bl	80013e0 <HAL_GetREVID>
 800271e:	4603      	mov	r3, r0
 8002720:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002724:	4293      	cmp	r3, r2
 8002726:	d819      	bhi.n	800275c <HAL_RCC_OscConfig+0x28c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b40      	cmp	r3, #64	@ 0x40
 800272e:	d108      	bne.n	8002742 <HAL_RCC_OscConfig+0x272>
 8002730:	4b09      	ldr	r3, [pc, #36]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002738:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 800273a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273e:	6053      	str	r3, [r2, #4]
 8002740:	e030      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	031b      	lsls	r3, r3, #12
 8002750:	4901      	ldr	r1, [pc, #4]	@ (8002758 <HAL_RCC_OscConfig+0x288>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
 8002756:	e025      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
 8002758:	58024400 	.word	0x58024400
 800275c:	4b9a      	ldr	r3, [pc, #616]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	061b      	lsls	r3, r3, #24
 800276a:	4997      	ldr	r1, [pc, #604]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	4313      	orrs	r3, r2
 800276e:	604b      	str	r3, [r1, #4]
 8002770:	e018      	b.n	80027a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b95      	ldr	r3, [pc, #596]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a94      	ldr	r2, [pc, #592]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277e:	f7fe fdff 	bl	8001380 <HAL_GetTick>
 8002782:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002784:	e008      	b.n	8002798 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002786:	f7fe fdfb 	bl	8001380 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d901      	bls.n	8002798 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e2ed      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002798:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1f0      	bne.n	8002786 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0310 	and.w	r3, r3, #16
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80a9 	beq.w	8002904 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b2:	4b85      	ldr	r3, [pc, #532]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027bc:	4b82      	ldr	r3, [pc, #520]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80027be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d007      	beq.n	80027d8 <HAL_RCC_OscConfig+0x308>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b18      	cmp	r3, #24
 80027cc:	d13a      	bne.n	8002844 <HAL_RCC_OscConfig+0x374>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0303 	and.w	r3, r3, #3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d135      	bne.n	8002844 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027d8:	4b7b      	ldr	r3, [pc, #492]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_OscConfig+0x320>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b80      	cmp	r3, #128	@ 0x80
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e2c1      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f0:	f7fe fdf6 	bl	80013e0 <HAL_GetREVID>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d817      	bhi.n	800282e <HAL_RCC_OscConfig+0x35e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	2b20      	cmp	r3, #32
 8002804:	d108      	bne.n	8002818 <HAL_RCC_OscConfig+0x348>
 8002806:	4b70      	ldr	r3, [pc, #448]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800280e:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002810:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002814:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002816:	e075      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002818:	4b6b      	ldr	r3, [pc, #428]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	069b      	lsls	r3, r3, #26
 8002826:	4968      	ldr	r1, [pc, #416]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800282c:	e06a      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800282e:	4b66      	ldr	r3, [pc, #408]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	061b      	lsls	r3, r3, #24
 800283c:	4962      	ldr	r1, [pc, #392]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002842:	e05f      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d042      	beq.n	80028d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800284c:	4b5e      	ldr	r3, [pc, #376]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5d      	ldr	r2, [pc, #372]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002858:	f7fe fd92 	bl	8001380 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002860:	f7fe fd8e 	bl	8001380 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e280      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002872:	4b55      	ldr	r3, [pc, #340]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800287e:	f7fe fdaf 	bl	80013e0 <HAL_GetREVID>
 8002882:	4603      	mov	r3, r0
 8002884:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002888:	4293      	cmp	r3, r2
 800288a:	d817      	bhi.n	80028bc <HAL_RCC_OscConfig+0x3ec>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	2b20      	cmp	r3, #32
 8002892:	d108      	bne.n	80028a6 <HAL_RCC_OscConfig+0x3d6>
 8002894:	4b4c      	ldr	r3, [pc, #304]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800289c:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028a2:	6053      	str	r3, [r2, #4]
 80028a4:	e02e      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
 80028a6:	4b48      	ldr	r3, [pc, #288]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	069b      	lsls	r3, r3, #26
 80028b4:	4944      	ldr	r1, [pc, #272]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
 80028ba:	e023      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
 80028bc:	4b42      	ldr	r3, [pc, #264]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a1b      	ldr	r3, [r3, #32]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	493f      	ldr	r1, [pc, #252]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
 80028d0:	e018      	b.n	8002904 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028d2:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a3c      	ldr	r2, [pc, #240]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028de:	f7fe fd4f 	bl	8001380 <HAL_GetTick>
 80028e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028e6:	f7fe fd4b 	bl	8001380 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e23d      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028f8:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d036      	beq.n	800297e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d019      	beq.n	800294c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291c:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fd2c 	bl	8001380 <HAL_GetTick>
 8002928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe fd28 	bl	8001380 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e21a      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x45c>
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800294c:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002950:	4a1d      	ldr	r2, [pc, #116]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002958:	f7fe fd12 	bl	8001380 <HAL_GetTick>
 800295c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002960:	f7fe fd0e 	bl	8001380 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e200      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002972:	4b15      	ldr	r3, [pc, #84]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d039      	beq.n	80029fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01c      	beq.n	80029cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a0c      	ldr	r2, [pc, #48]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800299c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800299e:	f7fe fcef 	bl	8001380 <HAL_GetTick>
 80029a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029a6:	f7fe fceb 	bl	8001380 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e1dd      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4d6>
 80029c4:	e01b      	b.n	80029fe <HAL_RCC_OscConfig+0x52e>
 80029c6:	bf00      	nop
 80029c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029cc:	4b9b      	ldr	r3, [pc, #620]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a9a      	ldr	r2, [pc, #616]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 80029d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029d8:	f7fe fcd2 	bl	8001380 <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029e0:	f7fe fcce 	bl	8001380 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e1c0      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029f2:	4b92      	ldr	r3, [pc, #584]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 8081 	beq.w	8002b0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a0c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c40 <HAL_RCC_OscConfig+0x770>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a8b      	ldr	r2, [pc, #556]	@ (8002c40 <HAL_RCC_OscConfig+0x770>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fcb2 	bl	8001380 <HAL_GetTick>
 8002a1c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fcae 	bl	8001380 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	@ 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e1a0      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a32:	4b83      	ldr	r3, [pc, #524]	@ (8002c40 <HAL_RCC_OscConfig+0x770>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <HAL_RCC_OscConfig+0x584>
 8002a46:	4b7d      	ldr	r3, [pc, #500]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a4a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a52:	e02d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x5e0>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCC_OscConfig+0x5a6>
 8002a5c:	4b77      	ldr	r3, [pc, #476]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a60:	4a76      	ldr	r2, [pc, #472]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a62:	f023 0301 	bic.w	r3, r3, #1
 8002a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a68:	4b74      	ldr	r3, [pc, #464]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6c:	4a73      	ldr	r2, [pc, #460]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a6e:	f023 0304 	bic.w	r3, r3, #4
 8002a72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a74:	e01c      	b.n	8002ab0 <HAL_RCC_OscConfig+0x5e0>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x5c8>
 8002a7e:	4b6f      	ldr	r3, [pc, #444]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a82:	4a6e      	ldr	r2, [pc, #440]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x5e0>
 8002a98:	4b68      	ldr	r3, [pc, #416]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	4a67      	ldr	r2, [pc, #412]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002a9e:	f023 0301 	bic.w	r3, r3, #1
 8002aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa4:	4b65      	ldr	r3, [pc, #404]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa8:	4a64      	ldr	r2, [pc, #400]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002aaa:	f023 0304 	bic.w	r3, r3, #4
 8002aae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fc62 	bl	8001380 <HAL_GetTick>
 8002abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac0:	f7fe fc5e 	bl	8001380 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e14e      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad6:	4b59      	ldr	r3, [pc, #356]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ee      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x5f0>
 8002ae2:	e014      	b.n	8002b0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fc4c 	bl	8001380 <HAL_GetTick>
 8002ae8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7fe fc48 	bl	8001380 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e138      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b02:	4b4e      	ldr	r3, [pc, #312]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1ee      	bne.n	8002aec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 812d 	beq.w	8002d72 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b18:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b20:	2b18      	cmp	r3, #24
 8002b22:	f000 80bd 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	f040 809e 	bne.w	8002c6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b30:	4b42      	ldr	r3, [pc, #264]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3c:	f7fe fc20 	bl	8001380 <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b44:	f7fe fc1c 	bl	8001380 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e10e      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b56:	4b39      	ldr	r3, [pc, #228]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b62:	4b36      	ldr	r3, [pc, #216]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b64:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b66:	4b37      	ldr	r3, [pc, #220]	@ (8002c44 <HAL_RCC_OscConfig+0x774>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4931      	ldr	r1, [pc, #196]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b80:	3b01      	subs	r3, #1
 8002b82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	025b      	lsls	r3, r3, #9
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	431a      	orrs	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	061b      	lsls	r3, r3, #24
 8002ba8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bac:	4923      	ldr	r1, [pc, #140]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bb2:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb6:	4a21      	ldr	r2, [pc, #132]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc2:	4b21      	ldr	r3, [pc, #132]	@ (8002c48 <HAL_RCC_OscConfig+0x778>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	491b      	ldr	r1, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd6:	f023 020c 	bic.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4917      	ldr	r1, [pc, #92]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002be4:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	f023 0202 	bic.w	r2, r3, #2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf0:	4912      	ldr	r1, [pc, #72]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bf6:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	4a10      	ldr	r2, [pc, #64]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c02:	4b0e      	ldr	r3, [pc, #56]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	4a0d      	ldr	r2, [pc, #52]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c12:	4a0a      	ldr	r2, [pc, #40]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c1a:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	4a07      	ldr	r2, [pc, #28]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a04      	ldr	r2, [pc, #16]	@ (8002c3c <HAL_RCC_OscConfig+0x76c>)
 8002c2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7fe fba5 	bl	8001380 <HAL_GetTick>
 8002c36:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c38:	e011      	b.n	8002c5e <HAL_RCC_OscConfig+0x78e>
 8002c3a:	bf00      	nop
 8002c3c:	58024400 	.word	0x58024400
 8002c40:	58024800 	.word	0x58024800
 8002c44:	fffffc0c 	.word	0xfffffc0c
 8002c48:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fb98 	bl	8001380 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e08a      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5e:	4b47      	ldr	r3, [pc, #284]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d0f0      	beq.n	8002c4c <HAL_RCC_OscConfig+0x77c>
 8002c6a:	e082      	b.n	8002d72 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6c:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe fb82 	bl	8001380 <HAL_GetTick>
 8002c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe fb7e 	bl	8001380 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e070      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x7b0>
 8002c9e:	e068      	b.n	8002d72 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ca0:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002ca6:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d031      	beq.n	8002d18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d12a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d122      	bne.n	8002d18 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d11a      	bne.n	8002d18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0a5b      	lsrs	r3, r3, #9
 8002ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d111      	bne.n	8002d18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d00:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d108      	bne.n	8002d18 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	0e1b      	lsrs	r3, r3, #24
 8002d0a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e02b      	b.n	8002d74 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d1c:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d26:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d01f      	beq.n	8002d72 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d32:	4b12      	ldr	r3, [pc, #72]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d36:	4a11      	ldr	r2, [pc, #68]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d3e:	f7fe fb1f 	bl	8001380 <HAL_GetTick>
 8002d42:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d44:	bf00      	nop
 8002d46:	f7fe fb1b 	bl	8001380 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d0f9      	beq.n	8002d46 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d52:	4b0a      	ldr	r3, [pc, #40]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d56:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <HAL_RCC_OscConfig+0x8b0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d5e:	00d2      	lsls	r2, r2, #3
 8002d60:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <HAL_RCC_OscConfig+0x8ac>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3730      	adds	r7, #48	@ 0x30
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	ffff0007 	.word	0xffff0007

08002d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e19c      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b8a      	ldr	r3, [pc, #552]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 030f 	and.w	r3, r3, #15
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b87      	ldr	r3, [pc, #540]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 020f 	bic.w	r2, r3, #15
 8002dae:	4985      	ldr	r1, [pc, #532]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b83      	ldr	r3, [pc, #524]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e184      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	4b7b      	ldr	r3, [pc, #492]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d908      	bls.n	8002df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002de4:	4b78      	ldr	r3, [pc, #480]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	4975      	ldr	r1, [pc, #468]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d010      	beq.n	8002e24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	4b70      	ldr	r3, [pc, #448]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d908      	bls.n	8002e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e12:	4b6d      	ldr	r3, [pc, #436]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	496a      	ldr	r1, [pc, #424]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0310 	and.w	r3, r3, #16
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d010      	beq.n	8002e52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	4b64      	ldr	r3, [pc, #400]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d908      	bls.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e40:	4b61      	ldr	r3, [pc, #388]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	69db      	ldr	r3, [r3, #28]
 8002e44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	495e      	ldr	r1, [pc, #376]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d010      	beq.n	8002e80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69da      	ldr	r2, [r3, #28]
 8002e62:	4b59      	ldr	r3, [pc, #356]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d908      	bls.n	8002e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e6e:	4b56      	ldr	r3, [pc, #344]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4953      	ldr	r1, [pc, #332]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d010      	beq.n	8002eae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	4b4d      	ldr	r3, [pc, #308]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d908      	bls.n	8002eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f023 020f 	bic.w	r2, r3, #15
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4947      	ldr	r1, [pc, #284]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d055      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002eba:	4b43      	ldr	r3, [pc, #268]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	4940      	ldr	r1, [pc, #256]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d121      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0f6      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002eec:	4b36      	ldr	r3, [pc, #216]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d115      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0ea      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f04:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d109      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0de      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f14:	4b2c      	ldr	r3, [pc, #176]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0d6      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b28      	ldr	r3, [pc, #160]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	4925      	ldr	r1, [pc, #148]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f36:	f7fe fa23 	bl	8001380 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3c:	e00a      	b.n	8002f54 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f3e:	f7fe fa1f 	bl	8001380 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0be      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f54:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d1eb      	bne.n	8002f3e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d010      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68da      	ldr	r2, [r3, #12]
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d208      	bcs.n	8002f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f023 020f 	bic.w	r2, r3, #15
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	490e      	ldr	r1, [pc, #56]	@ (8002fc8 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d214      	bcs.n	8002fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 020f 	bic.w	r2, r3, #15
 8002faa:	4906      	ldr	r1, [pc, #24]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb2:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <HAL_RCC_ClockConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e086      	b.n	80030d2 <HAL_RCC_ClockConfig+0x34e>
 8002fc4:	52002000 	.word	0x52002000
 8002fc8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d010      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d208      	bcs.n	8002ffa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fe8:	4b3c      	ldr	r3, [pc, #240]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	4939      	ldr	r1, [pc, #228]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0308 	and.w	r3, r3, #8
 8003002:	2b00      	cmp	r3, #0
 8003004:	d010      	beq.n	8003028 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	4b34      	ldr	r3, [pc, #208]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003012:	429a      	cmp	r2, r3
 8003014:	d208      	bcs.n	8003028 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003016:	4b31      	ldr	r3, [pc, #196]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	492e      	ldr	r1, [pc, #184]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003024:	4313      	orrs	r3, r2
 8003026:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d010      	beq.n	8003056 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699a      	ldr	r2, [r3, #24]
 8003038:	4b28      	ldr	r3, [pc, #160]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003040:	429a      	cmp	r2, r3
 8003042:	d208      	bcs.n	8003056 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	4922      	ldr	r1, [pc, #136]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003052:	4313      	orrs	r3, r2
 8003054:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0320 	and.w	r3, r3, #32
 800305e:	2b00      	cmp	r3, #0
 8003060:	d010      	beq.n	8003084 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	69da      	ldr	r2, [r3, #28]
 8003066:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800306e:	429a      	cmp	r2, r3
 8003070:	d208      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003072:	4b1a      	ldr	r3, [pc, #104]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	4917      	ldr	r1, [pc, #92]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 8003080:	4313      	orrs	r3, r2
 8003082:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003084:	f000 f834 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	0a1b      	lsrs	r3, r3, #8
 8003090:	f003 030f 	and.w	r3, r3, #15
 8003094:	4912      	ldr	r1, [pc, #72]	@ (80030e0 <HAL_RCC_ClockConfig+0x35c>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <HAL_RCC_ClockConfig+0x358>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	f003 030f 	and.w	r3, r3, #15
 80030aa:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <HAL_RCC_ClockConfig+0x35c>)
 80030ac:	5cd3      	ldrb	r3, [r2, r3]
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x360>)
 80030ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030bc:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <HAL_RCC_ClockConfig+0x364>)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80030c2:	4b0a      	ldr	r3, [pc, #40]	@ (80030ec <HAL_RCC_ClockConfig+0x368>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd ffd2 	bl	8001070 <HAL_InitTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400
 80030e0:	0800909c 	.word	0x0800909c
 80030e4:	24000004 	.word	0x24000004
 80030e8:	24000000 	.word	0x24000000
 80030ec:	24000008 	.word	0x24000008

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	@ 0x24
 80030f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030f6:	4bb3      	ldr	r3, [pc, #716]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030fe:	2b18      	cmp	r3, #24
 8003100:	f200 8155 	bhi.w	80033ae <HAL_RCC_GetSysClockFreq+0x2be>
 8003104:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003171 	.word	0x08003171
 8003110:	080033af 	.word	0x080033af
 8003114:	080033af 	.word	0x080033af
 8003118:	080033af 	.word	0x080033af
 800311c:	080033af 	.word	0x080033af
 8003120:	080033af 	.word	0x080033af
 8003124:	080033af 	.word	0x080033af
 8003128:	080033af 	.word	0x080033af
 800312c:	08003197 	.word	0x08003197
 8003130:	080033af 	.word	0x080033af
 8003134:	080033af 	.word	0x080033af
 8003138:	080033af 	.word	0x080033af
 800313c:	080033af 	.word	0x080033af
 8003140:	080033af 	.word	0x080033af
 8003144:	080033af 	.word	0x080033af
 8003148:	080033af 	.word	0x080033af
 800314c:	0800319d 	.word	0x0800319d
 8003150:	080033af 	.word	0x080033af
 8003154:	080033af 	.word	0x080033af
 8003158:	080033af 	.word	0x080033af
 800315c:	080033af 	.word	0x080033af
 8003160:	080033af 	.word	0x080033af
 8003164:	080033af 	.word	0x080033af
 8003168:	080033af 	.word	0x080033af
 800316c:	080031a3 	.word	0x080031a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003170:	4b94      	ldr	r3, [pc, #592]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800317c:	4b91      	ldr	r3, [pc, #580]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	08db      	lsrs	r3, r3, #3
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	4a90      	ldr	r2, [pc, #576]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800318e:	e111      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003190:	4b8d      	ldr	r3, [pc, #564]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003192:	61bb      	str	r3, [r7, #24]
      break;
 8003194:	e10e      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003196:	4b8d      	ldr	r3, [pc, #564]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003198:	61bb      	str	r3, [r7, #24]
      break;
 800319a:	e10b      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800319c:	4b8c      	ldr	r3, [pc, #560]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800319e:	61bb      	str	r3, [r7, #24]
      break;
 80031a0:	e108      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031a2:	4b88      	ldr	r3, [pc, #544]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031ac:	4b85      	ldr	r3, [pc, #532]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031b8:	4b82      	ldr	r3, [pc, #520]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80031c2:	4b80      	ldr	r3, [pc, #512]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80e1 	beq.w	80033a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	f000 8083 	beq.w	80032f4 <HAL_RCC_GetSysClockFreq+0x204>
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	f200 80a1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x248>
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x114>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d056      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003202:	e099      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003204:	4b6f      	ldr	r3, [pc, #444]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d02d      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003210:	4b6c      	ldr	r3, [pc, #432]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	08db      	lsrs	r3, r3, #3
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	4a6b      	ldr	r2, [pc, #428]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
 8003220:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	ee07 3a90 	vmov	s15, r3
 8003232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800323a:	4b62      	ldr	r3, [pc, #392]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003242:	ee07 3a90 	vmov	s15, r3
 8003246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800324a:	ed97 6a02 	vldr	s12, [r7, #8]
 800324e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800325a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800325e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003266:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800326a:	e087      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	ee07 3a90 	vmov	s15, r3
 8003272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003276:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b51      	ldr	r3, [pc, #324]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ae:	e065      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b40      	ldr	r3, [pc, #256]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032f2:	e043      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b2f      	ldr	r3, [pc, #188]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a02 	vldr	s12, [r7, #8]
 800331a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003336:	e021      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b1e      	ldr	r3, [pc, #120]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a02 	vldr	s12, [r7, #8]
 800335e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800337c:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	0a5b      	lsrs	r3, r3, #9
 8003382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003386:	3301      	adds	r3, #1
 8003388:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003394:	edd7 6a07 	vldr	s13, [r7, #28]
 8003398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800339c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a0:	ee17 3a90 	vmov	r3, s15
 80033a4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033a6:	e005      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61bb      	str	r3, [r7, #24]
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033ae:	4b07      	ldr	r3, [pc, #28]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033b0:	61bb      	str	r3, [r7, #24]
      break;
 80033b2:	bf00      	nop
  }

  return sysclockfreq;
 80033b4:	69bb      	ldr	r3, [r7, #24]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3724      	adds	r7, #36	@ 0x24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	58024400 	.word	0x58024400
 80033c8:	03d09000 	.word	0x03d09000
 80033cc:	003d0900 	.word	0x003d0900
 80033d0:	007a1200 	.word	0x007a1200
 80033d4:	46000000 	.word	0x46000000
 80033d8:	4c742400 	.word	0x4c742400
 80033dc:	4a742400 	.word	0x4a742400
 80033e0:	4af42400 	.word	0x4af42400

080033e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033ea:	f7ff fe81 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80033ee:	4602      	mov	r2, r0
 80033f0:	4b10      	ldr	r3, [pc, #64]	@ (8003434 <HAL_RCC_GetHCLKFreq+0x50>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	490f      	ldr	r1, [pc, #60]	@ (8003438 <HAL_RCC_GetHCLKFreq+0x54>)
 80033fc:	5ccb      	ldrb	r3, [r1, r3]
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	fa22 f303 	lsr.w	r3, r2, r3
 8003406:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003408:	4b0a      	ldr	r3, [pc, #40]	@ (8003434 <HAL_RCC_GetHCLKFreq+0x50>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	4a09      	ldr	r2, [pc, #36]	@ (8003438 <HAL_RCC_GetHCLKFreq+0x54>)
 8003412:	5cd3      	ldrb	r3, [r2, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	fa22 f303 	lsr.w	r3, r2, r3
 800341e:	4a07      	ldr	r2, [pc, #28]	@ (800343c <HAL_RCC_GetHCLKFreq+0x58>)
 8003420:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003422:	4a07      	ldr	r2, [pc, #28]	@ (8003440 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <HAL_RCC_GetHCLKFreq+0x58>)
 800342a:	681b      	ldr	r3, [r3, #0]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	58024400 	.word	0x58024400
 8003438:	0800909c 	.word	0x0800909c
 800343c:	24000004 	.word	0x24000004
 8003440:	24000000 	.word	0x24000000

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003448:	f7ff ffcc 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4904      	ldr	r1, [pc, #16]	@ (800346c <HAL_RCC_GetPCLK1Freq+0x28>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	58024400 	.word	0x58024400
 800346c:	0800909c 	.word	0x0800909c

08003470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003474:	f7ff ffb6 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 8003478:	4602      	mov	r2, r0
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 0307 	and.w	r3, r3, #7
 8003484:	4904      	ldr	r1, [pc, #16]	@ (8003498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003486:	5ccb      	ldrb	r3, [r1, r3]
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003490:	4618      	mov	r0, r3
 8003492:	bd80      	pop	{r7, pc}
 8003494:	58024400 	.word	0x58024400
 8003498:	0800909c 	.word	0x0800909c

0800349c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	223f      	movs	r2, #63	@ 0x3f
 80034aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	f003 0207 	and.w	r2, r3, #7
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80034b8:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80034c4:	4b14      	ldr	r3, [pc, #80]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80034d0:	4b11      	ldr	r3, [pc, #68]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80034dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80034f4:	4b08      	ldr	r3, [pc, #32]	@ (8003518 <HAL_RCC_GetClockConfig+0x7c>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003500:	4b06      	ldr	r3, [pc, #24]	@ (800351c <HAL_RCC_GetClockConfig+0x80>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 020f 	and.w	r2, r3, #15
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	601a      	str	r2, [r3, #0]
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	58024400 	.word	0x58024400
 800351c:	52002000 	.word	0x52002000

08003520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003524:	b0ca      	sub	sp, #296	@ 0x128
 8003526:	af00      	add	r7, sp, #0
 8003528:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003532:	2300      	movs	r3, #0
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003544:	2500      	movs	r5, #0
 8003546:	ea54 0305 	orrs.w	r3, r4, r5
 800354a:	d049      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800354c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003550:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003552:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003556:	d02f      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003558:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800355c:	d828      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800355e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003562:	d01a      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003564:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003568:	d822      	bhi.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800356e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003572:	d007      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003574:	e01c      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003576:	4bb8      	ldr	r3, [pc, #736]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	4ab7      	ldr	r2, [pc, #732]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003582:	e01a      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	3308      	adds	r3, #8
 800358a:	2102      	movs	r1, #2
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fc8f 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003592:	4603      	mov	r3, r0
 8003594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003598:	e00f      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800359a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359e:	3328      	adds	r3, #40	@ 0x28
 80035a0:	2102      	movs	r1, #2
 80035a2:	4618      	mov	r0, r3
 80035a4:	f001 fd36 	bl	8005014 <RCCEx_PLL3_Config>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ae:	e004      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b6:	e000      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035c2:	4ba5      	ldr	r3, [pc, #660]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80035ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035d0:	4aa1      	ldr	r2, [pc, #644]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d2:	430b      	orrs	r3, r1
 80035d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d6:	e003      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035ec:	f04f 0900 	mov.w	r9, #0
 80035f0:	ea58 0309 	orrs.w	r3, r8, r9
 80035f4:	d047      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d82a      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003600:	a201      	add	r2, pc, #4	@ (adr r2, 8003608 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003606:	bf00      	nop
 8003608:	0800361d 	.word	0x0800361d
 800360c:	0800362b 	.word	0x0800362b
 8003610:	08003641 	.word	0x08003641
 8003614:	0800365f 	.word	0x0800365f
 8003618:	0800365f 	.word	0x0800365f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	4b8e      	ldr	r3, [pc, #568]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	4a8d      	ldr	r2, [pc, #564]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003628:	e01a      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3308      	adds	r3, #8
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fc3c 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800363e:	e00f      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f001 fce3 	bl	8005014 <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003654:	e004      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365c:	e000      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800365e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10a      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003668:	4b7b      	ldr	r3, [pc, #492]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800366c:	f023 0107 	bic.w	r1, r3, #7
 8003670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	4a78      	ldr	r2, [pc, #480]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003678:	430b      	orrs	r3, r1
 800367a:	6513      	str	r3, [r2, #80]	@ 0x50
 800367c:	e003      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800367e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003682:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003692:	f04f 0b00 	mov.w	fp, #0
 8003696:	ea5a 030b 	orrs.w	r3, sl, fp
 800369a:	d04c      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800369c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036a6:	d030      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ac:	d829      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80036b0:	d02d      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80036b4:	d825      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036b6:	2b80      	cmp	r3, #128	@ 0x80
 80036b8:	d018      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036ba:	2b80      	cmp	r3, #128	@ 0x80
 80036bc:	d821      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d007      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036c6:	e01c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	4a62      	ldr	r2, [pc, #392]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036d4:	e01c      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	3308      	adds	r3, #8
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f001 fbe6 	bl	8004eb0 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036ea:	e011      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	3328      	adds	r3, #40	@ 0x28
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f001 fc8d 	bl	8005014 <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003700:	e006      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003708:	e002      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800370e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003710:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10a      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003718:	4b4f      	ldr	r3, [pc, #316]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800371c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003726:	4a4c      	ldr	r2, [pc, #304]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003728:	430b      	orrs	r3, r1
 800372a:	6513      	str	r3, [r2, #80]	@ 0x50
 800372c:	e003      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003742:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800374c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003750:	460b      	mov	r3, r1
 8003752:	4313      	orrs	r3, r2
 8003754:	d053      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800375e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003762:	d035      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003764:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003768:	d82e      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800376a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800376e:	d031      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003770:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003774:	d828      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800377a:	d01a      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800377c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003780:	d822      	bhi.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d003      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800378a:	d007      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800378c:	e01c      	b.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378e:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003792:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003798:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379a:	e01c      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a0:	3308      	adds	r3, #8
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f001 fb83 	bl	8004eb0 <RCCEx_PLL2_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037b0:	e011      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	3328      	adds	r3, #40	@ 0x28
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fc2a 	bl	8005014 <RCCEx_PLL3_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c6:	e006      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ce:	e002      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037d0:	bf00      	nop
 80037d2:	e000      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80037d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10b      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037de:	4b1e      	ldr	r3, [pc, #120]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800380a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003814:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d056      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800382a:	d038      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800382c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003830:	d831      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003836:	d034      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003838:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800383c:	d82b      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800383e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003842:	d01d      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003848:	d825      	bhi.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800384e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003852:	d00a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003854:	e01f      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003856:	bf00      	nop
 8003858:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385c:	4ba2      	ldr	r3, [pc, #648]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	4aa1      	ldr	r2, [pc, #644]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003868:	e01c      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	3308      	adds	r3, #8
 8003870:	2100      	movs	r1, #0
 8003872:	4618      	mov	r0, r3
 8003874:	f001 fb1c 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800387e:	e011      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003884:	3328      	adds	r3, #40	@ 0x28
 8003886:	2100      	movs	r1, #0
 8003888:	4618      	mov	r0, r3
 800388a:	f001 fbc3 	bl	8005014 <RCCEx_PLL3_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003894:	e006      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800389c:	e002      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800389e:	bf00      	nop
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038ac:	4b8e      	ldr	r3, [pc, #568]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038bc:	4a8a      	ldr	r2, [pc, #552]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80038d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038e2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038e6:	460b      	mov	r3, r1
 80038e8:	4313      	orrs	r3, r2
 80038ea:	d03a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	2b30      	cmp	r3, #48	@ 0x30
 80038f4:	d01f      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038f6:	2b30      	cmp	r3, #48	@ 0x30
 80038f8:	d819      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d00c      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038fe:	2b20      	cmp	r3, #32
 8003900:	d815      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d019      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003906:	2b10      	cmp	r3, #16
 8003908:	d111      	bne.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390a:	4b77      	ldr	r3, [pc, #476]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	4a76      	ldr	r2, [pc, #472]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003910:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003914:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003916:	e011      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	3308      	adds	r3, #8
 800391e:	2102      	movs	r1, #2
 8003920:	4618      	mov	r0, r3
 8003922:	f001 fac5 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800392c:	e006      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003934:	e002      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003936:	bf00      	nop
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800393a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10a      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003944:	4b68      	ldr	r3, [pc, #416]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003948:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800394c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003952:	4a65      	ldr	r2, [pc, #404]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003954:	430b      	orrs	r3, r1
 8003956:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800396e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003978:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800397c:	460b      	mov	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	d051      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800398c:	d035      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800398e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003992:	d82e      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003994:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003998:	d031      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800399a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800399e:	d828      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039a4:	d01a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039aa:	d822      	bhi.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b4:	d007      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039b6:	e01c      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039c4:	e01c      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	3308      	adds	r3, #8
 80039cc:	2100      	movs	r1, #0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fa6e 	bl	8004eb0 <RCCEx_PLL2_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039da:	e011      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	3328      	adds	r3, #40	@ 0x28
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 fb15 	bl	8005014 <RCCEx_PLL3_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039f0:	e006      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f8:	e002      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039fa:	bf00      	nop
 80039fc:	e000      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a08:	4b37      	ldr	r3, [pc, #220]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	4a34      	ldr	r2, [pc, #208]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a1c:	e003      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a40:	460b      	mov	r3, r1
 8003a42:	4313      	orrs	r3, r2
 8003a44:	d056      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a50:	d033      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a56:	d82c      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a5c:	d02f      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a5e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a62:	d826      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a64:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a68:	d02b      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a6a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a6e:	d820      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a74:	d012      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a7a:	d81a      	bhi.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d022      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f001 fa0e 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a9a:	e015      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	3328      	adds	r3, #40	@ 0x28
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f001 fab5 	bl	8005014 <RCCEx_PLL3_Config>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ab8:	e006      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003aba:	bf00      	nop
 8003abc:	e004      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ad4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ade:	4a02      	ldr	r2, [pc, #8]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ae4:	e006      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003ae6:	bf00      	nop
 8003ae8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	d055      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b20:	d033      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b26:	d82c      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b2c:	d02f      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b32:	d826      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b38:	d02b      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b3a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b3e:	d820      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b44:	d012      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4a:	d81a      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d022      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b54:	d115      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 f9a6 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b6a:	e015      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	3328      	adds	r3, #40	@ 0x28
 8003b72:	2101      	movs	r1, #1
 8003b74:	4618      	mov	r0, r3
 8003b76:	f001 fa4d 	bl	8005014 <RCCEx_PLL3_Config>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b80:	e00a      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b8a:	bf00      	nop
 8003b8c:	e004      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b8e:	bf00      	nop
 8003b90:	e002      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b92:	bf00      	nop
 8003b94:	e000      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10b      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ba0:	4ba3      	ldr	r3, [pc, #652]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ba2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bb6:	e003      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003bcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d037      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bea:	d00e      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bf0:	d816      	bhi.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d018      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bfa:	d111      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c00:	4a8b      	ldr	r2, [pc, #556]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c08:	e00f      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0e:	3308      	adds	r3, #8
 8003c10:	2101      	movs	r1, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	f001 f94c 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c1e:	e004      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c26:	e000      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c32:	4b7f      	ldr	r3, [pc, #508]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c36:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	4a7b      	ldr	r2, [pc, #492]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	d039      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d81c      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c80:	08003cbd 	.word	0x08003cbd
 8003c84:	08003c91 	.word	0x08003c91
 8003c88:	08003c9f 	.word	0x08003c9f
 8003c8c:	08003cbd 	.word	0x08003cbd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c90:	4b67      	ldr	r3, [pc, #412]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c94:	4a66      	ldr	r2, [pc, #408]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c9c:	e00f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f902 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cca:	f023 0103 	bic.w	r1, r3, #3
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cd4:	4a56      	ldr	r2, [pc, #344]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cf0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cfa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f000 809f 	beq.w	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d06:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a4a      	ldr	r2, [pc, #296]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d12:	f7fd fb35 	bl	8001380 <HAL_GetTick>
 8003d16:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1c:	f7fd fb30 	bl	8001380 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b64      	cmp	r3, #100	@ 0x64
 8003d2a:	d903      	bls.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d32:	e005      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d34:	4b3f      	ldr	r3, [pc, #252]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0ed      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d179      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d48:	4b39      	ldr	r3, [pc, #228]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d54:	4053      	eors	r3, r2
 8003d56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d5e:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d6a:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6e:	4a30      	ldr	r2, [pc, #192]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d74:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d80:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d82:	4a2b      	ldr	r2, [pc, #172]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d96:	d118      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fd faf2 	bl	8001380 <HAL_GetTick>
 8003d9c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003da0:	e00d      	b.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd faed 	bl	8001380 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003dac:	1ad2      	subs	r2, r2, r3
 8003dae:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d903      	bls.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003dbc:	e005      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0eb      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d129      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de2:	d10e      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003de4:	4b12      	ldr	r3, [pc, #72]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003df4:	091a      	lsrs	r2, r3, #4
 8003df6:	4b10      	ldr	r3, [pc, #64]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6113      	str	r3, [r2, #16]
 8003e00:	e005      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e02:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	4a0a      	ldr	r2, [pc, #40]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e0c:	6113      	str	r3, [r2, #16]
 8003e0e:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e10:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e1e:	4a04      	ldr	r2, [pc, #16]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e24:	e00e      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e2e:	e009      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e30:	58024400 	.word	0x58024400
 8003e34:	58024800 	.word	0x58024800
 8003e38:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f002 0301 	and.w	r3, r2, #1
 8003e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f000 8089 	beq.w	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6c:	2b28      	cmp	r3, #40	@ 0x28
 8003e6e:	d86b      	bhi.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e70:	a201      	add	r2, pc, #4	@ (adr r2, 8003e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003f51 	.word	0x08003f51
 8003e7c:	08003f49 	.word	0x08003f49
 8003e80:	08003f49 	.word	0x08003f49
 8003e84:	08003f49 	.word	0x08003f49
 8003e88:	08003f49 	.word	0x08003f49
 8003e8c:	08003f49 	.word	0x08003f49
 8003e90:	08003f49 	.word	0x08003f49
 8003e94:	08003f49 	.word	0x08003f49
 8003e98:	08003f1d 	.word	0x08003f1d
 8003e9c:	08003f49 	.word	0x08003f49
 8003ea0:	08003f49 	.word	0x08003f49
 8003ea4:	08003f49 	.word	0x08003f49
 8003ea8:	08003f49 	.word	0x08003f49
 8003eac:	08003f49 	.word	0x08003f49
 8003eb0:	08003f49 	.word	0x08003f49
 8003eb4:	08003f49 	.word	0x08003f49
 8003eb8:	08003f33 	.word	0x08003f33
 8003ebc:	08003f49 	.word	0x08003f49
 8003ec0:	08003f49 	.word	0x08003f49
 8003ec4:	08003f49 	.word	0x08003f49
 8003ec8:	08003f49 	.word	0x08003f49
 8003ecc:	08003f49 	.word	0x08003f49
 8003ed0:	08003f49 	.word	0x08003f49
 8003ed4:	08003f49 	.word	0x08003f49
 8003ed8:	08003f51 	.word	0x08003f51
 8003edc:	08003f49 	.word	0x08003f49
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003f49 	.word	0x08003f49
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f49 	.word	0x08003f49
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003f51 	.word	0x08003f51
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f49 	.word	0x08003f49
 8003f04:	08003f49 	.word	0x08003f49
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f49 	.word	0x08003f49
 8003f14:	08003f49 	.word	0x08003f49
 8003f18:	08003f51 	.word	0x08003f51
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f20:	3308      	adds	r3, #8
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 ffc3 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f30:	e00f      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	3328      	adds	r3, #40	@ 0x28
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f86a 	bl	8005014 <RCCEx_PLL3_Config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f4e:	e000      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f5a:	4bbf      	ldr	r3, [pc, #764]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f68:	4abb      	ldr	r2, [pc, #748]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f6e:	e003      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f002 0302 	and.w	r3, r2, #2
 8003f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f92:	460b      	mov	r3, r1
 8003f94:	4313      	orrs	r3, r2
 8003f96:	d041      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f9e:	2b05      	cmp	r3, #5
 8003fa0:	d824      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003fc1 	.word	0x08003fc1
 8003fb0:	08003fd7 	.word	0x08003fd7
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ff71 	bl	8004eb0 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fda:	3328      	adds	r3, #40	@ 0x28
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 f818 	bl	8005014 <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ffe:	4b96      	ldr	r3, [pc, #600]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004002:	f023 0107 	bic.w	r1, r3, #7
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800400c:	4a92      	ldr	r2, [pc, #584]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6553      	str	r3, [r2, #84]	@ 0x54
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0304 	and.w	r3, r2, #4
 8004028:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004032:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d044      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004044:	2b05      	cmp	r3, #5
 8004046:	d825      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	0800409d 	.word	0x0800409d
 8004054:	08004069 	.word	0x08004069
 8004058:	0800407f 	.word	0x0800407f
 800405c:	0800409d 	.word	0x0800409d
 8004060:	0800409d 	.word	0x0800409d
 8004064:	0800409d 	.word	0x0800409d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 ff1d 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f000 ffc4 	bl	8005014 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040a6:	4b6c      	ldr	r3, [pc, #432]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040aa:	f023 0107 	bic.w	r1, r3, #7
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040b6:	4a68      	ldr	r2, [pc, #416]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f002 0320 	and.w	r3, r2, #32
 80040d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80040dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d055      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f2:	d033      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040f8:	d82c      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040fe:	d02f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004104:	d826      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004106:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800410a:	d02b      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800410c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004110:	d820      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004116:	d012      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800411c:	d81a      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d022      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004122:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004126:	d115      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412c:	3308      	adds	r3, #8
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f000 febd 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800413c:	e015      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800413e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004142:	3328      	adds	r3, #40	@ 0x28
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ff64 	bl	8005014 <RCCEx_PLL3_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004152:	e00a      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415a:	e006      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800415c:	bf00      	nop
 800415e:	e004      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004160:	bf00      	nop
 8004162:	e002      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004164:	bf00      	nop
 8004166:	e000      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800416a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10b      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004172:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004176:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800417a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	4a35      	ldr	r2, [pc, #212]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004184:	430b      	orrs	r3, r1
 8004186:	6553      	str	r3, [r2, #84]	@ 0x54
 8004188:	e003      	b.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800419e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041a2:	2300      	movs	r3, #0
 80041a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4313      	orrs	r3, r2
 80041b0:	d058      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041ba:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041be:	d033      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041c0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041c4:	d82c      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ca:	d02f      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80041cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d0:	d826      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041d2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041d6:	d02b      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80041d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041dc:	d820      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e2:	d012      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e8:	d81a      	bhi.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d022      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f2:	d115      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f8:	3308      	adds	r3, #8
 80041fa:	2100      	movs	r1, #0
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fe57 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004202:	4603      	mov	r3, r0
 8004204:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004208:	e015      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	3328      	adds	r3, #40	@ 0x28
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fefe 	bl	8005014 <RCCEx_PLL3_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800421e:	e00a      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004226:	e006      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004228:	bf00      	nop
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800422c:	bf00      	nop
 800422e:	e002      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004230:	bf00      	nop
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10e      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800423e:	4b06      	ldr	r3, [pc, #24]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800424e:	4a02      	ldr	r2, [pc, #8]	@ (8004258 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6593      	str	r3, [r2, #88]	@ 0x58
 8004254:	e006      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800427a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d055      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800428c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004290:	d033      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004292:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004296:	d82c      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800429c:	d02f      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042a2:	d826      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042a4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042a8:	d02b      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042ae:	d820      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042b4:	d012      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ba:	d81a      	bhi.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d022      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042c4:	d115      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	3308      	adds	r3, #8
 80042cc:	2100      	movs	r1, #0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fdee 	bl	8004eb0 <RCCEx_PLL2_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042da:	e015      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e0:	3328      	adds	r3, #40	@ 0x28
 80042e2:	2102      	movs	r1, #2
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 fe95 	bl	8005014 <RCCEx_PLL3_Config>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042f0:	e00a      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042f8:	e006      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042fa:	bf00      	nop
 80042fc:	e004      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004308:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004310:	4ba1      	ldr	r3, [pc, #644]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004314:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004320:	4a9d      	ldr	r2, [pc, #628]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004322:	430b      	orrs	r3, r1
 8004324:	6593      	str	r3, [r2, #88]	@ 0x58
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f002 0308 	and.w	r3, r2, #8
 800433c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004340:	2300      	movs	r3, #0
 8004342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004346:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800434a:	460b      	mov	r3, r1
 800434c:	4313      	orrs	r3, r2
 800434e:	d01e      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	2102      	movs	r1, #2
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fe54 	bl	8005014 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004378:	4b87      	ldr	r3, [pc, #540]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004388:	4a83      	ldr	r2, [pc, #524]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800438a:	430b      	orrs	r3, r1
 800438c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f002 0310 	and.w	r3, r2, #16
 800439a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d01e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	3328      	adds	r3, #40	@ 0x28
 80043c2:	2102      	movs	r1, #2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fe25 	bl	8005014 <RCCEx_PLL3_Config>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d002      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043d6:	4b70      	ldr	r3, [pc, #448]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043e6:	4a6c      	ldr	r2, [pc, #432]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043e8:	430b      	orrs	r3, r1
 80043ea:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043fc:	2300      	movs	r3, #0
 80043fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004402:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004406:	460b      	mov	r3, r1
 8004408:	4313      	orrs	r3, r2
 800440a:	d03e      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800440c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004410:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004414:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004418:	d022      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800441a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800441e:	d81b      	bhi.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d003      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004428:	d00b      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800442a:	e015      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004430:	3308      	adds	r3, #8
 8004432:	2100      	movs	r1, #0
 8004434:	4618      	mov	r0, r3
 8004436:	f000 fd3b 	bl	8004eb0 <RCCEx_PLL2_Config>
 800443a:	4603      	mov	r3, r0
 800443c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004440:	e00f      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	3328      	adds	r3, #40	@ 0x28
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fde2 	bl	8005014 <RCCEx_PLL3_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004456:	e004      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004466:	2b00      	cmp	r3, #0
 8004468:	d10b      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800446a:	4b4b      	ldr	r3, [pc, #300]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800447a:	4a47      	ldr	r2, [pc, #284]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800447c:	430b      	orrs	r3, r1
 800447e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004480:	e003      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004486:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800448a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004492:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004496:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004498:	2300      	movs	r3, #0
 800449a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800449c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044a0:	460b      	mov	r3, r1
 80044a2:	4313      	orrs	r3, r2
 80044a4:	d03b      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044b2:	d01f      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044b8:	d818      	bhi.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044be:	d003      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044c4:	d007      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044c6:	e011      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044c8:	4b33      	ldr	r3, [pc, #204]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044cc:	4a32      	ldr	r2, [pc, #200]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80044d4:	e00f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	3328      	adds	r3, #40	@ 0x28
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fd98 	bl	8005014 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044ea:	e004      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044f2:	e000      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10b      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044fe:	4b26      	ldr	r3, [pc, #152]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004510:	430b      	orrs	r3, r1
 8004512:	6553      	str	r3, [r2, #84]	@ 0x54
 8004514:	e003      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800452a:	673b      	str	r3, [r7, #112]	@ 0x70
 800452c:	2300      	movs	r3, #0
 800452e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004530:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d034      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004548:	d007      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800454a:	e011      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454c:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800454e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004550:	4a11      	ldr	r2, [pc, #68]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004556:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004558:	e00e      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800455a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455e:	3308      	adds	r3, #8
 8004560:	2102      	movs	r1, #2
 8004562:	4618      	mov	r0, r3
 8004564:	f000 fca4 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800456e:	e003      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10d      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004584:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458e:	4a02      	ldr	r2, [pc, #8]	@ (8004598 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004590:	430b      	orrs	r3, r1
 8004592:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004594:	e006      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004596:	bf00      	nop
 8004598:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045b2:	2300      	movs	r3, #0
 80045b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045ba:	460b      	mov	r3, r1
 80045bc:	4313      	orrs	r3, r2
 80045be:	d00c      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	3328      	adds	r3, #40	@ 0x28
 80045c6:	2102      	movs	r1, #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f000 fd23 	bl	8005014 <RCCEx_PLL3_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e8:	2300      	movs	r3, #0
 80045ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045f0:	460b      	mov	r3, r1
 80045f2:	4313      	orrs	r3, r2
 80045f4:	d038      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004602:	d018      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004604:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004608:	d811      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800460a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800460e:	d014      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004614:	d80b      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800461a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461e:	d106      	bne.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004620:	4bc3      	ldr	r3, [pc, #780]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004624:	4ac2      	ldr	r2, [pc, #776]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800462a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004634:	e004      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004636:	bf00      	nop
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004648:	4bb9      	ldr	r3, [pc, #740]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004658:	4ab5      	ldr	r2, [pc, #724]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	430b      	orrs	r3, r1
 800465c:	6553      	str	r3, [r2, #84]	@ 0x54
 800465e:	e003      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004664:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004670:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004674:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004676:	2300      	movs	r3, #0
 8004678:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800467a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800467e:	460b      	mov	r3, r1
 8004680:	4313      	orrs	r3, r2
 8004682:	d009      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004684:	4baa      	ldr	r3, [pc, #680]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004688:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004692:	4aa7      	ldr	r2, [pc, #668]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004694:	430b      	orrs	r3, r1
 8004696:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80046a6:	2300      	movs	r3, #0
 80046a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80046aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046ae:	460b      	mov	r3, r1
 80046b0:	4313      	orrs	r3, r2
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046b4:	4b9e      	ldr	r3, [pc, #632]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046c4:	4a9a      	ldr	r2, [pc, #616]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046c6:	430b      	orrs	r3, r1
 80046c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80046d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046d8:	2300      	movs	r3, #0
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046e0:	460b      	mov	r3, r1
 80046e2:	4313      	orrs	r3, r2
 80046e4:	d009      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046e6:	4b92      	ldr	r3, [pc, #584]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046f4:	4a8e      	ldr	r2, [pc, #568]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f6:	430b      	orrs	r3, r1
 80046f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004706:	643b      	str	r3, [r7, #64]	@ 0x40
 8004708:	2300      	movs	r3, #0
 800470a:	647b      	str	r3, [r7, #68]	@ 0x44
 800470c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004716:	4b86      	ldr	r3, [pc, #536]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	4a85      	ldr	r2, [pc, #532]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800471c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004720:	6113      	str	r3, [r2, #16]
 8004722:	4b83      	ldr	r3, [pc, #524]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800472e:	4a80      	ldr	r2, [pc, #512]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004730:	430b      	orrs	r3, r1
 8004732:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004742:	2300      	movs	r3, #0
 8004744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004746:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800474a:	460b      	mov	r3, r1
 800474c:	4313      	orrs	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004750:	4b77      	ldr	r3, [pc, #476]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004754:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800475e:	4a74      	ldr	r2, [pc, #464]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004760:	430b      	orrs	r3, r1
 8004762:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004770:	633b      	str	r3, [r7, #48]	@ 0x30
 8004772:	2300      	movs	r3, #0
 8004774:	637b      	str	r3, [r7, #52]	@ 0x34
 8004776:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d00a      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004780:	4b6b      	ldr	r3, [pc, #428]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004790:	4a67      	ldr	r2, [pc, #412]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	2100      	movs	r1, #0
 80047a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d011      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3308      	adds	r3, #8
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb78 	bl	8004eb0 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	2100      	movs	r1, #0
 80047e0:	6239      	str	r1, [r7, #32]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2101      	movs	r1, #1
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fb58 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	2100      	movs	r1, #0
 8004820:	61b9      	str	r1, [r7, #24]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	61fb      	str	r3, [r7, #28]
 8004828:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	3308      	adds	r3, #8
 8004838:	2102      	movs	r1, #2
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fb38 	bl	8004eb0 <RCCEx_PLL2_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	2100      	movs	r1, #0
 8004860:	6139      	str	r1, [r7, #16]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	3328      	adds	r3, #40	@ 0x28
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fbca 	bl	8005014 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	2100      	movs	r1, #0
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fbaa 	bl	8005014 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	2100      	movs	r1, #0
 80048e0:	6039      	str	r1, [r7, #0]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d011      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f6:	3328      	adds	r3, #40	@ 0x28
 80048f8:	2102      	movs	r1, #2
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb8a 	bl	8005014 <RCCEx_PLL3_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004916:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	e000      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
}
 8004924:	4618      	mov	r0, r3
 8004926:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800492a:	46bd      	mov	sp, r7
 800492c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004930:	58024400 	.word	0x58024400

08004934 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004938:	f7fe fd54 	bl	80033e4 <HAL_RCC_GetHCLKFreq>
 800493c:	4602      	mov	r2, r0
 800493e:	4b06      	ldr	r3, [pc, #24]	@ (8004958 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	4904      	ldr	r1, [pc, #16]	@ (800495c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800494a:	5ccb      	ldrb	r3, [r1, r3]
 800494c:	f003 031f 	and.w	r3, r3, #31
 8004950:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}
 8004958:	58024400 	.word	0x58024400
 800495c:	0800909c 	.word	0x0800909c

08004960 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004960:	b480      	push	{r7}
 8004962:	b089      	sub	sp, #36	@ 0x24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004968:	4ba1      	ldr	r3, [pc, #644]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f003 0303 	and.w	r3, r3, #3
 8004970:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004972:	4b9f      	ldr	r3, [pc, #636]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	0b1b      	lsrs	r3, r3, #12
 8004978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800497c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800497e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	091b      	lsrs	r3, r3, #4
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800498a:	4b99      	ldr	r3, [pc, #612]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498e:	08db      	lsrs	r3, r3, #3
 8004990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8111 	beq.w	8004bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	f000 8083 	beq.w	8004abc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	f200 80a1 	bhi.w	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d056      	beq.n	8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80049ca:	e099      	b.n	8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049cc:	4b88      	ldr	r3, [pc, #544]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d02d      	beq.n	8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049d8:	4b85      	ldr	r3, [pc, #532]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	08db      	lsrs	r3, r3, #3
 80049de:	f003 0303 	and.w	r3, r3, #3
 80049e2:	4a84      	ldr	r2, [pc, #528]	@ (8004bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a02:	4b7b      	ldr	r3, [pc, #492]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a16:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a32:	e087      	b.n	8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	ee07 3a90 	vmov	s15, r3
 8004a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a46:	4b6a      	ldr	r3, [pc, #424]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a4e:	ee07 3a90 	vmov	s15, r3
 8004a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a76:	e065      	b.n	8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	ee07 3a90 	vmov	s15, r3
 8004a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a82:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8a:	4b59      	ldr	r3, [pc, #356]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a9e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aba:	e043      	b.n	8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ace:	4b48      	ldr	r3, [pc, #288]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004afe:	e021      	b.n	8004b44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b12:	4b37      	ldr	r3, [pc, #220]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b26:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b44:	4b2a      	ldr	r3, [pc, #168]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b48:	0a5b      	lsrs	r3, r3, #9
 8004b4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b6a:	ee17 2a90 	vmov	r2, s15
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b72:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b76:	0c1b      	lsrs	r3, r3, #16
 8004b78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b7c:	ee07 3a90 	vmov	s15, r3
 8004b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b98:	ee17 2a90 	vmov	r2, s15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ba0:	4b13      	ldr	r3, [pc, #76]	@ (8004bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba4:	0e1b      	lsrs	r3, r3, #24
 8004ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 2a90 	vmov	r2, s15
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004bce:	e008      	b.n	8004be2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
}
 8004be2:	bf00      	nop
 8004be4:	3724      	adds	r7, #36	@ 0x24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	58024400 	.word	0x58024400
 8004bf4:	03d09000 	.word	0x03d09000
 8004bf8:	46000000 	.word	0x46000000
 8004bfc:	4c742400 	.word	0x4c742400
 8004c00:	4a742400 	.word	0x4a742400
 8004c04:	4af42400 	.word	0x4af42400

08004c08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b089      	sub	sp, #36	@ 0x24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c10:	4ba1      	ldr	r3, [pc, #644]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	f003 0303 	and.w	r3, r3, #3
 8004c18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1e:	0d1b      	lsrs	r3, r3, #20
 8004c20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c26:	4b9c      	ldr	r3, [pc, #624]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c32:	4b99      	ldr	r3, [pc, #612]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c36:	08db      	lsrs	r3, r3, #3
 8004c38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	fb02 f303 	mul.w	r3, r2, r3
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8111 	beq.w	8004e78 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f000 8083 	beq.w	8004d64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	f200 80a1 	bhi.w	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d056      	beq.n	8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c72:	e099      	b.n	8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c74:	4b88      	ldr	r3, [pc, #544]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0320 	and.w	r3, r3, #32
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d02d      	beq.n	8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c80:	4b85      	ldr	r3, [pc, #532]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	4a84      	ldr	r2, [pc, #528]	@ (8004e9c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004caa:	4b7b      	ldr	r3, [pc, #492]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004cda:	e087      	b.n	8004dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	ee07 3a90 	vmov	s15, r3
 8004ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cee:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d1e:	e065      	b.n	8004dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	ee07 3a90 	vmov	s15, r3
 8004d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d32:	4b59      	ldr	r3, [pc, #356]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3a:	ee07 3a90 	vmov	s15, r3
 8004d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d62:	e043      	b.n	8004dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004eac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d76:	4b48      	ldr	r3, [pc, #288]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004da6:	e021      	b.n	8004dec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dba:	4b37      	ldr	r3, [pc, #220]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc2:	ee07 3a90 	vmov	s15, r3
 8004dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dca:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004de6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dec:	4b2a      	ldr	r3, [pc, #168]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e12:	ee17 2a90 	vmov	r2, s15
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	0c1b      	lsrs	r3, r3, #16
 8004e20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e24:	ee07 3a90 	vmov	s15, r3
 8004e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e40:	ee17 2a90 	vmov	r2, s15
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e48:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	0e1b      	lsrs	r3, r3, #24
 8004e4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e52:	ee07 3a90 	vmov	s15, r3
 8004e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e6e:	ee17 2a90 	vmov	r2, s15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e76:	e008      	b.n	8004e8a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	609a      	str	r2, [r3, #8]
}
 8004e8a:	bf00      	nop
 8004e8c:	3724      	adds	r7, #36	@ 0x24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
 8004e9c:	03d09000 	.word	0x03d09000
 8004ea0:	46000000 	.word	0x46000000
 8004ea4:	4c742400 	.word	0x4c742400
 8004ea8:	4a742400 	.word	0x4a742400
 8004eac:	4af42400 	.word	0x4af42400

08004eb0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ebe:	4b53      	ldr	r3, [pc, #332]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	d101      	bne.n	8004ece <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e099      	b.n	8005002 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ece:	4b4f      	ldr	r3, [pc, #316]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a4e      	ldr	r2, [pc, #312]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004ed4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eda:	f7fc fa51 	bl	8001380 <HAL_GetTick>
 8004ede:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ee0:	e008      	b.n	8004ef4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ee2:	f7fc fa4d 	bl	8001380 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e086      	b.n	8005002 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ef4:	4b45      	ldr	r3, [pc, #276]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f0      	bne.n	8004ee2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f00:	4b42      	ldr	r3, [pc, #264]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	031b      	lsls	r3, r3, #12
 8004f0e:	493f      	ldr	r1, [pc, #252]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	025b      	lsls	r3, r3, #9
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	061b      	lsls	r3, r3, #24
 8004f40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f44:	4931      	ldr	r1, [pc, #196]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f4a:	4b30      	ldr	r3, [pc, #192]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	492d      	ldr	r1, [pc, #180]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	f023 0220 	bic.w	r2, r3, #32
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	4928      	ldr	r1, [pc, #160]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f6e:	4b27      	ldr	r3, [pc, #156]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	4a26      	ldr	r2, [pc, #152]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f74:	f023 0310 	bic.w	r3, r3, #16
 8004f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f7a:	4b24      	ldr	r3, [pc, #144]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f7e:	4b24      	ldr	r3, [pc, #144]	@ (8005010 <RCCEx_PLL2_Config+0x160>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	69d2      	ldr	r2, [r2, #28]
 8004f86:	00d2      	lsls	r2, r2, #3
 8004f88:	4920      	ldr	r1, [pc, #128]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f92:	4a1e      	ldr	r2, [pc, #120]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f043 0310 	orr.w	r3, r3, #16
 8004f98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d106      	bne.n	8004fae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	4a19      	ldr	r2, [pc, #100]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fa6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004faa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fac:	e00f      	b.n	8004fce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d106      	bne.n	8004fc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fb4:	4b15      	ldr	r3, [pc, #84]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	4a14      	ldr	r2, [pc, #80]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fc0:	e005      	b.n	8004fce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004fc2:	4b12      	ldr	r3, [pc, #72]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc6:	4a11      	ldr	r2, [pc, #68]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004fce:	4b0f      	ldr	r3, [pc, #60]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004fd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fda:	f7fc f9d1 	bl	8001380 <HAL_GetTick>
 8004fde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fe0:	e008      	b.n	8004ff4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fe2:	f7fc f9cd 	bl	8001380 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e006      	b.n	8005002 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <RCCEx_PLL2_Config+0x15c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400
 8005010:	ffff0007 	.word	0xffff0007

08005014 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005022:	4b53      	ldr	r3, [pc, #332]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b03      	cmp	r3, #3
 800502c:	d101      	bne.n	8005032 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e099      	b.n	8005166 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005032:	4b4f      	ldr	r3, [pc, #316]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a4e      	ldr	r2, [pc, #312]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800503c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc f99f 	bl	8001380 <HAL_GetTick>
 8005042:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005044:	e008      	b.n	8005058 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005046:	f7fc f99b 	bl	8001380 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d901      	bls.n	8005058 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e086      	b.n	8005166 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005058:	4b45      	ldr	r3, [pc, #276]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1f0      	bne.n	8005046 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005064:	4b42      	ldr	r3, [pc, #264]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	051b      	lsls	r3, r3, #20
 8005072:	493f      	ldr	r1, [pc, #252]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	628b      	str	r3, [r1, #40]	@ 0x28
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	3b01      	subs	r3, #1
 800507e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	3b01      	subs	r3, #1
 8005088:	025b      	lsls	r3, r3, #9
 800508a:	b29b      	uxth	r3, r3
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	3b01      	subs	r3, #1
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	061b      	lsls	r3, r3, #24
 80050a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050a8:	4931      	ldr	r1, [pc, #196]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050ae:	4b30      	ldr	r3, [pc, #192]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	492d      	ldr	r1, [pc, #180]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050c0:	4b2b      	ldr	r3, [pc, #172]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	4928      	ldr	r1, [pc, #160]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050d2:	4b27      	ldr	r3, [pc, #156]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d6:	4a26      	ldr	r2, [pc, #152]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050e2:	4b24      	ldr	r3, [pc, #144]	@ (8005174 <RCCEx_PLL3_Config+0x160>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	69d2      	ldr	r2, [r2, #28]
 80050ea:	00d2      	lsls	r2, r2, #3
 80050ec:	4920      	ldr	r1, [pc, #128]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d106      	bne.n	8005112 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005104:	4b1a      	ldr	r3, [pc, #104]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800510a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800510e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005110:	e00f      	b.n	8005132 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005118:	4b15      	ldr	r3, [pc, #84]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800511a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511c:	4a14      	ldr	r2, [pc, #80]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800511e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005124:	e005      	b.n	8005132 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005126:	4b12      	ldr	r3, [pc, #72]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	4a11      	ldr	r2, [pc, #68]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800512c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005130:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005132:	4b0f      	ldr	r3, [pc, #60]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a0e      	ldr	r2, [pc, #56]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 8005138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800513c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800513e:	f7fc f91f 	bl	8001380 <HAL_GetTick>
 8005142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005144:	e008      	b.n	8005158 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005146:	f7fc f91b 	bl	8001380 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005158:	4b05      	ldr	r3, [pc, #20]	@ (8005170 <RCCEx_PLL3_Config+0x15c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005164:	7bfb      	ldrb	r3, [r7, #15]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
 8005174:	ffff0007 	.word	0xffff0007

08005178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e049      	b.n	800521e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d106      	bne.n	80051a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f841 	bl	8005226 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2202      	movs	r2, #2
 80051a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f000 f9e8 	bl	800558c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b01      	cmp	r3, #1
 800524e:	d001      	beq.n	8005254 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e054      	b.n	80052fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68da      	ldr	r2, [r3, #12]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0201 	orr.w	r2, r2, #1
 800526a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a26      	ldr	r2, [pc, #152]	@ (800530c <HAL_TIM_Base_Start_IT+0xd0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d022      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800527e:	d01d      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a22      	ldr	r2, [pc, #136]	@ (8005310 <HAL_TIM_Base_Start_IT+0xd4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d018      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a21      	ldr	r2, [pc, #132]	@ (8005314 <HAL_TIM_Base_Start_IT+0xd8>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d013      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1f      	ldr	r2, [pc, #124]	@ (8005318 <HAL_TIM_Base_Start_IT+0xdc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1e      	ldr	r2, [pc, #120]	@ (800531c <HAL_TIM_Base_Start_IT+0xe0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d009      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_TIM_Base_Start_IT+0xe4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005324 <HAL_TIM_Base_Start_IT+0xe8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d115      	bne.n	80052e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	4b19      	ldr	r3, [pc, #100]	@ (8005328 <HAL_TIM_Base_Start_IT+0xec>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d015      	beq.n	80052fa <HAL_TIM_Base_Start_IT+0xbe>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d011      	beq.n	80052fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e6:	e008      	b.n	80052fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	e000      	b.n	80052fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	40010000 	.word	0x40010000
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	40010400 	.word	0x40010400
 8005320:	40001800 	.word	0x40001800
 8005324:	40014000 	.word	0x40014000
 8005328:	00010007 	.word	0x00010007

0800532c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d020      	beq.n	8005390 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01b      	beq.n	8005390 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f06f 0202 	mvn.w	r2, #2
 8005360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f8e9 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 800537c:	e005      	b.n	800538a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8db 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f8ec 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	d020      	beq.n	80053dc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0204 	mvn.w	r2, #4
 80053ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2202      	movs	r2, #2
 80053b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d003      	beq.n	80053ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f8c3 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 80053c8:	e005      	b.n	80053d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f8b5 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8c6 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d020      	beq.n	8005428 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f003 0308 	and.w	r3, r3, #8
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01b      	beq.n	8005428 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0208 	mvn.w	r2, #8
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2204      	movs	r2, #4
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0303 	and.w	r3, r3, #3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f89d 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f88f 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8a0 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	d020      	beq.n	8005474 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0310 	and.w	r3, r3, #16
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01b      	beq.n	8005474 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0210 	mvn.w	r2, #16
 8005444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2208      	movs	r2, #8
 800544a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f877 	bl	800554e <HAL_TIM_IC_CaptureCallback>
 8005460:	e005      	b.n	800546e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f869 	bl	800553a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f87a 	bl	8005562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00c      	beq.n	8005498 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0201 	mvn.w	r2, #1
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fb fc02 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f913 	bl	80056ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d007      	beq.n	80054ea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80054e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f90b 	bl	8005700 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00c      	beq.n	800550e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f834 	bl	8005576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f003 0320 	and.w	r3, r3, #32
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00c      	beq.n	8005532 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b00      	cmp	r3, #0
 8005520:	d007      	beq.n	8005532 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0220 	mvn.w	r2, #32
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8d3 	bl	80056d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005532:	bf00      	nop
 8005534:	3710      	adds	r7, #16
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}

0800553a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800553a:	b480      	push	{r7}
 800553c:	b083      	sub	sp, #12
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005542:	bf00      	nop
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005562:	b480      	push	{r7}
 8005564:	b083      	sub	sp, #12
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800556a:	bf00      	nop
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800557e:	bf00      	nop
 8005580:	370c      	adds	r7, #12
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a46      	ldr	r2, [pc, #280]	@ (80056b8 <TIM_Base_SetConfig+0x12c>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d013      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055aa:	d00f      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a43      	ldr	r2, [pc, #268]	@ (80056bc <TIM_Base_SetConfig+0x130>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00b      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a42      	ldr	r2, [pc, #264]	@ (80056c0 <TIM_Base_SetConfig+0x134>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d007      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a41      	ldr	r2, [pc, #260]	@ (80056c4 <TIM_Base_SetConfig+0x138>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d003      	beq.n	80055cc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a40      	ldr	r2, [pc, #256]	@ (80056c8 <TIM_Base_SetConfig+0x13c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d108      	bne.n	80055de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <TIM_Base_SetConfig+0x12c>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01f      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ec:	d01b      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a32      	ldr	r2, [pc, #200]	@ (80056bc <TIM_Base_SetConfig+0x130>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d017      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a31      	ldr	r2, [pc, #196]	@ (80056c0 <TIM_Base_SetConfig+0x134>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a30      	ldr	r2, [pc, #192]	@ (80056c4 <TIM_Base_SetConfig+0x138>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00f      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2f      	ldr	r2, [pc, #188]	@ (80056c8 <TIM_Base_SetConfig+0x13c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00b      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2e      	ldr	r2, [pc, #184]	@ (80056cc <TIM_Base_SetConfig+0x140>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2d      	ldr	r2, [pc, #180]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2c      	ldr	r2, [pc, #176]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d108      	bne.n	8005638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689a      	ldr	r2, [r3, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <TIM_Base_SetConfig+0x12c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d00f      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a18      	ldr	r2, [pc, #96]	@ (80056c8 <TIM_Base_SetConfig+0x13c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d00b      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a17      	ldr	r2, [pc, #92]	@ (80056cc <TIM_Base_SetConfig+0x140>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d007      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	@ (80056d0 <TIM_Base_SetConfig+0x144>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_Base_SetConfig+0xf8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a15      	ldr	r2, [pc, #84]	@ (80056d4 <TIM_Base_SetConfig+0x148>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d105      	bne.n	80056aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f023 0201 	bic.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	611a      	str	r2, [r3, #16]
  }
}
 80056aa:	bf00      	nop
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40010400 	.word	0x40010400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800

080056d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e042      	b.n	80057ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7fb fbb3 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2224      	movs	r2, #36	@ 0x24
 8005742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0201 	bic.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fd90 	bl	8006284 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 f825 	bl	80057b4 <UART_SetConfig>
 800576a:	4603      	mov	r3, r0
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01b      	b.n	80057ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005782:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005792:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fe0f 	bl	80063c8 <UART_CheckIdleState>
 80057aa:	4603      	mov	r3, r0
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3708      	adds	r7, #8
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057b8:	b092      	sub	sp, #72	@ 0x48
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057be:	2300      	movs	r3, #0
 80057c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	431a      	orrs	r2, r3
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	69db      	ldr	r3, [r3, #28]
 80057d8:	4313      	orrs	r3, r2
 80057da:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4bbe      	ldr	r3, [pc, #760]	@ (8005adc <UART_SetConfig+0x328>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	6812      	ldr	r2, [r2, #0]
 80057ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057ec:	430b      	orrs	r3, r1
 80057ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4ab3      	ldr	r2, [pc, #716]	@ (8005ae0 <UART_SetConfig+0x32c>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d004      	beq.n	8005820 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800581c:	4313      	orrs	r3, r2
 800581e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689a      	ldr	r2, [r3, #8]
 8005826:	4baf      	ldr	r3, [pc, #700]	@ (8005ae4 <UART_SetConfig+0x330>)
 8005828:	4013      	ands	r3, r2
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005830:	430b      	orrs	r3, r1
 8005832:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800583a:	f023 010f 	bic.w	r1, r3, #15
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	430a      	orrs	r2, r1
 8005848:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4aa6      	ldr	r2, [pc, #664]	@ (8005ae8 <UART_SetConfig+0x334>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d177      	bne.n	8005944 <UART_SetConfig+0x190>
 8005854:	4ba5      	ldr	r3, [pc, #660]	@ (8005aec <UART_SetConfig+0x338>)
 8005856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800585c:	2b28      	cmp	r3, #40	@ 0x28
 800585e:	d86d      	bhi.n	800593c <UART_SetConfig+0x188>
 8005860:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <UART_SetConfig+0xb4>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800590d 	.word	0x0800590d
 800586c:	0800593d 	.word	0x0800593d
 8005870:	0800593d 	.word	0x0800593d
 8005874:	0800593d 	.word	0x0800593d
 8005878:	0800593d 	.word	0x0800593d
 800587c:	0800593d 	.word	0x0800593d
 8005880:	0800593d 	.word	0x0800593d
 8005884:	0800593d 	.word	0x0800593d
 8005888:	08005915 	.word	0x08005915
 800588c:	0800593d 	.word	0x0800593d
 8005890:	0800593d 	.word	0x0800593d
 8005894:	0800593d 	.word	0x0800593d
 8005898:	0800593d 	.word	0x0800593d
 800589c:	0800593d 	.word	0x0800593d
 80058a0:	0800593d 	.word	0x0800593d
 80058a4:	0800593d 	.word	0x0800593d
 80058a8:	0800591d 	.word	0x0800591d
 80058ac:	0800593d 	.word	0x0800593d
 80058b0:	0800593d 	.word	0x0800593d
 80058b4:	0800593d 	.word	0x0800593d
 80058b8:	0800593d 	.word	0x0800593d
 80058bc:	0800593d 	.word	0x0800593d
 80058c0:	0800593d 	.word	0x0800593d
 80058c4:	0800593d 	.word	0x0800593d
 80058c8:	08005925 	.word	0x08005925
 80058cc:	0800593d 	.word	0x0800593d
 80058d0:	0800593d 	.word	0x0800593d
 80058d4:	0800593d 	.word	0x0800593d
 80058d8:	0800593d 	.word	0x0800593d
 80058dc:	0800593d 	.word	0x0800593d
 80058e0:	0800593d 	.word	0x0800593d
 80058e4:	0800593d 	.word	0x0800593d
 80058e8:	0800592d 	.word	0x0800592d
 80058ec:	0800593d 	.word	0x0800593d
 80058f0:	0800593d 	.word	0x0800593d
 80058f4:	0800593d 	.word	0x0800593d
 80058f8:	0800593d 	.word	0x0800593d
 80058fc:	0800593d 	.word	0x0800593d
 8005900:	0800593d 	.word	0x0800593d
 8005904:	0800593d 	.word	0x0800593d
 8005908:	08005935 	.word	0x08005935
 800590c:	2301      	movs	r3, #1
 800590e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005912:	e222      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e21e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005922:	e21a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e216      	b.n	8005d5a <UART_SetConfig+0x5a6>
 800592c:	2320      	movs	r3, #32
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e212      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005934:	2340      	movs	r3, #64	@ 0x40
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e20e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e20a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a69      	ldr	r2, [pc, #420]	@ (8005af0 <UART_SetConfig+0x33c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d130      	bne.n	80059b0 <UART_SetConfig+0x1fc>
 800594e:	4b67      	ldr	r3, [pc, #412]	@ (8005aec <UART_SetConfig+0x338>)
 8005950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	2b05      	cmp	r3, #5
 8005958:	d826      	bhi.n	80059a8 <UART_SetConfig+0x1f4>
 800595a:	a201      	add	r2, pc, #4	@ (adr r2, 8005960 <UART_SetConfig+0x1ac>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005979 	.word	0x08005979
 8005964:	08005981 	.word	0x08005981
 8005968:	08005989 	.word	0x08005989
 800596c:	08005991 	.word	0x08005991
 8005970:	08005999 	.word	0x08005999
 8005974:	080059a1 	.word	0x080059a1
 8005978:	2300      	movs	r3, #0
 800597a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597e:	e1ec      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005980:	2304      	movs	r3, #4
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e1e8      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005988:	2308      	movs	r3, #8
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e1e4      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005990:	2310      	movs	r3, #16
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e1e0      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005998:	2320      	movs	r3, #32
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e1dc      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059a0:	2340      	movs	r3, #64	@ 0x40
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e1d8      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e1d4      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a4f      	ldr	r2, [pc, #316]	@ (8005af4 <UART_SetConfig+0x340>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d130      	bne.n	8005a1c <UART_SetConfig+0x268>
 80059ba:	4b4c      	ldr	r3, [pc, #304]	@ (8005aec <UART_SetConfig+0x338>)
 80059bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	d826      	bhi.n	8005a14 <UART_SetConfig+0x260>
 80059c6:	a201      	add	r2, pc, #4	@ (adr r2, 80059cc <UART_SetConfig+0x218>)
 80059c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059cc:	080059e5 	.word	0x080059e5
 80059d0:	080059ed 	.word	0x080059ed
 80059d4:	080059f5 	.word	0x080059f5
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	08005a05 	.word	0x08005a05
 80059e0:	08005a0d 	.word	0x08005a0d
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ea:	e1b6      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059ec:	2304      	movs	r3, #4
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e1b2      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059f4:	2308      	movs	r3, #8
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e1ae      	b.n	8005d5a <UART_SetConfig+0x5a6>
 80059fc:	2310      	movs	r3, #16
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e1aa      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a04:	2320      	movs	r3, #32
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e1a6      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a0c:	2340      	movs	r3, #64	@ 0x40
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e1a2      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a14:	2380      	movs	r3, #128	@ 0x80
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e19e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a35      	ldr	r2, [pc, #212]	@ (8005af8 <UART_SetConfig+0x344>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d130      	bne.n	8005a88 <UART_SetConfig+0x2d4>
 8005a26:	4b31      	ldr	r3, [pc, #196]	@ (8005aec <UART_SetConfig+0x338>)
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d826      	bhi.n	8005a80 <UART_SetConfig+0x2cc>
 8005a32:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <UART_SetConfig+0x284>)
 8005a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a38:	08005a51 	.word	0x08005a51
 8005a3c:	08005a59 	.word	0x08005a59
 8005a40:	08005a61 	.word	0x08005a61
 8005a44:	08005a69 	.word	0x08005a69
 8005a48:	08005a71 	.word	0x08005a71
 8005a4c:	08005a79 	.word	0x08005a79
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a56:	e180      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a58:	2304      	movs	r3, #4
 8005a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a5e:	e17c      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a60:	2308      	movs	r3, #8
 8005a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a66:	e178      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a68:	2310      	movs	r3, #16
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e174      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a70:	2320      	movs	r3, #32
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e170      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a78:	2340      	movs	r3, #64	@ 0x40
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e16c      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a80:	2380      	movs	r3, #128	@ 0x80
 8005a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a86:	e168      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005afc <UART_SetConfig+0x348>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d142      	bne.n	8005b18 <UART_SetConfig+0x364>
 8005a92:	4b16      	ldr	r3, [pc, #88]	@ (8005aec <UART_SetConfig+0x338>)
 8005a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b05      	cmp	r3, #5
 8005a9c:	d838      	bhi.n	8005b10 <UART_SetConfig+0x35c>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x2f0>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005abd 	.word	0x08005abd
 8005aa8:	08005ac5 	.word	0x08005ac5
 8005aac:	08005acd 	.word	0x08005acd
 8005ab0:	08005ad5 	.word	0x08005ad5
 8005ab4:	08005b01 	.word	0x08005b01
 8005ab8:	08005b09 	.word	0x08005b09
 8005abc:	2300      	movs	r3, #0
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e14a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005ac4:	2304      	movs	r3, #4
 8005ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aca:	e146      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005acc:	2308      	movs	r3, #8
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e142      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e13e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005adc:	cfff69f3 	.word	0xcfff69f3
 8005ae0:	58000c00 	.word	0x58000c00
 8005ae4:	11fff4ff 	.word	0x11fff4ff
 8005ae8:	40011000 	.word	0x40011000
 8005aec:	58024400 	.word	0x58024400
 8005af0:	40004400 	.word	0x40004400
 8005af4:	40004800 	.word	0x40004800
 8005af8:	40004c00 	.word	0x40004c00
 8005afc:	40005000 	.word	0x40005000
 8005b00:	2320      	movs	r3, #32
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e128      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005b08:	2340      	movs	r3, #64	@ 0x40
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	e124      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005b10:	2380      	movs	r3, #128	@ 0x80
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b16:	e120      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4acb      	ldr	r2, [pc, #812]	@ (8005e4c <UART_SetConfig+0x698>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d176      	bne.n	8005c10 <UART_SetConfig+0x45c>
 8005b22:	4bcb      	ldr	r3, [pc, #812]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b2a:	2b28      	cmp	r3, #40	@ 0x28
 8005b2c:	d86c      	bhi.n	8005c08 <UART_SetConfig+0x454>
 8005b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b34 <UART_SetConfig+0x380>)
 8005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b34:	08005bd9 	.word	0x08005bd9
 8005b38:	08005c09 	.word	0x08005c09
 8005b3c:	08005c09 	.word	0x08005c09
 8005b40:	08005c09 	.word	0x08005c09
 8005b44:	08005c09 	.word	0x08005c09
 8005b48:	08005c09 	.word	0x08005c09
 8005b4c:	08005c09 	.word	0x08005c09
 8005b50:	08005c09 	.word	0x08005c09
 8005b54:	08005be1 	.word	0x08005be1
 8005b58:	08005c09 	.word	0x08005c09
 8005b5c:	08005c09 	.word	0x08005c09
 8005b60:	08005c09 	.word	0x08005c09
 8005b64:	08005c09 	.word	0x08005c09
 8005b68:	08005c09 	.word	0x08005c09
 8005b6c:	08005c09 	.word	0x08005c09
 8005b70:	08005c09 	.word	0x08005c09
 8005b74:	08005be9 	.word	0x08005be9
 8005b78:	08005c09 	.word	0x08005c09
 8005b7c:	08005c09 	.word	0x08005c09
 8005b80:	08005c09 	.word	0x08005c09
 8005b84:	08005c09 	.word	0x08005c09
 8005b88:	08005c09 	.word	0x08005c09
 8005b8c:	08005c09 	.word	0x08005c09
 8005b90:	08005c09 	.word	0x08005c09
 8005b94:	08005bf1 	.word	0x08005bf1
 8005b98:	08005c09 	.word	0x08005c09
 8005b9c:	08005c09 	.word	0x08005c09
 8005ba0:	08005c09 	.word	0x08005c09
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005c09 	.word	0x08005c09
 8005bac:	08005c09 	.word	0x08005c09
 8005bb0:	08005c09 	.word	0x08005c09
 8005bb4:	08005bf9 	.word	0x08005bf9
 8005bb8:	08005c09 	.word	0x08005c09
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005c09 	.word	0x08005c09
 8005bc4:	08005c09 	.word	0x08005c09
 8005bc8:	08005c09 	.word	0x08005c09
 8005bcc:	08005c09 	.word	0x08005c09
 8005bd0:	08005c09 	.word	0x08005c09
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	2301      	movs	r3, #1
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e0bc      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e0b8      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e0b4      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e0b0      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e0ac      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c00:	2340      	movs	r3, #64	@ 0x40
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e0a8      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c08:	2380      	movs	r3, #128	@ 0x80
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0e:	e0a4      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a8f      	ldr	r2, [pc, #572]	@ (8005e54 <UART_SetConfig+0x6a0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d130      	bne.n	8005c7c <UART_SetConfig+0x4c8>
 8005c1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d826      	bhi.n	8005c74 <UART_SetConfig+0x4c0>
 8005c26:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <UART_SetConfig+0x478>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	08005c55 	.word	0x08005c55
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c6d 	.word	0x08005c6d
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e086      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e082      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e07e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c62:	e07a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6a:	e076      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c6c:	2340      	movs	r3, #64	@ 0x40
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c72:	e072      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c74:	2380      	movs	r3, #128	@ 0x80
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7a:	e06e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a75      	ldr	r2, [pc, #468]	@ (8005e58 <UART_SetConfig+0x6a4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d130      	bne.n	8005ce8 <UART_SetConfig+0x534>
 8005c86:	4b72      	ldr	r3, [pc, #456]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d826      	bhi.n	8005ce0 <UART_SetConfig+0x52c>
 8005c92:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <UART_SetConfig+0x4e4>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e050      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e04c      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc6:	e048      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cce:	e044      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd6:	e040      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005cd8:	2340      	movs	r3, #64	@ 0x40
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cde:	e03c      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce6:	e038      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a5b      	ldr	r2, [pc, #364]	@ (8005e5c <UART_SetConfig+0x6a8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d130      	bne.n	8005d54 <UART_SetConfig+0x5a0>
 8005cf2:	4b57      	ldr	r3, [pc, #348]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d826      	bhi.n	8005d4c <UART_SetConfig+0x598>
 8005cfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005d04 <UART_SetConfig+0x550>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d45 	.word	0x08005d45
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e01a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e016      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d32:	e012      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3a:	e00e      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d3c:	2320      	movs	r3, #32
 8005d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d42:	e00a      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d44:	2340      	movs	r3, #64	@ 0x40
 8005d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4a:	e006      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d4c:	2380      	movs	r3, #128	@ 0x80
 8005d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d52:	e002      	b.n	8005d5a <UART_SetConfig+0x5a6>
 8005d54:	2380      	movs	r3, #128	@ 0x80
 8005d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8005e5c <UART_SetConfig+0x6a8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	f040 80f8 	bne.w	8005f56 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	dc46      	bgt.n	8005dfc <UART_SetConfig+0x648>
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	f2c0 8082 	blt.w	8005e78 <UART_SetConfig+0x6c4>
 8005d74:	3b02      	subs	r3, #2
 8005d76:	2b1e      	cmp	r3, #30
 8005d78:	d87e      	bhi.n	8005e78 <UART_SetConfig+0x6c4>
 8005d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d80 <UART_SetConfig+0x5cc>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005e03 	.word	0x08005e03
 8005d84:	08005e79 	.word	0x08005e79
 8005d88:	08005e0b 	.word	0x08005e0b
 8005d8c:	08005e79 	.word	0x08005e79
 8005d90:	08005e79 	.word	0x08005e79
 8005d94:	08005e79 	.word	0x08005e79
 8005d98:	08005e1b 	.word	0x08005e1b
 8005d9c:	08005e79 	.word	0x08005e79
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005e79 	.word	0x08005e79
 8005da8:	08005e79 	.word	0x08005e79
 8005dac:	08005e79 	.word	0x08005e79
 8005db0:	08005e79 	.word	0x08005e79
 8005db4:	08005e79 	.word	0x08005e79
 8005db8:	08005e2b 	.word	0x08005e2b
 8005dbc:	08005e79 	.word	0x08005e79
 8005dc0:	08005e79 	.word	0x08005e79
 8005dc4:	08005e79 	.word	0x08005e79
 8005dc8:	08005e79 	.word	0x08005e79
 8005dcc:	08005e79 	.word	0x08005e79
 8005dd0:	08005e79 	.word	0x08005e79
 8005dd4:	08005e79 	.word	0x08005e79
 8005dd8:	08005e79 	.word	0x08005e79
 8005ddc:	08005e79 	.word	0x08005e79
 8005de0:	08005e79 	.word	0x08005e79
 8005de4:	08005e79 	.word	0x08005e79
 8005de8:	08005e79 	.word	0x08005e79
 8005dec:	08005e79 	.word	0x08005e79
 8005df0:	08005e79 	.word	0x08005e79
 8005df4:	08005e79 	.word	0x08005e79
 8005df8:	08005e6b 	.word	0x08005e6b
 8005dfc:	2b40      	cmp	r3, #64	@ 0x40
 8005dfe:	d037      	beq.n	8005e70 <UART_SetConfig+0x6bc>
 8005e00:	e03a      	b.n	8005e78 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005e02:	f7fe fd97 	bl	8004934 <HAL_RCCEx_GetD3PCLK1Freq>
 8005e06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e08:	e03c      	b.n	8005e84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fe fda6 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e18:	e034      	b.n	8005e84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e1a:	f107 0318 	add.w	r3, r7, #24
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fef2 	bl	8004c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e28:	e02c      	b.n	8005e84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2a:	4b09      	ldr	r3, [pc, #36]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d016      	beq.n	8005e64 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e36:	4b06      	ldr	r3, [pc, #24]	@ (8005e50 <UART_SetConfig+0x69c>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	08db      	lsrs	r3, r3, #3
 8005e3c:	f003 0303 	and.w	r3, r3, #3
 8005e40:	4a07      	ldr	r2, [pc, #28]	@ (8005e60 <UART_SetConfig+0x6ac>)
 8005e42:	fa22 f303 	lsr.w	r3, r2, r3
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e48:	e01c      	b.n	8005e84 <UART_SetConfig+0x6d0>
 8005e4a:	bf00      	nop
 8005e4c:	40011400 	.word	0x40011400
 8005e50:	58024400 	.word	0x58024400
 8005e54:	40007800 	.word	0x40007800
 8005e58:	40007c00 	.word	0x40007c00
 8005e5c:	58000c00 	.word	0x58000c00
 8005e60:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e64:	4b9d      	ldr	r3, [pc, #628]	@ (80060dc <UART_SetConfig+0x928>)
 8005e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e68:	e00c      	b.n	8005e84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e6a:	4b9d      	ldr	r3, [pc, #628]	@ (80060e0 <UART_SetConfig+0x92c>)
 8005e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e6e:	e009      	b.n	8005e84 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e76:	e005      	b.n	8005e84 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 81de 	beq.w	8006248 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e90:	4a94      	ldr	r2, [pc, #592]	@ (80060e4 <UART_SetConfig+0x930>)
 8005e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e96:	461a      	mov	r2, r3
 8005e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d305      	bcc.n	8005ebc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d903      	bls.n	8005ec4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ec2:	e1c1      	b.n	8006248 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ec4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	60fa      	str	r2, [r7, #12]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	4a84      	ldr	r2, [pc, #528]	@ (80060e4 <UART_SetConfig+0x930>)
 8005ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2200      	movs	r2, #0
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	607a      	str	r2, [r7, #4]
 8005ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ee6:	f7fa f9fb 	bl	80002e0 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	020b      	lsls	r3, r1, #8
 8005efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f00:	0202      	lsls	r2, r0, #8
 8005f02:	6979      	ldr	r1, [r7, #20]
 8005f04:	6849      	ldr	r1, [r1, #4]
 8005f06:	0849      	lsrs	r1, r1, #1
 8005f08:	2000      	movs	r0, #0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	4605      	mov	r5, r0
 8005f0e:	eb12 0804 	adds.w	r8, r2, r4
 8005f12:	eb43 0905 	adc.w	r9, r3, r5
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	469a      	mov	sl, r3
 8005f1e:	4693      	mov	fp, r2
 8005f20:	4652      	mov	r2, sl
 8005f22:	465b      	mov	r3, fp
 8005f24:	4640      	mov	r0, r8
 8005f26:	4649      	mov	r1, r9
 8005f28:	f7fa f9da 	bl	80002e0 <__aeabi_uldivmod>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4613      	mov	r3, r2
 8005f32:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f3a:	d308      	bcc.n	8005f4e <UART_SetConfig+0x79a>
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f42:	d204      	bcs.n	8005f4e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f4a:	60da      	str	r2, [r3, #12]
 8005f4c:	e17c      	b.n	8006248 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f54:	e178      	b.n	8006248 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	69db      	ldr	r3, [r3, #28]
 8005f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f5e:	f040 80c5 	bne.w	80060ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	dc48      	bgt.n	8005ffc <UART_SetConfig+0x848>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	db7b      	blt.n	8006066 <UART_SetConfig+0x8b2>
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d879      	bhi.n	8006066 <UART_SetConfig+0x8b2>
 8005f72:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <UART_SetConfig+0x7c4>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08006003 	.word	0x08006003
 8005f7c:	0800600b 	.word	0x0800600b
 8005f80:	08006067 	.word	0x08006067
 8005f84:	08006067 	.word	0x08006067
 8005f88:	08006013 	.word	0x08006013
 8005f8c:	08006067 	.word	0x08006067
 8005f90:	08006067 	.word	0x08006067
 8005f94:	08006067 	.word	0x08006067
 8005f98:	08006023 	.word	0x08006023
 8005f9c:	08006067 	.word	0x08006067
 8005fa0:	08006067 	.word	0x08006067
 8005fa4:	08006067 	.word	0x08006067
 8005fa8:	08006067 	.word	0x08006067
 8005fac:	08006067 	.word	0x08006067
 8005fb0:	08006067 	.word	0x08006067
 8005fb4:	08006067 	.word	0x08006067
 8005fb8:	08006033 	.word	0x08006033
 8005fbc:	08006067 	.word	0x08006067
 8005fc0:	08006067 	.word	0x08006067
 8005fc4:	08006067 	.word	0x08006067
 8005fc8:	08006067 	.word	0x08006067
 8005fcc:	08006067 	.word	0x08006067
 8005fd0:	08006067 	.word	0x08006067
 8005fd4:	08006067 	.word	0x08006067
 8005fd8:	08006067 	.word	0x08006067
 8005fdc:	08006067 	.word	0x08006067
 8005fe0:	08006067 	.word	0x08006067
 8005fe4:	08006067 	.word	0x08006067
 8005fe8:	08006067 	.word	0x08006067
 8005fec:	08006067 	.word	0x08006067
 8005ff0:	08006067 	.word	0x08006067
 8005ff4:	08006067 	.word	0x08006067
 8005ff8:	08006059 	.word	0x08006059
 8005ffc:	2b40      	cmp	r3, #64	@ 0x40
 8005ffe:	d02e      	beq.n	800605e <UART_SetConfig+0x8aa>
 8006000:	e031      	b.n	8006066 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006002:	f7fd fa1f 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8006006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006008:	e033      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600a:	f7fd fa31 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 800600e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006010:	e02f      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe fca2 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800601c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006020:	e027      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006022:	f107 0318 	add.w	r3, r7, #24
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fdee 	bl	8004c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006030:	e01f      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006032:	4b2d      	ldr	r3, [pc, #180]	@ (80060e8 <UART_SetConfig+0x934>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800603e:	4b2a      	ldr	r3, [pc, #168]	@ (80060e8 <UART_SetConfig+0x934>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	08db      	lsrs	r3, r3, #3
 8006044:	f003 0303 	and.w	r3, r3, #3
 8006048:	4a24      	ldr	r2, [pc, #144]	@ (80060dc <UART_SetConfig+0x928>)
 800604a:	fa22 f303 	lsr.w	r3, r2, r3
 800604e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006050:	e00f      	b.n	8006072 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006052:	4b22      	ldr	r3, [pc, #136]	@ (80060dc <UART_SetConfig+0x928>)
 8006054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006056:	e00c      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006058:	4b21      	ldr	r3, [pc, #132]	@ (80060e0 <UART_SetConfig+0x92c>)
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800605c:	e009      	b.n	8006072 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006064:	e005      	b.n	8006072 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 80e7 	beq.w	8006248 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800607e:	4a19      	ldr	r2, [pc, #100]	@ (80060e4 <UART_SetConfig+0x930>)
 8006080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006084:	461a      	mov	r2, r3
 8006086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006088:	fbb3 f3f2 	udiv	r3, r3, r2
 800608c:	005a      	lsls	r2, r3, #1
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	085b      	lsrs	r3, r3, #1
 8006094:	441a      	add	r2, r3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	fbb2 f3f3 	udiv	r3, r2, r3
 800609e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d916      	bls.n	80060d4 <UART_SetConfig+0x920>
 80060a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060ac:	d212      	bcs.n	80060d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	f023 030f 	bic.w	r3, r3, #15
 80060b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	085b      	lsrs	r3, r3, #1
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060c6:	4313      	orrs	r3, r2
 80060c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80060d0:	60da      	str	r2, [r3, #12]
 80060d2:	e0b9      	b.n	8006248 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060da:	e0b5      	b.n	8006248 <UART_SetConfig+0xa94>
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	003d0900 	.word	0x003d0900
 80060e4:	080090ac 	.word	0x080090ac
 80060e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ec:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060f0:	2b20      	cmp	r3, #32
 80060f2:	dc49      	bgt.n	8006188 <UART_SetConfig+0x9d4>
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	db7c      	blt.n	80061f2 <UART_SetConfig+0xa3e>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d87a      	bhi.n	80061f2 <UART_SetConfig+0xa3e>
 80060fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006104 <UART_SetConfig+0x950>)
 80060fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006102:	bf00      	nop
 8006104:	0800618f 	.word	0x0800618f
 8006108:	08006197 	.word	0x08006197
 800610c:	080061f3 	.word	0x080061f3
 8006110:	080061f3 	.word	0x080061f3
 8006114:	0800619f 	.word	0x0800619f
 8006118:	080061f3 	.word	0x080061f3
 800611c:	080061f3 	.word	0x080061f3
 8006120:	080061f3 	.word	0x080061f3
 8006124:	080061af 	.word	0x080061af
 8006128:	080061f3 	.word	0x080061f3
 800612c:	080061f3 	.word	0x080061f3
 8006130:	080061f3 	.word	0x080061f3
 8006134:	080061f3 	.word	0x080061f3
 8006138:	080061f3 	.word	0x080061f3
 800613c:	080061f3 	.word	0x080061f3
 8006140:	080061f3 	.word	0x080061f3
 8006144:	080061bf 	.word	0x080061bf
 8006148:	080061f3 	.word	0x080061f3
 800614c:	080061f3 	.word	0x080061f3
 8006150:	080061f3 	.word	0x080061f3
 8006154:	080061f3 	.word	0x080061f3
 8006158:	080061f3 	.word	0x080061f3
 800615c:	080061f3 	.word	0x080061f3
 8006160:	080061f3 	.word	0x080061f3
 8006164:	080061f3 	.word	0x080061f3
 8006168:	080061f3 	.word	0x080061f3
 800616c:	080061f3 	.word	0x080061f3
 8006170:	080061f3 	.word	0x080061f3
 8006174:	080061f3 	.word	0x080061f3
 8006178:	080061f3 	.word	0x080061f3
 800617c:	080061f3 	.word	0x080061f3
 8006180:	080061f3 	.word	0x080061f3
 8006184:	080061e5 	.word	0x080061e5
 8006188:	2b40      	cmp	r3, #64	@ 0x40
 800618a:	d02e      	beq.n	80061ea <UART_SetConfig+0xa36>
 800618c:	e031      	b.n	80061f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618e:	f7fd f959 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8006192:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006194:	e033      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006196:	f7fd f96b 	bl	8003470 <HAL_RCC_GetPCLK2Freq>
 800619a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800619c:	e02f      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800619e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7fe fbdc 	bl	8004960 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ac:	e027      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061ae:	f107 0318 	add.w	r3, r7, #24
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fe fd28 	bl	8004c08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e01f      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061be:	4b2d      	ldr	r3, [pc, #180]	@ (8006274 <UART_SetConfig+0xac0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0320 	and.w	r3, r3, #32
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061ca:	4b2a      	ldr	r3, [pc, #168]	@ (8006274 <UART_SetConfig+0xac0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	08db      	lsrs	r3, r3, #3
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	4a28      	ldr	r2, [pc, #160]	@ (8006278 <UART_SetConfig+0xac4>)
 80061d6:	fa22 f303 	lsr.w	r3, r2, r3
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061dc:	e00f      	b.n	80061fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061de:	4b26      	ldr	r3, [pc, #152]	@ (8006278 <UART_SetConfig+0xac4>)
 80061e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e2:	e00c      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061e4:	4b25      	ldr	r3, [pc, #148]	@ (800627c <UART_SetConfig+0xac8>)
 80061e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e8:	e009      	b.n	80061fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f0:	e005      	b.n	80061fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061fc:	bf00      	nop
    }

    if (pclk != 0U)
 80061fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006200:	2b00      	cmp	r3, #0
 8006202:	d021      	beq.n	8006248 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	4a1d      	ldr	r2, [pc, #116]	@ (8006280 <UART_SetConfig+0xacc>)
 800620a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800620e:	461a      	mov	r2, r3
 8006210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006212:	fbb3 f2f2 	udiv	r2, r3, r2
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	441a      	add	r2, r3
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	fbb2 f3f3 	udiv	r3, r2, r3
 8006226:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d909      	bls.n	8006242 <UART_SetConfig+0xa8e>
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006234:	d205      	bcs.n	8006242 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006238:	b29a      	uxth	r2, r3
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
 8006240:	e002      	b.n	8006248 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2201      	movs	r2, #1
 800624c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2201      	movs	r2, #1
 8006254:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	2200      	movs	r2, #0
 800625c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	2200      	movs	r2, #0
 8006262:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006264:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006268:	4618      	mov	r0, r3
 800626a:	3748      	adds	r7, #72	@ 0x48
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	58024400 	.word	0x58024400
 8006278:	03d09000 	.word	0x03d09000
 800627c:	003d0900 	.word	0x003d0900
 8006280:	080090ac 	.word	0x080090ac

08006284 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	f003 0308 	and.w	r3, r3, #8
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00a      	beq.n	80062ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f6:	f003 0304 	and.w	r3, r3, #4
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	430a      	orrs	r2, r1
 8006312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	f003 0310 	and.w	r3, r3, #16
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	430a      	orrs	r2, r1
 8006334:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	430a      	orrs	r2, r1
 8006356:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01a      	beq.n	800639a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006382:	d10a      	bne.n	800639a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00a      	beq.n	80063bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	430a      	orrs	r2, r1
 80063ba:	605a      	str	r2, [r3, #4]
  }
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b098      	sub	sp, #96	@ 0x60
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063d8:	f7fa ffd2 	bl	8001380 <HAL_GetTick>
 80063dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0308 	and.w	r3, r3, #8
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	d12f      	bne.n	800644c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f4:	2200      	movs	r2, #0
 80063f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f88e 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d022      	beq.n	800644c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006414:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800641a:	653b      	str	r3, [r7, #80]	@ 0x50
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006424:	647b      	str	r3, [r7, #68]	@ 0x44
 8006426:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800642a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2220      	movs	r2, #32
 800643c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e063      	b.n	8006514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 0304 	and.w	r3, r3, #4
 8006456:	2b04      	cmp	r3, #4
 8006458:	d149      	bne.n	80064ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800645a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006462:	2200      	movs	r2, #0
 8006464:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f857 	bl	800651c <UART_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d03c      	beq.n	80064ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	623b      	str	r3, [r7, #32]
   return(result);
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006492:	633b      	str	r3, [r7, #48]	@ 0x30
 8006494:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e6      	bne.n	8006474 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	3308      	adds	r3, #8
 80064ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	e853 3f00 	ldrex	r3, [r3]
 80064b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	3308      	adds	r3, #8
 80064c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064c6:	61fa      	str	r2, [r7, #28]
 80064c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ca:	69b9      	ldr	r1, [r7, #24]
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	e841 2300 	strex	r3, r2, [r1]
 80064d2:	617b      	str	r3, [r7, #20]
   return(result);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1e5      	bne.n	80064a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e012      	b.n	8006514 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3758      	adds	r7, #88	@ 0x58
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	4613      	mov	r3, r2
 800652a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800652c:	e04f      	b.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006534:	d04b      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006536:	f7fa ff23 	bl	8001380 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	429a      	cmp	r2, r3
 8006544:	d302      	bcc.n	800654c <UART_WaitOnFlagUntilTimeout+0x30>
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e04e      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 0304 	and.w	r3, r3, #4
 800655a:	2b00      	cmp	r3, #0
 800655c:	d037      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b80      	cmp	r3, #128	@ 0x80
 8006562:	d034      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b40      	cmp	r3, #64	@ 0x40
 8006568:	d031      	beq.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	f003 0308 	and.w	r3, r3, #8
 8006574:	2b08      	cmp	r3, #8
 8006576:	d110      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2208      	movs	r2, #8
 800657e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f839 	bl	80065f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2208      	movs	r2, #8
 800658a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e029      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a8:	d111      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 f81f 	bl	80065f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2220      	movs	r2, #32
 80065be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e00f      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4013      	ands	r3, r2
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	429a      	cmp	r2, r3
 80065dc:	bf0c      	ite	eq
 80065de:	2301      	moveq	r3, #1
 80065e0:	2300      	movne	r3, #0
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	461a      	mov	r2, r3
 80065e6:	79fb      	ldrb	r3, [r7, #7]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d0a0      	beq.n	800652e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b095      	sub	sp, #84	@ 0x54
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006614:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006620:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e6      	bne.n	8006600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3308      	adds	r3, #8
 8006638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	e853 3f00 	ldrex	r3, [r3]
 8006640:	61fb      	str	r3, [r7, #28]
   return(result);
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	4b1e      	ldr	r3, [pc, #120]	@ (80066c0 <UART_EndRxTransfer+0xc8>)
 8006646:	4013      	ands	r3, r2
 8006648:	64bb      	str	r3, [r7, #72]	@ 0x48
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	3308      	adds	r3, #8
 8006650:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006652:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006654:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006658:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e5      	bne.n	8006632 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d118      	bne.n	80066a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	60bb      	str	r3, [r7, #8]
   return(result);
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f023 0310 	bic.w	r3, r3, #16
 8006682:	647b      	str	r3, [r7, #68]	@ 0x44
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	461a      	mov	r2, r3
 800668a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6979      	ldr	r1, [r7, #20]
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	613b      	str	r3, [r7, #16]
   return(result);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e6      	bne.n	800666e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066b4:	bf00      	nop
 80066b6:	3754      	adds	r7, #84	@ 0x54
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	effffffe 	.word	0xeffffffe

080066c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_UARTEx_DisableFifoMode+0x16>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e027      	b.n	800672a <HAL_UARTEx_DisableFifoMode+0x66>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2224      	movs	r2, #36	@ 0x24
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006708:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b084      	sub	sp, #16
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800674a:	2302      	movs	r3, #2
 800674c:	e02d      	b.n	80067aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2224      	movs	r2, #36	@ 0x24
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f850 	bl	8006830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d101      	bne.n	80067ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80067c6:	2302      	movs	r3, #2
 80067c8:	e02d      	b.n	8006826 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2224      	movs	r2, #36	@ 0x24
 80067d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f812 	bl	8006830 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2220      	movs	r2, #32
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800683c:	2b00      	cmp	r3, #0
 800683e:	d108      	bne.n	8006852 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006850:	e031      	b.n	80068b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006852:	2310      	movs	r3, #16
 8006854:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006856:	2310      	movs	r3, #16
 8006858:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	0e5b      	lsrs	r3, r3, #25
 8006862:	b2db      	uxtb	r3, r3
 8006864:	f003 0307 	and.w	r3, r3, #7
 8006868:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	0f5b      	lsrs	r3, r3, #29
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 0307 	and.w	r3, r3, #7
 8006878:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800687a:	7bbb      	ldrb	r3, [r7, #14]
 800687c:	7b3a      	ldrb	r2, [r7, #12]
 800687e:	4911      	ldr	r1, [pc, #68]	@ (80068c4 <UARTEx_SetNbDataToProcess+0x94>)
 8006880:	5c8a      	ldrb	r2, [r1, r2]
 8006882:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006886:	7b3a      	ldrb	r2, [r7, #12]
 8006888:	490f      	ldr	r1, [pc, #60]	@ (80068c8 <UARTEx_SetNbDataToProcess+0x98>)
 800688a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800688c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006898:	7bfb      	ldrb	r3, [r7, #15]
 800689a:	7b7a      	ldrb	r2, [r7, #13]
 800689c:	4909      	ldr	r1, [pc, #36]	@ (80068c4 <UARTEx_SetNbDataToProcess+0x94>)
 800689e:	5c8a      	ldrb	r2, [r1, r2]
 80068a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80068a4:	7b7a      	ldrb	r2, [r7, #13]
 80068a6:	4908      	ldr	r1, [pc, #32]	@ (80068c8 <UARTEx_SetNbDataToProcess+0x98>)
 80068a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80068aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ae:	b29a      	uxth	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	080090c4 	.word	0x080090c4
 80068c8:	080090cc 	.word	0x080090cc

080068cc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068cc:	b084      	sub	sp, #16
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	f107 001c 	add.w	r0, r7, #28
 80068da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068de:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d121      	bne.n	800692a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	4b2c      	ldr	r3, [pc, #176]	@ (80069a8 <USB_CoreInit+0xdc>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800690a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800690e:	2b01      	cmp	r3, #1
 8006910:	d105      	bne.n	800691e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 faaa 	bl	8006e78 <USB_CoreReset>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
 8006928:	e01b      	b.n	8006962 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fa9e 	bl	8006e78 <USB_CoreReset>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006940:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	@ 0x38
 8006954:	e005      	b.n	8006962 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006962:	7fbb      	ldrb	r3, [r7, #30]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d116      	bne.n	8006996 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800696c:	b29a      	uxth	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006976:	4b0d      	ldr	r3, [pc, #52]	@ (80069ac <USB_CoreInit+0xe0>)
 8006978:	4313      	orrs	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f043 0206 	orr.w	r2, r3, #6
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f043 0220 	orr.w	r2, r3, #32
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a2:	b004      	add	sp, #16
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	ffbdffbf 	.word	0xffbdffbf
 80069ac:	03ee0000 	.word	0x03ee0000

080069b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f023 0201 	bic.w	r2, r3, #1
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b084      	sub	sp, #16
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d115      	bne.n	8006a20 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a00:	200a      	movs	r0, #10
 8006a02:	f7fa fcc9 	bl	8001398 <HAL_Delay>
      ms += 10U;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	330a      	adds	r3, #10
 8006a0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fa25 	bl	8006e5c <USB_GetMode>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d01e      	beq.n	8006a56 <USB_SetCurrentMode+0x84>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a1c:	d9f0      	bls.n	8006a00 <USB_SetCurrentMode+0x2e>
 8006a1e:	e01a      	b.n	8006a56 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d115      	bne.n	8006a52 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006a32:	200a      	movs	r0, #10
 8006a34:	f7fa fcb0 	bl	8001398 <HAL_Delay>
      ms += 10U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	330a      	adds	r3, #10
 8006a3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fa0c 	bl	8006e5c <USB_GetMode>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <USB_SetCurrentMode+0x84>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006a4e:	d9f0      	bls.n	8006a32 <USB_SetCurrentMode+0x60>
 8006a50:	e001      	b.n	8006a56 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e005      	b.n	8006a62 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2bc8      	cmp	r3, #200	@ 0xc8
 8006a5a:	d101      	bne.n	8006a60 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af00      	add	r7, sp, #0
 8006a74:	6078      	str	r0, [r7, #4]
 8006a76:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a86:	2300      	movs	r3, #0
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	e009      	b.n	8006aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	3340      	adds	r3, #64	@ 0x40
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4413      	add	r3, r2
 8006a96:	2200      	movs	r2, #0
 8006a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	2b0e      	cmp	r3, #14
 8006aa4:	d9f2      	bls.n	8006a8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aa6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d11c      	bne.n	8006ae8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006abc:	f043 0302 	orr.w	r3, r3, #2
 8006ac0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	601a      	str	r2, [r3, #0]
 8006ae6:	e005      	b.n	8006af4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006afa:	461a      	mov	r2, r3
 8006afc:	2300      	movs	r3, #0
 8006afe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d10d      	bne.n	8006b24 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b10:	2100      	movs	r1, #0
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f968 	bl	8006de8 <USB_SetDevSpeed>
 8006b18:	e008      	b.n	8006b2c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f963 	bl	8006de8 <USB_SetDevSpeed>
 8006b22:	e003      	b.n	8006b2c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b24:	2103      	movs	r1, #3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f95e 	bl	8006de8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b2c:	2110      	movs	r1, #16
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f8fa 	bl	8006d28 <USB_FlushTxFifo>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f924 	bl	8006d8c <USB_FlushRxFifo>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b54:	461a      	mov	r2, r3
 8006b56:	2300      	movs	r3, #0
 8006b58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b60:	461a      	mov	r2, r3
 8006b62:	2300      	movs	r3, #0
 8006b64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	2300      	movs	r3, #0
 8006b70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	613b      	str	r3, [r7, #16]
 8006b76:	e043      	b.n	8006c00 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b8e:	d118      	bne.n	8006bc2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	e013      	b.n	8006bd4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	e008      	b.n	8006bd4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be0:	461a      	mov	r2, r3
 8006be2:	2300      	movs	r3, #0
 8006be4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf2:	461a      	mov	r2, r3
 8006bf4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006bf8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c04:	461a      	mov	r2, r3
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d3b5      	bcc.n	8006b78 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	e043      	b.n	8006c9a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c28:	d118      	bne.n	8006c5c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e013      	b.n	8006c6e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	461a      	mov	r2, r3
 8006c54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	e008      	b.n	8006c6e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c68:	461a      	mov	r2, r3
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	015a      	lsls	r2, r3, #5
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	3301      	adds	r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d3b5      	bcc.n	8006c12 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006cc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d105      	bne.n	8006cdc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f043 0210 	orr.w	r2, r3, #16
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d20 <USB_DevInit+0x2b4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ce8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d005      	beq.n	8006cfc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f043 0208 	orr.w	r2, r3, #8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699a      	ldr	r2, [r3, #24]
 8006d08:	4b06      	ldr	r3, [pc, #24]	@ (8006d24 <USB_DevInit+0x2b8>)
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d1c:	b004      	add	sp, #16
 8006d1e:	4770      	bx	lr
 8006d20:	803c3800 	.word	0x803c3800
 8006d24:	40000004 	.word	0x40000004

08006d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d42:	d901      	bls.n	8006d48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e01b      	b.n	8006d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	daf2      	bge.n	8006d36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	019b      	lsls	r3, r3, #6
 8006d58:	f043 0220 	orr.w	r2, r3, #32
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	3301      	adds	r3, #1
 8006d64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d6c:	d901      	bls.n	8006d72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e006      	b.n	8006d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d0f0      	beq.n	8006d60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3714      	adds	r7, #20
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006da4:	d901      	bls.n	8006daa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e018      	b.n	8006ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	daf2      	bge.n	8006d98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2210      	movs	r2, #16
 8006dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dc8:	d901      	bls.n	8006dce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e006      	b.n	8006ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	f003 0310 	and.w	r3, r3, #16
 8006dd6:	2b10      	cmp	r3, #16
 8006dd8:	d0f0      	beq.n	8006dbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	68f9      	ldr	r1, [r7, #12]
 8006e04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e34:	f023 0303 	bic.w	r3, r3, #3
 8006e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e48:	f043 0302 	orr.w	r3, r3, #2
 8006e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	695b      	ldr	r3, [r3, #20]
 8006e68:	f003 0301 	and.w	r3, r3, #1
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3301      	adds	r3, #1
 8006e88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e90:	d901      	bls.n	8006e96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e01b      	b.n	8006ece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	daf2      	bge.n	8006e84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	691b      	ldr	r3, [r3, #16]
 8006ea6:	f043 0201 	orr.w	r2, r3, #1
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006eba:	d901      	bls.n	8006ec0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e006      	b.n	8006ece <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d0f0      	beq.n	8006eae <USB_CoreReset+0x36>

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006eec:	2b84      	cmp	r3, #132	@ 0x84
 8006eee:	d005      	beq.n	8006efc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006ef0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	3303      	adds	r3, #3
 8006efa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006f0e:	f000 fe47 	bl	8007ba0 <vTaskStartScheduler>
  
  return osOK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1a:	b089      	sub	sp, #36	@ 0x24
 8006f1c:	af04      	add	r7, sp, #16
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d020      	beq.n	8006f6c <osThreadCreate+0x54>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01c      	beq.n	8006f6c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685c      	ldr	r4, [r3, #4]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691e      	ldr	r6, [r3, #16]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff ffc8 	bl	8006eda <makeFreeRtosPriority>
 8006f4a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f54:	9202      	str	r2, [sp, #8]
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	9100      	str	r1, [sp, #0]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	4632      	mov	r2, r6
 8006f5e:	4629      	mov	r1, r5
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fc37 	bl	80077d4 <xTaskCreateStatic>
 8006f66:	4603      	mov	r3, r0
 8006f68:	60fb      	str	r3, [r7, #12]
 8006f6a:	e01c      	b.n	8006fa6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685c      	ldr	r4, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f78:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7ff ffaa 	bl	8006eda <makeFreeRtosPriority>
 8006f86:	4602      	mov	r2, r0
 8006f88:	f107 030c 	add.w	r3, r7, #12
 8006f8c:	9301      	str	r3, [sp, #4]
 8006f8e:	9200      	str	r2, [sp, #0]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	4632      	mov	r2, r6
 8006f94:	4629      	mov	r1, r5
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fc7c 	bl	8007894 <xTaskCreate>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d001      	beq.n	8006fa6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	e000      	b.n	8006fa8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fb0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <osDelay+0x16>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	e000      	b.n	8006fc8 <osDelay+0x18>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fdb3 	bl	8007b34 <vTaskDelay>
  
  return osOK;
 8006fce:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00f      	beq.n	800700a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d10a      	bne.n	8007006 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2203      	movs	r2, #3
 8006ff6:	9200      	str	r2, [sp, #0]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	f000 f93b 	bl	8007278 <xQueueGenericCreateStatic>
 8007002:	4603      	mov	r3, r0
 8007004:	e016      	b.n	8007034 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	e014      	b.n	8007034 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d110      	bne.n	8007032 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007010:	2203      	movs	r2, #3
 8007012:	2100      	movs	r1, #0
 8007014:	2001      	movs	r0, #1
 8007016:	f000 f9ac 	bl	8007372 <xQueueGenericCreate>
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d005      	beq.n	800702e <osSemaphoreCreate+0x56>
 8007022:	2300      	movs	r3, #0
 8007024:	2200      	movs	r2, #0
 8007026:	2100      	movs	r1, #0
 8007028:	68f8      	ldr	r0, [r7, #12]
 800702a:	f000 f9fd 	bl	8007428 <xQueueGenericSend>
      return sema;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e000      	b.n	8007034 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007032:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f103 0208 	add.w	r2, r3, #8
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f103 0208 	add.w	r2, r3, #8
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f103 0208 	add.w	r2, r3, #8
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
}
 80070d2:	bf00      	nop
 80070d4:	3714      	adds	r7, #20
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr

080070de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80070de:	b480      	push	{r7}
 80070e0:	b085      	sub	sp, #20
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
 80070e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f4:	d103      	bne.n	80070fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	e00c      	b.n	8007118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3308      	adds	r3, #8
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e002      	b.n	800710c <vListInsert+0x2e>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	429a      	cmp	r2, r3
 8007116:	d2f6      	bcs.n	8007106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	685a      	ldr	r2, [r3, #4]
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	683a      	ldr	r2, [r7, #0]
 8007126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	1c5a      	adds	r2, r3, #1
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6892      	ldr	r2, [r2, #8]
 8007166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6852      	ldr	r2, [r2, #4]
 8007170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d103      	bne.n	8007184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	689a      	ldr	r2, [r3, #8]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	1e5a      	subs	r2, r3, #1
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80071d0:	f001 fb42 	bl	8008858 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071dc:	68f9      	ldr	r1, [r7, #12]
 80071de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80071e0:	fb01 f303 	mul.w	r3, r1, r3
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007200:	3b01      	subs	r3, #1
 8007202:	68f9      	ldr	r1, [r7, #12]
 8007204:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007206:	fb01 f303 	mul.w	r3, r1, r3
 800720a:	441a      	add	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	22ff      	movs	r2, #255	@ 0xff
 8007214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	22ff      	movs	r2, #255	@ 0xff
 800721c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d114      	bne.n	8007250 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01a      	beq.n	8007264 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3310      	adds	r3, #16
 8007232:	4618      	mov	r0, r3
 8007234:	f000 ff0e 	bl	8008054 <xTaskRemoveFromEventList>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d012      	beq.n	8007264 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800723e:	4b0d      	ldr	r3, [pc, #52]	@ (8007274 <xQueueGenericReset+0xd0>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	e009      	b.n	8007264 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	3310      	adds	r3, #16
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fef1 	bl	800703c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	3324      	adds	r3, #36	@ 0x24
 800725e:	4618      	mov	r0, r3
 8007260:	f7ff feec 	bl	800703c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007264:	f001 fb2a 	bl	80088bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007268:	2301      	movs	r3, #1
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	e000ed04 	.word	0xe000ed04

08007278 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08e      	sub	sp, #56	@ 0x38
 800727c:	af02      	add	r7, sp, #8
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10b      	bne.n	80072c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072bc:	bf00      	nop
 80072be:	bf00      	nop
 80072c0:	e7fd      	b.n	80072be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d002      	beq.n	80072ce <xQueueGenericCreateStatic+0x56>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d001      	beq.n	80072d2 <xQueueGenericCreateStatic+0x5a>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <xQueueGenericCreateStatic+0x5c>
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	623b      	str	r3, [r7, #32]
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	e7fd      	b.n	80072ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d102      	bne.n	80072fc <xQueueGenericCreateStatic+0x84>
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <xQueueGenericCreateStatic+0x88>
 80072fc:	2301      	movs	r3, #1
 80072fe:	e000      	b.n	8007302 <xQueueGenericCreateStatic+0x8a>
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	61fb      	str	r3, [r7, #28]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800731e:	2348      	movs	r3, #72	@ 0x48
 8007320:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b48      	cmp	r3, #72	@ 0x48
 8007326:	d00b      	beq.n	8007340 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	61bb      	str	r3, [r7, #24]
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	e7fd      	b.n	800733c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007340:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00d      	beq.n	8007368 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800734c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007354:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 f840 	bl	80073e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800736a:	4618      	mov	r0, r3
 800736c:	3730      	adds	r7, #48	@ 0x30
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007372:	b580      	push	{r7, lr}
 8007374:	b08a      	sub	sp, #40	@ 0x28
 8007376:	af02      	add	r7, sp, #8
 8007378:	60f8      	str	r0, [r7, #12]
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	4613      	mov	r3, r2
 800737e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <xQueueGenericCreate+0x2c>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	613b      	str	r3, [r7, #16]
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	fb02 f303 	mul.w	r3, r2, r3
 80073a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3348      	adds	r3, #72	@ 0x48
 80073ac:	4618      	mov	r0, r3
 80073ae:	f001 fb33 	bl	8008a18 <pvPortMalloc>
 80073b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d011      	beq.n	80073de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	3348      	adds	r3, #72	@ 0x48
 80073c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80073c4:	69bb      	ldr	r3, [r7, #24]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80073cc:	79fa      	ldrb	r2, [r7, #7]
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	9300      	str	r3, [sp, #0]
 80073d2:	4613      	mov	r3, r2
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	68b9      	ldr	r1, [r7, #8]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 f805 	bl	80073e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80073de:	69bb      	ldr	r3, [r7, #24]
	}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3720      	adds	r7, #32
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d103      	bne.n	8007404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	601a      	str	r2, [r3, #0]
 8007402:	e002      	b.n	800740a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007416:	2101      	movs	r1, #1
 8007418:	69b8      	ldr	r0, [r7, #24]
 800741a:	f7ff fec3 	bl	80071a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007436:	2300      	movs	r3, #0
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <xQueueGenericSend+0x34>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d103      	bne.n	800746a <xQueueGenericSend+0x42>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	2b00      	cmp	r3, #0
 8007468:	d101      	bne.n	800746e <xQueueGenericSend+0x46>
 800746a:	2301      	movs	r3, #1
 800746c:	e000      	b.n	8007470 <xQueueGenericSend+0x48>
 800746e:	2300      	movs	r3, #0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d10b      	bne.n	800748c <xQueueGenericSend+0x64>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d103      	bne.n	800749a <xQueueGenericSend+0x72>
 8007492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007496:	2b01      	cmp	r3, #1
 8007498:	d101      	bne.n	800749e <xQueueGenericSend+0x76>
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <xQueueGenericSend+0x78>
 800749e:	2300      	movs	r3, #0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <xQueueGenericSend+0x94>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	623b      	str	r3, [r7, #32]
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	e7fd      	b.n	80074b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074bc:	f000 ff90 	bl	80083e0 <xTaskGetSchedulerState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d102      	bne.n	80074cc <xQueueGenericSend+0xa4>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <xQueueGenericSend+0xa8>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <xQueueGenericSend+0xaa>
 80074d0:	2300      	movs	r3, #0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <xQueueGenericSend+0xc6>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074ee:	f001 f9b3 	bl	8008858 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <xQueueGenericSend+0xdc>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b02      	cmp	r3, #2
 8007502:	d129      	bne.n	8007558 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007504:	683a      	ldr	r2, [r7, #0]
 8007506:	68b9      	ldr	r1, [r7, #8]
 8007508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800750a:	f000 f88f 	bl	800762c <prvCopyDataToQueue>
 800750e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	2b00      	cmp	r3, #0
 8007516:	d010      	beq.n	800753a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800751a:	3324      	adds	r3, #36	@ 0x24
 800751c:	4618      	mov	r0, r3
 800751e:	f000 fd99 	bl	8008054 <xTaskRemoveFromEventList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d013      	beq.n	8007550 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007528:	4b3f      	ldr	r3, [pc, #252]	@ (8007628 <xQueueGenericSend+0x200>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	e00a      	b.n	8007550 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800753a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007540:	4b39      	ldr	r3, [pc, #228]	@ (8007628 <xQueueGenericSend+0x200>)
 8007542:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007546:	601a      	str	r2, [r3, #0]
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007550:	f001 f9b4 	bl	80088bc <vPortExitCritical>
				return pdPASS;
 8007554:	2301      	movs	r3, #1
 8007556:	e063      	b.n	8007620 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800755e:	f001 f9ad 	bl	80088bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007562:	2300      	movs	r3, #0
 8007564:	e05c      	b.n	8007620 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007568:	2b00      	cmp	r3, #0
 800756a:	d106      	bne.n	800757a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800756c:	f107 0314 	add.w	r3, r7, #20
 8007570:	4618      	mov	r0, r3
 8007572:	f000 fdd3 	bl	800811c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800757a:	f001 f99f 	bl	80088bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800757e:	f000 fb79 	bl	8007c74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007582:	f001 f969 	bl	8008858 <vPortEnterCritical>
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800758c:	b25b      	sxtb	r3, r3
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d103      	bne.n	800759c <xQueueGenericSend+0x174>
 8007594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800759c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075a2:	b25b      	sxtb	r3, r3
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d103      	bne.n	80075b2 <xQueueGenericSend+0x18a>
 80075aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075b2:	f001 f983 	bl	80088bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075b6:	1d3a      	adds	r2, r7, #4
 80075b8:	f107 0314 	add.w	r3, r7, #20
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fdc2 	bl	8008148 <xTaskCheckForTimeOut>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d124      	bne.n	8007614 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80075ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075cc:	f000 f8ea 	bl	80077a4 <prvIsQueueFull>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d018      	beq.n	8007608 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	3310      	adds	r3, #16
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fd12 	bl	8008008 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80075e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075e6:	f000 f88b 	bl	8007700 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80075ea:	f000 fb51 	bl	8007c90 <xTaskResumeAll>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	f47f af7c 	bne.w	80074ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80075f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007628 <xQueueGenericSend+0x200>)
 80075f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	e772      	b.n	80074ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800760a:	f000 f879 	bl	8007700 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800760e:	f000 fb3f 	bl	8007c90 <xTaskResumeAll>
 8007612:	e76c      	b.n	80074ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007616:	f000 f873 	bl	8007700 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800761a:	f000 fb39 	bl	8007c90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800761e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007620:	4618      	mov	r0, r3
 8007622:	3738      	adds	r7, #56	@ 0x38
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	e000ed04 	.word	0xe000ed04

0800762c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007638:	2300      	movs	r3, #0
 800763a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10d      	bne.n	8007666 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d14d      	bne.n	80076ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fee0 	bl	800841c <xTaskPriorityDisinherit>
 800765c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2200      	movs	r2, #0
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	e043      	b.n	80076ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d119      	bne.n	80076a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6858      	ldr	r0, [r3, #4]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007674:	461a      	mov	r2, r3
 8007676:	68b9      	ldr	r1, [r7, #8]
 8007678:	f001 fc4c 	bl	8008f14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	685a      	ldr	r2, [r3, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007684:	441a      	add	r2, r3
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685a      	ldr	r2, [r3, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d32b      	bcc.n	80076ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	e026      	b.n	80076ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68d8      	ldr	r0, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	461a      	mov	r2, r3
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	f001 fc32 	bl	8008f14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	68da      	ldr	r2, [r3, #12]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b8:	425b      	negs	r3, r3
 80076ba:	441a      	add	r2, r3
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d207      	bcs.n	80076dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689a      	ldr	r2, [r3, #8]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d4:	425b      	negs	r3, r3
 80076d6:	441a      	add	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d105      	bne.n	80076ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3b01      	subs	r3, #1
 80076ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076f6:	697b      	ldr	r3, [r7, #20]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007708:	f001 f8a6 	bl	8008858 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007712:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007714:	e011      	b.n	800773a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771a:	2b00      	cmp	r3, #0
 800771c:	d012      	beq.n	8007744 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	3324      	adds	r3, #36	@ 0x24
 8007722:	4618      	mov	r0, r3
 8007724:	f000 fc96 	bl	8008054 <xTaskRemoveFromEventList>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800772e:	f000 fd6f 	bl	8008210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	3b01      	subs	r3, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800773a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	dce9      	bgt.n	8007716 <prvUnlockQueue+0x16>
 8007742:	e000      	b.n	8007746 <prvUnlockQueue+0x46>
					break;
 8007744:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	22ff      	movs	r2, #255	@ 0xff
 800774a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800774e:	f001 f8b5 	bl	80088bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007752:	f001 f881 	bl	8008858 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800775c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800775e:	e011      	b.n	8007784 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d012      	beq.n	800778e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	3310      	adds	r3, #16
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fc71 	bl	8008054 <xTaskRemoveFromEventList>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d001      	beq.n	800777c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007778:	f000 fd4a 	bl	8008210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	3b01      	subs	r3, #1
 8007780:	b2db      	uxtb	r3, r3
 8007782:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007788:	2b00      	cmp	r3, #0
 800778a:	dce9      	bgt.n	8007760 <prvUnlockQueue+0x60>
 800778c:	e000      	b.n	8007790 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800778e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	22ff      	movs	r2, #255	@ 0xff
 8007794:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007798:	f001 f890 	bl	80088bc <vPortExitCritical>
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077ac:	f001 f854 	bl	8008858 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d102      	bne.n	80077c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80077bc:	2301      	movs	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e001      	b.n	80077c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077c6:	f001 f879 	bl	80088bc <vPortExitCritical>

	return xReturn;
 80077ca:	68fb      	ldr	r3, [r7, #12]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08e      	sub	sp, #56	@ 0x38
 80077d8:	af04      	add	r7, sp, #16
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80077e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10b      	bne.n	8007800 <xTaskCreateStatic+0x2c>
	__asm volatile
 80077e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ec:	f383 8811 	msr	BASEPRI, r3
 80077f0:	f3bf 8f6f 	isb	sy
 80077f4:	f3bf 8f4f 	dsb	sy
 80077f8:	623b      	str	r3, [r7, #32]
}
 80077fa:	bf00      	nop
 80077fc:	bf00      	nop
 80077fe:	e7fd      	b.n	80077fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	61fb      	str	r3, [r7, #28]
}
 8007818:	bf00      	nop
 800781a:	bf00      	nop
 800781c:	e7fd      	b.n	800781a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800781e:	23a0      	movs	r3, #160	@ 0xa0
 8007820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	2ba0      	cmp	r3, #160	@ 0xa0
 8007826:	d00b      	beq.n	8007840 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	61bb      	str	r3, [r7, #24]
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007840:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01e      	beq.n	8007886 <xTaskCreateStatic+0xb2>
 8007848:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784a:	2b00      	cmp	r3, #0
 800784c:	d01b      	beq.n	8007886 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800784e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007850:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785a:	2202      	movs	r2, #2
 800785c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007866:	9302      	str	r3, [sp, #8]
 8007868:	f107 0314 	add.w	r3, r7, #20
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	68b9      	ldr	r1, [r7, #8]
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f000 f851 	bl	8007920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800787e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007880:	f000 f8ee 	bl	8007a60 <prvAddNewTaskToReadyList>
 8007884:	e001      	b.n	800788a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800788a:	697b      	ldr	r3, [r7, #20]
	}
 800788c:	4618      	mov	r0, r3
 800788e:	3728      	adds	r7, #40	@ 0x28
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08c      	sub	sp, #48	@ 0x30
 8007898:	af04      	add	r7, sp, #16
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	603b      	str	r3, [r7, #0]
 80078a0:	4613      	mov	r3, r2
 80078a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078a4:	88fb      	ldrh	r3, [r7, #6]
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f001 f8b5 	bl	8008a18 <pvPortMalloc>
 80078ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00e      	beq.n	80078d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078b6:	20a0      	movs	r0, #160	@ 0xa0
 80078b8:	f001 f8ae 	bl	8008a18 <pvPortMalloc>
 80078bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	697a      	ldr	r2, [r7, #20]
 80078c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80078ca:	e005      	b.n	80078d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078cc:	6978      	ldr	r0, [r7, #20]
 80078ce:	f001 f971 	bl	8008bb4 <vPortFree>
 80078d2:	e001      	b.n	80078d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d017      	beq.n	800790e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80078e6:	88fa      	ldrh	r2, [r7, #6]
 80078e8:	2300      	movs	r3, #0
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078f2:	9301      	str	r3, [sp, #4]
 80078f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f6:	9300      	str	r3, [sp, #0]
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f80f 	bl	8007920 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007902:	69f8      	ldr	r0, [r7, #28]
 8007904:	f000 f8ac 	bl	8007a60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	61bb      	str	r3, [r7, #24]
 800790c:	e002      	b.n	8007914 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007914:	69bb      	ldr	r3, [r7, #24]
	}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007938:	440b      	add	r3, r1
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	f023 0307 	bic.w	r3, r3, #7
 8007946:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	f003 0307 	and.w	r3, r3, #7
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	617b      	str	r3, [r7, #20]
}
 8007964:	bf00      	nop
 8007966:	bf00      	nop
 8007968:	e7fd      	b.n	8007966 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01f      	beq.n	80079b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007970:	2300      	movs	r3, #0
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e012      	b.n	800799c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	7819      	ldrb	r1, [r3, #0]
 800797e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	4413      	add	r3, r2
 8007984:	3334      	adds	r3, #52	@ 0x34
 8007986:	460a      	mov	r2, r1
 8007988:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	4413      	add	r3, r2
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d006      	beq.n	80079a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	3301      	adds	r3, #1
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	2b0f      	cmp	r3, #15
 80079a0:	d9e9      	bls.n	8007976 <prvInitialiseNewTask+0x56>
 80079a2:	e000      	b.n	80079a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80079a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80079ae:	e003      	b.n	80079b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ba:	2b06      	cmp	r3, #6
 80079bc:	d901      	bls.n	80079c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079be:	2306      	movs	r3, #6
 80079c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	2200      	movs	r2, #0
 80079d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80079d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d6:	3304      	adds	r3, #4
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fb4f 	bl	800707c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	3318      	adds	r3, #24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff fb4a 	bl	800707c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079f0:	f1c3 0207 	rsb	r2, r3, #7
 80079f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80079f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	2200      	movs	r2, #0
 8007a02:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a10:	334c      	adds	r3, #76	@ 0x4c
 8007a12:	224c      	movs	r2, #76	@ 0x4c
 8007a14:	2100      	movs	r1, #0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f001 f9f8 	bl	8008e0c <memset>
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8007a54 <prvInitialiseNewTask+0x134>)
 8007a20:	651a      	str	r2, [r3, #80]	@ 0x50
 8007a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a24:	4a0c      	ldr	r2, [pc, #48]	@ (8007a58 <prvInitialiseNewTask+0x138>)
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a5c <prvInitialiseNewTask+0x13c>)
 8007a2c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	68f9      	ldr	r1, [r7, #12]
 8007a32:	69b8      	ldr	r0, [r7, #24]
 8007a34:	f000 fde0 	bl	80085f8 <pxPortInitialiseStack>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a4a:	bf00      	nop
 8007a4c:	3720      	adds	r7, #32
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	240047f8 	.word	0x240047f8
 8007a58:	24004860 	.word	0x24004860
 8007a5c:	240048c8 	.word	0x240048c8

08007a60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a68:	f000 fef6 	bl	8008858 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007b18 <prvAddNewTaskToReadyList+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	4a29      	ldr	r2, [pc, #164]	@ (8007b18 <prvAddNewTaskToReadyList+0xb8>)
 8007a74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a76:	4b29      	ldr	r3, [pc, #164]	@ (8007b1c <prvAddNewTaskToReadyList+0xbc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a7e:	4a27      	ldr	r2, [pc, #156]	@ (8007b1c <prvAddNewTaskToReadyList+0xbc>)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a84:	4b24      	ldr	r3, [pc, #144]	@ (8007b18 <prvAddNewTaskToReadyList+0xb8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d110      	bne.n	8007aae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a8c:	f000 fbe4 	bl	8008258 <prvInitialiseTaskLists>
 8007a90:	e00d      	b.n	8007aae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a92:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <prvAddNewTaskToReadyList+0xc0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d109      	bne.n	8007aae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a9a:	4b20      	ldr	r3, [pc, #128]	@ (8007b1c <prvAddNewTaskToReadyList+0xbc>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d802      	bhi.n	8007aae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007aa8:	4a1c      	ldr	r2, [pc, #112]	@ (8007b1c <prvAddNewTaskToReadyList+0xbc>)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aae:	4b1d      	ldr	r3, [pc, #116]	@ (8007b24 <prvAddNewTaskToReadyList+0xc4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <prvAddNewTaskToReadyList+0xc4>)
 8007ab6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007abc:	2201      	movs	r2, #1
 8007abe:	409a      	lsls	r2, r3
 8007ac0:	4b19      	ldr	r3, [pc, #100]	@ (8007b28 <prvAddNewTaskToReadyList+0xc8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	4a18      	ldr	r2, [pc, #96]	@ (8007b28 <prvAddNewTaskToReadyList+0xc8>)
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a15      	ldr	r2, [pc, #84]	@ (8007b2c <prvAddNewTaskToReadyList+0xcc>)
 8007ad8:	441a      	add	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	3304      	adds	r3, #4
 8007ade:	4619      	mov	r1, r3
 8007ae0:	4610      	mov	r0, r2
 8007ae2:	f7ff fad8 	bl	8007096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ae6:	f000 fee9 	bl	80088bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007aea:	4b0d      	ldr	r3, [pc, #52]	@ (8007b20 <prvAddNewTaskToReadyList+0xc0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00e      	beq.n	8007b10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007af2:	4b0a      	ldr	r3, [pc, #40]	@ (8007b1c <prvAddNewTaskToReadyList+0xbc>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d207      	bcs.n	8007b10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b00:	4b0b      	ldr	r3, [pc, #44]	@ (8007b30 <prvAddNewTaskToReadyList+0xd0>)
 8007b02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b06:	601a      	str	r2, [r3, #0]
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	24000ba0 	.word	0x24000ba0
 8007b1c:	24000aa0 	.word	0x24000aa0
 8007b20:	24000bac 	.word	0x24000bac
 8007b24:	24000bbc 	.word	0x24000bbc
 8007b28:	24000ba8 	.word	0x24000ba8
 8007b2c:	24000aa4 	.word	0x24000aa4
 8007b30:	e000ed04 	.word	0xe000ed04

08007b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b084      	sub	sp, #16
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d018      	beq.n	8007b78 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b46:	4b14      	ldr	r3, [pc, #80]	@ (8007b98 <vTaskDelay+0x64>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00b      	beq.n	8007b66 <vTaskDelay+0x32>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	60bb      	str	r3, [r7, #8]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007b66:	f000 f885 	bl	8007c74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fcdd 	bl	800852c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007b72:	f000 f88d 	bl	8007c90 <xTaskResumeAll>
 8007b76:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d107      	bne.n	8007b8e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007b7e:	4b07      	ldr	r3, [pc, #28]	@ (8007b9c <vTaskDelay+0x68>)
 8007b80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b84:	601a      	str	r2, [r3, #0]
 8007b86:	f3bf 8f4f 	dsb	sy
 8007b8a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	24000bc8 	.word	0x24000bc8
 8007b9c:	e000ed04 	.word	0xe000ed04

08007ba0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b08a      	sub	sp, #40	@ 0x28
 8007ba4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bae:	463a      	mov	r2, r7
 8007bb0:	1d39      	adds	r1, r7, #4
 8007bb2:	f107 0308 	add.w	r3, r7, #8
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7f8 fdaa 	bl	8000710 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	9202      	str	r2, [sp, #8]
 8007bc4:	9301      	str	r3, [sp, #4]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	460a      	mov	r2, r1
 8007bce:	4921      	ldr	r1, [pc, #132]	@ (8007c54 <vTaskStartScheduler+0xb4>)
 8007bd0:	4821      	ldr	r0, [pc, #132]	@ (8007c58 <vTaskStartScheduler+0xb8>)
 8007bd2:	f7ff fdff 	bl	80077d4 <xTaskCreateStatic>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4a20      	ldr	r2, [pc, #128]	@ (8007c5c <vTaskStartScheduler+0xbc>)
 8007bda:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8007c5c <vTaskStartScheduler+0xbc>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e001      	b.n	8007bee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d11b      	bne.n	8007c2c <vTaskStartScheduler+0x8c>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	613b      	str	r3, [r7, #16]
}
 8007c06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c08:	4b15      	ldr	r3, [pc, #84]	@ (8007c60 <vTaskStartScheduler+0xc0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	334c      	adds	r3, #76	@ 0x4c
 8007c0e:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <vTaskStartScheduler+0xc4>)
 8007c10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c12:	4b15      	ldr	r3, [pc, #84]	@ (8007c68 <vTaskStartScheduler+0xc8>)
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295
 8007c18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c1a:	4b14      	ldr	r3, [pc, #80]	@ (8007c6c <vTaskStartScheduler+0xcc>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c20:	4b13      	ldr	r3, [pc, #76]	@ (8007c70 <vTaskStartScheduler+0xd0>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c26:	f000 fd73 	bl	8008710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c2a:	e00f      	b.n	8007c4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d10b      	bne.n	8007c4c <vTaskStartScheduler+0xac>
	__asm volatile
 8007c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	60fb      	str	r3, [r7, #12]
}
 8007c46:	bf00      	nop
 8007c48:	bf00      	nop
 8007c4a:	e7fd      	b.n	8007c48 <vTaskStartScheduler+0xa8>
}
 8007c4c:	bf00      	nop
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	08009094 	.word	0x08009094
 8007c58:	08008229 	.word	0x08008229
 8007c5c:	24000bc4 	.word	0x24000bc4
 8007c60:	24000aa0 	.word	0x24000aa0
 8007c64:	24000014 	.word	0x24000014
 8007c68:	24000bc0 	.word	0x24000bc0
 8007c6c:	24000bac 	.word	0x24000bac
 8007c70:	24000ba4 	.word	0x24000ba4

08007c74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c74:	b480      	push	{r7}
 8007c76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <vTaskSuspendAll+0x18>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	4a03      	ldr	r2, [pc, #12]	@ (8007c8c <vTaskSuspendAll+0x18>)
 8007c80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c82:	bf00      	nop
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	24000bc8 	.word	0x24000bc8

08007c90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c9e:	4b42      	ldr	r3, [pc, #264]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10b      	bne.n	8007cbe <xTaskResumeAll+0x2e>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	603b      	str	r3, [r7, #0]
}
 8007cb8:	bf00      	nop
 8007cba:	bf00      	nop
 8007cbc:	e7fd      	b.n	8007cba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cbe:	f000 fdcb 	bl	8008858 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cc2:	4b39      	ldr	r3, [pc, #228]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a37      	ldr	r2, [pc, #220]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ccc:	4b36      	ldr	r3, [pc, #216]	@ (8007da8 <xTaskResumeAll+0x118>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d161      	bne.n	8007d98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cd4:	4b35      	ldr	r3, [pc, #212]	@ (8007dac <xTaskResumeAll+0x11c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05d      	beq.n	8007d98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cdc:	e02e      	b.n	8007d3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cde:	4b34      	ldr	r3, [pc, #208]	@ (8007db0 <xTaskResumeAll+0x120>)
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3318      	adds	r3, #24
 8007cea:	4618      	mov	r0, r3
 8007cec:	f7ff fa30 	bl	8007150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7ff fa2b 	bl	8007150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cfe:	2201      	movs	r2, #1
 8007d00:	409a      	lsls	r2, r3
 8007d02:	4b2c      	ldr	r3, [pc, #176]	@ (8007db4 <xTaskResumeAll+0x124>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	4a2a      	ldr	r2, [pc, #168]	@ (8007db4 <xTaskResumeAll+0x124>)
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	4613      	mov	r3, r2
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4a27      	ldr	r2, [pc, #156]	@ (8007db8 <xTaskResumeAll+0x128>)
 8007d1a:	441a      	add	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4619      	mov	r1, r3
 8007d22:	4610      	mov	r0, r2
 8007d24:	f7ff f9b7 	bl	8007096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2c:	4b23      	ldr	r3, [pc, #140]	@ (8007dbc <xTaskResumeAll+0x12c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d302      	bcc.n	8007d3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d36:	4b22      	ldr	r3, [pc, #136]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007db0 <xTaskResumeAll+0x120>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1cc      	bne.n	8007cde <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d4a:	f000 fb29 	bl	80083a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <xTaskResumeAll+0x134>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d010      	beq.n	8007d7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d5a:	f000 f837 	bl	8007dcc <xTaskIncrementTick>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d64:	4b16      	ldr	r3, [pc, #88]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d66:	2201      	movs	r2, #1
 8007d68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	3b01      	subs	r3, #1
 8007d6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1f1      	bne.n	8007d5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007d76:	4b13      	ldr	r3, [pc, #76]	@ (8007dc4 <xTaskResumeAll+0x134>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d7c:	4b10      	ldr	r3, [pc, #64]	@ (8007dc0 <xTaskResumeAll+0x130>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d009      	beq.n	8007d98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d84:	2301      	movs	r3, #1
 8007d86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d88:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc8 <xTaskResumeAll+0x138>)
 8007d8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d8e:	601a      	str	r2, [r3, #0]
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d98:	f000 fd90 	bl	80088bc <vPortExitCritical>

	return xAlreadyYielded;
 8007d9c:	68bb      	ldr	r3, [r7, #8]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	24000bc8 	.word	0x24000bc8
 8007dac:	24000ba0 	.word	0x24000ba0
 8007db0:	24000b60 	.word	0x24000b60
 8007db4:	24000ba8 	.word	0x24000ba8
 8007db8:	24000aa4 	.word	0x24000aa4
 8007dbc:	24000aa0 	.word	0x24000aa0
 8007dc0:	24000bb4 	.word	0x24000bb4
 8007dc4:	24000bb0 	.word	0x24000bb0
 8007dc8:	e000ed04 	.word	0xe000ed04

08007dcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8007f14 <xTaskIncrementTick+0x148>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f040 808f 	bne.w	8007efe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007de0:	4b4d      	ldr	r3, [pc, #308]	@ (8007f18 <xTaskIncrementTick+0x14c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007de8:	4a4b      	ldr	r2, [pc, #300]	@ (8007f18 <xTaskIncrementTick+0x14c>)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d121      	bne.n	8007e38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007df4:	4b49      	ldr	r3, [pc, #292]	@ (8007f1c <xTaskIncrementTick+0x150>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00b      	beq.n	8007e16 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	603b      	str	r3, [r7, #0]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <xTaskIncrementTick+0x46>
 8007e16:	4b41      	ldr	r3, [pc, #260]	@ (8007f1c <xTaskIncrementTick+0x150>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	4b40      	ldr	r3, [pc, #256]	@ (8007f20 <xTaskIncrementTick+0x154>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a3e      	ldr	r2, [pc, #248]	@ (8007f1c <xTaskIncrementTick+0x150>)
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4a3e      	ldr	r2, [pc, #248]	@ (8007f20 <xTaskIncrementTick+0x154>)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007f24 <xTaskIncrementTick+0x158>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	4a3c      	ldr	r2, [pc, #240]	@ (8007f24 <xTaskIncrementTick+0x158>)
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	f000 fab4 	bl	80083a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e38:	4b3b      	ldr	r3, [pc, #236]	@ (8007f28 <xTaskIncrementTick+0x15c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d348      	bcc.n	8007ed4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e42:	4b36      	ldr	r3, [pc, #216]	@ (8007f1c <xTaskIncrementTick+0x150>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d104      	bne.n	8007e56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e4c:	4b36      	ldr	r3, [pc, #216]	@ (8007f28 <xTaskIncrementTick+0x15c>)
 8007e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e52:	601a      	str	r2, [r3, #0]
					break;
 8007e54:	e03e      	b.n	8007ed4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e56:	4b31      	ldr	r3, [pc, #196]	@ (8007f1c <xTaskIncrementTick+0x150>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d203      	bcs.n	8007e76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e6e:	4a2e      	ldr	r2, [pc, #184]	@ (8007f28 <xTaskIncrementTick+0x15c>)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e74:	e02e      	b.n	8007ed4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7ff f968 	bl	8007150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d004      	beq.n	8007e92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	3318      	adds	r3, #24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff f95f 	bl	8007150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e96:	2201      	movs	r2, #1
 8007e98:	409a      	lsls	r2, r3
 8007e9a:	4b24      	ldr	r3, [pc, #144]	@ (8007f2c <xTaskIncrementTick+0x160>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	4a22      	ldr	r2, [pc, #136]	@ (8007f2c <xTaskIncrementTick+0x160>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a1f      	ldr	r2, [pc, #124]	@ (8007f30 <xTaskIncrementTick+0x164>)
 8007eb2:	441a      	add	r2, r3
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7ff f8eb 	bl	8007096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f34 <xTaskIncrementTick+0x168>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d3b9      	bcc.n	8007e42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ed2:	e7b6      	b.n	8007e42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ed4:	4b17      	ldr	r3, [pc, #92]	@ (8007f34 <xTaskIncrementTick+0x168>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eda:	4915      	ldr	r1, [pc, #84]	@ (8007f30 <xTaskIncrementTick+0x164>)
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d901      	bls.n	8007ef0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ef0:	4b11      	ldr	r3, [pc, #68]	@ (8007f38 <xTaskIncrementTick+0x16c>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d007      	beq.n	8007f08 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e004      	b.n	8007f08 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007efe:	4b0f      	ldr	r3, [pc, #60]	@ (8007f3c <xTaskIncrementTick+0x170>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3301      	adds	r3, #1
 8007f04:	4a0d      	ldr	r2, [pc, #52]	@ (8007f3c <xTaskIncrementTick+0x170>)
 8007f06:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f08:	697b      	ldr	r3, [r7, #20]
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	24000bc8 	.word	0x24000bc8
 8007f18:	24000ba4 	.word	0x24000ba4
 8007f1c:	24000b58 	.word	0x24000b58
 8007f20:	24000b5c 	.word	0x24000b5c
 8007f24:	24000bb8 	.word	0x24000bb8
 8007f28:	24000bc0 	.word	0x24000bc0
 8007f2c:	24000ba8 	.word	0x24000ba8
 8007f30:	24000aa4 	.word	0x24000aa4
 8007f34:	24000aa0 	.word	0x24000aa0
 8007f38:	24000bb4 	.word	0x24000bb4
 8007f3c:	24000bb0 	.word	0x24000bb0

08007f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f40:	b480      	push	{r7}
 8007f42:	b087      	sub	sp, #28
 8007f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f46:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff0 <vTaskSwitchContext+0xb0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f4e:	4b29      	ldr	r3, [pc, #164]	@ (8007ff4 <vTaskSwitchContext+0xb4>)
 8007f50:	2201      	movs	r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f54:	e045      	b.n	8007fe2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8007f56:	4b27      	ldr	r3, [pc, #156]	@ (8007ff4 <vTaskSwitchContext+0xb4>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5c:	4b26      	ldr	r3, [pc, #152]	@ (8007ff8 <vTaskSwitchContext+0xb8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	fab3 f383 	clz	r3, r3
 8007f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	f1c3 031f 	rsb	r3, r3, #31
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	4922      	ldr	r1, [pc, #136]	@ (8007ffc <vTaskSwitchContext+0xbc>)
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4613      	mov	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	4413      	add	r3, r2
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	440b      	add	r3, r1
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <vTaskSwitchContext+0x5e>
	__asm volatile
 8007f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	607b      	str	r3, [r7, #4]
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	e7fd      	b.n	8007f9a <vTaskSwitchContext+0x5a>
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4a14      	ldr	r2, [pc, #80]	@ (8007ffc <vTaskSwitchContext+0xbc>)
 8007faa:	4413      	add	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	605a      	str	r2, [r3, #4]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	3308      	adds	r3, #8
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d104      	bne.n	8007fce <vTaskSwitchContext+0x8e>
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	4a0a      	ldr	r2, [pc, #40]	@ (8008000 <vTaskSwitchContext+0xc0>)
 8007fd6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fd8:	4b09      	ldr	r3, [pc, #36]	@ (8008000 <vTaskSwitchContext+0xc0>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	334c      	adds	r3, #76	@ 0x4c
 8007fde:	4a09      	ldr	r2, [pc, #36]	@ (8008004 <vTaskSwitchContext+0xc4>)
 8007fe0:	6013      	str	r3, [r2, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	371c      	adds	r7, #28
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	24000bc8 	.word	0x24000bc8
 8007ff4:	24000bb4 	.word	0x24000bb4
 8007ff8:	24000ba8 	.word	0x24000ba8
 8007ffc:	24000aa4 	.word	0x24000aa4
 8008000:	24000aa0 	.word	0x24000aa0
 8008004:	24000014 	.word	0x24000014

08008008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	60fb      	str	r3, [r7, #12]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008030:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <vTaskPlaceOnEventList+0x48>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3318      	adds	r3, #24
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff f850 	bl	80070de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800803e:	2101      	movs	r1, #1
 8008040:	6838      	ldr	r0, [r7, #0]
 8008042:	f000 fa73 	bl	800852c <prvAddCurrentTaskToDelayedList>
}
 8008046:	bf00      	nop
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	24000aa0 	.word	0x24000aa0

08008054 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10b      	bne.n	8008082 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800806a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	60fb      	str	r3, [r7, #12]
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	e7fd      	b.n	800807e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	3318      	adds	r3, #24
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f862 	bl	8007150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800808c:	4b1d      	ldr	r3, [pc, #116]	@ (8008104 <xTaskRemoveFromEventList+0xb0>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11c      	bne.n	80080ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	3304      	adds	r3, #4
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff f859 	bl	8007150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a2:	2201      	movs	r2, #1
 80080a4:	409a      	lsls	r2, r3
 80080a6:	4b18      	ldr	r3, [pc, #96]	@ (8008108 <xTaskRemoveFromEventList+0xb4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	4a16      	ldr	r2, [pc, #88]	@ (8008108 <xTaskRemoveFromEventList+0xb4>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4a13      	ldr	r2, [pc, #76]	@ (800810c <xTaskRemoveFromEventList+0xb8>)
 80080be:	441a      	add	r2, r3
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7fe ffe5 	bl	8007096 <vListInsertEnd>
 80080cc:	e005      	b.n	80080da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	3318      	adds	r3, #24
 80080d2:	4619      	mov	r1, r3
 80080d4:	480e      	ldr	r0, [pc, #56]	@ (8008110 <xTaskRemoveFromEventList+0xbc>)
 80080d6:	f7fe ffde 	bl	8007096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	4b0d      	ldr	r3, [pc, #52]	@ (8008114 <xTaskRemoveFromEventList+0xc0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d905      	bls.n	80080f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080e8:	2301      	movs	r3, #1
 80080ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008118 <xTaskRemoveFromEventList+0xc4>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	e001      	b.n	80080f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80080f4:	2300      	movs	r3, #0
 80080f6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080f8:	697b      	ldr	r3, [r7, #20]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	24000bc8 	.word	0x24000bc8
 8008108:	24000ba8 	.word	0x24000ba8
 800810c:	24000aa4 	.word	0x24000aa4
 8008110:	24000b60 	.word	0x24000b60
 8008114:	24000aa0 	.word	0x24000aa0
 8008118:	24000bb4 	.word	0x24000bb4

0800811c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008124:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <vTaskInternalSetTimeOutState+0x24>)
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800812c:	4b05      	ldr	r3, [pc, #20]	@ (8008144 <vTaskInternalSetTimeOutState+0x28>)
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	605a      	str	r2, [r3, #4]
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	24000bb8 	.word	0x24000bb8
 8008144:	24000ba4 	.word	0x24000ba4

08008148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b088      	sub	sp, #32
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	613b      	str	r3, [r7, #16]
}
 800816a:	bf00      	nop
 800816c:	bf00      	nop
 800816e:	e7fd      	b.n	800816c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10b      	bne.n	800818e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60fb      	str	r3, [r7, #12]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800818e:	f000 fb63 	bl	8008858 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008192:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <xTaskCheckForTimeOut+0xc0>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	69ba      	ldr	r2, [r7, #24]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d102      	bne.n	80081b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e023      	b.n	80081fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	4b15      	ldr	r3, [pc, #84]	@ (800820c <xTaskCheckForTimeOut+0xc4>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d007      	beq.n	80081ce <xTaskCheckForTimeOut+0x86>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	69ba      	ldr	r2, [r7, #24]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d302      	bcc.n	80081ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081c8:	2301      	movs	r3, #1
 80081ca:	61fb      	str	r3, [r7, #28]
 80081cc:	e015      	b.n	80081fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d20b      	bcs.n	80081f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	1ad2      	subs	r2, r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff ff99 	bl	800811c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	61fb      	str	r3, [r7, #28]
 80081ee:	e004      	b.n	80081fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081f6:	2301      	movs	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081fa:	f000 fb5f 	bl	80088bc <vPortExitCritical>

	return xReturn;
 80081fe:	69fb      	ldr	r3, [r7, #28]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3720      	adds	r7, #32
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	24000ba4 	.word	0x24000ba4
 800820c:	24000bb8 	.word	0x24000bb8

08008210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008210:	b480      	push	{r7}
 8008212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008214:	4b03      	ldr	r3, [pc, #12]	@ (8008224 <vTaskMissedYield+0x14>)
 8008216:	2201      	movs	r2, #1
 8008218:	601a      	str	r2, [r3, #0]
}
 800821a:	bf00      	nop
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	24000bb4 	.word	0x24000bb4

08008228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008230:	f000 f852 	bl	80082d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008234:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <prvIdleTask+0x28>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d9f9      	bls.n	8008230 <prvIdleTask+0x8>
			{
				taskYIELD();
 800823c:	4b05      	ldr	r3, [pc, #20]	@ (8008254 <prvIdleTask+0x2c>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800824c:	e7f0      	b.n	8008230 <prvIdleTask+0x8>
 800824e:	bf00      	nop
 8008250:	24000aa4 	.word	0x24000aa4
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800825e:	2300      	movs	r3, #0
 8008260:	607b      	str	r3, [r7, #4]
 8008262:	e00c      	b.n	800827e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4a12      	ldr	r2, [pc, #72]	@ (80082b8 <prvInitialiseTaskLists+0x60>)
 8008270:	4413      	add	r3, r2
 8008272:	4618      	mov	r0, r3
 8008274:	f7fe fee2 	bl	800703c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3301      	adds	r3, #1
 800827c:	607b      	str	r3, [r7, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b06      	cmp	r3, #6
 8008282:	d9ef      	bls.n	8008264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008284:	480d      	ldr	r0, [pc, #52]	@ (80082bc <prvInitialiseTaskLists+0x64>)
 8008286:	f7fe fed9 	bl	800703c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800828a:	480d      	ldr	r0, [pc, #52]	@ (80082c0 <prvInitialiseTaskLists+0x68>)
 800828c:	f7fe fed6 	bl	800703c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008290:	480c      	ldr	r0, [pc, #48]	@ (80082c4 <prvInitialiseTaskLists+0x6c>)
 8008292:	f7fe fed3 	bl	800703c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008296:	480c      	ldr	r0, [pc, #48]	@ (80082c8 <prvInitialiseTaskLists+0x70>)
 8008298:	f7fe fed0 	bl	800703c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800829c:	480b      	ldr	r0, [pc, #44]	@ (80082cc <prvInitialiseTaskLists+0x74>)
 800829e:	f7fe fecd 	bl	800703c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082a2:	4b0b      	ldr	r3, [pc, #44]	@ (80082d0 <prvInitialiseTaskLists+0x78>)
 80082a4:	4a05      	ldr	r2, [pc, #20]	@ (80082bc <prvInitialiseTaskLists+0x64>)
 80082a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082a8:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <prvInitialiseTaskLists+0x7c>)
 80082aa:	4a05      	ldr	r2, [pc, #20]	@ (80082c0 <prvInitialiseTaskLists+0x68>)
 80082ac:	601a      	str	r2, [r3, #0]
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	24000aa4 	.word	0x24000aa4
 80082bc:	24000b30 	.word	0x24000b30
 80082c0:	24000b44 	.word	0x24000b44
 80082c4:	24000b60 	.word	0x24000b60
 80082c8:	24000b74 	.word	0x24000b74
 80082cc:	24000b8c 	.word	0x24000b8c
 80082d0:	24000b58 	.word	0x24000b58
 80082d4:	24000b5c 	.word	0x24000b5c

080082d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082de:	e019      	b.n	8008314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082e0:	f000 faba 	bl	8008858 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <prvCheckTasksWaitingTermination+0x50>)
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	68db      	ldr	r3, [r3, #12]
 80082ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe ff2d 	bl	8007150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <prvCheckTasksWaitingTermination+0x54>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	4a0b      	ldr	r2, [pc, #44]	@ (800832c <prvCheckTasksWaitingTermination+0x54>)
 80082fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3b01      	subs	r3, #1
 8008306:	4a0a      	ldr	r2, [pc, #40]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800830a:	f000 fad7 	bl	80088bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f810 	bl	8008334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <prvCheckTasksWaitingTermination+0x58>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e1      	bne.n	80082e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	24000b74 	.word	0x24000b74
 800832c:	24000ba0 	.word	0x24000ba0
 8008330:	24000b88 	.word	0x24000b88

08008334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	334c      	adds	r3, #76	@ 0x4c
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fd6b 	bl	8008e1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800834c:	2b00      	cmp	r3, #0
 800834e:	d108      	bne.n	8008362 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008354:	4618      	mov	r0, r3
 8008356:	f000 fc2d 	bl	8008bb4 <vPortFree>
				vPortFree( pxTCB );
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fc2a 	bl	8008bb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008360:	e019      	b.n	8008396 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008368:	2b01      	cmp	r3, #1
 800836a:	d103      	bne.n	8008374 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc21 	bl	8008bb4 <vPortFree>
	}
 8008372:	e010      	b.n	8008396 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800837a:	2b02      	cmp	r3, #2
 800837c:	d00b      	beq.n	8008396 <prvDeleteTCB+0x62>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	60fb      	str	r3, [r7, #12]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <prvDeleteTCB+0x5e>
	}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
	...

080083a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083a6:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <prvResetNextTaskUnblockTime+0x38>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d104      	bne.n	80083ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083b0:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <prvResetNextTaskUnblockTime+0x3c>)
 80083b2:	f04f 32ff 	mov.w	r2, #4294967295
 80083b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083b8:	e008      	b.n	80083cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ba:	4b07      	ldr	r3, [pc, #28]	@ (80083d8 <prvResetNextTaskUnblockTime+0x38>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	4a04      	ldr	r2, [pc, #16]	@ (80083dc <prvResetNextTaskUnblockTime+0x3c>)
 80083ca:	6013      	str	r3, [r2, #0]
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	24000b58 	.word	0x24000b58
 80083dc:	24000bc0 	.word	0x24000bc0

080083e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <xTaskGetSchedulerState+0x34>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d102      	bne.n	80083f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083ee:	2301      	movs	r3, #1
 80083f0:	607b      	str	r3, [r7, #4]
 80083f2:	e008      	b.n	8008406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083f4:	4b08      	ldr	r3, [pc, #32]	@ (8008418 <xTaskGetSchedulerState+0x38>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d102      	bne.n	8008402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083fc:	2302      	movs	r3, #2
 80083fe:	607b      	str	r3, [r7, #4]
 8008400:	e001      	b.n	8008406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008402:	2300      	movs	r3, #0
 8008404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008406:	687b      	ldr	r3, [r7, #4]
	}
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	24000bac 	.word	0x24000bac
 8008418:	24000bc8 	.word	0x24000bc8

0800841c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d070      	beq.n	8008514 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008432:	4b3b      	ldr	r3, [pc, #236]	@ (8008520 <xTaskPriorityDisinherit+0x104>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	429a      	cmp	r2, r3
 800843a:	d00b      	beq.n	8008454 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	60fb      	str	r3, [r7, #12]
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800845c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008460:	f383 8811 	msr	BASEPRI, r3
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	60bb      	str	r3, [r7, #8]
}
 800846e:	bf00      	nop
 8008470:	bf00      	nop
 8008472:	e7fd      	b.n	8008470 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008478:	1e5a      	subs	r2, r3, #1
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008486:	429a      	cmp	r2, r3
 8008488:	d044      	beq.n	8008514 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800848e:	2b00      	cmp	r3, #0
 8008490:	d140      	bne.n	8008514 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	3304      	adds	r3, #4
 8008496:	4618      	mov	r0, r3
 8008498:	f7fe fe5a 	bl	8007150 <uxListRemove>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d115      	bne.n	80084ce <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	491f      	ldr	r1, [pc, #124]	@ (8008524 <xTaskPriorityDisinherit+0x108>)
 80084a8:	4613      	mov	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	4413      	add	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	440b      	add	r3, r1
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d10a      	bne.n	80084ce <xTaskPriorityDisinherit+0xb2>
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084bc:	2201      	movs	r2, #1
 80084be:	fa02 f303 	lsl.w	r3, r2, r3
 80084c2:	43da      	mvns	r2, r3
 80084c4:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <xTaskPriorityDisinherit+0x10c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4013      	ands	r3, r2
 80084ca:	4a17      	ldr	r2, [pc, #92]	@ (8008528 <xTaskPriorityDisinherit+0x10c>)
 80084cc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084da:	f1c3 0207 	rsb	r2, r3, #7
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e6:	2201      	movs	r2, #1
 80084e8:	409a      	lsls	r2, r3
 80084ea:	4b0f      	ldr	r3, [pc, #60]	@ (8008528 <xTaskPriorityDisinherit+0x10c>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008528 <xTaskPriorityDisinherit+0x10c>)
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4a08      	ldr	r2, [pc, #32]	@ (8008524 <xTaskPriorityDisinherit+0x108>)
 8008502:	441a      	add	r2, r3
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fe fdc3 	bl	8007096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008514:	697b      	ldr	r3, [r7, #20]
	}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	24000aa0 	.word	0x24000aa0
 8008524:	24000aa4 	.word	0x24000aa4
 8008528:	24000ba8 	.word	0x24000ba8

0800852c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008536:	4b29      	ldr	r3, [pc, #164]	@ (80085dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800853c:	4b28      	ldr	r3, [pc, #160]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fe fe04 	bl	8007150 <uxListRemove>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10b      	bne.n	8008566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800854e:	4b24      	ldr	r3, [pc, #144]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008554:	2201      	movs	r2, #1
 8008556:	fa02 f303 	lsl.w	r3, r2, r3
 800855a:	43da      	mvns	r2, r3
 800855c:	4b21      	ldr	r3, [pc, #132]	@ (80085e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4013      	ands	r3, r2
 8008562:	4a20      	ldr	r2, [pc, #128]	@ (80085e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800856c:	d10a      	bne.n	8008584 <prvAddCurrentTaskToDelayedList+0x58>
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008574:	4b1a      	ldr	r3, [pc, #104]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3304      	adds	r3, #4
 800857a:	4619      	mov	r1, r3
 800857c:	481a      	ldr	r0, [pc, #104]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800857e:	f7fe fd8a 	bl	8007096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008582:	e026      	b.n	80085d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800858c:	4b14      	ldr	r3, [pc, #80]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	429a      	cmp	r2, r3
 800859a:	d209      	bcs.n	80085b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859c:	4b13      	ldr	r3, [pc, #76]	@ (80085ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	4b0f      	ldr	r3, [pc, #60]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3304      	adds	r3, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	4610      	mov	r0, r2
 80085aa:	f7fe fd98 	bl	80070de <vListInsert>
}
 80085ae:	e010      	b.n	80085d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085b0:	4b0f      	ldr	r3, [pc, #60]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	4b0a      	ldr	r3, [pc, #40]	@ (80085e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3304      	adds	r3, #4
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f7fe fd8e 	bl	80070de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085c2:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d202      	bcs.n	80085d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085cc:	4a09      	ldr	r2, [pc, #36]	@ (80085f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6013      	str	r3, [r2, #0]
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	24000ba4 	.word	0x24000ba4
 80085e0:	24000aa0 	.word	0x24000aa0
 80085e4:	24000ba8 	.word	0x24000ba8
 80085e8:	24000b8c 	.word	0x24000b8c
 80085ec:	24000b5c 	.word	0x24000b5c
 80085f0:	24000b58 	.word	0x24000b58
 80085f4:	24000bc0 	.word	0x24000bc0

080085f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3b04      	subs	r3, #4
 8008608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3b04      	subs	r3, #4
 8008616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f023 0201 	bic.w	r2, r3, #1
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3b04      	subs	r3, #4
 8008626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008628:	4a0c      	ldr	r2, [pc, #48]	@ (800865c <pxPortInitialiseStack+0x64>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	3b14      	subs	r3, #20
 8008632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3b04      	subs	r3, #4
 800863e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f06f 0202 	mvn.w	r2, #2
 8008646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3b20      	subs	r3, #32
 800864c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800864e:	68fb      	ldr	r3, [r7, #12]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3714      	adds	r7, #20
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	08008661 	.word	0x08008661

08008660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800866a:	4b13      	ldr	r3, [pc, #76]	@ (80086b8 <prvTaskExitError+0x58>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d00b      	beq.n	800868c <prvTaskExitError+0x2c>
	__asm volatile
 8008674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	60fb      	str	r3, [r7, #12]
}
 8008686:	bf00      	nop
 8008688:	bf00      	nop
 800868a:	e7fd      	b.n	8008688 <prvTaskExitError+0x28>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60bb      	str	r3, [r7, #8]
}
 800869e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086a0:	bf00      	nop
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d0fc      	beq.n	80086a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	24000010 	.word	0x24000010
 80086bc:	00000000 	.word	0x00000000

080086c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086c0:	4b07      	ldr	r3, [pc, #28]	@ (80086e0 <pxCurrentTCBConst2>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	6808      	ldr	r0, [r1, #0]
 80086c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ca:	f380 8809 	msr	PSP, r0
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f04f 0000 	mov.w	r0, #0
 80086d6:	f380 8811 	msr	BASEPRI, r0
 80086da:	4770      	bx	lr
 80086dc:	f3af 8000 	nop.w

080086e0 <pxCurrentTCBConst2>:
 80086e0:	24000aa0 	.word	0x24000aa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086e4:	bf00      	nop
 80086e6:	bf00      	nop

080086e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086e8:	4808      	ldr	r0, [pc, #32]	@ (800870c <prvPortStartFirstTask+0x24>)
 80086ea:	6800      	ldr	r0, [r0, #0]
 80086ec:	6800      	ldr	r0, [r0, #0]
 80086ee:	f380 8808 	msr	MSP, r0
 80086f2:	f04f 0000 	mov.w	r0, #0
 80086f6:	f380 8814 	msr	CONTROL, r0
 80086fa:	b662      	cpsie	i
 80086fc:	b661      	cpsie	f
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	df00      	svc	0
 8008708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800870a:	bf00      	nop
 800870c:	e000ed08 	.word	0xe000ed08

08008710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008716:	4b47      	ldr	r3, [pc, #284]	@ (8008834 <xPortStartScheduler+0x124>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a47      	ldr	r2, [pc, #284]	@ (8008838 <xPortStartScheduler+0x128>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d10b      	bne.n	8008738 <xPortStartScheduler+0x28>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	613b      	str	r3, [r7, #16]
}
 8008732:	bf00      	nop
 8008734:	bf00      	nop
 8008736:	e7fd      	b.n	8008734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008738:	4b3e      	ldr	r3, [pc, #248]	@ (8008834 <xPortStartScheduler+0x124>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a3f      	ldr	r2, [pc, #252]	@ (800883c <xPortStartScheduler+0x12c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d10b      	bne.n	800875a <xPortStartScheduler+0x4a>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	60fb      	str	r3, [r7, #12]
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop
 8008758:	e7fd      	b.n	8008756 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800875a:	4b39      	ldr	r3, [pc, #228]	@ (8008840 <xPortStartScheduler+0x130>)
 800875c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	b2db      	uxtb	r3, r3
 8008764:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	22ff      	movs	r2, #255	@ 0xff
 800876a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800877c:	b2da      	uxtb	r2, r3
 800877e:	4b31      	ldr	r3, [pc, #196]	@ (8008844 <xPortStartScheduler+0x134>)
 8008780:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008782:	4b31      	ldr	r3, [pc, #196]	@ (8008848 <xPortStartScheduler+0x138>)
 8008784:	2207      	movs	r2, #7
 8008786:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008788:	e009      	b.n	800879e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800878a:	4b2f      	ldr	r3, [pc, #188]	@ (8008848 <xPortStartScheduler+0x138>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	3b01      	subs	r3, #1
 8008790:	4a2d      	ldr	r2, [pc, #180]	@ (8008848 <xPortStartScheduler+0x138>)
 8008792:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008794:	78fb      	ldrb	r3, [r7, #3]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	005b      	lsls	r3, r3, #1
 800879a:	b2db      	uxtb	r3, r3
 800879c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087a6:	2b80      	cmp	r3, #128	@ 0x80
 80087a8:	d0ef      	beq.n	800878a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087aa:	4b27      	ldr	r3, [pc, #156]	@ (8008848 <xPortStartScheduler+0x138>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f1c3 0307 	rsb	r3, r3, #7
 80087b2:	2b04      	cmp	r3, #4
 80087b4:	d00b      	beq.n	80087ce <xPortStartScheduler+0xbe>
	__asm volatile
 80087b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	60bb      	str	r3, [r7, #8]
}
 80087c8:	bf00      	nop
 80087ca:	bf00      	nop
 80087cc:	e7fd      	b.n	80087ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008848 <xPortStartScheduler+0x138>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	021b      	lsls	r3, r3, #8
 80087d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008848 <xPortStartScheduler+0x138>)
 80087d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008848 <xPortStartScheduler+0x138>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087e0:	4a19      	ldr	r2, [pc, #100]	@ (8008848 <xPortStartScheduler+0x138>)
 80087e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	b2da      	uxtb	r2, r3
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087ec:	4b17      	ldr	r3, [pc, #92]	@ (800884c <xPortStartScheduler+0x13c>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a16      	ldr	r2, [pc, #88]	@ (800884c <xPortStartScheduler+0x13c>)
 80087f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087f8:	4b14      	ldr	r3, [pc, #80]	@ (800884c <xPortStartScheduler+0x13c>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a13      	ldr	r2, [pc, #76]	@ (800884c <xPortStartScheduler+0x13c>)
 80087fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008802:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008804:	f000 f8da 	bl	80089bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008808:	4b11      	ldr	r3, [pc, #68]	@ (8008850 <xPortStartScheduler+0x140>)
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800880e:	f000 f8f9 	bl	8008a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008812:	4b10      	ldr	r3, [pc, #64]	@ (8008854 <xPortStartScheduler+0x144>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a0f      	ldr	r2, [pc, #60]	@ (8008854 <xPortStartScheduler+0x144>)
 8008818:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800881c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800881e:	f7ff ff63 	bl	80086e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008822:	f7ff fb8d 	bl	8007f40 <vTaskSwitchContext>
	prvTaskExitError();
 8008826:	f7ff ff1b 	bl	8008660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3718      	adds	r7, #24
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	e000ed00 	.word	0xe000ed00
 8008838:	410fc271 	.word	0x410fc271
 800883c:	410fc270 	.word	0x410fc270
 8008840:	e000e400 	.word	0xe000e400
 8008844:	24000bcc 	.word	0x24000bcc
 8008848:	24000bd0 	.word	0x24000bd0
 800884c:	e000ed20 	.word	0xe000ed20
 8008850:	24000010 	.word	0x24000010
 8008854:	e000ef34 	.word	0xe000ef34

08008858 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008872:	4b10      	ldr	r3, [pc, #64]	@ (80088b4 <vPortEnterCritical+0x5c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3301      	adds	r3, #1
 8008878:	4a0e      	ldr	r2, [pc, #56]	@ (80088b4 <vPortEnterCritical+0x5c>)
 800887a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800887c:	4b0d      	ldr	r3, [pc, #52]	@ (80088b4 <vPortEnterCritical+0x5c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d110      	bne.n	80088a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <vPortEnterCritical+0x60>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	603b      	str	r3, [r7, #0]
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <vPortEnterCritical+0x4a>
	}
}
 80088a6:	bf00      	nop
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	24000010 	.word	0x24000010
 80088b8:	e000ed04 	.word	0xe000ed04

080088bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088c2:	4b12      	ldr	r3, [pc, #72]	@ (800890c <vPortExitCritical+0x50>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <vPortExitCritical+0x26>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	607b      	str	r3, [r7, #4]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088e2:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <vPortExitCritical+0x50>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	4a08      	ldr	r2, [pc, #32]	@ (800890c <vPortExitCritical+0x50>)
 80088ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088ec:	4b07      	ldr	r3, [pc, #28]	@ (800890c <vPortExitCritical+0x50>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d105      	bne.n	8008900 <vPortExitCritical+0x44>
 80088f4:	2300      	movs	r3, #0
 80088f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80088fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr
 800890c:	24000010 	.word	0x24000010

08008910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008910:	f3ef 8009 	mrs	r0, PSP
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4b15      	ldr	r3, [pc, #84]	@ (8008970 <pxCurrentTCBConst>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f01e 0f10 	tst.w	lr, #16
 8008920:	bf08      	it	eq
 8008922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	6010      	str	r0, [r2, #0]
 800892c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008930:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008934:	f380 8811 	msr	BASEPRI, r0
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f7ff fafe 	bl	8007f40 <vTaskSwitchContext>
 8008944:	f04f 0000 	mov.w	r0, #0
 8008948:	f380 8811 	msr	BASEPRI, r0
 800894c:	bc09      	pop	{r0, r3}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008956:	f01e 0f10 	tst.w	lr, #16
 800895a:	bf08      	it	eq
 800895c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008960:	f380 8809 	msr	PSP, r0
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst>:
 8008970:	24000aa0 	.word	0x24000aa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	607b      	str	r3, [r7, #4]
}
 8008990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008992:	f7ff fa1b 	bl	8007dcc <xTaskIncrementTick>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d003      	beq.n	80089a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800899c:	4b06      	ldr	r3, [pc, #24]	@ (80089b8 <SysTick_Handler+0x40>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	2300      	movs	r3, #0
 80089a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	f383 8811 	msr	BASEPRI, r3
}
 80089ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089c0:	4b0b      	ldr	r3, [pc, #44]	@ (80089f0 <vPortSetupTimerInterrupt+0x34>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089c6:	4b0b      	ldr	r3, [pc, #44]	@ (80089f4 <vPortSetupTimerInterrupt+0x38>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089cc:	4b0a      	ldr	r3, [pc, #40]	@ (80089f8 <vPortSetupTimerInterrupt+0x3c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a0a      	ldr	r2, [pc, #40]	@ (80089fc <vPortSetupTimerInterrupt+0x40>)
 80089d2:	fba2 2303 	umull	r2, r3, r2, r3
 80089d6:	099b      	lsrs	r3, r3, #6
 80089d8:	4a09      	ldr	r2, [pc, #36]	@ (8008a00 <vPortSetupTimerInterrupt+0x44>)
 80089da:	3b01      	subs	r3, #1
 80089dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089de:	4b04      	ldr	r3, [pc, #16]	@ (80089f0 <vPortSetupTimerInterrupt+0x34>)
 80089e0:	2207      	movs	r2, #7
 80089e2:	601a      	str	r2, [r3, #0]
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	e000e010 	.word	0xe000e010
 80089f4:	e000e018 	.word	0xe000e018
 80089f8:	24000000 	.word	0x24000000
 80089fc:	10624dd3 	.word	0x10624dd3
 8008a00:	e000e014 	.word	0xe000e014

08008a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a14 <vPortEnableVFP+0x10>
 8008a08:	6801      	ldr	r1, [r0, #0]
 8008a0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a0e:	6001      	str	r1, [r0, #0]
 8008a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a12:	bf00      	nop
 8008a14:	e000ed88 	.word	0xe000ed88

08008a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	@ 0x28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a24:	f7ff f926 	bl	8007c74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a28:	4b5c      	ldr	r3, [pc, #368]	@ (8008b9c <pvPortMalloc+0x184>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d101      	bne.n	8008a34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a30:	f000 f924 	bl	8008c7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a34:	4b5a      	ldr	r3, [pc, #360]	@ (8008ba0 <pvPortMalloc+0x188>)
 8008a36:	681a      	ldr	r2, [r3, #0]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f040 8095 	bne.w	8008b6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01e      	beq.n	8008a86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a48:	2208      	movs	r2, #8
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4413      	add	r3, r2
 8008a4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d015      	beq.n	8008a86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f023 0307 	bic.w	r3, r3, #7
 8008a60:	3308      	adds	r3, #8
 8008a62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f003 0307 	and.w	r3, r3, #7
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00b      	beq.n	8008a86 <pvPortMalloc+0x6e>
	__asm volatile
 8008a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a72:	f383 8811 	msr	BASEPRI, r3
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	f3bf 8f4f 	dsb	sy
 8008a7e:	617b      	str	r3, [r7, #20]
}
 8008a80:	bf00      	nop
 8008a82:	bf00      	nop
 8008a84:	e7fd      	b.n	8008a82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d06f      	beq.n	8008b6c <pvPortMalloc+0x154>
 8008a8c:	4b45      	ldr	r3, [pc, #276]	@ (8008ba4 <pvPortMalloc+0x18c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d86a      	bhi.n	8008b6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a96:	4b44      	ldr	r3, [pc, #272]	@ (8008ba8 <pvPortMalloc+0x190>)
 8008a98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a9a:	4b43      	ldr	r3, [pc, #268]	@ (8008ba8 <pvPortMalloc+0x190>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aa0:	e004      	b.n	8008aac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d903      	bls.n	8008abe <pvPortMalloc+0xa6>
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1f1      	bne.n	8008aa2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008abe:	4b37      	ldr	r3, [pc, #220]	@ (8008b9c <pvPortMalloc+0x184>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d051      	beq.n	8008b6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2208      	movs	r2, #8
 8008ace:	4413      	add	r3, r2
 8008ad0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	2308      	movs	r3, #8
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d920      	bls.n	8008b2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4413      	add	r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d00b      	beq.n	8008b14 <pvPortMalloc+0xfc>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	613b      	str	r3, [r7, #16]
}
 8008b0e:	bf00      	nop
 8008b10:	bf00      	nop
 8008b12:	e7fd      	b.n	8008b10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f000 f90a 	bl	8008d40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8008ba4 <pvPortMalloc+0x18c>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	4a1b      	ldr	r2, [pc, #108]	@ (8008ba4 <pvPortMalloc+0x18c>)
 8008b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba4 <pvPortMalloc+0x18c>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8008bac <pvPortMalloc+0x194>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d203      	bcs.n	8008b4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b46:	4b17      	ldr	r3, [pc, #92]	@ (8008ba4 <pvPortMalloc+0x18c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a18      	ldr	r2, [pc, #96]	@ (8008bac <pvPortMalloc+0x194>)
 8008b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <pvPortMalloc+0x188>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008b62:	4b13      	ldr	r3, [pc, #76]	@ (8008bb0 <pvPortMalloc+0x198>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3301      	adds	r3, #1
 8008b68:	4a11      	ldr	r2, [pc, #68]	@ (8008bb0 <pvPortMalloc+0x198>)
 8008b6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b6c:	f7ff f890 	bl	8007c90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	f003 0307 	and.w	r3, r3, #7
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00b      	beq.n	8008b92 <pvPortMalloc+0x17a>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	60fb      	str	r3, [r7, #12]
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	e7fd      	b.n	8008b8e <pvPortMalloc+0x176>
	return pvReturn;
 8008b92:	69fb      	ldr	r3, [r7, #28]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3728      	adds	r7, #40	@ 0x28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	240047dc 	.word	0x240047dc
 8008ba0:	240047f0 	.word	0x240047f0
 8008ba4:	240047e0 	.word	0x240047e0
 8008ba8:	240047d4 	.word	0x240047d4
 8008bac:	240047e4 	.word	0x240047e4
 8008bb0:	240047e8 	.word	0x240047e8

08008bb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d04f      	beq.n	8008c66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bc6:	2308      	movs	r3, #8
 8008bc8:	425b      	negs	r3, r3
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	4b25      	ldr	r3, [pc, #148]	@ (8008c70 <vPortFree+0xbc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4013      	ands	r3, r2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10b      	bne.n	8008bfa <vPortFree+0x46>
	__asm volatile
 8008be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be6:	f383 8811 	msr	BASEPRI, r3
 8008bea:	f3bf 8f6f 	isb	sy
 8008bee:	f3bf 8f4f 	dsb	sy
 8008bf2:	60fb      	str	r3, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	bf00      	nop
 8008bf8:	e7fd      	b.n	8008bf6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <vPortFree+0x66>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	60bb      	str	r3, [r7, #8]
}
 8008c14:	bf00      	nop
 8008c16:	bf00      	nop
 8008c18:	e7fd      	b.n	8008c16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	685a      	ldr	r2, [r3, #4]
 8008c1e:	4b14      	ldr	r3, [pc, #80]	@ (8008c70 <vPortFree+0xbc>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d01e      	beq.n	8008c66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d11a      	bne.n	8008c66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4b0e      	ldr	r3, [pc, #56]	@ (8008c70 <vPortFree+0xbc>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	43db      	mvns	r3, r3
 8008c3a:	401a      	ands	r2, r3
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c40:	f7ff f818 	bl	8007c74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	4b0a      	ldr	r3, [pc, #40]	@ (8008c74 <vPortFree+0xc0>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	4a09      	ldr	r2, [pc, #36]	@ (8008c74 <vPortFree+0xc0>)
 8008c50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c52:	6938      	ldr	r0, [r7, #16]
 8008c54:	f000 f874 	bl	8008d40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008c58:	4b07      	ldr	r3, [pc, #28]	@ (8008c78 <vPortFree+0xc4>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	4a06      	ldr	r2, [pc, #24]	@ (8008c78 <vPortFree+0xc4>)
 8008c60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008c62:	f7ff f815 	bl	8007c90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c66:	bf00      	nop
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}
 8008c6e:	bf00      	nop
 8008c70:	240047f0 	.word	0x240047f0
 8008c74:	240047e0 	.word	0x240047e0
 8008c78:	240047ec 	.word	0x240047ec

08008c7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008c86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c88:	4b27      	ldr	r3, [pc, #156]	@ (8008d28 <prvHeapInit+0xac>)
 8008c8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f003 0307 	and.w	r3, r3, #7
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00c      	beq.n	8008cb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3307      	adds	r3, #7
 8008c9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f023 0307 	bic.w	r3, r3, #7
 8008ca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	4a1f      	ldr	r2, [pc, #124]	@ (8008d28 <prvHeapInit+0xac>)
 8008cac:	4413      	add	r3, r2
 8008cae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d2c <prvHeapInit+0xb0>)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008cba:	4b1c      	ldr	r3, [pc, #112]	@ (8008d2c <prvHeapInit+0xb0>)
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008cc8:	2208      	movs	r2, #8
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f023 0307 	bic.w	r3, r3, #7
 8008cd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4a15      	ldr	r2, [pc, #84]	@ (8008d30 <prvHeapInit+0xb4>)
 8008cdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cde:	4b14      	ldr	r3, [pc, #80]	@ (8008d30 <prvHeapInit+0xb4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008ce6:	4b12      	ldr	r3, [pc, #72]	@ (8008d30 <prvHeapInit+0xb4>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2200      	movs	r2, #0
 8008cec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <prvHeapInit+0xb4>)
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	4a0a      	ldr	r2, [pc, #40]	@ (8008d34 <prvHeapInit+0xb8>)
 8008d0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	4a09      	ldr	r2, [pc, #36]	@ (8008d38 <prvHeapInit+0xbc>)
 8008d12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d14:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <prvHeapInit+0xc0>)
 8008d16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d1a:	601a      	str	r2, [r3, #0]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	24000bd4 	.word	0x24000bd4
 8008d2c:	240047d4 	.word	0x240047d4
 8008d30:	240047dc 	.word	0x240047dc
 8008d34:	240047e4 	.word	0x240047e4
 8008d38:	240047e0 	.word	0x240047e0
 8008d3c:	240047f0 	.word	0x240047f0

08008d40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d48:	4b28      	ldr	r3, [pc, #160]	@ (8008dec <prvInsertBlockIntoFreeList+0xac>)
 8008d4a:	60fb      	str	r3, [r7, #12]
 8008d4c:	e002      	b.n	8008d54 <prvInsertBlockIntoFreeList+0x14>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d8f7      	bhi.n	8008d4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	4413      	add	r3, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d108      	bne.n	8008d82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	441a      	add	r2, r3
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	68ba      	ldr	r2, [r7, #8]
 8008d8c:	441a      	add	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d118      	bne.n	8008dc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b15      	ldr	r3, [pc, #84]	@ (8008df0 <prvInsertBlockIntoFreeList+0xb0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d00d      	beq.n	8008dbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	441a      	add	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	601a      	str	r2, [r3, #0]
 8008dbc:	e008      	b.n	8008dd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <prvInsertBlockIntoFreeList+0xb0>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	e003      	b.n	8008dd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dd0:	68fa      	ldr	r2, [r7, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d002      	beq.n	8008dde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dde:	bf00      	nop
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	240047d4 	.word	0x240047d4
 8008df0:	240047dc 	.word	0x240047dc

08008df4 <__malloc_lock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	@ (8008dfc <__malloc_lock+0x8>)
 8008df6:	f000 b88b 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	24004930 	.word	0x24004930

08008e00 <__malloc_unlock>:
 8008e00:	4801      	ldr	r0, [pc, #4]	@ (8008e08 <__malloc_unlock+0x8>)
 8008e02:	f000 b886 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008e06:	bf00      	nop
 8008e08:	24004930 	.word	0x24004930

08008e0c <memset>:
 8008e0c:	4402      	add	r2, r0
 8008e0e:	4603      	mov	r3, r0
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d100      	bne.n	8008e16 <memset+0xa>
 8008e14:	4770      	bx	lr
 8008e16:	f803 1b01 	strb.w	r1, [r3], #1
 8008e1a:	e7f9      	b.n	8008e10 <memset+0x4>

08008e1c <_reclaim_reent>:
 8008e1c:	4b29      	ldr	r3, [pc, #164]	@ (8008ec4 <_reclaim_reent+0xa8>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4283      	cmp	r3, r0
 8008e22:	b570      	push	{r4, r5, r6, lr}
 8008e24:	4604      	mov	r4, r0
 8008e26:	d04b      	beq.n	8008ec0 <_reclaim_reent+0xa4>
 8008e28:	69c3      	ldr	r3, [r0, #28]
 8008e2a:	b1ab      	cbz	r3, 8008e58 <_reclaim_reent+0x3c>
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	b16b      	cbz	r3, 8008e4c <_reclaim_reent+0x30>
 8008e30:	2500      	movs	r5, #0
 8008e32:	69e3      	ldr	r3, [r4, #28]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	5959      	ldr	r1, [r3, r5]
 8008e38:	2900      	cmp	r1, #0
 8008e3a:	d13b      	bne.n	8008eb4 <_reclaim_reent+0x98>
 8008e3c:	3504      	adds	r5, #4
 8008e3e:	2d80      	cmp	r5, #128	@ 0x80
 8008e40:	d1f7      	bne.n	8008e32 <_reclaim_reent+0x16>
 8008e42:	69e3      	ldr	r3, [r4, #28]
 8008e44:	4620      	mov	r0, r4
 8008e46:	68d9      	ldr	r1, [r3, #12]
 8008e48:	f000 f872 	bl	8008f30 <_free_r>
 8008e4c:	69e3      	ldr	r3, [r4, #28]
 8008e4e:	6819      	ldr	r1, [r3, #0]
 8008e50:	b111      	cbz	r1, 8008e58 <_reclaim_reent+0x3c>
 8008e52:	4620      	mov	r0, r4
 8008e54:	f000 f86c 	bl	8008f30 <_free_r>
 8008e58:	6961      	ldr	r1, [r4, #20]
 8008e5a:	b111      	cbz	r1, 8008e62 <_reclaim_reent+0x46>
 8008e5c:	4620      	mov	r0, r4
 8008e5e:	f000 f867 	bl	8008f30 <_free_r>
 8008e62:	69e1      	ldr	r1, [r4, #28]
 8008e64:	b111      	cbz	r1, 8008e6c <_reclaim_reent+0x50>
 8008e66:	4620      	mov	r0, r4
 8008e68:	f000 f862 	bl	8008f30 <_free_r>
 8008e6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008e6e:	b111      	cbz	r1, 8008e76 <_reclaim_reent+0x5a>
 8008e70:	4620      	mov	r0, r4
 8008e72:	f000 f85d 	bl	8008f30 <_free_r>
 8008e76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e78:	b111      	cbz	r1, 8008e80 <_reclaim_reent+0x64>
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f858 	bl	8008f30 <_free_r>
 8008e80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008e82:	b111      	cbz	r1, 8008e8a <_reclaim_reent+0x6e>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f000 f853 	bl	8008f30 <_free_r>
 8008e8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008e8c:	b111      	cbz	r1, 8008e94 <_reclaim_reent+0x78>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f84e 	bl	8008f30 <_free_r>
 8008e94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008e96:	b111      	cbz	r1, 8008e9e <_reclaim_reent+0x82>
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 f849 	bl	8008f30 <_free_r>
 8008e9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008ea0:	b111      	cbz	r1, 8008ea8 <_reclaim_reent+0x8c>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f844 	bl	8008f30 <_free_r>
 8008ea8:	6a23      	ldr	r3, [r4, #32]
 8008eaa:	b14b      	cbz	r3, 8008ec0 <_reclaim_reent+0xa4>
 8008eac:	4620      	mov	r0, r4
 8008eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008eb2:	4718      	bx	r3
 8008eb4:	680e      	ldr	r6, [r1, #0]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 f83a 	bl	8008f30 <_free_r>
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	e7bb      	b.n	8008e38 <_reclaim_reent+0x1c>
 8008ec0:	bd70      	pop	{r4, r5, r6, pc}
 8008ec2:	bf00      	nop
 8008ec4:	24000014 	.word	0x24000014

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	@ (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	@ (8008f0c <__libc_init_array+0x44>)
 8008edc:	f000 f872 	bl	8008fc4 <_init>
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	080090dc 	.word	0x080090dc
 8008f04:	080090dc 	.word	0x080090dc
 8008f08:	080090dc 	.word	0x080090dc
 8008f0c:	080090e0 	.word	0x080090e0

08008f10 <__retarget_lock_acquire_recursive>:
 8008f10:	4770      	bx	lr

08008f12 <__retarget_lock_release_recursive>:
 8008f12:	4770      	bx	lr

08008f14 <memcpy>:
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f1c:	d100      	bne.n	8008f20 <memcpy+0xc>
 8008f1e:	4770      	bx	lr
 8008f20:	b510      	push	{r4, lr}
 8008f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f2a:	4291      	cmp	r1, r2
 8008f2c:	d1f9      	bne.n	8008f22 <memcpy+0xe>
 8008f2e:	bd10      	pop	{r4, pc}

08008f30 <_free_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4605      	mov	r5, r0
 8008f34:	2900      	cmp	r1, #0
 8008f36:	d041      	beq.n	8008fbc <_free_r+0x8c>
 8008f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f3c:	1f0c      	subs	r4, r1, #4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	bfb8      	it	lt
 8008f42:	18e4      	addlt	r4, r4, r3
 8008f44:	f7ff ff56 	bl	8008df4 <__malloc_lock>
 8008f48:	4a1d      	ldr	r2, [pc, #116]	@ (8008fc0 <_free_r+0x90>)
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	b933      	cbnz	r3, 8008f5c <_free_r+0x2c>
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	6014      	str	r4, [r2, #0]
 8008f52:	4628      	mov	r0, r5
 8008f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f58:	f7ff bf52 	b.w	8008e00 <__malloc_unlock>
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	d908      	bls.n	8008f72 <_free_r+0x42>
 8008f60:	6820      	ldr	r0, [r4, #0]
 8008f62:	1821      	adds	r1, r4, r0
 8008f64:	428b      	cmp	r3, r1
 8008f66:	bf01      	itttt	eq
 8008f68:	6819      	ldreq	r1, [r3, #0]
 8008f6a:	685b      	ldreq	r3, [r3, #4]
 8008f6c:	1809      	addeq	r1, r1, r0
 8008f6e:	6021      	streq	r1, [r4, #0]
 8008f70:	e7ed      	b.n	8008f4e <_free_r+0x1e>
 8008f72:	461a      	mov	r2, r3
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	b10b      	cbz	r3, 8008f7c <_free_r+0x4c>
 8008f78:	42a3      	cmp	r3, r4
 8008f7a:	d9fa      	bls.n	8008f72 <_free_r+0x42>
 8008f7c:	6811      	ldr	r1, [r2, #0]
 8008f7e:	1850      	adds	r0, r2, r1
 8008f80:	42a0      	cmp	r0, r4
 8008f82:	d10b      	bne.n	8008f9c <_free_r+0x6c>
 8008f84:	6820      	ldr	r0, [r4, #0]
 8008f86:	4401      	add	r1, r0
 8008f88:	1850      	adds	r0, r2, r1
 8008f8a:	4283      	cmp	r3, r0
 8008f8c:	6011      	str	r1, [r2, #0]
 8008f8e:	d1e0      	bne.n	8008f52 <_free_r+0x22>
 8008f90:	6818      	ldr	r0, [r3, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	6053      	str	r3, [r2, #4]
 8008f96:	4408      	add	r0, r1
 8008f98:	6010      	str	r0, [r2, #0]
 8008f9a:	e7da      	b.n	8008f52 <_free_r+0x22>
 8008f9c:	d902      	bls.n	8008fa4 <_free_r+0x74>
 8008f9e:	230c      	movs	r3, #12
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	e7d6      	b.n	8008f52 <_free_r+0x22>
 8008fa4:	6820      	ldr	r0, [r4, #0]
 8008fa6:	1821      	adds	r1, r4, r0
 8008fa8:	428b      	cmp	r3, r1
 8008faa:	bf04      	itt	eq
 8008fac:	6819      	ldreq	r1, [r3, #0]
 8008fae:	685b      	ldreq	r3, [r3, #4]
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	bf04      	itt	eq
 8008fb4:	1809      	addeq	r1, r1, r0
 8008fb6:	6021      	streq	r1, [r4, #0]
 8008fb8:	6054      	str	r4, [r2, #4]
 8008fba:	e7ca      	b.n	8008f52 <_free_r+0x22>
 8008fbc:	bd38      	pop	{r3, r4, r5, pc}
 8008fbe:	bf00      	nop
 8008fc0:	240047f4 	.word	0x240047f4

08008fc4 <_init>:
 8008fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fc6:	bf00      	nop
 8008fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fca:	bc08      	pop	{r3}
 8008fcc:	469e      	mov	lr, r3
 8008fce:	4770      	bx	lr

08008fd0 <_fini>:
 8008fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fd2:	bf00      	nop
 8008fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fd6:	bc08      	pop	{r3}
 8008fd8:	469e      	mov	lr, r3
 8008fda:	4770      	bx	lr
