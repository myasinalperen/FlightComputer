
FlightComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a30c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800a5ac  0800a5ac  0000b5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a768  0800a768  0000b768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a770  0800a770  0000b770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a774  0800a774  0000b774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800a778  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800a7dc  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800a83c  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004824  24000124  0800a89c  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004948  0800a89c  0000c948  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e976  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005318  00000000  00000000  0003aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  0003fde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015e1  00000000  00000000  00041a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000403c2  00000000  00000000  00043009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000270f0  00000000  00000000  000833cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178fc6  00000000  00000000  000aa4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00223481  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e58  00000000  00000000  002234c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0022b31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a594 	.word	0x0800a594

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a594 	.word	0x0800a594

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_ZN3GPS8vGPStaskEPKv>:
GPS::~GPS() {
	// TODO Auto-generated destructor stub
}

 void GPS::vGPStask(void const* argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	  LOGu("GPS Task Giris\n");
 8000688:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <_ZN3GPS8vGPStaskEPKv+0x20>)
 800068a:	f000 f821 	bl	80006d0 <_Z4LOGuPKcz>
    while (1) {


  	  LOGu("GPS\n");
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <_ZN3GPS8vGPStaskEPKv+0x24>)
 8000690:	f000 f81e 	bl	80006d0 <_Z4LOGuPKcz>
  	osDelay(1);
 8000694:	2001      	movs	r0, #1
 8000696:	f006 fe25 	bl	80072e4 <osDelay>
  	  LOGu("GPS\n");
 800069a:	bf00      	nop
 800069c:	e7f7      	b.n	800068e <_ZN3GPS8vGPStaskEPKv+0xe>
 800069e:	bf00      	nop
 80006a0:	0800a5ac 	.word	0x0800a5ac
 80006a4:	0800a5bc 	.word	0x0800a5bc

080006a8 <_ZN3IMU8vIMUtaskEPKv>:
IMU::~IMU() {
	// TODO Auto-generated destructor stub
}

void IMU::vIMUtask(void const* argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	LOGu("IMU Taska Giris\n");
 80006b0:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <_ZN3IMU8vIMUtaskEPKv+0x20>)
 80006b2:	f000 f80d 	bl	80006d0 <_Z4LOGuPKcz>
	while(1)
	{
		LOGu("IMU\n");
 80006b6:	4805      	ldr	r0, [pc, #20]	@ (80006cc <_ZN3IMU8vIMUtaskEPKv+0x24>)
 80006b8:	f000 f80a 	bl	80006d0 <_Z4LOGuPKcz>
		osDelay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f006 fe11 	bl	80072e4 <osDelay>
		LOGu("IMU\n");
 80006c2:	bf00      	nop
 80006c4:	e7f7      	b.n	80006b6 <_ZN3IMU8vIMUtaskEPKv+0xe>
 80006c6:	bf00      	nop
 80006c8:	0800a5c4 	.word	0x0800a5c4
 80006cc:	0800a5d8 	.word	0x0800a5d8

080006d0 <_Z4LOGuPKcz>:
extern UART_HandleTypeDef huart2;
extern osMutexId LogMutexHandle;


void LOGu(const char *format, ...)
{
 80006d0:	b40f      	push	{r0, r1, r2, r3}
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b0b4      	sub	sp, #208	@ 0xd0
 80006d6:	af00      	add	r7, sp, #0
    char message[200]; // Mesajı tutacak bir dizi
    va_list args; // Değişken argümanlar için
    va_start(args, format); // Argüman listesini başlat
 80006d8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80006dc:	607b      	str	r3, [r7, #4]

    // Mesajı formatlayın
    vsnprintf(message, sizeof(message), format, args);
 80006de:	f107 0008 	add.w	r0, r7, #8
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80006e8:	21c8      	movs	r1, #200	@ 0xc8
 80006ea:	f009 fad9 	bl	8009ca0 <vsniprintf>

    va_end(args); // Argüman listesini sonlandır

    // Mutex ile UART erişimini güvenli hale getirin
    if (osMutexWait(LogMutexHandle, osWaitForever) == osOK)
 80006ee:	4b15      	ldr	r3, [pc, #84]	@ (8000744 <_Z4LOGuPKcz+0x74>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f04f 31ff 	mov.w	r1, #4294967295
 80006f6:	4618      	mov	r0, r3
 80006f8:	f006 fe20 	bl	800733c <osMutexWait>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf0c      	ite	eq
 8000702:	2301      	moveq	r3, #1
 8000704:	2300      	movne	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d013      	beq.n	8000734 <_Z4LOGuPKcz+0x64>
    {
        // Mesajı UART üzerinden gönderin
        if (HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 10) != HAL_OK)
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fde5 	bl	80002e0 <strlen>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	f107 0108 	add.w	r1, r7, #8
 800071e:	230a      	movs	r3, #10
 8000720:	4809      	ldr	r0, [pc, #36]	@ (8000748 <_Z4LOGuPKcz+0x78>)
 8000722:	f005 f941 	bl	80059a8 <HAL_UART_Transmit>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
        {
            // Hata durumu yönetimi
        }

        // UART erişimi bitti, mutex'i bırak
        osMutexRelease(LogMutexHandle);
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <_Z4LOGuPKcz+0x74>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f006 fe52 	bl	80073d8 <osMutexRelease>
    }
}
 8000734:	bf00      	nop
 8000736:	37d0      	adds	r7, #208	@ 0xd0
 8000738:	46bd      	mov	sp, r7
 800073a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800073e:	b004      	add	sp, #16
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	24000a44 	.word	0x24000a44
 8000748:	240004c8 	.word	0x240004c8

0800074c <_ZN19SistemYapilandiriciC1Ev>:
#include "LOG.h"
/**
 * @brief SistemYapilandirici constructor
 */

 SistemYapilandirici::SistemYapilandirici()
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
{
	 //Instance();
	islevBaslat();
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f000 f805 	bl	8000764 <_ZN19SistemYapilandirici11islevBaslatEv>
	return;
}
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZN19SistemYapilandirici11islevBaslatEv>:

/**
 * @brief Sistemde olan tasklari baslatir
 */
void SistemYapilandirici::islevBaslat()
{
 8000764:	b5b0      	push	{r4, r5, r7, lr}
 8000766:	b092      	sub	sp, #72	@ 0x48
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]


    /* definition and creation of IMUtask */
    osThreadId IMUtaskHandle;
    osThreadDef(IMUtask, IMU::vIMUtask, osPriorityAboveNormal, 0, taskSize);
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <_ZN19SistemYapilandirici11islevBaslatEv+0x84>)
 800076e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000772:	461d      	mov	r5, r3
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8000780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f006 fd60 	bl	800724c <osThreadCreate>
 800078c:	6478      	str	r0, [r7, #68]	@ 0x44
    // Task'ın başarıyla oluşturulup oluşturulmadığını kontrol et
    if (IMUtaskHandle == NULL)
 800078e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000790:	2b00      	cmp	r3, #0
 8000792:	d103      	bne.n	800079c <_ZN19SistemYapilandirici11islevBaslatEv+0x38>
    {
    	LOGu("IMUtask olusturulamadi \n");
 8000794:	4815      	ldr	r0, [pc, #84]	@ (80007ec <_ZN19SistemYapilandirici11islevBaslatEv+0x88>)
 8000796:	f7ff ff9b 	bl	80006d0 <_Z4LOGuPKcz>
 800079a:	e002      	b.n	80007a2 <_ZN19SistemYapilandirici11islevBaslatEv+0x3e>

    }
    else
    {
    	LOGu("IMUtask olusturuldu \n");
 800079c:	4814      	ldr	r0, [pc, #80]	@ (80007f0 <_ZN19SistemYapilandirici11islevBaslatEv+0x8c>)
 800079e:	f7ff ff97 	bl	80006d0 <_Z4LOGuPKcz>
    }


	  /* definition and creation of GPStask */
		osThreadId GPStaskHandle;
	  osThreadDef(GPStask, GPS::vGPStask, osPriorityAboveNormal, 0, taskSize);
 80007a2:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <_ZN19SistemYapilandirici11islevBaslatEv+0x90>)
 80007a4:	f107 0408 	add.w	r4, r7, #8
 80007a8:	461d      	mov	r5, r3
 80007aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  GPStaskHandle = osThreadCreate(osThread(GPStask), NULL);
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f006 fd45 	bl	800724c <osThreadCreate>
 80007c2:	6438      	str	r0, [r7, #64]	@ 0x40
	    // Task'ın başarıyla oluşturulup oluşturulmadığını kontrol et
	    if (GPStaskHandle == NULL)
 80007c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d103      	bne.n	80007d2 <_ZN19SistemYapilandirici11islevBaslatEv+0x6e>
	    {
	    	LOGu("GPStask olusturulamadi \n");
 80007ca:	480b      	ldr	r0, [pc, #44]	@ (80007f8 <_ZN19SistemYapilandirici11islevBaslatEv+0x94>)
 80007cc:	f7ff ff80 	bl	80006d0 <_Z4LOGuPKcz>
 80007d0:	e002      	b.n	80007d8 <_ZN19SistemYapilandirici11islevBaslatEv+0x74>
	    }
	    else
	    {
	    	LOGu("GPStask olusturuldu \n");
 80007d2:	480a      	ldr	r0, [pc, #40]	@ (80007fc <_ZN19SistemYapilandirici11islevBaslatEv+0x98>)
 80007d4:	f7ff ff7c 	bl	80006d0 <_Z4LOGuPKcz>
	    {
	    	LOGu("NAVtask olusturuldu \n");
	    }
#endif

	    LOGu("Sistem Yapilandirici Bitti\n");
 80007d8:	4809      	ldr	r0, [pc, #36]	@ (8000800 <_ZN19SistemYapilandirici11islevBaslatEv+0x9c>)
 80007da:	f7ff ff79 	bl	80006d0 <_Z4LOGuPKcz>

return;
 80007de:	bf00      	nop
	}
 80007e0:	3748      	adds	r7, #72	@ 0x48
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bdb0      	pop	{r4, r5, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	0800a66c 	.word	0x0800a66c
 80007ec:	0800a5e0 	.word	0x0800a5e0
 80007f0:	0800a5fc 	.word	0x0800a5fc
 80007f4:	0800a690 	.word	0x0800a690
 80007f8:	0800a614 	.word	0x0800a614
 80007fc:	0800a630 	.word	0x0800a630
 8000800:	0800a648 	.word	0x0800a648

08000804 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4a07      	ldr	r2, [pc, #28]	@ (8000830 <vApplicationGetIdleTaskMemory+0x2c>)
 8000814:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	4a06      	ldr	r2, [pc, #24]	@ (8000834 <vApplicationGetIdleTaskMemory+0x30>)
 800081a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2280      	movs	r2, #128	@ 0x80
 8000820:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000822:	bf00      	nop
 8000824:	3714      	adds	r7, #20
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	24000140 	.word	0x24000140
 8000834:	240001e0 	.word	0x240001e0

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b5b0      	push	{r4, r5, r7, lr}
 800083a:	b08c      	sub	sp, #48	@ 0x30
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 fe49 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f83f 	bl	80008c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 f9b3 	bl	8000bb0 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 800084a:	f000 f8c9 	bl	80009e0 <_ZL11MX_ETH_Initv>
  MX_USART2_UART_Init();
 800084e:	f000 f919 	bl	8000a84 <_ZL19MX_USART2_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000852:	f000 f977 	bl	8000b44 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f006 fded 	bl	8007444 <osSemaphoreCreate>
 800086a:	4603      	mov	r3, r0
 800086c:	4a11      	ldr	r2, [pc, #68]	@ (80008b4 <main+0x7c>)
 800086e:	6013      	str	r3, [r2, #0]

  osMutexDef(LogMutex);
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  LogMutexHandle = osMutexCreate(osMutex(LogMutex));
 8000878:	f107 0320 	add.w	r3, r7, #32
 800087c:	4618      	mov	r0, r3
 800087e:	f006 fd45 	bl	800730c <osMutexCreate>
 8000882:	4603      	mov	r3, r0
 8000884:	4a0c      	ldr	r2, [pc, #48]	@ (80008b8 <main+0x80>)
 8000886:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 1024);
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <main+0x84>)
 800088a:	1d3c      	adds	r4, r7, #4
 800088c:	461d      	mov	r5, r3
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000896:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f006 fcd4 	bl	800724c <osThreadCreate>
 80008a4:	4603      	mov	r3, r0
 80008a6:	4a06      	ldr	r2, [pc, #24]	@ (80008c0 <main+0x88>)
 80008a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008aa:	f006 fcc8 	bl	800723e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ae:	bf00      	nop
 80008b0:	e7fd      	b.n	80008ae <main+0x76>
 80008b2:	bf00      	nop
 80008b4:	24000a48 	.word	0x24000a48
 80008b8:	24000a44 	.word	0x24000a44
 80008bc:	0800a6b8 	.word	0x0800a6b8
 80008c0:	24000a40 	.word	0x24000a40

080008c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b09c      	sub	sp, #112	@ 0x70
 80008c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	224c      	movs	r2, #76	@ 0x4c
 80008d0:	2100      	movs	r1, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f009 f9f2 	bl	8009cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2220      	movs	r2, #32
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f009 f9ec 	bl	8009cbc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008e4:	2002      	movs	r0, #2
 80008e6:	f001 fea3 	bl	8002630 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b3a      	ldr	r3, [pc, #232]	@ (80009d8 <_Z18SystemClock_Configv+0x114>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	4a39      	ldr	r2, [pc, #228]	@ (80009d8 <_Z18SystemClock_Configv+0x114>)
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008fa:	4b37      	ldr	r3, [pc, #220]	@ (80009d8 <_Z18SystemClock_Configv+0x114>)
 80008fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <_Z18SystemClock_Configv+0x118>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800090c:	4a33      	ldr	r2, [pc, #204]	@ (80009dc <_Z18SystemClock_Configv+0x118>)
 800090e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <_Z18SystemClock_Configv+0x118>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <_Z18SystemClock_Configv+0x118>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d1f3      	bne.n	8000922 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800093a:	2303      	movs	r3, #3
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000944:	2301      	movs	r3, #1
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000948:	2340      	movs	r3, #64	@ 0x40
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094c:	2302      	movs	r3, #2
 800094e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	2302      	movs	r3, #2
 8000952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000954:	2301      	movs	r3, #1
 8000956:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000958:	2318      	movs	r3, #24
 800095a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800095c:	2302      	movs	r3, #2
 800095e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000964:	2302      	movs	r3, #2
 8000966:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000968:	230c      	movs	r3, #12
 800096a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800096c:	2300      	movs	r3, #0
 800096e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fea3 	bl	80026c4 <HAL_RCC_OscConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 800098e:	f000 fa13 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000992:	233f      	movs	r3, #63	@ 0x3f
 8000994:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2101      	movs	r1, #1
 80009b6:	4618      	mov	r0, r3
 80009b8:	f002 fade 	bl	8002f78 <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	bf14      	ite	ne
 80009c2:	2301      	movne	r3, #1
 80009c4:	2300      	moveq	r3, #0
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 80009cc:	f000 f9f4 	bl	8000db8 <Error_Handler>
  }
}
 80009d0:	bf00      	nop
 80009d2:	3770      	adds	r7, #112	@ 0x70
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	58000400 	.word	0x58000400
 80009dc:	58024800 	.word	0x58024800

080009e0 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 80009e6:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <_ZL11MX_ETH_Initv+0x90>)
 80009e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80009ea:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 80009f2:	2280      	movs	r2, #128	@ 0x80
 80009f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80009f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 80009f8:	22e1      	movs	r2, #225	@ 0xe1
 80009fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a10:	4a18      	ldr	r2, [pc, #96]	@ (8000a74 <_ZL11MX_ETH_Initv+0x94>)
 8000a12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a1c:	4a16      	ldr	r2, [pc, #88]	@ (8000a78 <_ZL11MX_ETH_Initv+0x98>)
 8000a1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a22:	4a16      	ldr	r2, [pc, #88]	@ (8000a7c <_ZL11MX_ETH_Initv+0x9c>)
 8000a24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a26:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a28:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a2e:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <_ZL11MX_ETH_Initv+0x8c>)
 8000a30:	f000 fed0 	bl	80017d4 <HAL_ETH_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	bf14      	ite	ne
 8000a3a:	2301      	movne	r3, #1
 8000a3c:	2300      	moveq	r3, #0
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8000a44:	f000 f9b8 	bl	8000db8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a48:	2238      	movs	r2, #56	@ 0x38
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <_ZL11MX_ETH_Initv+0xa0>)
 8000a4e:	f009 f935 	bl	8009cbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <_ZL11MX_ETH_Initv+0xa0>)
 8000a54:	2221      	movs	r2, #33	@ 0x21
 8000a56:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <_ZL11MX_ETH_Initv+0xa0>)
 8000a5a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a5e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <_ZL11MX_ETH_Initv+0xa0>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	24000418 	.word	0x24000418
 8000a70:	40028000 	.word	0x40028000
 8000a74:	24000a4c 	.word	0x24000a4c
 8000a78:	240000c4 	.word	0x240000c4
 8000a7c:	24000064 	.word	0x24000064
 8000a80:	240003e0 	.word	0x240003e0

08000a84 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
	  huart2.Instance = USART2;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000b40 <_ZL19MX_USART2_UART_Initv+0xbc>)
 8000a8c:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b27      	ldr	r3, [pc, #156]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b26      	ldr	r3, [pc, #152]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b24      	ldr	r3, [pc, #144]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b23      	ldr	r3, [pc, #140]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000acc:	481b      	ldr	r0, [pc, #108]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000ace:	f004 ff1b 	bl	8005908 <HAL_UART_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf14      	ite	ne
 8000ad8:	2301      	movne	r3, #1
 8000ada:	2300      	moveq	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <_ZL19MX_USART2_UART_Initv+0x62>
	  {
	    Error_Handler();
 8000ae2:	f000 f969 	bl	8000db8 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4814      	ldr	r0, [pc, #80]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000aea:	f005 ffac 	bl	8006a46 <HAL_UARTEx_SetTxFifoThreshold>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	bf14      	ite	ne
 8000af4:	2301      	movne	r3, #1
 8000af6:	2300      	moveq	r3, #0
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <_ZL19MX_USART2_UART_Initv+0x7e>
	  {
	    Error_Handler();
 8000afe:	f000 f95b 	bl	8000db8 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b02:	2100      	movs	r1, #0
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b06:	f005 ffdc 	bl	8006ac2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	bf14      	ite	ne
 8000b10:	2301      	movne	r3, #1
 8000b12:	2300      	moveq	r3, #0
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <_ZL19MX_USART2_UART_Initv+0x9a>
	  {
	    Error_Handler();
 8000b1a:	f000 f94d 	bl	8000db8 <Error_Handler>
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b1e:	4807      	ldr	r0, [pc, #28]	@ (8000b3c <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000b20:	f005 ff58 	bl	80069d4 <HAL_UARTEx_DisableFifoMode>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <_ZL19MX_USART2_UART_Initv+0xb4>
	  {
	    Error_Handler();
 8000b34:	f000 f940 	bl	8000db8 <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	240004c8 	.word	0x240004c8
 8000b40:	40004400 	.word	0x40004400

08000b44 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b4a:	4a18      	ldr	r2, [pc, #96]	@ (8000bac <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b4e:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b50:	2209      	movs	r2, #9
 8000b52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b54:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b56:	2202      	movs	r2, #2
 8000b58:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b60:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b62:	2202      	movs	r2, #2
 8000b64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b84:	4b08      	ldr	r3, [pc, #32]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b8a:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000b8c:	f001 fc1f 	bl	80023ce <HAL_PCD_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bf14      	ite	ne
 8000b96:	2301      	movne	r3, #1
 8000b98:	2300      	moveq	r3, #0
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000ba0:	f000 f90a 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2400055c 	.word	0x2400055c
 8000bac:	40080000 	.word	0x40080000

08000bb0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	@ 0x30
 8000bb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc6:	4b62      	ldr	r3, [pc, #392]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a60      	ldr	r2, [pc, #384]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
 8000be2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be4:	4b5a      	ldr	r3, [pc, #360]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	4a59      	ldr	r2, [pc, #356]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf4:	4b56      	ldr	r3, [pc, #344]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b53      	ldr	r3, [pc, #332]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	4a51      	ldr	r2, [pc, #324]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c0a:	f043 0301 	orr.w	r3, r3, #1
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c12:	4b4f      	ldr	r3, [pc, #316]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c20:	4b4b      	ldr	r3, [pc, #300]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	4a4a      	ldr	r2, [pc, #296]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c30:	4b47      	ldr	r3, [pc, #284]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3e:	4b44      	ldr	r3, [pc, #272]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	4a42      	ldr	r2, [pc, #264]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4e:	4b40      	ldr	r3, [pc, #256]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c54:	f003 0308 	and.w	r3, r3, #8
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	4a3b      	ldr	r2, [pc, #236]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c6c:	4b38      	ldr	r3, [pc, #224]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c7a:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c80:	4a33      	ldr	r2, [pc, #204]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8a:	4b31      	ldr	r3, [pc, #196]	@ (8000d50 <_ZL12MX_GPIO_Initv+0x1a0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000c9e:	482d      	ldr	r0, [pc, #180]	@ (8000d54 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000ca0:	f001 fb7c 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000caa:	482b      	ldr	r0, [pc, #172]	@ (8000d58 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000cac:	f001 fb76 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2102      	movs	r1, #2
 8000cb4:	4829      	ldr	r0, [pc, #164]	@ (8000d5c <_ZL12MX_GPIO_Initv+0x1ac>)
 8000cb6:	f001 fb71 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4824      	ldr	r0, [pc, #144]	@ (8000d60 <_ZL12MX_GPIO_Initv+0x1b0>)
 8000cd0:	f001 f9b4 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000cd4:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4819      	ldr	r0, [pc, #100]	@ (8000d54 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000cee:	f001 f9a5 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4813      	ldr	r0, [pc, #76]	@ (8000d58 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000d0c:	f001 f996 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d10:	2380      	movs	r3, #128	@ 0x80
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	@ (8000d64 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000d26:	f001 f989 	bl	800203c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4806      	ldr	r0, [pc, #24]	@ (8000d5c <_ZL12MX_GPIO_Initv+0x1ac>)
 8000d42:	f001 f97b 	bl	800203c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	@ 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58024400 	.word	0x58024400
 8000d54:	58020400 	.word	0x58020400
 8000d58:	58020c00 	.word	0x58020c00
 8000d5c:	58021000 	.word	0x58021000
 8000d60:	58020800 	.word	0x58020800
 8000d64:	58021800 	.word	0x58021800

08000d68 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */



	LOGu("Sistem Yapilandirici Basliyor\n");
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <_Z16StartDefaultTaskPKv+0x28>)
 8000d72:	f7ff fcad 	bl	80006d0 <_Z4LOGuPKcz>
	SistemYapilandirici *p_SistemYapilandirici = new SistemYapilandirici();
 8000d76:	2001      	movs	r0, #1
 8000d78:	f008 fe8e 	bl	8009a98 <_Znwj>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	461c      	mov	r4, r3
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fce3 	bl	800074c <_ZN19SistemYapilandiriciC1Ev>
 8000d86:	60fc      	str	r4, [r7, #12]

	return;
 8000d88:	bf00      	nop
 /* USER CODE END 5 */
}
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	0800a6d4 	.word	0x0800a6d4

08000d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d101      	bne.n	8000daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000da6:	f000 fbd1 	bl	800154c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40010000 	.word	0x40010000

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <Error_Handler+0x8>

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_MspInit+0x38>)
 8000dcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <HAL_MspInit+0x38>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_MspInit+0x38>)
 8000ddc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	210f      	movs	r1, #15
 8000dec:	f06f 0001 	mvn.w	r0, #1
 8000df0:	f000 fcc8 	bl	8001784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	58024400 	.word	0x58024400

08000e00 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08e      	sub	sp, #56	@ 0x38
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a59      	ldr	r2, [pc, #356]	@ (8000f84 <HAL_ETH_MspInit+0x184>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	f040 80ab 	bne.w	8000f7a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e24:	4b58      	ldr	r3, [pc, #352]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e2a:	4a57      	ldr	r2, [pc, #348]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e30:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e34:	4b54      	ldr	r3, [pc, #336]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e3e:	623b      	str	r3, [r7, #32]
 8000e40:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e42:	4b51      	ldr	r3, [pc, #324]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e48:	4a4f      	ldr	r2, [pc, #316]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e52:	4b4d      	ldr	r3, [pc, #308]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e60:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e66:	4a48      	ldr	r2, [pc, #288]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e70:	4b45      	ldr	r3, [pc, #276]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e7a:	61bb      	str	r3, [r7, #24]
 8000e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7e:	4b42      	ldr	r3, [pc, #264]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e84:	4a40      	ldr	r2, [pc, #256]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e8e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e94:	f003 0304 	and.w	r3, r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
 8000e9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea2:	4a39      	ldr	r2, [pc, #228]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eac:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eba:	4b33      	ldr	r3, [pc, #204]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec0:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ec2:	f043 0302 	orr.w	r3, r3, #2
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eca:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ede:	4a2a      	ldr	r2, [pc, #168]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <HAL_ETH_MspInit+0x188>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ef6:	2332      	movs	r3, #50	@ 0x32
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f06:	230b      	movs	r3, #11
 8000f08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481e      	ldr	r0, [pc, #120]	@ (8000f8c <HAL_ETH_MspInit+0x18c>)
 8000f12:	f001 f893 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f16:	2386      	movs	r3, #134	@ 0x86
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f26:	230b      	movs	r3, #11
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4817      	ldr	r0, [pc, #92]	@ (8000f90 <HAL_ETH_MspInit+0x190>)
 8000f32:	f001 f883 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f48:	230b      	movs	r3, #11
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4810      	ldr	r0, [pc, #64]	@ (8000f94 <HAL_ETH_MspInit+0x194>)
 8000f54:	f001 f872 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f58:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2300      	movs	r3, #0
 8000f68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6a:	230b      	movs	r3, #11
 8000f6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <HAL_ETH_MspInit+0x198>)
 8000f76:	f001 f861 	bl	800203c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3738      	adds	r7, #56	@ 0x38
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40028000 	.word	0x40028000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020800 	.word	0x58020800
 8000f90:	58020000 	.word	0x58020000
 8000f94:	58020400 	.word	0x58020400
 8000f98:	58021800 	.word	0x58021800

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b0bc      	sub	sp, #240	@ 0xf0
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	22c0      	movs	r2, #192	@ 0xc0
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f008 fe7d 	bl	8009cbc <memset>
  if(huart->Instance==USART2)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a38      	ldr	r2, [pc, #224]	@ (80010a8 <HAL_UART_MspInit+0x10c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d169      	bne.n	80010a0 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fcc:	f04f 0202 	mov.w	r2, #2
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fde:	f107 0318 	add.w	r3, r7, #24
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f002 fb96 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fee:	f7ff fee3 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8000ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8000ffa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ffe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001002:	4b2a      	ldr	r3, [pc, #168]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a25      	ldr	r2, [pc, #148]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b22      	ldr	r3, [pc, #136]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a1d      	ldr	r2, [pc, #116]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001036:	f043 0308 	orr.w	r3, r3, #8
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_UART_MspInit+0x110>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800104c:	2308      	movs	r3, #8
 800104e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001052:	2302      	movs	r3, #2
 8001054:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001064:	2307      	movs	r3, #7
 8001066:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800106e:	4619      	mov	r1, r3
 8001070:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <HAL_UART_MspInit+0x114>)
 8001072:	f000 ffe3 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001076:	2320      	movs	r3, #32
 8001078:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108e:	2307      	movs	r3, #7
 8001090:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <HAL_UART_MspInit+0x118>)
 800109c:	f000 ffce 	bl	800203c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010a0:	bf00      	nop
 80010a2:	37f0      	adds	r7, #240	@ 0xf0
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40004400 	.word	0x40004400
 80010ac:	58024400 	.word	0x58024400
 80010b0:	58020000 	.word	0x58020000
 80010b4:	58020c00 	.word	0x58020c00

080010b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ba      	sub	sp, #232	@ 0xe8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	22c0      	movs	r2, #192	@ 0xc0
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f008 fdef 	bl	8009cbc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a30      	ldr	r2, [pc, #192]	@ (80011a4 <HAL_PCD_MspInit+0xec>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d159      	bne.n	800119c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010e8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010f4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010fc:	f107 0310 	add.w	r3, r7, #16
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fb07 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800110c:	f7ff fe54 	bl	8000db8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001110:	f001 fac8 	bl	80026a4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001124:	4b20      	ldr	r3, [pc, #128]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001132:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800114c:	230a      	movs	r3, #10
 800114e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001156:	4619      	mov	r1, r3
 8001158:	4814      	ldr	r0, [pc, #80]	@ (80011ac <HAL_PCD_MspInit+0xf4>)
 800115a:	f000 ff6f 	bl	800203c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800115e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001162:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001176:	4619      	mov	r1, r3
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <HAL_PCD_MspInit+0xf4>)
 800117a:	f000 ff5f 	bl	800203c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 8001180:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001184:	4a08      	ldr	r2, [pc, #32]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 8001186:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800118a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_PCD_MspInit+0xf0>)
 8001190:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800119c:	bf00      	nop
 800119e:	37e8      	adds	r7, #232	@ 0xe8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40080000 	.word	0x40080000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020000 	.word	0x58020000

080011b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08e      	sub	sp, #56	@ 0x38
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b0f      	cmp	r3, #15
 80011bc:	d842      	bhi.n	8001244 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80011be:	2200      	movs	r2, #0
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	2019      	movs	r0, #25
 80011c4:	f000 fade 	bl	8001784 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80011c8:	2019      	movs	r0, #25
 80011ca:	f000 faf5 	bl	80017b8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80011ce:	4a23      	ldr	r2, [pc, #140]	@ (800125c <HAL_InitTick+0xac>)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <HAL_InitTick+0xb0>)
 80011d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011da:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <HAL_InitTick+0xb0>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_InitTick+0xb0>)
 80011e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011f2:	f107 020c 	add.w	r2, r7, #12
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4611      	mov	r1, r2
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fa47 	bl	8003690 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001202:	f002 fa2f 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8001206:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001208:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800120a:	4a16      	ldr	r2, [pc, #88]	@ (8001264 <HAL_InitTick+0xb4>)
 800120c:	fba2 2303 	umull	r2, r3, r2, r3
 8001210:	0c9b      	lsrs	r3, r3, #18
 8001212:	3b01      	subs	r3, #1
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <HAL_InitTick+0xb8>)
 8001218:	4a14      	ldr	r2, [pc, #80]	@ (800126c <HAL_InitTick+0xbc>)
 800121a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <HAL_InitTick+0xb8>)
 800121e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001222:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001224:	4a10      	ldr	r2, [pc, #64]	@ (8001268 <HAL_InitTick+0xb8>)
 8001226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001228:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <HAL_InitTick+0xb8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <HAL_InitTick+0xb8>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001236:	480c      	ldr	r0, [pc, #48]	@ (8001268 <HAL_InitTick+0xb8>)
 8001238:	f004 f898 	bl	800536c <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d107      	bne.n	8001252 <HAL_InitTick+0xa2>
 8001242:	e001      	b.n	8001248 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e005      	b.n	8001254 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001248:	4807      	ldr	r0, [pc, #28]	@ (8001268 <HAL_InitTick+0xb8>)
 800124a:	f004 f8f1 	bl	8005430 <HAL_TIM_Base_Start_IT>
 800124e:	4603      	mov	r3, r0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3738      	adds	r7, #56	@ 0x38
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	24000008 	.word	0x24000008
 8001260:	58024400 	.word	0x58024400
 8001264:	431bde83 	.word	0x431bde83
 8001268:	24000a54 	.word	0x24000a54
 800126c:	40010000 	.word	0x40010000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <MemManage_Handler+0x4>

08001288 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <BusFault_Handler+0x4>

08001290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <UsageFault_Handler+0x4>

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ac:	4802      	ldr	r0, [pc, #8]	@ (80012b8 <TIM1_UP_IRQHandler+0x10>)
 80012ae:	f004 f937 	bl	8005520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	24000a54 	.word	0x24000a54

080012bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  return 1;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_kill>:

int _kill(int pid, int sig)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d6:	f008 fda3 	bl	8009e20 <__errno>
 80012da:	4603      	mov	r3, r0
 80012dc:	2216      	movs	r2, #22
 80012de:	601a      	str	r2, [r3, #0]
  return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_exit>:

void _exit (int status)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffe7 	bl	80012cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80012fe:	bf00      	nop
 8001300:	e7fd      	b.n	80012fe <_exit+0x12>
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	@ (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f008 fd74 	bl	8009e20 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	24080000 	.word	0x24080000
 8001364:	00000400 	.word	0x00000400
 8001368:	24000aa0 	.word	0x24000aa0
 800136c:	24004948 	.word	0x24004948

08001370 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001374:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <SystemInit+0xe4>)
 8001376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800137a:	4a36      	ldr	r2, [pc, #216]	@ (8001454 <SystemInit+0xe4>)
 800137c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001380:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001384:	4b34      	ldr	r3, [pc, #208]	@ (8001458 <SystemInit+0xe8>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 030f 	and.w	r3, r3, #15
 800138c:	2b06      	cmp	r3, #6
 800138e:	d807      	bhi.n	80013a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001390:	4b31      	ldr	r3, [pc, #196]	@ (8001458 <SystemInit+0xe8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f023 030f 	bic.w	r3, r3, #15
 8001398:	4a2f      	ldr	r2, [pc, #188]	@ (8001458 <SystemInit+0xe8>)
 800139a:	f043 0307 	orr.w	r3, r3, #7
 800139e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013a0:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <SystemInit+0xec>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a2d      	ldr	r2, [pc, #180]	@ (800145c <SystemInit+0xec>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <SystemInit+0xec>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <SystemInit+0xec>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4929      	ldr	r1, [pc, #164]	@ (800145c <SystemInit+0xec>)
 80013b8:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <SystemInit+0xf0>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <SystemInit+0xe8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <SystemInit+0xe8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 030f 	bic.w	r3, r3, #15
 80013d2:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <SystemInit+0xe8>)
 80013d4:	f043 0307 	orr.w	r3, r3, #7
 80013d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <SystemInit+0xec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013e0:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <SystemInit+0xec>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <SystemInit+0xec>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <SystemInit+0xec>)
 80013ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001464 <SystemInit+0xf4>)
 80013f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <SystemInit+0xec>)
 80013f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001468 <SystemInit+0xf8>)
 80013f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <SystemInit+0xec>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	@ (800146c <SystemInit+0xfc>)
 80013fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <SystemInit+0xec>)
 8001400:	2200      	movs	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <SystemInit+0xec>)
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <SystemInit+0xfc>)
 8001408:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <SystemInit+0xec>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <SystemInit+0xec>)
 8001412:	4a16      	ldr	r2, [pc, #88]	@ (800146c <SystemInit+0xfc>)
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <SystemInit+0xec>)
 8001418:	2200      	movs	r2, #0
 800141a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <SystemInit+0xec>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0e      	ldr	r2, [pc, #56]	@ (800145c <SystemInit+0xec>)
 8001422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001426:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <SystemInit+0xec>)
 800142a:	2200      	movs	r2, #0
 800142c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <SystemInit+0x100>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <SystemInit+0x104>)
 8001434:	4013      	ands	r3, r2
 8001436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800143a:	d202      	bcs.n	8001442 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <SystemInit+0x108>)
 800143e:	2201      	movs	r2, #1
 8001440:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <SystemInit+0x10c>)
 8001444:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001448:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00
 8001458:	52002000 	.word	0x52002000
 800145c:	58024400 	.word	0x58024400
 8001460:	eaf6ed7f 	.word	0xeaf6ed7f
 8001464:	02020200 	.word	0x02020200
 8001468:	01ff0000 	.word	0x01ff0000
 800146c:	01010280 	.word	0x01010280
 8001470:	5c001000 	.word	0x5c001000
 8001474:	ffff0000 	.word	0xffff0000
 8001478:	51008108 	.word	0x51008108
 800147c:	52004000 	.word	0x52004000

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001484:	f7ff ff74 	bl	8001370 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	@ (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f008 fcbd 	bl	8009e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff f9c1 	bl	8000838 <main>
  bx  lr
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80014bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014c0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 80014c4:	0800a778 	.word	0x0800a778
  ldr r2, =_sbss
 80014c8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 80014cc:	24004948 	.word	0x24004948

080014d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC3_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014da:	2003      	movs	r0, #3
 80014dc:	f000 f947 	bl	800176e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014e0:	f001 ff00 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_Init+0x68>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	4913      	ldr	r1, [pc, #76]	@ (8001540 <HAL_Init+0x6c>)
 80014f2:	5ccb      	ldrb	r3, [r1, r3]
 80014f4:	f003 031f 	and.w	r3, r3, #31
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_Init+0x68>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 030f 	and.w	r3, r3, #15
 8001506:	4a0e      	ldr	r2, [pc, #56]	@ (8001540 <HAL_Init+0x6c>)
 8001508:	5cd3      	ldrb	r3, [r2, r3]
 800150a:	f003 031f 	and.w	r3, r3, #31
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	fa22 f303 	lsr.w	r3, r2, r3
 8001514:	4a0b      	ldr	r2, [pc, #44]	@ (8001544 <HAL_Init+0x70>)
 8001516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001518:	4a0b      	ldr	r2, [pc, #44]	@ (8001548 <HAL_Init+0x74>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151e:	200f      	movs	r0, #15
 8001520:	f7ff fe46 	bl	80011b0 <HAL_InitTick>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e002      	b.n	8001534 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800152e:	f7ff fc49 	bl	8000dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001532:	2300      	movs	r3, #0
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	58024400 	.word	0x58024400
 8001540:	0800a6fc 	.word	0x0800a6fc
 8001544:	24000004 	.word	0x24000004
 8001548:	24000000 	.word	0x24000000

0800154c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_IncTick+0x20>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <HAL_IncTick+0x24>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4413      	add	r3, r2
 800155c:	4a04      	ldr	r2, [pc, #16]	@ (8001570 <HAL_IncTick+0x24>)
 800155e:	6013      	str	r3, [r2, #0]
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000aa4 	.word	0x24000aa4

08001574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b03      	ldr	r3, [pc, #12]	@ (8001588 <HAL_GetTick+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	24000aa4 	.word	0x24000aa4

0800158c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001594:	f7ff ffee 	bl	8001574 <HAL_GetTick>
 8001598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d005      	beq.n	80015b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a6:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <HAL_Delay+0x44>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015b2:	bf00      	nop
 80015b4:	f7ff ffde 	bl	8001574 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d8f7      	bhi.n	80015b4 <HAL_Delay+0x28>
  {
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2400000c 	.word	0x2400000c

080015d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015d8:	4b03      	ldr	r3, [pc, #12]	@ (80015e8 <HAL_GetREVID+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0c1b      	lsrs	r3, r3, #16
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	5c001000 	.word	0x5c001000

080015ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80015fc:	4904      	ldr	r1, [pc, #16]	@ (8001610 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	58000400 	.word	0x58000400

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	4313      	orrs	r3, r2
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	05fa0000 	.word	0x05fa0000

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	f003 021f 	and.w	r2, r3, #31
 8001690:	4907      	ldr	r1, [pc, #28]	@ (80016b0 <__NVIC_EnableIRQ+0x38>)
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	095b      	lsrs	r3, r3, #5
 8001698:	2001      	movs	r0, #1
 800169a:	fa00 f202 	lsl.w	r2, r0, r2
 800169e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000e100 	.word	0xe000e100

080016b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	6039      	str	r1, [r7, #0]
 80016be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	db0a      	blt.n	80016de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <__NVIC_SetPriority+0x4c>)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	0112      	lsls	r2, r2, #4
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	440b      	add	r3, r1
 80016d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016dc:	e00a      	b.n	80016f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4908      	ldr	r1, [pc, #32]	@ (8001704 <__NVIC_SetPriority+0x50>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	3b04      	subs	r3, #4
 80016ec:	0112      	lsls	r2, r2, #4
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	440b      	add	r3, r1
 80016f2:	761a      	strb	r2, [r3, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000e100 	.word	0xe000e100
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	@ 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	f1c3 0307 	rsb	r3, r3, #7
 8001722:	2b04      	cmp	r3, #4
 8001724:	bf28      	it	cs
 8001726:	2304      	movcs	r3, #4
 8001728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	3304      	adds	r3, #4
 800172e:	2b06      	cmp	r3, #6
 8001730:	d902      	bls.n	8001738 <NVIC_EncodePriority+0x30>
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3b03      	subs	r3, #3
 8001736:	e000      	b.n	800173a <NVIC_EncodePriority+0x32>
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	f04f 32ff 	mov.w	r2, #4294967295
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	401a      	ands	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001750:	f04f 31ff 	mov.w	r1, #4294967295
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	fa01 f303 	lsl.w	r3, r1, r3
 800175a:	43d9      	mvns	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001760:	4313      	orrs	r3, r2
         );
}
 8001762:	4618      	mov	r0, r3
 8001764:	3724      	adds	r7, #36	@ 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff4c 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	60b9      	str	r1, [r7, #8]
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001792:	f7ff ff63 	bl	800165c <__NVIC_GetPriorityGrouping>
 8001796:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	68b9      	ldr	r1, [r7, #8]
 800179c:	6978      	ldr	r0, [r7, #20]
 800179e:	f7ff ffb3 	bl	8001708 <NVIC_EncodePriority>
 80017a2:	4602      	mov	r2, r0
 80017a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff82 	bl	80016b4 <__NVIC_SetPriority>
}
 80017b0:	bf00      	nop
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff ff56 	bl	8001678 <__NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0e3      	b.n	80019ae <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d106      	bne.n	80017fe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2223      	movs	r2, #35	@ 0x23
 80017f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f7ff fb01 	bl	8000e00 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b6e      	ldr	r3, [pc, #440]	@ (80019b8 <HAL_ETH_Init+0x1e4>)
 8001800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001804:	4a6c      	ldr	r2, [pc, #432]	@ (80019b8 <HAL_ETH_Init+0x1e4>)
 8001806:	f043 0302 	orr.w	r3, r3, #2
 800180a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800180e:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_ETH_Init+0x1e4>)
 8001810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	7a1b      	ldrb	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d103      	bne.n	800182c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff fee1 	bl	80015ec <HAL_SYSCFG_ETHInterfaceSelect>
 800182a:	e003      	b.n	8001834 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800182c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001830:	f7ff fedc 	bl	80015ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001834:	4b61      	ldr	r3, [pc, #388]	@ (80019bc <HAL_ETH_Init+0x1e8>)
 8001836:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001850:	f7ff fe90 	bl	8001574 <HAL_GetTick>
 8001854:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001856:	e011      	b.n	800187c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001858:	f7ff fe8c 	bl	8001574 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001866:	d909      	bls.n	800187c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	22e0      	movs	r2, #224	@ 0xe0
 8001874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e098      	b.n	80019ae <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1e4      	bne.n	8001858 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f89e 	bl	80019d0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001894:	f001 fea0 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8001898:	4603      	mov	r3, r0
 800189a:	4a49      	ldr	r2, [pc, #292]	@ (80019c0 <HAL_ETH_Init+0x1ec>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	0c9a      	lsrs	r2, r3, #18
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3a01      	subs	r2, #1
 80018a8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fa81 	bl	8001db4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80018be:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80018ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018ce:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	22e0      	movs	r2, #224	@ 0xe0
 80018ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e05d      	b.n	80019ae <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018fe:	4b31      	ldr	r3, [pc, #196]	@ (80019c4 <HAL_ETH_Init+0x1f0>)
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6952      	ldr	r2, [r2, #20]
 8001906:	0051      	lsls	r1, r2, #1
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001912:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fae9 	bl	8001eee <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 fb2f 	bl	8001f80 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	3305      	adds	r3, #5
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	021a      	lsls	r2, r3, #8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	3304      	adds	r3, #4
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	430a      	orrs	r2, r1
 800193c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	3303      	adds	r3, #3
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	061a      	lsls	r2, r3, #24
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	3302      	adds	r3, #2
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	3301      	adds	r3, #1
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001960:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800196e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001970:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_ETH_Init+0x1f4>)
 8001982:	430b      	orrs	r3, r1
 8001984:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b0d      	ldr	r3, [pc, #52]	@ (80019cc <HAL_ETH_Init+0x1f8>)
 8001996:	430b      	orrs	r3, r1
 8001998:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2210      	movs	r2, #16
 80019a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	58024400 	.word	0x58024400
 80019bc:	58000400 	.word	0x58000400
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	ffff8001 	.word	0xffff8001
 80019c8:	0c020060 	.word	0x0c020060
 80019cc:	0c20c000 	.word	0x0c20c000

080019d0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019e0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80019e8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80019ea:	f001 fdf5 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80019ee:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	@ (8001a5c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d804      	bhi.n	8001a02 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e022      	b.n	8001a48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d204      	bcs.n	8001a14 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	e019      	b.n	8001a48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4a13      	ldr	r2, [pc, #76]	@ (8001a64 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d915      	bls.n	8001a48 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d804      	bhi.n	8001a2e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e00c      	b.n	8001a48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	@ (8001a6c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d804      	bhi.n	8001a40 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	e003      	b.n	8001a48 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001a46:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001a52:	bf00      	nop
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	02160ebf 	.word	0x02160ebf
 8001a60:	03938700 	.word	0x03938700
 8001a64:	05f5e0ff 	.word	0x05f5e0ff
 8001a68:	08f0d17f 	.word	0x08f0d17f
 8001a6c:	0ee6b27f 	.word	0x0ee6b27f

08001a70 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001a8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	7b1b      	ldrb	r3, [r3, #12]
 8001a90:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	7b5b      	ldrb	r3, [r3, #13]
 8001a98:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	7b9b      	ldrb	r3, [r3, #14]
 8001aa0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	7bdb      	ldrb	r3, [r3, #15]
 8001aa8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001aaa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001aac:	683a      	ldr	r2, [r7, #0]
 8001aae:	7c12      	ldrb	r2, [r2, #16]
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d102      	bne.n	8001aba <ETH_SetMACConfig+0x4a>
 8001ab4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001ab8:	e000      	b.n	8001abc <ETH_SetMACConfig+0x4c>
 8001aba:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001abc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	7c52      	ldrb	r2, [r2, #17]
 8001ac2:	2a00      	cmp	r2, #0
 8001ac4:	d102      	bne.n	8001acc <ETH_SetMACConfig+0x5c>
 8001ac6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001aca:	e000      	b.n	8001ace <ETH_SetMACConfig+0x5e>
 8001acc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001ace:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	7c9b      	ldrb	r3, [r3, #18]
 8001ad4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001ad6:	431a      	orrs	r2, r3
               macconf->Speed |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001adc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001ae2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	7f1b      	ldrb	r3, [r3, #28]
 8001ae8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	7f5b      	ldrb	r3, [r3, #29]
 8001af0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001af2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	7f92      	ldrb	r2, [r2, #30]
 8001af8:	2a00      	cmp	r2, #0
 8001afa:	d102      	bne.n	8001b02 <ETH_SetMACConfig+0x92>
 8001afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b00:	e000      	b.n	8001b04 <ETH_SetMACConfig+0x94>
 8001b02:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001b04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	7fdb      	ldrb	r3, [r3, #31]
 8001b0a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001b0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	d102      	bne.n	8001b1e <ETH_SetMACConfig+0xae>
 8001b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b1c:	e000      	b.n	8001b20 <ETH_SetMACConfig+0xb0>
 8001b1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001b20:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b2e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001b30:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b56      	ldr	r3, [pc, #344]	@ (8001c9c <ETH_SetMACConfig+0x22c>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b52:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b5a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b5c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b64:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001b66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001b6e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001b70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d102      	bne.n	8001b82 <ETH_SetMACConfig+0x112>
 8001b7c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b80:	e000      	b.n	8001b84 <ETH_SetMACConfig+0x114>
 8001b82:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001b84:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	4b42      	ldr	r3, [pc, #264]	@ (8001ca0 <ETH_SetMACConfig+0x230>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	68f9      	ldr	r1, [r7, #12]
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ba8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ca4 <ETH_SetMACConfig+0x234>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001bcc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bd2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001bda:	2a00      	cmp	r2, #0
 8001bdc:	d101      	bne.n	8001be2 <ETH_SetMACConfig+0x172>
 8001bde:	2280      	movs	r2, #128	@ 0x80
 8001be0:	e000      	b.n	8001be4 <ETH_SetMACConfig+0x174>
 8001be2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001be4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bea:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001bec:	4313      	orrs	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001bf6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	68f9      	ldr	r1, [r7, #12]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001c0c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001c14:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c22:	f023 0103 	bic.w	r1, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001c3a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001c56:	2a00      	cmp	r2, #0
 8001c58:	d101      	bne.n	8001c5e <ETH_SetMACConfig+0x1ee>
 8001c5a:	2240      	movs	r2, #64	@ 0x40
 8001c5c:	e000      	b.n	8001c60 <ETH_SetMACConfig+0x1f0>
 8001c5e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001c60:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001c68:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001c6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001c72:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001c74:	4313      	orrs	r3, r2
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001c80:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	00048083 	.word	0x00048083
 8001ca0:	c0f88000 	.word	0xc0f88000
 8001ca4:	fffffef0 	.word	0xfffffef0

08001ca8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4b38      	ldr	r3, [pc, #224]	@ (8001da0 <ETH_SetDMAConfig+0xf8>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	6811      	ldr	r1, [r2, #0]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cce:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	791b      	ldrb	r3, [r3, #4]
 8001cd4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001cda:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	7b1b      	ldrb	r3, [r3, #12]
 8001ce0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <ETH_SetDMAConfig+0xfc>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	68f9      	ldr	r1, [r7, #12]
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d00:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	7b5b      	ldrb	r3, [r3, #13]
 8001d06:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d18:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <ETH_SetDMAConfig+0x100>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	68f9      	ldr	r1, [r7, #12]
 8001d26:	430b      	orrs	r3, r1
 8001d28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d2c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	7d1b      	ldrb	r3, [r3, #20]
 8001d38:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d3a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	7f5b      	ldrb	r3, [r3, #29]
 8001d40:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d4e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001d52:	4b16      	ldr	r3, [pc, #88]	@ (8001dac <ETH_SetDMAConfig+0x104>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	68f9      	ldr	r1, [r7, #12]
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7f1b      	ldrb	r3, [r3, #28]
 8001d6a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d7c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <ETH_SetDMAConfig+0x108>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	68f9      	ldr	r1, [r7, #12]
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d90:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001d94:	bf00      	nop
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	ffff87fd 	.word	0xffff87fd
 8001da4:	ffff2ffe 	.word	0xffff2ffe
 8001da8:	fffec000 	.word	0xfffec000
 8001dac:	ffc0efef 	.word	0xffc0efef
 8001db0:	7fc0ffff 	.word	0x7fc0ffff

08001db4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b0a4      	sub	sp, #144	@ 0x90
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001df0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001e00:	2300      	movs	r3, #0
 8001e02:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001e0c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001e10:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001e36:	2300      	movs	r3, #0
 8001e38:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001e5e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001e64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001e68:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001e70:	2302      	movs	r3, #2
 8001e72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001e92:	2301      	movs	r3, #1
 8001e94:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001e98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff fde6 	bl	8001a70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ebe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ec2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ec8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001ecc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001ed4:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff fee1 	bl	8001ca8 <ETH_SetDMAConfig>
}
 8001ee6:	bf00      	nop
 8001ee8:	3790      	adds	r7, #144	@ 0x90
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b085      	sub	sp, #20
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	e01d      	b.n	8001f38 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68d9      	ldr	r1, [r3, #12]
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	3206      	adds	r2, #6
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d9de      	bls.n	8001efc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2303      	movs	r3, #3
 8001f50:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f60:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f70:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	e023      	b.n	8001fd6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6919      	ldr	r1, [r3, #16]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4613      	mov	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	440b      	add	r3, r1
 8001f9e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	3212      	adds	r2, #18
 8001fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	d9d8      	bls.n	8001f8e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002002:	461a      	mov	r2, r3
 8002004:	2303      	movs	r3, #3
 8002006:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002016:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800202a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800203c:	b480      	push	{r7}
 800203e:	b089      	sub	sp, #36	@ 0x24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800204a:	4b89      	ldr	r3, [pc, #548]	@ (8002270 <HAL_GPIO_Init+0x234>)
 800204c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800204e:	e194      	b.n	800237a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa01 f303 	lsl.w	r3, r1, r3
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8186 	beq.w	8002374 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d005      	beq.n	8002080 <HAL_GPIO_Init+0x44>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d130      	bne.n	80020e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b6:	2201      	movs	r2, #1
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	091b      	lsrs	r3, r3, #4
 80020cc:	f003 0201 	and.w	r2, r3, #1
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d017      	beq.n	800211e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	2203      	movs	r2, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4313      	orrs	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d123      	bne.n	8002172 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	08da      	lsrs	r2, r3, #3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3208      	adds	r2, #8
 800216c:	69b9      	ldr	r1, [r7, #24]
 800216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	2203      	movs	r2, #3
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0203 	and.w	r2, r3, #3
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	f000 80e0 	beq.w	8002374 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	4b2f      	ldr	r3, [pc, #188]	@ (8002274 <HAL_GPIO_Init+0x238>)
 80021b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002274 <HAL_GPIO_Init+0x238>)
 80021bc:	f043 0302 	orr.w	r3, r3, #2
 80021c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_GPIO_Init+0x238>)
 80021c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021d2:	4a29      	ldr	r2, [pc, #164]	@ (8002278 <HAL_GPIO_Init+0x23c>)
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a20      	ldr	r2, [pc, #128]	@ (800227c <HAL_GPIO_Init+0x240>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d052      	beq.n	80022a4 <HAL_GPIO_Init+0x268>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a1f      	ldr	r2, [pc, #124]	@ (8002280 <HAL_GPIO_Init+0x244>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d031      	beq.n	800226a <HAL_GPIO_Init+0x22e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1e      	ldr	r2, [pc, #120]	@ (8002284 <HAL_GPIO_Init+0x248>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02b      	beq.n	8002266 <HAL_GPIO_Init+0x22a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a1d      	ldr	r2, [pc, #116]	@ (8002288 <HAL_GPIO_Init+0x24c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d025      	beq.n	8002262 <HAL_GPIO_Init+0x226>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1c      	ldr	r2, [pc, #112]	@ (800228c <HAL_GPIO_Init+0x250>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01f      	beq.n	800225e <HAL_GPIO_Init+0x222>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1b      	ldr	r2, [pc, #108]	@ (8002290 <HAL_GPIO_Init+0x254>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d019      	beq.n	800225a <HAL_GPIO_Init+0x21e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a1a      	ldr	r2, [pc, #104]	@ (8002294 <HAL_GPIO_Init+0x258>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_GPIO_Init+0x21a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_GPIO_Init+0x25c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <HAL_GPIO_Init+0x216>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a18      	ldr	r2, [pc, #96]	@ (800229c <HAL_GPIO_Init+0x260>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d007      	beq.n	800224e <HAL_GPIO_Init+0x212>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <HAL_GPIO_Init+0x264>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_GPIO_Init+0x20e>
 8002246:	2309      	movs	r3, #9
 8002248:	e02d      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800224a:	230a      	movs	r3, #10
 800224c:	e02b      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800224e:	2308      	movs	r3, #8
 8002250:	e029      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 8002252:	2307      	movs	r3, #7
 8002254:	e027      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 8002256:	2306      	movs	r3, #6
 8002258:	e025      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800225a:	2305      	movs	r3, #5
 800225c:	e023      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800225e:	2304      	movs	r3, #4
 8002260:	e021      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 8002262:	2303      	movs	r3, #3
 8002264:	e01f      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 8002266:	2302      	movs	r3, #2
 8002268:	e01d      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800226a:	2301      	movs	r3, #1
 800226c:	e01b      	b.n	80022a6 <HAL_GPIO_Init+0x26a>
 800226e:	bf00      	nop
 8002270:	58000080 	.word	0x58000080
 8002274:	58024400 	.word	0x58024400
 8002278:	58000400 	.word	0x58000400
 800227c:	58020000 	.word	0x58020000
 8002280:	58020400 	.word	0x58020400
 8002284:	58020800 	.word	0x58020800
 8002288:	58020c00 	.word	0x58020c00
 800228c:	58021000 	.word	0x58021000
 8002290:	58021400 	.word	0x58021400
 8002294:	58021800 	.word	0x58021800
 8002298:	58021c00 	.word	0x58021c00
 800229c:	58022000 	.word	0x58022000
 80022a0:	58022400 	.word	0x58022400
 80022a4:	2300      	movs	r3, #0
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	f002 0203 	and.w	r2, r2, #3
 80022ac:	0092      	lsls	r2, r2, #2
 80022ae:	4093      	lsls	r3, r2
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b6:	4938      	ldr	r1, [pc, #224]	@ (8002398 <HAL_GPIO_Init+0x35c>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	3301      	adds	r3, #1
 8002378:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	f47f ae63 	bne.w	8002050 <HAL_GPIO_Init+0x14>
  }
}
 800238a:	bf00      	nop
 800238c:	bf00      	nop
 800238e:	3724      	adds	r7, #36	@ 0x24
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	58000400 	.word	0x58000400

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80023b8:	e003      	b.n	80023c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80023ba:	887b      	ldrh	r3, [r7, #2]
 80023bc:	041a      	lsls	r2, r3, #16
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	619a      	str	r2, [r3, #24]
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b086      	sub	sp, #24
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0fe      	b.n	80025de <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe fe5f 	bl	80010b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2203      	movs	r2, #3
 80023fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fc5a 	bl	8006cc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7c1a      	ldrb	r2, [r3, #16]
 8002414:	f88d 2000 	strb.w	r2, [sp]
 8002418:	3304      	adds	r3, #4
 800241a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241c:	f004 fbde 	bl	8006bdc <USB_CoreInit>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d005      	beq.n	8002432 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2202      	movs	r2, #2
 800242a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0d5      	b.n	80025de <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f004 fc52 	bl	8006ce2 <USB_SetCurrentMode>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0c6      	b.n	80025de <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	2300      	movs	r3, #0
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e04a      	b.n	80024ec <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002456:	7bfa      	ldrb	r2, [r7, #15]
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	4613      	mov	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	440b      	add	r3, r1
 8002464:	3315      	adds	r3, #21
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3314      	adds	r3, #20
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	b298      	uxth	r0, r3
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	332e      	adds	r3, #46	@ 0x2e
 8002492:	4602      	mov	r2, r0
 8002494:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4413      	add	r3, r2
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	440b      	add	r3, r1
 80024a4:	3318      	adds	r3, #24
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	440b      	add	r3, r1
 80024b8:	331c      	adds	r3, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	3320      	adds	r3, #32
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024d2:	7bfa      	ldrb	r2, [r7, #15]
 80024d4:	6879      	ldr	r1, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	4413      	add	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	3324      	adds	r3, #36	@ 0x24
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3af      	bcc.n	8002456 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
 80024fa:	e044      	b.n	8002586 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024fc:	7bfa      	ldrb	r2, [r7, #15]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002512:	7bfa      	ldrb	r2, [r7, #15]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002528:	7bfa      	ldrb	r2, [r7, #15]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800253e:	7bfa      	ldrb	r2, [r7, #15]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800256a:	7bfa      	ldrb	r2, [r7, #15]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	4613      	mov	r3, r2
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	791b      	ldrb	r3, [r3, #4]
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3b5      	bcc.n	80024fc <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7c1a      	ldrb	r2, [r3, #16]
 8002598:	f88d 2000 	strb.w	r2, [sp]
 800259c:	3304      	adds	r3, #4
 800259e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a0:	f004 fbec 	bl	8006d7c <USB_DevInit>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e013      	b.n	80025de <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7b1b      	ldrb	r3, [r3, #12]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f80b 	bl	80025e8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f004 fda7 	bl	800712a <USB_DevDisconnect>

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
	...

080025e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002616:	4b05      	ldr	r3, [pc, #20]	@ (800262c <HAL_PCDEx_ActivateLPM+0x44>)
 8002618:	4313      	orrs	r3, r2
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	10000003 	.word	0x10000003

08002630 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002638:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_PWREx_ConfigSupply+0x70>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d00a      	beq.n	800265a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002644:	4b16      	ldr	r3, [pc, #88]	@ (80026a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	429a      	cmp	r2, r3
 8002650:	d001      	beq.n	8002656 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e01f      	b.n	8002696 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e01d      	b.n	8002696 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f023 0207 	bic.w	r2, r3, #7
 8002662:	490f      	ldr	r1, [pc, #60]	@ (80026a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4313      	orrs	r3, r2
 8002668:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800266a:	f7fe ff83 	bl	8001574 <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002670:	e009      	b.n	8002686 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002672:	f7fe ff7f 	bl	8001574 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002680:	d901      	bls.n	8002686 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e007      	b.n	8002696 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800268e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002692:	d1ee      	bne.n	8002672 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	58024800 	.word	0x58024800

080026a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80026a8:	4b05      	ldr	r3, [pc, #20]	@ (80026c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4a04      	ldr	r2, [pc, #16]	@ (80026c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80026ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026b2:	60d3      	str	r3, [r2, #12]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	58024800 	.word	0x58024800

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	f000 bc48 	b.w	8002f68 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8088 	beq.w	80027f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e6:	4b99      	ldr	r3, [pc, #612]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026f0:	4b96      	ldr	r3, [pc, #600]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80026f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d007      	beq.n	800270c <HAL_RCC_OscConfig+0x48>
 80026fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fe:	2b18      	cmp	r3, #24
 8002700:	d111      	bne.n	8002726 <HAL_RCC_OscConfig+0x62>
 8002702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d10c      	bne.n	8002726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	4b8f      	ldr	r3, [pc, #572]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d06d      	beq.n	80027f4 <HAL_RCC_OscConfig+0x130>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d169      	bne.n	80027f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f000 bc21 	b.w	8002f68 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272e:	d106      	bne.n	800273e <HAL_RCC_OscConfig+0x7a>
 8002730:	4b86      	ldr	r3, [pc, #536]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a85      	ldr	r2, [pc, #532]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	e02e      	b.n	800279c <HAL_RCC_OscConfig+0xd8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0x9c>
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a80      	ldr	r2, [pc, #512]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800274c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b7e      	ldr	r3, [pc, #504]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7d      	ldr	r2, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xd8>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0xc0>
 800276a:	4b78      	ldr	r3, [pc, #480]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a77      	ldr	r2, [pc, #476]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b75      	ldr	r3, [pc, #468]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a74      	ldr	r2, [pc, #464]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xd8>
 8002784:	4b71      	ldr	r3, [pc, #452]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a70      	ldr	r2, [pc, #448]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6d      	ldr	r2, [pc, #436]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fee6 	bl	8001574 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fee2 	bl	8001574 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	@ 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e3d4      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027be:	4b63      	ldr	r3, [pc, #396]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xe8>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fed2 	bl	8001574 <HAL_GetTick>
 80027d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fece 	bl	8001574 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	@ 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e3c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e6:	4b59      	ldr	r3, [pc, #356]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x110>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80ca 	beq.w	8002998 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002804:	4b51      	ldr	r3, [pc, #324]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800280c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800280e:	4b4f      	ldr	r3, [pc, #316]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_RCC_OscConfig+0x166>
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	2b18      	cmp	r3, #24
 800281e:	d156      	bne.n	80028ce <HAL_RCC_OscConfig+0x20a>
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d151      	bne.n	80028ce <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800282a:	4b48      	ldr	r3, [pc, #288]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d005      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e392      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002842:	4b42      	ldr	r3, [pc, #264]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 0219 	bic.w	r2, r3, #25
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	493f      	ldr	r1, [pc, #252]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fe8e 	bl	8001574 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285c:	f7fe fe8a 	bl	8001574 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e37c      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800286e:	4b37      	ldr	r3, [pc, #220]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	f7fe feab 	bl	80015d4 <HAL_GetREVID>
 800287e:	4603      	mov	r3, r0
 8002880:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002884:	4293      	cmp	r3, r2
 8002886:	d817      	bhi.n	80028b8 <HAL_RCC_OscConfig+0x1f4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b40      	cmp	r3, #64	@ 0x40
 800288e:	d108      	bne.n	80028a2 <HAL_RCC_OscConfig+0x1de>
 8002890:	4b2e      	ldr	r3, [pc, #184]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002898:	4a2c      	ldr	r2, [pc, #176]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800289e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a0:	e07a      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a2:	4b2a      	ldr	r3, [pc, #168]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	031b      	lsls	r3, r3, #12
 80028b0:	4926      	ldr	r1, [pc, #152]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b6:	e06f      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b8:	4b24      	ldr	r3, [pc, #144]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	4921      	ldr	r1, [pc, #132]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028cc:	e064      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d047      	beq.n	8002966 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028d6:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 0219 	bic.w	r2, r3, #25
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	491a      	ldr	r1, [pc, #104]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fe44 	bl	8001574 <HAL_GetTick>
 80028ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fe40 	bl	8001574 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e332      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002902:	4b12      	ldr	r3, [pc, #72]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290e:	f7fe fe61 	bl	80015d4 <HAL_GetREVID>
 8002912:	4603      	mov	r3, r0
 8002914:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002918:	4293      	cmp	r3, r2
 800291a:	d819      	bhi.n	8002950 <HAL_RCC_OscConfig+0x28c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b40      	cmp	r3, #64	@ 0x40
 8002922:	d108      	bne.n	8002936 <HAL_RCC_OscConfig+0x272>
 8002924:	4b09      	ldr	r3, [pc, #36]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800292c:	4a07      	ldr	r2, [pc, #28]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 800292e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002932:	6053      	str	r3, [r2, #4]
 8002934:	e030      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
 8002936:	4b05      	ldr	r3, [pc, #20]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	031b      	lsls	r3, r3, #12
 8002944:	4901      	ldr	r1, [pc, #4]	@ (800294c <HAL_RCC_OscConfig+0x288>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
 800294a:	e025      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
 800294c:	58024400 	.word	0x58024400
 8002950:	4b9a      	ldr	r3, [pc, #616]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	061b      	lsls	r3, r3, #24
 800295e:	4997      	ldr	r1, [pc, #604]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	e018      	b.n	8002998 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b95      	ldr	r3, [pc, #596]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a94      	ldr	r2, [pc, #592]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fdff 	bl	8001574 <HAL_GetTick>
 8002976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800297a:	f7fe fdfb 	bl	8001574 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e2ed      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800298c:	4b8b      	ldr	r3, [pc, #556]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f0      	bne.n	800297a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80a9 	beq.w	8002af8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029a6:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029ae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029b0:	4b82      	ldr	r3, [pc, #520]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d007      	beq.n	80029cc <HAL_RCC_OscConfig+0x308>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b18      	cmp	r3, #24
 80029c0:	d13a      	bne.n	8002a38 <HAL_RCC_OscConfig+0x374>
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d135      	bne.n	8002a38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029cc:	4b7b      	ldr	r3, [pc, #492]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_OscConfig+0x320>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	2b80      	cmp	r3, #128	@ 0x80
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e2c1      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e4:	f7fe fdf6 	bl	80015d4 <HAL_GetREVID>
 80029e8:	4603      	mov	r3, r0
 80029ea:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d817      	bhi.n	8002a22 <HAL_RCC_OscConfig+0x35e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d108      	bne.n	8002a0c <HAL_RCC_OscConfig+0x348>
 80029fa:	4b70      	ldr	r3, [pc, #448]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a02:	4a6e      	ldr	r2, [pc, #440]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a08:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0a:	e075      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	4968      	ldr	r1, [pc, #416]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a20:	e06a      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a22:	4b66      	ldr	r3, [pc, #408]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	4962      	ldr	r1, [pc, #392]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a36:	e05f      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d042      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a40:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5d      	ldr	r2, [pc, #372]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fd92 	bl	8001574 <HAL_GetTick>
 8002a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a54:	f7fe fd8e 	bl	8001574 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e280      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a66:	4b55      	ldr	r3, [pc, #340]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a72:	f7fe fdaf 	bl	80015d4 <HAL_GetREVID>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d817      	bhi.n	8002ab0 <HAL_RCC_OscConfig+0x3ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d108      	bne.n	8002a9a <HAL_RCC_OscConfig+0x3d6>
 8002a88:	4b4c      	ldr	r3, [pc, #304]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a90:	4a4a      	ldr	r2, [pc, #296]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a96:	6053      	str	r3, [r2, #4]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
 8002a9a:	4b48      	ldr	r3, [pc, #288]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	069b      	lsls	r3, r3, #26
 8002aa8:	4944      	ldr	r1, [pc, #272]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	604b      	str	r3, [r1, #4]
 8002aae:	e023      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
 8002ab0:	4b42      	ldr	r3, [pc, #264]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	061b      	lsls	r3, r3, #24
 8002abe:	493f      	ldr	r1, [pc, #252]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60cb      	str	r3, [r1, #12]
 8002ac4:	e018      	b.n	8002af8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a3c      	ldr	r2, [pc, #240]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002acc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fd4f 	bl	8001574 <HAL_GetTick>
 8002ad6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ada:	f7fe fd4b 	bl	8001574 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e23d      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002aec:	4b33      	ldr	r3, [pc, #204]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d036      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d019      	beq.n	8002b40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b10:	4a2a      	ldr	r2, [pc, #168]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b18:	f7fe fd2c 	bl	8001574 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b20:	f7fe fd28 	bl	8001574 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e21a      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b32:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0x45c>
 8002b3e:	e018      	b.n	8002b72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b40:	4b1e      	ldr	r3, [pc, #120]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b44:	4a1d      	ldr	r2, [pc, #116]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fe fd12 	bl	8001574 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b54:	f7fe fd0e 	bl	8001574 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e200      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b66:	4b15      	ldr	r3, [pc, #84]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0320 	and.w	r3, r3, #32
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d039      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	699b      	ldr	r3, [r3, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d01c      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b92:	f7fe fcef 	bl	8001574 <HAL_GetTick>
 8002b96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b9a:	f7fe fceb 	bl	8001574 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e1dd      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002bac:	4b03      	ldr	r3, [pc, #12]	@ (8002bbc <HAL_RCC_OscConfig+0x4f8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d0f0      	beq.n	8002b9a <HAL_RCC_OscConfig+0x4d6>
 8002bb8:	e01b      	b.n	8002bf2 <HAL_RCC_OscConfig+0x52e>
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002bc0:	4b9b      	ldr	r3, [pc, #620]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a9a      	ldr	r2, [pc, #616]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fcd2 	bl	8001574 <HAL_GetTick>
 8002bd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bd4:	f7fe fcce 	bl	8001574 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e1c0      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002be6:	4b92      	ldr	r3, [pc, #584]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f000 8081 	beq.w	8002d02 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c00:	4b8c      	ldr	r3, [pc, #560]	@ (8002e34 <HAL_RCC_OscConfig+0x770>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a8b      	ldr	r2, [pc, #556]	@ (8002e34 <HAL_RCC_OscConfig+0x770>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fcb2 	bl	8001574 <HAL_GetTick>
 8002c10:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c14:	f7fe fcae 	bl	8001574 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	@ 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e1a0      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c26:	4b83      	ldr	r3, [pc, #524]	@ (8002e34 <HAL_RCC_OscConfig+0x770>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x584>
 8002c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c46:	e02d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5e0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10c      	bne.n	8002c6a <HAL_RCC_OscConfig+0x5a6>
 8002c50:	4b77      	ldr	r3, [pc, #476]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c54:	4a76      	ldr	r2, [pc, #472]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5c:	4b74      	ldr	r3, [pc, #464]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c60:	4a73      	ldr	r2, [pc, #460]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c68:	e01c      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5e0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x5c8>
 8002c72:	4b6f      	ldr	r3, [pc, #444]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c76:	4a6e      	ldr	r2, [pc, #440]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	f043 0304 	orr.w	r3, r3, #4
 8002c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c7e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	4a6b      	ldr	r2, [pc, #428]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0x5e0>
 8002c8c:	4b68      	ldr	r3, [pc, #416]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c90:	4a67      	ldr	r2, [pc, #412]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c98:	4b65      	ldr	r3, [pc, #404]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9c:	4a64      	ldr	r2, [pc, #400]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002c9e:	f023 0304 	bic.w	r3, r3, #4
 8002ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d015      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cac:	f7fe fc62 	bl	8001574 <HAL_GetTick>
 8002cb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fc5e 	bl	8001574 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e14e      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cca:	4b59      	ldr	r3, [pc, #356]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0ee      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x5f0>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fc4c 	bl	8001574 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fc48 	bl	8001574 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e138      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cf6:	4b4e      	ldr	r3, [pc, #312]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1ee      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 812d 	beq.w	8002f66 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002d0c:	4b48      	ldr	r3, [pc, #288]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d14:	2b18      	cmp	r3, #24
 8002d16:	f000 80bd 	beq.w	8002e94 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	f040 809e 	bne.w	8002e60 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d24:	4b42      	ldr	r3, [pc, #264]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a41      	ldr	r2, [pc, #260]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fc20 	bl	8001574 <HAL_GetTick>
 8002d34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fc1c 	bl	8001574 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e10e      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4a:	4b39      	ldr	r3, [pc, #228]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d56:	4b36      	ldr	r3, [pc, #216]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5a:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <HAL_RCC_OscConfig+0x774>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	4931      	ldr	r1, [pc, #196]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	3b01      	subs	r3, #1
 8002d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	025b      	lsls	r3, r3, #9
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	041b      	lsls	r3, r3, #16
 8002d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	061b      	lsls	r3, r3, #24
 8002d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002da0:	4923      	ldr	r1, [pc, #140]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002da6:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002daa:	4a21      	ldr	r2, [pc, #132]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002db2:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002db6:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <HAL_RCC_OscConfig+0x778>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dbe:	00d2      	lsls	r2, r2, #3
 8002dc0:	491b      	ldr	r1, [pc, #108]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	f023 020c 	bic.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd2:	4917      	ldr	r1, [pc, #92]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002dd8:	4b15      	ldr	r3, [pc, #84]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	f023 0202 	bic.w	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de4:	4912      	ldr	r1, [pc, #72]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dea:	4b11      	ldr	r3, [pc, #68]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002df6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dfa:	4a0d      	ldr	r2, [pc, #52]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002e02:	4b0b      	ldr	r3, [pc, #44]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	4a0a      	ldr	r2, [pc, #40]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	4a07      	ldr	r2, [pc, #28]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1a:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a04      	ldr	r2, [pc, #16]	@ (8002e30 <HAL_RCC_OscConfig+0x76c>)
 8002e20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe fba5 	bl	8001574 <HAL_GetTick>
 8002e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2c:	e011      	b.n	8002e52 <HAL_RCC_OscConfig+0x78e>
 8002e2e:	bf00      	nop
 8002e30:	58024400 	.word	0x58024400
 8002e34:	58024800 	.word	0x58024800
 8002e38:	fffffc0c 	.word	0xfffffc0c
 8002e3c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fb98 	bl	8001574 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e08a      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e52:	4b47      	ldr	r3, [pc, #284]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x77c>
 8002e5e:	e082      	b.n	8002f66 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b43      	ldr	r3, [pc, #268]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a42      	ldr	r2, [pc, #264]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fb82 	bl	8001574 <HAL_GetTick>
 8002e70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e74:	f7fe fb7e 	bl	8001574 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e070      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e86:	4b3a      	ldr	r3, [pc, #232]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x7b0>
 8002e92:	e068      	b.n	8002f66 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e94:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e9a:	4b35      	ldr	r3, [pc, #212]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d031      	beq.n	8002f0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0203 	and.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d12a      	bne.n	8002f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d122      	bne.n	8002f0c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d11a      	bne.n	8002f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0a5b      	lsrs	r3, r3, #9
 8002eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d111      	bne.n	8002f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	0c1b      	lsrs	r3, r3, #16
 8002eec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d108      	bne.n	8002f0c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	0e1b      	lsrs	r3, r3, #24
 8002efe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d001      	beq.n	8002f10 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e02b      	b.n	8002f68 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002f10:	4b17      	ldr	r3, [pc, #92]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f14:	08db      	lsrs	r3, r3, #3
 8002f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d01f      	beq.n	8002f66 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f26:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f32:	f7fe fb1f 	bl	8001574 <HAL_GetTick>
 8002f36:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f38:	bf00      	nop
 8002f3a:	f7fe fb1b 	bl	8001574 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d0f9      	beq.n	8002f3a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f74 <HAL_RCC_OscConfig+0x8b0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f52:	00d2      	lsls	r2, r2, #3
 8002f54:	4906      	ldr	r1, [pc, #24]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f5a:	4b05      	ldr	r3, [pc, #20]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	4a04      	ldr	r2, [pc, #16]	@ (8002f70 <HAL_RCC_OscConfig+0x8ac>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3730      	adds	r7, #48	@ 0x30
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400
 8002f74:	ffff0007 	.word	0xffff0007

08002f78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e19c      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b8a      	ldr	r3, [pc, #552]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b87      	ldr	r3, [pc, #540]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 020f 	bic.w	r2, r3, #15
 8002fa2:	4985      	ldr	r1, [pc, #532]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b83      	ldr	r3, [pc, #524]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e184      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d010      	beq.n	8002fea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	4b7b      	ldr	r3, [pc, #492]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d908      	bls.n	8002fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fd8:	4b78      	ldr	r3, [pc, #480]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	4975      	ldr	r1, [pc, #468]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d010      	beq.n	8003018 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	4b70      	ldr	r3, [pc, #448]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003002:	429a      	cmp	r2, r3
 8003004:	d908      	bls.n	8003018 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003006:	4b6d      	ldr	r3, [pc, #436]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	496a      	ldr	r1, [pc, #424]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003014:	4313      	orrs	r3, r2
 8003016:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d010      	beq.n	8003046 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699a      	ldr	r2, [r3, #24]
 8003028:	4b64      	ldr	r3, [pc, #400]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003030:	429a      	cmp	r2, r3
 8003032:	d908      	bls.n	8003046 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003034:	4b61      	ldr	r3, [pc, #388]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	495e      	ldr	r1, [pc, #376]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003042:	4313      	orrs	r3, r2
 8003044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d010      	beq.n	8003074 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	4b59      	ldr	r3, [pc, #356]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800305e:	429a      	cmp	r2, r3
 8003060:	d908      	bls.n	8003074 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003062:	4b56      	ldr	r3, [pc, #344]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4953      	ldr	r1, [pc, #332]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003070:	4313      	orrs	r3, r2
 8003072:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	4b4d      	ldr	r3, [pc, #308]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	429a      	cmp	r2, r3
 800308e:	d908      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b4a      	ldr	r3, [pc, #296]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f023 020f 	bic.w	r2, r3, #15
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4947      	ldr	r1, [pc, #284]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d055      	beq.n	800315a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80030ae:	4b43      	ldr	r3, [pc, #268]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4940      	ldr	r1, [pc, #256]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030c8:	4b3c      	ldr	r3, [pc, #240]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d121      	bne.n	8003118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e0f6      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030e0:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d115      	bne.n	8003118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0ea      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f8:	4b30      	ldr	r3, [pc, #192]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d109      	bne.n	8003118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0de      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003108:	4b2c      	ldr	r3, [pc, #176]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d6      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003118:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f023 0207 	bic.w	r2, r3, #7
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4925      	ldr	r1, [pc, #148]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003126:	4313      	orrs	r3, r2
 8003128:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800312a:	f7fe fa23 	bl	8001574 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003130:	e00a      	b.n	8003148 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003132:	f7fe fa1f 	bl	8001574 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003140:	4293      	cmp	r3, r2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e0be      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003148:	4b1c      	ldr	r3, [pc, #112]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	429a      	cmp	r2, r3
 8003158:	d1eb      	bne.n	8003132 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d010      	beq.n	8003188 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	429a      	cmp	r2, r3
 8003174:	d208      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003176:	4b11      	ldr	r3, [pc, #68]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f023 020f 	bic.w	r2, r3, #15
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	490e      	ldr	r1, [pc, #56]	@ (80031bc <HAL_RCC_ClockConfig+0x244>)
 8003184:	4313      	orrs	r3, r2
 8003186:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d214      	bcs.n	80031c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 020f 	bic.w	r2, r3, #15
 800319e:	4906      	ldr	r1, [pc, #24]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b04      	ldr	r3, [pc, #16]	@ (80031b8 <HAL_RCC_ClockConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e086      	b.n	80032c6 <HAL_RCC_ClockConfig+0x34e>
 80031b8:	52002000 	.word	0x52002000
 80031bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d010      	beq.n	80031ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031d8:	429a      	cmp	r2, r3
 80031da:	d208      	bcs.n	80031ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031dc:	4b3c      	ldr	r3, [pc, #240]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	4939      	ldr	r1, [pc, #228]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d010      	beq.n	800321c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	4b34      	ldr	r3, [pc, #208]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003200:	69db      	ldr	r3, [r3, #28]
 8003202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003206:	429a      	cmp	r2, r3
 8003208:	d208      	bcs.n	800321c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800320a:	4b31      	ldr	r3, [pc, #196]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	492e      	ldr	r1, [pc, #184]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003218:	4313      	orrs	r3, r2
 800321a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d010      	beq.n	800324a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	4b28      	ldr	r3, [pc, #160]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003234:	429a      	cmp	r2, r3
 8003236:	d208      	bcs.n	800324a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003238:	4b25      	ldr	r3, [pc, #148]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4922      	ldr	r1, [pc, #136]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003246:	4313      	orrs	r3, r2
 8003248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d010      	beq.n	8003278 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69da      	ldr	r2, [r3, #28]
 800325a:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003262:	429a      	cmp	r2, r3
 8003264:	d208      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003266:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4917      	ldr	r1, [pc, #92]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003274:	4313      	orrs	r3, r2
 8003276:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003278:	f000 f834 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b14      	ldr	r3, [pc, #80]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	4912      	ldr	r1, [pc, #72]	@ (80032d4 <HAL_RCC_ClockConfig+0x35c>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	f003 031f 	and.w	r3, r3, #31
 8003290:	fa22 f303 	lsr.w	r3, r2, r3
 8003294:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003296:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <HAL_RCC_ClockConfig+0x358>)
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	4a0d      	ldr	r2, [pc, #52]	@ (80032d4 <HAL_RCC_ClockConfig+0x35c>)
 80032a0:	5cd3      	ldrb	r3, [r2, r3]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
 80032ac:	4a0a      	ldr	r2, [pc, #40]	@ (80032d8 <HAL_RCC_ClockConfig+0x360>)
 80032ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b0:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <HAL_RCC_ClockConfig+0x364>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80032b6:	4b0a      	ldr	r3, [pc, #40]	@ (80032e0 <HAL_RCC_ClockConfig+0x368>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd ff78 	bl	80011b0 <HAL_InitTick>
 80032c0:	4603      	mov	r3, r0
 80032c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
 80032d4:	0800a6fc 	.word	0x0800a6fc
 80032d8:	24000004 	.word	0x24000004
 80032dc:	24000000 	.word	0x24000000
 80032e0:	24000008 	.word	0x24000008

080032e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b089      	sub	sp, #36	@ 0x24
 80032e8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032ea:	4bb3      	ldr	r3, [pc, #716]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032f2:	2b18      	cmp	r3, #24
 80032f4:	f200 8155 	bhi.w	80035a2 <HAL_RCC_GetSysClockFreq+0x2be>
 80032f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003300 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fe:	bf00      	nop
 8003300:	08003365 	.word	0x08003365
 8003304:	080035a3 	.word	0x080035a3
 8003308:	080035a3 	.word	0x080035a3
 800330c:	080035a3 	.word	0x080035a3
 8003310:	080035a3 	.word	0x080035a3
 8003314:	080035a3 	.word	0x080035a3
 8003318:	080035a3 	.word	0x080035a3
 800331c:	080035a3 	.word	0x080035a3
 8003320:	0800338b 	.word	0x0800338b
 8003324:	080035a3 	.word	0x080035a3
 8003328:	080035a3 	.word	0x080035a3
 800332c:	080035a3 	.word	0x080035a3
 8003330:	080035a3 	.word	0x080035a3
 8003334:	080035a3 	.word	0x080035a3
 8003338:	080035a3 	.word	0x080035a3
 800333c:	080035a3 	.word	0x080035a3
 8003340:	08003391 	.word	0x08003391
 8003344:	080035a3 	.word	0x080035a3
 8003348:	080035a3 	.word	0x080035a3
 800334c:	080035a3 	.word	0x080035a3
 8003350:	080035a3 	.word	0x080035a3
 8003354:	080035a3 	.word	0x080035a3
 8003358:	080035a3 	.word	0x080035a3
 800335c:	080035a3 	.word	0x080035a3
 8003360:	08003397 	.word	0x08003397
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003364:	4b94      	ldr	r3, [pc, #592]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003370:	4b91      	ldr	r3, [pc, #580]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	08db      	lsrs	r3, r3, #3
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	4a90      	ldr	r2, [pc, #576]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800337c:	fa22 f303 	lsr.w	r3, r2, r3
 8003380:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003382:	e111      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003384:	4b8d      	ldr	r3, [pc, #564]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003386:	61bb      	str	r3, [r7, #24]
      break;
 8003388:	e10e      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800338a:	4b8d      	ldr	r3, [pc, #564]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800338c:	61bb      	str	r3, [r7, #24]
      break;
 800338e:	e10b      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003390:	4b8c      	ldr	r3, [pc, #560]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003392:	61bb      	str	r3, [r7, #24]
      break;
 8003394:	e108      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003396:	4b88      	ldr	r3, [pc, #544]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80033a0:	4b85      	ldr	r3, [pc, #532]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033aa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80033ac:	4b82      	ldr	r3, [pc, #520]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80033b6:	4b80      	ldr	r3, [pc, #512]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033ba:	08db      	lsrs	r3, r3, #3
 80033bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ce:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80e1 	beq.w	800359c <HAL_RCC_GetSysClockFreq+0x2b8>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	f000 8083 	beq.w	80034e8 <HAL_RCC_GetSysClockFreq+0x204>
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	f200 80a1 	bhi.w	800352c <HAL_RCC_GetSysClockFreq+0x248>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_RCC_GetSysClockFreq+0x114>
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d056      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033f6:	e099      	b.n	800352c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033f8:	4b6f      	ldr	r3, [pc, #444]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	2b00      	cmp	r3, #0
 8003402:	d02d      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003404:	4b6c      	ldr	r3, [pc, #432]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	08db      	lsrs	r3, r3, #3
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	4a6b      	ldr	r2, [pc, #428]	@ (80035bc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800342e:	4b62      	ldr	r3, [pc, #392]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800343e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003442:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800344a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800344e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800345e:	e087      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	ee07 3a90 	vmov	s15, r3
 8003466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800346a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035cc <HAL_RCC_GetSysClockFreq+0x2e8>
 800346e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003472:	4b51      	ldr	r3, [pc, #324]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003482:	ed97 6a02 	vldr	s12, [r7, #8]
 8003486:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800348a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800348e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800349a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034a2:	e065      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	ee07 3a90 	vmov	s15, r3
 80034aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ae:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80034b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034b6:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034be:	ee07 3a90 	vmov	s15, r3
 80034c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ca:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034e6:	e043      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	ee07 3a90 	vmov	s15, r3
 80034ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035d4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034fa:	4b2f      	ldr	r3, [pc, #188]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800350a:	ed97 6a02 	vldr	s12, [r7, #8]
 800350e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800351a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800351e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800352a:	e021      	b.n	8003570 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	ee07 3a90 	vmov	s15, r3
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035d0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800353a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800353e:	4b1e      	ldr	r3, [pc, #120]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003546:	ee07 3a90 	vmov	s15, r3
 800354a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800354e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003552:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035c8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800355a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800355e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800356a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800356e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003570:	4b11      	ldr	r3, [pc, #68]	@ (80035b8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	0a5b      	lsrs	r3, r3, #9
 8003576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800357a:	3301      	adds	r3, #1
 800357c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	ee07 3a90 	vmov	s15, r3
 8003584:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003588:	edd7 6a07 	vldr	s13, [r7, #28]
 800358c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003594:	ee17 3a90 	vmov	r3, s15
 8003598:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800359a:	e005      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	61bb      	str	r3, [r7, #24]
      break;
 80035a0:	e002      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80035a2:	4b07      	ldr	r3, [pc, #28]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80035a4:	61bb      	str	r3, [r7, #24]
      break;
 80035a6:	bf00      	nop
  }

  return sysclockfreq;
 80035a8:	69bb      	ldr	r3, [r7, #24]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	@ 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	58024400 	.word	0x58024400
 80035bc:	03d09000 	.word	0x03d09000
 80035c0:	003d0900 	.word	0x003d0900
 80035c4:	007a1200 	.word	0x007a1200
 80035c8:	46000000 	.word	0x46000000
 80035cc:	4c742400 	.word	0x4c742400
 80035d0:	4a742400 	.word	0x4a742400
 80035d4:	4af42400 	.word	0x4af42400

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035de:	f7ff fe81 	bl	80032e4 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <HAL_RCC_GetHCLKFreq+0x50>)
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	0a1b      	lsrs	r3, r3, #8
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490f      	ldr	r1, [pc, #60]	@ (800362c <HAL_RCC_GetHCLKFreq+0x54>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	fa22 f303 	lsr.w	r3, r2, r3
 80035fa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <HAL_RCC_GetHCLKFreq+0x50>)
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	f003 030f 	and.w	r3, r3, #15
 8003604:	4a09      	ldr	r2, [pc, #36]	@ (800362c <HAL_RCC_GetHCLKFreq+0x54>)
 8003606:	5cd3      	ldrb	r3, [r2, r3]
 8003608:	f003 031f 	and.w	r3, r3, #31
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <HAL_RCC_GetHCLKFreq+0x58>)
 8003614:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003616:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_GetHCLKFreq+0x58>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	58024400 	.word	0x58024400
 800362c:	0800a6fc 	.word	0x0800a6fc
 8003630:	24000004 	.word	0x24000004
 8003634:	24000000 	.word	0x24000000

08003638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800363c:	f7ff ffcc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003640:	4602      	mov	r2, r0
 8003642:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	4904      	ldr	r1, [pc, #16]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800364e:	5ccb      	ldrb	r3, [r1, r3]
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	58024400 	.word	0x58024400
 8003660:	0800a6fc 	.word	0x0800a6fc

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003668:	f7ff ffb6 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4904      	ldr	r1, [pc, #16]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x28>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	58024400 	.word	0x58024400
 800368c:	0800a6fc 	.word	0x0800a6fc

08003690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223f      	movs	r2, #63	@ 0x3f
 800369e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036a0:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0207 	and.w	r2, r3, #7
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80036ac:	4b17      	ldr	r3, [pc, #92]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80036b8:	4b14      	ldr	r3, [pc, #80]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80036c4:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80036d0:	4b0e      	ldr	r3, [pc, #56]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80036dc:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80036e8:	4b08      	ldr	r3, [pc, #32]	@ (800370c <HAL_RCC_GetClockConfig+0x7c>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036f4:	4b06      	ldr	r3, [pc, #24]	@ (8003710 <HAL_RCC_GetClockConfig+0x80>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 020f 	and.w	r2, r3, #15
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	601a      	str	r2, [r3, #0]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	58024400 	.word	0x58024400
 8003710:	52002000 	.word	0x52002000

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003718:	b0ca      	sub	sp, #296	@ 0x128
 800371a:	af00      	add	r7, sp, #0
 800371c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003720:	2300      	movs	r3, #0
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003726:	2300      	movs	r3, #0
 8003728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003738:	2500      	movs	r5, #0
 800373a:	ea54 0305 	orrs.w	r3, r4, r5
 800373e:	d049      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003746:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800374a:	d02f      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800374c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003750:	d828      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003752:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003756:	d01a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003758:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800375c:	d822      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003762:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003766:	d007      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003768:	e01c      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800376a:	4bb8      	ldr	r3, [pc, #736]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376e:	4ab7      	ldr	r2, [pc, #732]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003776:	e01a      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377c:	3308      	adds	r3, #8
 800377e:	2102      	movs	r1, #2
 8003780:	4618      	mov	r0, r3
 8003782:	f001 fc8f 	bl	80050a4 <RCCEx_PLL2_Config>
 8003786:	4603      	mov	r3, r0
 8003788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800378c:	e00f      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2102      	movs	r1, #2
 8003796:	4618      	mov	r0, r3
 8003798:	f001 fd36 	bl	8005208 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80037a2:	e004      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037aa:	e000      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80037ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10a      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037b6:	4ba5      	ldr	r3, [pc, #660]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ba:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037c4:	4aa1      	ldr	r2, [pc, #644]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	ea58 0309 	orrs.w	r3, r8, r9
 80037e8:	d047      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f0:	2b04      	cmp	r3, #4
 80037f2:	d82a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80037f4:	a201      	add	r2, pc, #4	@ (adr r2, 80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80037f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	08003811 	.word	0x08003811
 8003800:	0800381f 	.word	0x0800381f
 8003804:	08003835 	.word	0x08003835
 8003808:	08003853 	.word	0x08003853
 800380c:	08003853 	.word	0x08003853
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003810:	4b8e      	ldr	r3, [pc, #568]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003814:	4a8d      	ldr	r2, [pc, #564]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800381c:	e01a      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2100      	movs	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fc3c 	bl	80050a4 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003832:	e00f      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	3328      	adds	r3, #40	@ 0x28
 800383a:	2100      	movs	r1, #0
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fce3 	bl	8005208 <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003848:	e004      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003850:	e000      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800385c:	4b7b      	ldr	r3, [pc, #492]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	f023 0107 	bic.w	r1, r3, #7
 8003864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386a:	4a78      	ldr	r2, [pc, #480]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800386c:	430b      	orrs	r3, r1
 800386e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003870:	e003      	b.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003886:	f04f 0b00 	mov.w	fp, #0
 800388a:	ea5a 030b 	orrs.w	r3, sl, fp
 800388e:	d04c      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800389a:	d030      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800389c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a0:	d829      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038a4:	d02d      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80038a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038a8:	d825      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d018      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80038ae:	2b80      	cmp	r3, #128	@ 0x80
 80038b0:	d821      	bhi.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d007      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80038ba:	e01c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038bc:	4b63      	ldr	r3, [pc, #396]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	4a62      	ldr	r2, [pc, #392]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038c8:	e01c      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ce:	3308      	adds	r3, #8
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fbe6 	bl	80050a4 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038de:	e011      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e4:	3328      	adds	r3, #40	@ 0x28
 80038e6:	2100      	movs	r1, #0
 80038e8:	4618      	mov	r0, r3
 80038ea:	f001 fc8d 	bl	8005208 <RCCEx_PLL3_Config>
 80038ee:	4603      	mov	r3, r0
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80038f4:	e006      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fc:	e002      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80038fe:	bf00      	nop
 8003900:	e000      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003904:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800390c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800391c:	430b      	orrs	r3, r1
 800391e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003920:	e003      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003932:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003936:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003940:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003944:	460b      	mov	r3, r1
 8003946:	4313      	orrs	r3, r2
 8003948:	d053      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003952:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003956:	d035      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003958:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800395c:	d82e      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800395e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003962:	d031      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003964:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003968:	d828      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800396a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800396e:	d01a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003970:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003974:	d822      	bhi.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800397a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800397e:	d007      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003980:	e01c      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003982:	4b32      	ldr	r3, [pc, #200]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	4a31      	ldr	r2, [pc, #196]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800398e:	e01c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003994:	3308      	adds	r3, #8
 8003996:	2100      	movs	r1, #0
 8003998:	4618      	mov	r0, r3
 800399a:	f001 fb83 	bl	80050a4 <RCCEx_PLL2_Config>
 800399e:	4603      	mov	r3, r0
 80039a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039a4:	e011      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039aa:	3328      	adds	r3, #40	@ 0x28
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 fc2a 	bl	8005208 <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039ba:	e006      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c2:	e002      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039c4:	bf00      	nop
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80039c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80039d2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80039e2:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80039f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80039fe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003a08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d056      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a1e:	d038      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003a24:	d831      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a26:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a2a:	d034      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003a2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a30:	d82b      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a36:	d01d      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a3c:	d825      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003a48:	e01f      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003a4a:	bf00      	nop
 8003a4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a50:	4ba2      	ldr	r3, [pc, #648]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a54:	4aa1      	ldr	r2, [pc, #644]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a5c:	e01c      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fb1c 	bl	80050a4 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003a72:	e011      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fbc3 	bl	8005208 <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003aa0:	4b8e      	ldr	r3, [pc, #568]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ab0:	4a8a      	ldr	r2, [pc, #552]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab2:	430b      	orrs	r3, r1
 8003ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ab6:	e003      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003abc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003ad6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003ada:	460b      	mov	r3, r1
 8003adc:	4313      	orrs	r3, r2
 8003ade:	d03a      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae6:	2b30      	cmp	r3, #48	@ 0x30
 8003ae8:	d01f      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003aea:	2b30      	cmp	r3, #48	@ 0x30
 8003aec:	d819      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d00c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d815      	bhi.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d019      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003afa:	2b10      	cmp	r3, #16
 8003afc:	d111      	bne.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003afe:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b02:	4a76      	ldr	r2, [pc, #472]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b0a:	e011      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b10:	3308      	adds	r3, #8
 8003b12:	2102      	movs	r1, #2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fac5 	bl	80050a4 <RCCEx_PLL2_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003b20:	e006      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b28:	e002      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b2a:	bf00      	nop
 8003b2c:	e000      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b38:	4b68      	ldr	r3, [pc, #416]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b46:	4a65      	ldr	r2, [pc, #404]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b4c:	e003      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003b62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4313      	orrs	r3, r2
 8003b74:	d051      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b80:	d035      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b86:	d82e      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b8c:	d031      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003b8e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003b92:	d828      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b98:	d01a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9e:	d822      	bhi.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ba4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba8:	d007      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003baa:	e01c      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bac:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f001 fa6e 	bl	80050a4 <RCCEx_PLL2_Config>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003bce:	e011      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd4:	3328      	adds	r3, #40	@ 0x28
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 fb15 	bl	8005208 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003be4:	e006      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bec:	e002      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bfc:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c00:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c0a:	4a34      	ldr	r2, [pc, #208]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c10:	e003      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003c26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003c30:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003c34:	460b      	mov	r3, r1
 8003c36:	4313      	orrs	r3, r2
 8003c38:	d056      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c44:	d033      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003c46:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c4a:	d82c      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c4c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c50:	d02f      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c56:	d826      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c5c:	d02b      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003c5e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c62:	d820      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c68:	d012      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c6e:	d81a      	bhi.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d022      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c78:	d115      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3308      	adds	r3, #8
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 fa0e 	bl	80050a4 <RCCEx_PLL2_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e015      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	3328      	adds	r3, #40	@ 0x28
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 fab5 	bl	8005208 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00a      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cac:	e006      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cae:	bf00      	nop
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003cc4:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003cd2:	4a02      	ldr	r2, [pc, #8]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4313      	orrs	r3, r2
 8003d06:	d055      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d14:	d033      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d1a:	d82c      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d20:	d02f      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d26:	d826      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d28:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d2c:	d02b      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003d2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003d32:	d820      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d38:	d012      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003d3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d3e:	d81a      	bhi.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d022      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d48:	d115      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f9a6 	bl	80050a4 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d5e:	e015      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	3328      	adds	r3, #40	@ 0x28
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fa4d 	bl	8005208 <RCCEx_PLL3_Config>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003d74:	e00a      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7c:	e006      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e004      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d82:	bf00      	nop
 8003d84:	e002      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d86:	bf00      	nop
 8003d88:	e000      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d94:	4ba3      	ldr	r3, [pc, #652]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003da4:	4a9f      	ldr	r2, [pc, #636]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	430b      	orrs	r3, r1
 8003da8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003daa:	e003      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d037      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dde:	d00e      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003de4:	d816      	bhi.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003dea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dee:	d111      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df0:	4b8c      	ldr	r3, [pc, #560]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	4a8b      	ldr	r2, [pc, #556]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003dfc:	e00f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e02:	3308      	adds	r3, #8
 8003e04:	2101      	movs	r1, #1
 8003e06:	4618      	mov	r0, r3
 8003e08:	f001 f94c 	bl	80050a4 <RCCEx_PLL2_Config>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003e12:	e004      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e1a:	e000      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10a      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e26:	4b7f      	ldr	r3, [pc, #508]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e2a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e34:	4a7b      	ldr	r2, [pc, #492]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e36:	430b      	orrs	r3, r1
 8003e38:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e3a:	e003      	b.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e54:	2300      	movs	r3, #0
 8003e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003e5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003e5e:	460b      	mov	r3, r1
 8003e60:	4313      	orrs	r3, r2
 8003e62:	d039      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	2b03      	cmp	r3, #3
 8003e6c:	d81c      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e74 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003e85 	.word	0x08003e85
 8003e7c:	08003e93 	.word	0x08003e93
 8003e80:	08003eb1 	.word	0x08003eb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e84:	4b67      	ldr	r3, [pc, #412]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	4a66      	ldr	r2, [pc, #408]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e8e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	3308      	adds	r3, #8
 8003e98:	2102      	movs	r1, #2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 f902 	bl	80050a4 <RCCEx_PLL2_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10a      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003eba:	4b5a      	ldr	r3, [pc, #360]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ebe:	f023 0103 	bic.w	r1, r3, #3
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ec8:	4a56      	ldr	r2, [pc, #344]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eca:	430b      	orrs	r3, r1
 8003ecc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ece:	e003      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ee4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f000 809f 	beq.w	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003efa:	4b4b      	ldr	r3, [pc, #300]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a4a      	ldr	r2, [pc, #296]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f06:	f7fd fb35 	bl	8001574 <HAL_GetTick>
 8003f0a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f0e:	e00b      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f10:	f7fd fb30 	bl	8001574 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b64      	cmp	r3, #100	@ 0x64
 8003f1e:	d903      	bls.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f26:	e005      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f28:	4b3f      	ldr	r3, [pc, #252]	@ (8004028 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ed      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d179      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003f3c:	4b39      	ldr	r3, [pc, #228]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f48:	4053      	eors	r3, r2
 8003f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d015      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f52:	4b34      	ldr	r3, [pc, #208]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f5a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5e:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f62:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f68:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f74:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003f76:	4a2b      	ldr	r2, [pc, #172]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8a:	d118      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd faf2 	bl	8001574 <HAL_GetTick>
 8003f90:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f94:	e00d      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd faed 	bl	8001574 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003fa0:	1ad2      	subs	r2, r2, r3
 8003fa2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d903      	bls.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003fb0:	e005      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0eb      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003fbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d129      	bne.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003fd8:	4b12      	ldr	r3, [pc, #72]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003fe8:	091a      	lsrs	r2, r3, #4
 8003fea:	4b10      	ldr	r3, [pc, #64]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003fec:	4013      	ands	r3, r2
 8003fee:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff0:	430b      	orrs	r3, r1
 8003ff2:	6113      	str	r3, [r2, #16]
 8003ff4:	e005      	b.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ffc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004000:	6113      	str	r3, [r2, #16]
 8004002:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004004:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800400e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004012:	4a04      	ldr	r2, [pc, #16]	@ (8004024 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004014:	430b      	orrs	r3, r1
 8004016:	6713      	str	r3, [r2, #112]	@ 0x70
 8004018:	e00e      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800401a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004022:	e009      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004024:	58024400 	.word	0x58024400
 8004028:	58024800 	.word	0x58024800
 800402c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004034:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004040:	f002 0301 	and.w	r3, r2, #1
 8004044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800404e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004052:	460b      	mov	r3, r1
 8004054:	4313      	orrs	r3, r2
 8004056:	f000 8089 	beq.w	800416c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004060:	2b28      	cmp	r3, #40	@ 0x28
 8004062:	d86b      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004064:	a201      	add	r2, pc, #4	@ (adr r2, 800406c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004145 	.word	0x08004145
 8004070:	0800413d 	.word	0x0800413d
 8004074:	0800413d 	.word	0x0800413d
 8004078:	0800413d 	.word	0x0800413d
 800407c:	0800413d 	.word	0x0800413d
 8004080:	0800413d 	.word	0x0800413d
 8004084:	0800413d 	.word	0x0800413d
 8004088:	0800413d 	.word	0x0800413d
 800408c:	08004111 	.word	0x08004111
 8004090:	0800413d 	.word	0x0800413d
 8004094:	0800413d 	.word	0x0800413d
 8004098:	0800413d 	.word	0x0800413d
 800409c:	0800413d 	.word	0x0800413d
 80040a0:	0800413d 	.word	0x0800413d
 80040a4:	0800413d 	.word	0x0800413d
 80040a8:	0800413d 	.word	0x0800413d
 80040ac:	08004127 	.word	0x08004127
 80040b0:	0800413d 	.word	0x0800413d
 80040b4:	0800413d 	.word	0x0800413d
 80040b8:	0800413d 	.word	0x0800413d
 80040bc:	0800413d 	.word	0x0800413d
 80040c0:	0800413d 	.word	0x0800413d
 80040c4:	0800413d 	.word	0x0800413d
 80040c8:	0800413d 	.word	0x0800413d
 80040cc:	08004145 	.word	0x08004145
 80040d0:	0800413d 	.word	0x0800413d
 80040d4:	0800413d 	.word	0x0800413d
 80040d8:	0800413d 	.word	0x0800413d
 80040dc:	0800413d 	.word	0x0800413d
 80040e0:	0800413d 	.word	0x0800413d
 80040e4:	0800413d 	.word	0x0800413d
 80040e8:	0800413d 	.word	0x0800413d
 80040ec:	08004145 	.word	0x08004145
 80040f0:	0800413d 	.word	0x0800413d
 80040f4:	0800413d 	.word	0x0800413d
 80040f8:	0800413d 	.word	0x0800413d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	08004145 	.word	0x08004145
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	3308      	adds	r3, #8
 8004116:	2101      	movs	r1, #1
 8004118:	4618      	mov	r0, r3
 800411a:	f000 ffc3 	bl	80050a4 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004124:	e00f      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	3328      	adds	r3, #40	@ 0x28
 800412c:	2101      	movs	r1, #1
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f86a 	bl	8005208 <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10a      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800414e:	4bbf      	ldr	r3, [pc, #764]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415c:	4abb      	ldr	r2, [pc, #748]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800415e:	430b      	orrs	r3, r1
 8004160:	6553      	str	r3, [r2, #84]	@ 0x54
 8004162:	e003      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 0302 	and.w	r3, r2, #2
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004182:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d041      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004192:	2b05      	cmp	r3, #5
 8004194:	d824      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004196:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ff71 	bl	80050a4 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f001 f818 	bl	8005208 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80041f2:	4b96      	ldr	r3, [pc, #600]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004200:	4a92      	ldr	r2, [pc, #584]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	@ 0x54
 8004206:	e003      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004218:	f002 0304 	and.w	r3, r2, #4
 800421c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004220:	2300      	movs	r3, #0
 8004222:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004226:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800422a:	460b      	mov	r3, r1
 800422c:	4313      	orrs	r3, r2
 800422e:	d044      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004238:	2b05      	cmp	r3, #5
 800423a:	d825      	bhi.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004291 	.word	0x08004291
 8004248:	0800425d 	.word	0x0800425d
 800424c:	08004273 	.word	0x08004273
 8004250:	08004291 	.word	0x08004291
 8004254:	08004291 	.word	0x08004291
 8004258:	08004291 	.word	0x08004291
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800425c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004260:	3308      	adds	r3, #8
 8004262:	2101      	movs	r1, #1
 8004264:	4618      	mov	r0, r3
 8004266:	f000 ff1d 	bl	80050a4 <RCCEx_PLL2_Config>
 800426a:	4603      	mov	r3, r0
 800426c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004270:	e00f      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004276:	3328      	adds	r3, #40	@ 0x28
 8004278:	2101      	movs	r1, #1
 800427a:	4618      	mov	r0, r3
 800427c:	f000 ffc4 	bl	8005208 <RCCEx_PLL3_Config>
 8004280:	4603      	mov	r3, r0
 8004282:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004286:	e004      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800429a:	4b6c      	ldr	r3, [pc, #432]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429e:	f023 0107 	bic.w	r1, r3, #7
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042aa:	4a68      	ldr	r2, [pc, #416]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80042b0:	e003      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f002 0320 	and.w	r3, r2, #32
 80042c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042d4:	460b      	mov	r3, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d055      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042e6:	d033      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80042e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ec:	d82c      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f2:	d02f      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d826      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80042fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80042fe:	d02b      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004300:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004304:	d820      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004306:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800430a:	d012      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800430c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004310:	d81a      	bhi.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004312:	2b00      	cmp	r3, #0
 8004314:	d022      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004316:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800431a:	d115      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	3308      	adds	r3, #8
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 febd 	bl	80050a4 <RCCEx_PLL2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004330:	e015      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	3328      	adds	r3, #40	@ 0x28
 8004338:	2102      	movs	r1, #2
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ff64 	bl	8005208 <RCCEx_PLL3_Config>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004346:	e00a      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434e:	e006      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004350:	bf00      	nop
 8004352:	e004      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004354:	bf00      	nop
 8004356:	e002      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004358:	bf00      	nop
 800435a:	e000      	b.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800435c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004366:	4b39      	ldr	r3, [pc, #228]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004376:	4a35      	ldr	r2, [pc, #212]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6553      	str	r3, [r2, #84]	@ 0x54
 800437c:	e003      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004392:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800439c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	d058      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043ae:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043b2:	d033      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80043b4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80043b8:	d82c      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043be:	d02f      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80043c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043c4:	d826      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ca:	d02b      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80043cc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043d0:	d820      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d6:	d012      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80043d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043dc:	d81a      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d022      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e6:	d115      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	3308      	adds	r3, #8
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fe57 	bl	80050a4 <RCCEx_PLL2_Config>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80043fc:	e015      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004402:	3328      	adds	r3, #40	@ 0x28
 8004404:	2102      	movs	r1, #2
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fefe 	bl	8005208 <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004412:	e00a      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441a:	e006      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800441c:	bf00      	nop
 800441e:	e004      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004420:	bf00      	nop
 8004422:	e002      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004424:	bf00      	nop
 8004426:	e000      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800442a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10e      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004432:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004436:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004442:	4a02      	ldr	r2, [pc, #8]	@ (800444c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004444:	430b      	orrs	r3, r1
 8004446:	6593      	str	r3, [r2, #88]	@ 0x58
 8004448:	e006      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800444a:	bf00      	nop
 800444c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004450:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004464:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004468:	2300      	movs	r3, #0
 800446a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800446e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004472:	460b      	mov	r3, r1
 8004474:	4313      	orrs	r3, r2
 8004476:	d055      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004480:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004484:	d033      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004486:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800448a:	d82c      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800448c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004490:	d02f      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004496:	d826      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004498:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800449c:	d02b      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800449e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80044a2:	d820      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044a8:	d012      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80044aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044ae:	d81a      	bhi.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d022      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044b8:	d115      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3308      	adds	r3, #8
 80044c0:	2100      	movs	r1, #0
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fdee 	bl	80050a4 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044ce:	e015      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	3328      	adds	r3, #40	@ 0x28
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fe95 	bl	8005208 <RCCEx_PLL3_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80044e4:	e00a      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044ee:	bf00      	nop
 80044f0:	e004      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044f2:	bf00      	nop
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80044fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10b      	bne.n	800451c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004504:	4ba1      	ldr	r3, [pc, #644]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004514:	4a9d      	ldr	r2, [pc, #628]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004516:	430b      	orrs	r3, r1
 8004518:	6593      	str	r3, [r2, #88]	@ 0x58
 800451a:	e003      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004520:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452c:	f002 0308 	and.w	r3, r2, #8
 8004530:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004534:	2300      	movs	r3, #0
 8004536:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800453a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800453e:	460b      	mov	r3, r1
 8004540:	4313      	orrs	r3, r2
 8004542:	d01e      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004548:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800454c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004550:	d10c      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004556:	3328      	adds	r3, #40	@ 0x28
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fe54 	bl	8005208 <RCCEx_PLL3_Config>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800456c:	4b87      	ldr	r3, [pc, #540]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800456e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004570:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800457c:	4a83      	ldr	r2, [pc, #524]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800457e:	430b      	orrs	r3, r1
 8004580:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f002 0310 	and.w	r3, r2, #16
 800458e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004598:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d01e      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ae:	d10c      	bne.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b4:	3328      	adds	r3, #40	@ 0x28
 80045b6:	2102      	movs	r1, #2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f000 fe25 	bl	8005208 <RCCEx_PLL3_Config>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045ca:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80045da:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045dc:	430b      	orrs	r3, r1
 80045de:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80045ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045f0:	2300      	movs	r3, #0
 80045f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d03e      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004604:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004608:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800460c:	d022      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800460e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004612:	d81b      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d003      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800461c:	d00b      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800461e:	e015      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	3308      	adds	r3, #8
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fd3b 	bl	80050a4 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004634:	e00f      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	3328      	adds	r3, #40	@ 0x28
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fde2 	bl	8005208 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800464a:	e004      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004652:	e000      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10b      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800465e:	4b4b      	ldr	r3, [pc, #300]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004662:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800466e:	4a47      	ldr	r2, [pc, #284]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004670:	430b      	orrs	r3, r1
 8004672:	6593      	str	r3, [r2, #88]	@ 0x58
 8004674:	e003      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800468a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800468c:	2300      	movs	r3, #0
 800468e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004690:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004694:	460b      	mov	r3, r1
 8004696:	4313      	orrs	r3, r2
 8004698:	d03b      	beq.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046a6:	d01f      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80046a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046ac:	d818      	bhi.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80046ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046b2:	d003      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80046b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b8:	d007      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80046ba:	e011      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046bc:	4b33      	ldr	r3, [pc, #204]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c0:	4a32      	ldr	r2, [pc, #200]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80046c8:	e00f      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ce:	3328      	adds	r3, #40	@ 0x28
 80046d0:	2101      	movs	r1, #1
 80046d2:	4618      	mov	r0, r3
 80046d4:	f000 fd98 	bl	8005208 <RCCEx_PLL3_Config>
 80046d8:	4603      	mov	r3, r0
 80046da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80046de:	e004      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80046e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004702:	4a22      	ldr	r2, [pc, #136]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6553      	str	r3, [r2, #84]	@ 0x54
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800471e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004720:	2300      	movs	r3, #0
 8004722:	677b      	str	r3, [r7, #116]	@ 0x74
 8004724:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004728:	460b      	mov	r3, r1
 800472a:	4313      	orrs	r3, r2
 800472c:	d034      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004738:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800473c:	d007      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004740:	4b12      	ldr	r3, [pc, #72]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004746:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800474a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800474c:	e00e      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800474e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004752:	3308      	adds	r3, #8
 8004754:	2102      	movs	r1, #2
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fca4 	bl	80050a4 <RCCEx_PLL2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004762:	e003      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800476a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800476c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004774:	4b05      	ldr	r3, [pc, #20]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004782:	4a02      	ldr	r2, [pc, #8]	@ (800478c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004784:	430b      	orrs	r3, r1
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	e006      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004794:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80047a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047a6:	2300      	movs	r3, #0
 80047a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047aa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d00c      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	3328      	adds	r3, #40	@ 0x28
 80047ba:	2102      	movs	r1, #2
 80047bc:	4618      	mov	r0, r3
 80047be:	f000 fd23 	bl	8005208 <RCCEx_PLL3_Config>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80047da:	663b      	str	r3, [r7, #96]	@ 0x60
 80047dc:	2300      	movs	r3, #0
 80047de:	667b      	str	r3, [r7, #100]	@ 0x64
 80047e0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d038      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047f6:	d018      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80047f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047fc:	d811      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80047fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004802:	d014      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004804:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004808:	d80b      	bhi.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d011      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800480e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004812:	d106      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004814:	4bc3      	ldr	r3, [pc, #780]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	4ac2      	ldr	r2, [pc, #776]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800481a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800481e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004820:	e008      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004828:	e004      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800482a:	bf00      	nop
 800482c:	e002      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800482e:	bf00      	nop
 8004830:	e000      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10b      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800483c:	4bb9      	ldr	r3, [pc, #740]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800483e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004840:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800484c:	4ab5      	ldr	r2, [pc, #724]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6553      	str	r3, [r2, #84]	@ 0x54
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004868:	65bb      	str	r3, [r7, #88]	@ 0x58
 800486a:	2300      	movs	r3, #0
 800486c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800486e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004872:	460b      	mov	r3, r1
 8004874:	4313      	orrs	r3, r2
 8004876:	d009      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004878:	4baa      	ldr	r3, [pc, #680]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800487c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004886:	4aa7      	ldr	r2, [pc, #668]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004888:	430b      	orrs	r3, r1
 800488a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004894:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004898:	653b      	str	r3, [r7, #80]	@ 0x50
 800489a:	2300      	movs	r3, #0
 800489c:	657b      	str	r3, [r7, #84]	@ 0x54
 800489e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80048a2:	460b      	mov	r3, r1
 80048a4:	4313      	orrs	r3, r2
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80048a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80048b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ba:	430b      	orrs	r3, r1
 80048bc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	2300      	movs	r3, #0
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80048d4:	460b      	mov	r3, r1
 80048d6:	4313      	orrs	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048da:	4b92      	ldr	r3, [pc, #584]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048de:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048e8:	4a8e      	ldr	r2, [pc, #568]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ea:	430b      	orrs	r3, r1
 80048ec:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80048fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80048fc:	2300      	movs	r3, #0
 80048fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004900:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004904:	460b      	mov	r3, r1
 8004906:	4313      	orrs	r3, r2
 8004908:	d00e      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800490a:	4b86      	ldr	r3, [pc, #536]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	4a85      	ldr	r2, [pc, #532]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004910:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004914:	6113      	str	r3, [r2, #16]
 8004916:	4b83      	ldr	r3, [pc, #524]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004918:	6919      	ldr	r1, [r3, #16]
 800491a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004922:	4a80      	ldr	r2, [pc, #512]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004924:	430b      	orrs	r3, r1
 8004926:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004930:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004936:	2300      	movs	r3, #0
 8004938:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800493a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	d009      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004944:	4b77      	ldr	r3, [pc, #476]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004948:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	4a74      	ldr	r2, [pc, #464]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004954:	430b      	orrs	r3, r1
 8004956:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	2300      	movs	r3, #0
 8004968:	637b      	str	r3, [r7, #52]	@ 0x34
 800496a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800496e:	460b      	mov	r3, r1
 8004970:	4313      	orrs	r3, r2
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004974:	4b6b      	ldr	r3, [pc, #428]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004978:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800497c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004980:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004984:	4a67      	ldr	r2, [pc, #412]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004986:	430b      	orrs	r3, r1
 8004988:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004992:	2100      	movs	r1, #0
 8004994:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800499c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80049a0:	460b      	mov	r3, r1
 80049a2:	4313      	orrs	r3, r2
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049aa:	3308      	adds	r3, #8
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 fb78 	bl	80050a4 <RCCEx_PLL2_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d2:	2100      	movs	r1, #0
 80049d4:	6239      	str	r1, [r7, #32]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
 80049dc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80049e0:	460b      	mov	r3, r1
 80049e2:	4313      	orrs	r3, r2
 80049e4:	d011      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ea:	3308      	adds	r3, #8
 80049ec:	2101      	movs	r1, #1
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fb58 	bl	80050a4 <RCCEx_PLL2_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80049fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a12:	2100      	movs	r1, #0
 8004a14:	61b9      	str	r1, [r7, #24]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004a20:	460b      	mov	r3, r1
 8004a22:	4313      	orrs	r3, r2
 8004a24:	d011      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a2a:	3308      	adds	r3, #8
 8004a2c:	2102      	movs	r1, #2
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fb38 	bl	80050a4 <RCCEx_PLL2_Config>
 8004a34:	4603      	mov	r3, r0
 8004a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	2100      	movs	r1, #0
 8004a54:	6139      	str	r1, [r7, #16]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d011      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a6a:	3328      	adds	r3, #40	@ 0x28
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fbca 	bl	8005208 <RCCEx_PLL3_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a92:	2100      	movs	r1, #0
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	d011      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aaa:	3328      	adds	r3, #40	@ 0x28
 8004aac:	2101      	movs	r1, #1
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fbaa 	bl	8005208 <RCCEx_PLL3_Config>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004aba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	607b      	str	r3, [r7, #4]
 8004adc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	3328      	adds	r3, #40	@ 0x28
 8004aec:	2102      	movs	r1, #2
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fb8a 	bl	8005208 <RCCEx_PLL3_Config>
 8004af4:	4603      	mov	r3, r0
 8004af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004afa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d003      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004b0a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b24:	58024400 	.word	0x58024400

08004b28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b2c:	f7fe fd54 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	091b      	lsrs	r3, r3, #4
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4904      	ldr	r1, [pc, #16]	@ (8004b50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	f003 031f 	and.w	r3, r3, #31
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	58024400 	.word	0x58024400
 8004b50:	0800a6fc 	.word	0x0800a6fc

08004b54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b5c:	4ba1      	ldr	r3, [pc, #644]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004b66:	4b9f      	ldr	r3, [pc, #636]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	0b1b      	lsrs	r3, r3, #12
 8004b6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b72:	4b9c      	ldr	r3, [pc, #624]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004b7e:	4b99      	ldr	r3, [pc, #612]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	08db      	lsrs	r3, r3, #3
 8004b84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 8111 	beq.w	8004dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	f000 8083 	beq.w	8004cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	f200 80a1 	bhi.w	8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d056      	beq.n	8004c6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004bbe:	e099      	b.n	8004cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bc0:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d02d      	beq.n	8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bcc:	4b85      	ldr	r3, [pc, #532]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f003 0303 	and.w	r3, r3, #3
 8004bd6:	4a84      	ldr	r2, [pc, #528]	@ (8004de8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004bdc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c26:	e087      	b.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004df0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6a:	e065      	b.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b59      	ldr	r3, [pc, #356]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cae:	e043      	b.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b48      	ldr	r3, [pc, #288]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf2:	e021      	b.n	8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004df4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d06:	4b37      	ldr	r3, [pc, #220]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0e:	ee07 3a90 	vmov	s15, r3
 8004d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004d38:	4b2a      	ldr	r3, [pc, #168]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	0a5b      	lsrs	r3, r3, #9
 8004d3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d5e:	ee17 2a90 	vmov	r2, s15
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004d66:	4b1f      	ldr	r3, [pc, #124]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6a:	0c1b      	lsrs	r3, r3, #16
 8004d6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d70:	ee07 3a90 	vmov	s15, r3
 8004d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8c:	ee17 2a90 	vmov	r2, s15
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004d94:	4b13      	ldr	r3, [pc, #76]	@ (8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	0e1b      	lsrs	r3, r3, #24
 8004d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004daa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004db6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dba:	ee17 2a90 	vmov	r2, s15
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dc2:	e008      	b.n	8004dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	bf00      	nop
 8004dd8:	3724      	adds	r7, #36	@ 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	58024400 	.word	0x58024400
 8004de8:	03d09000 	.word	0x03d09000
 8004dec:	46000000 	.word	0x46000000
 8004df0:	4c742400 	.word	0x4c742400
 8004df4:	4a742400 	.word	0x4a742400
 8004df8:	4af42400 	.word	0x4af42400

08004dfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	@ 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e04:	4ba1      	ldr	r3, [pc, #644]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	f003 0303 	and.w	r3, r3, #3
 8004e0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004e0e:	4b9f      	ldr	r3, [pc, #636]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e12:	0d1b      	lsrs	r3, r3, #20
 8004e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e1a:	4b9c      	ldr	r3, [pc, #624]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	0a1b      	lsrs	r3, r3, #8
 8004e20:	f003 0301 	and.w	r3, r3, #1
 8004e24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004e26:	4b99      	ldr	r3, [pc, #612]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e2a:	08db      	lsrs	r3, r3, #3
 8004e2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	fb02 f303 	mul.w	r3, r2, r3
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8111 	beq.w	800506c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	f000 8083 	beq.w	8004f58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	f200 80a1 	bhi.w	8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d056      	beq.n	8004f14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004e66:	e099      	b.n	8004f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e68:	4b88      	ldr	r3, [pc, #544]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0320 	and.w	r3, r3, #32
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d02d      	beq.n	8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e74:	4b85      	ldr	r3, [pc, #532]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	08db      	lsrs	r3, r3, #3
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	4a84      	ldr	r2, [pc, #528]	@ (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004e80:	fa22 f303 	lsr.w	r3, r2, r3
 8004e84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9e:	4b7b      	ldr	r3, [pc, #492]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004ece:	e087      	b.n	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	ee07 3a90 	vmov	s15, r3
 8004ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eda:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ef6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f12:	e065      	b.n	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	ee07 3a90 	vmov	s15, r3
 8004f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800509c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f26:	4b59      	ldr	r3, [pc, #356]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2e:	ee07 3a90 	vmov	s15, r3
 8004f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f56:	e043      	b.n	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	ee07 3a90 	vmov	s15, r3
 8004f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f62:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f6a:	4b48      	ldr	r3, [pc, #288]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f72:	ee07 3a90 	vmov	s15, r3
 8004f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f7e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f9a:	e021      	b.n	8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800509c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fae:	4b37      	ldr	r3, [pc, #220]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb6:	ee07 3a90 	vmov	s15, r3
 8004fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fde:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004fe0:	4b2a      	ldr	r3, [pc, #168]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	0a5b      	lsrs	r3, r3, #9
 8004fe6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ff6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ffa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005006:	ee17 2a90 	vmov	r2, s15
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800500e:	4b1f      	ldr	r3, [pc, #124]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	0c1b      	lsrs	r3, r3, #16
 8005014:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005018:	ee07 3a90 	vmov	s15, r3
 800501c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005020:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005024:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005028:	edd7 6a07 	vldr	s13, [r7, #28]
 800502c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005034:	ee17 2a90 	vmov	r2, s15
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800503c:	4b13      	ldr	r3, [pc, #76]	@ (800508c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800503e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005040:	0e1b      	lsrs	r3, r3, #24
 8005042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005046:	ee07 3a90 	vmov	s15, r3
 800504a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005052:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005056:	edd7 6a07 	vldr	s13, [r7, #28]
 800505a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005062:	ee17 2a90 	vmov	r2, s15
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800506a:	e008      	b.n	800507e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	609a      	str	r2, [r3, #8]
}
 800507e:	bf00      	nop
 8005080:	3724      	adds	r7, #36	@ 0x24
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	58024400 	.word	0x58024400
 8005090:	03d09000 	.word	0x03d09000
 8005094:	46000000 	.word	0x46000000
 8005098:	4c742400 	.word	0x4c742400
 800509c:	4a742400 	.word	0x4a742400
 80050a0:	4af42400 	.word	0x4af42400

080050a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b2:	4b53      	ldr	r3, [pc, #332]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d101      	bne.n	80050c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e099      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc fa51 	bl	8001574 <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050d4:	e008      	b.n	80050e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050d6:	f7fc fa4d 	bl	8001574 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e086      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050e8:	4b45      	ldr	r3, [pc, #276]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f0      	bne.n	80050d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050f4:	4b42      	ldr	r3, [pc, #264]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80050f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	493f      	ldr	r1, [pc, #252]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005104:	4313      	orrs	r3, r2
 8005106:	628b      	str	r3, [r1, #40]	@ 0x28
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	3b01      	subs	r3, #1
 800510e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	3b01      	subs	r3, #1
 8005118:	025b      	lsls	r3, r3, #9
 800511a:	b29b      	uxth	r3, r3
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	3b01      	subs	r3, #1
 8005124:	041b      	lsls	r3, r3, #16
 8005126:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	3b01      	subs	r3, #1
 8005132:	061b      	lsls	r3, r3, #24
 8005134:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005138:	4931      	ldr	r1, [pc, #196]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800513e:	4b30      	ldr	r3, [pc, #192]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005142:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	492d      	ldr	r1, [pc, #180]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005150:	4b2b      	ldr	r3, [pc, #172]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	f023 0220 	bic.w	r2, r3, #32
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	4928      	ldr	r1, [pc, #160]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005162:	4b27      	ldr	r3, [pc, #156]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005168:	f023 0310 	bic.w	r3, r3, #16
 800516c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800516e:	4b24      	ldr	r3, [pc, #144]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005170:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005172:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <RCCEx_PLL2_Config+0x160>)
 8005174:	4013      	ands	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	69d2      	ldr	r2, [r2, #28]
 800517a:	00d2      	lsls	r2, r2, #3
 800517c:	4920      	ldr	r1, [pc, #128]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 800517e:	4313      	orrs	r3, r2
 8005180:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005182:	4b1f      	ldr	r3, [pc, #124]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005186:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005188:	f043 0310 	orr.w	r3, r3, #16
 800518c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005194:	4b1a      	ldr	r3, [pc, #104]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 8005196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005198:	4a19      	ldr	r2, [pc, #100]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 800519a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800519e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051a0:	e00f      	b.n	80051c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d106      	bne.n	80051b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051a8:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80051b4:	e005      	b.n	80051c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051b6:	4b12      	ldr	r3, [pc, #72]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ba:	4a11      	ldr	r2, [pc, #68]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80051c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ce:	f7fc f9d1 	bl	8001574 <HAL_GetTick>
 80051d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d4:	e008      	b.n	80051e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051d6:	f7fc f9cd 	bl	8001574 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e006      	b.n	80051f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <RCCEx_PLL2_Config+0x15c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0f0      	beq.n	80051d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	ffff0007 	.word	0xffff0007

08005208 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005216:	4b53      	ldr	r3, [pc, #332]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b03      	cmp	r3, #3
 8005220:	d101      	bne.n	8005226 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e099      	b.n	800535a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005226:	4b4f      	ldr	r3, [pc, #316]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4e      	ldr	r2, [pc, #312]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800522c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005232:	f7fc f99f 	bl	8001574 <HAL_GetTick>
 8005236:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005238:	e008      	b.n	800524c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800523a:	f7fc f99b 	bl	8001574 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e086      	b.n	800535a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800524c:	4b45      	ldr	r3, [pc, #276]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005258:	4b42      	ldr	r3, [pc, #264]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800525a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	051b      	lsls	r3, r3, #20
 8005266:	493f      	ldr	r1, [pc, #252]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005268:	4313      	orrs	r3, r2
 800526a:	628b      	str	r3, [r1, #40]	@ 0x28
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	3b01      	subs	r3, #1
 8005272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	3b01      	subs	r3, #1
 800527c:	025b      	lsls	r3, r3, #9
 800527e:	b29b      	uxth	r3, r3
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	691b      	ldr	r3, [r3, #16]
 8005294:	3b01      	subs	r3, #1
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800529c:	4931      	ldr	r1, [pc, #196]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052a2:	4b30      	ldr	r3, [pc, #192]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	492d      	ldr	r1, [pc, #180]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052b0:	4313      	orrs	r3, r2
 80052b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4928      	ldr	r1, [pc, #160]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052c6:	4b27      	ldr	r3, [pc, #156]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ca:	4a26      	ldr	r2, [pc, #152]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052d2:	4b24      	ldr	r3, [pc, #144]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d6:	4b24      	ldr	r3, [pc, #144]	@ (8005368 <RCCEx_PLL3_Config+0x160>)
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	69d2      	ldr	r2, [r2, #28]
 80052de:	00d2      	lsls	r2, r2, #3
 80052e0:	4920      	ldr	r1, [pc, #128]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d106      	bne.n	8005306 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052f8:	4b1a      	ldr	r3, [pc, #104]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052fc:	4a19      	ldr	r2, [pc, #100]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005302:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005304:	e00f      	b.n	8005326 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d106      	bne.n	800531a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800530c:	4b15      	ldr	r3, [pc, #84]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	4a14      	ldr	r2, [pc, #80]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005312:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005316:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005318:	e005      	b.n	8005326 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800531a:	4b12      	ldr	r3, [pc, #72]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800531c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531e:	4a11      	ldr	r2, [pc, #68]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005320:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005324:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005326:	4b0f      	ldr	r3, [pc, #60]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a0e      	ldr	r2, [pc, #56]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005332:	f7fc f91f 	bl	8001574 <HAL_GetTick>
 8005336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005338:	e008      	b.n	800534c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800533a:	f7fc f91b 	bl	8001574 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e006      	b.n	800535a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800534c:	4b05      	ldr	r3, [pc, #20]	@ (8005364 <RCCEx_PLL3_Config+0x15c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005358:	7bfb      	ldrb	r3, [r7, #15]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	58024400 	.word	0x58024400
 8005368:	ffff0007 	.word	0xffff0007

0800536c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e049      	b.n	8005412 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f841 	bl	800541a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 f9e8 	bl	8005780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
	...

08005430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d001      	beq.n	8005448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e054      	b.n	80054f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a26      	ldr	r2, [pc, #152]	@ (8005500 <HAL_TIM_Base_Start_IT+0xd0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005472:	d01d      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a22      	ldr	r2, [pc, #136]	@ (8005504 <HAL_TIM_Base_Start_IT+0xd4>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a21      	ldr	r2, [pc, #132]	@ (8005508 <HAL_TIM_Base_Start_IT+0xd8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1f      	ldr	r2, [pc, #124]	@ (800550c <HAL_TIM_Base_Start_IT+0xdc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a1e      	ldr	r2, [pc, #120]	@ (8005510 <HAL_TIM_Base_Start_IT+0xe0>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <HAL_TIM_Base_Start_IT+0xe4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_TIM_Base_Start_IT+0x80>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <HAL_TIM_Base_Start_IT+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d115      	bne.n	80054dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	4b19      	ldr	r3, [pc, #100]	@ (800551c <HAL_TIM_Base_Start_IT+0xec>)
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2b06      	cmp	r3, #6
 80054c0:	d015      	beq.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c8:	d011      	beq.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054da:	e008      	b.n	80054ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0201 	orr.w	r2, r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e000      	b.n	80054f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	40010000 	.word	0x40010000
 8005504:	40000400 	.word	0x40000400
 8005508:	40000800 	.word	0x40000800
 800550c:	40000c00 	.word	0x40000c00
 8005510:	40010400 	.word	0x40010400
 8005514:	40001800 	.word	0x40001800
 8005518:	40014000 	.word	0x40014000
 800551c:	00010007 	.word	0x00010007

08005520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d020      	beq.n	8005584 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0202 	mvn.w	r2, #2
 8005554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8e9 	bl	8005742 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f8db 	bl	800572e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f8ec 	bl	8005756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	d020      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01b      	beq.n	80055d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0204 	mvn.w	r2, #4
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8c3 	bl	8005742 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8b5 	bl	800572e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f8c6 	bl	8005756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d020      	beq.n	800561c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0308 	and.w	r3, r3, #8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01b      	beq.n	800561c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0208 	mvn.w	r2, #8
 80055ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2204      	movs	r2, #4
 80055f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f89d 	bl	8005742 <HAL_TIM_IC_CaptureCallback>
 8005608:	e005      	b.n	8005616 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f88f 	bl	800572e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f8a0 	bl	8005756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	f003 0310 	and.w	r3, r3, #16
 8005622:	2b00      	cmp	r3, #0
 8005624:	d020      	beq.n	8005668 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0210 	mvn.w	r2, #16
 8005638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2208      	movs	r2, #8
 800563e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f000 f877 	bl	8005742 <HAL_TIM_IC_CaptureCallback>
 8005654:	e005      	b.n	8005662 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f869 	bl	800572e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f87a 	bl	8005756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00c      	beq.n	800568c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f06f 0201 	mvn.w	r2, #1
 8005684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7fb fb84 	bl	8000d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00c      	beq.n	80056ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80056b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f913 	bl	80058e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00c      	beq.n	80056de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f90b 	bl	80058f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00c      	beq.n	8005702 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d007      	beq.n	8005702 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f834 	bl	800576a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f003 0320 	and.w	r3, r3, #32
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f06f 0220 	mvn.w	r2, #32
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8d3 	bl	80058cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572e:	b480      	push	{r7}
 8005730:	b083      	sub	sp, #12
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005736:	bf00      	nop
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005742:	b480      	push	{r7}
 8005744:	b083      	sub	sp, #12
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005756:	b480      	push	{r7}
 8005758:	b083      	sub	sp, #12
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr

0800576a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800576a:	b480      	push	{r7}
 800576c:	b083      	sub	sp, #12
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
	...

08005780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a46      	ldr	r2, [pc, #280]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d013      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800579e:	d00f      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a43      	ldr	r2, [pc, #268]	@ (80058b0 <TIM_Base_SetConfig+0x130>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d00b      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a42      	ldr	r2, [pc, #264]	@ (80058b4 <TIM_Base_SetConfig+0x134>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a41      	ldr	r2, [pc, #260]	@ (80058b8 <TIM_Base_SetConfig+0x138>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a40      	ldr	r2, [pc, #256]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d108      	bne.n	80057d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a35      	ldr	r2, [pc, #212]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e0:	d01b      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a32      	ldr	r2, [pc, #200]	@ (80058b0 <TIM_Base_SetConfig+0x130>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d017      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a31      	ldr	r2, [pc, #196]	@ (80058b4 <TIM_Base_SetConfig+0x134>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d013      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a30      	ldr	r2, [pc, #192]	@ (80058b8 <TIM_Base_SetConfig+0x138>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00f      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d00b      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2e      	ldr	r2, [pc, #184]	@ (80058c0 <TIM_Base_SetConfig+0x140>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d007      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2d      	ldr	r2, [pc, #180]	@ (80058c4 <TIM_Base_SetConfig+0x144>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d003      	beq.n	800581a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2c      	ldr	r2, [pc, #176]	@ (80058c8 <TIM_Base_SetConfig+0x148>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d108      	bne.n	800582c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a16      	ldr	r2, [pc, #88]	@ (80058ac <TIM_Base_SetConfig+0x12c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a18      	ldr	r2, [pc, #96]	@ (80058bc <TIM_Base_SetConfig+0x13c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a17      	ldr	r2, [pc, #92]	@ (80058c0 <TIM_Base_SetConfig+0x140>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <TIM_Base_SetConfig+0x144>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a15      	ldr	r2, [pc, #84]	@ (80058c8 <TIM_Base_SetConfig+0x148>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d103      	bne.n	8005880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b01      	cmp	r3, #1
 8005890:	d105      	bne.n	800589e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f023 0201 	bic.w	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	611a      	str	r2, [r3, #16]
  }
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40000400 	.word	0x40000400
 80058b4:	40000800 	.word	0x40000800
 80058b8:	40000c00 	.word	0x40000c00
 80058bc:	40010400 	.word	0x40010400
 80058c0:	40014000 	.word	0x40014000
 80058c4:	40014400 	.word	0x40014400
 80058c8:	40014800 	.word	0x40014800

080058cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e042      	b.n	80059a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005920:	2b00      	cmp	r3, #0
 8005922:	d106      	bne.n	8005932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7fb fb35 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2224      	movs	r2, #36	@ 0x24
 8005936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0201 	bic.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fe1e 	bl	8006594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f8b3 	bl	8005ac4 <UART_SetConfig>
 800595e:	4603      	mov	r3, r0
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e01b      	b.n	80059a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f042 0201 	orr.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fe9d 	bl	80066d8 <UART_CheckIdleState>
 800599e:	4603      	mov	r3, r0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	603b      	str	r3, [r7, #0]
 80059b4:	4613      	mov	r3, r2
 80059b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059be:	2b20      	cmp	r3, #32
 80059c0:	d17b      	bne.n	8005aba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d002      	beq.n	80059ce <HAL_UART_Transmit+0x26>
 80059c8:	88fb      	ldrh	r3, [r7, #6]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e074      	b.n	8005abc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2221      	movs	r2, #33	@ 0x21
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059e2:	f7fb fdc7 	bl	8001574 <HAL_GetTick>
 80059e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	88fa      	ldrh	r2, [r7, #6]
 80059ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a00:	d108      	bne.n	8005a14 <HAL_UART_Transmit+0x6c>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d104      	bne.n	8005a14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	61bb      	str	r3, [r7, #24]
 8005a12:	e003      	b.n	8005a1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a1c:	e030      	b.n	8005a80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	2200      	movs	r2, #0
 8005a26:	2180      	movs	r1, #128	@ 0x80
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 feff 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e03d      	b.n	8005abc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10b      	bne.n	8005a5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	881b      	ldrh	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a54:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	3302      	adds	r3, #2
 8005a5a:	61bb      	str	r3, [r7, #24]
 8005a5c:	e007      	b.n	8005a6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	781a      	ldrb	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1c8      	bne.n	8005a1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2200      	movs	r2, #0
 8005a94:	2140      	movs	r1, #64	@ 0x40
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f000 fec8 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e006      	b.n	8005abc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e000      	b.n	8005abc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005aba:	2302      	movs	r3, #2
  }
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3720      	adds	r7, #32
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac8:	b092      	sub	sp, #72	@ 0x48
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	431a      	orrs	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	69db      	ldr	r3, [r3, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	4bbe      	ldr	r3, [pc, #760]	@ (8005dec <UART_SetConfig+0x328>)
 8005af4:	4013      	ands	r3, r2
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005afc:	430b      	orrs	r3, r1
 8005afe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	68da      	ldr	r2, [r3, #12]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4ab3      	ldr	r2, [pc, #716]	@ (8005df0 <UART_SetConfig+0x32c>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	4baf      	ldr	r3, [pc, #700]	@ (8005df4 <UART_SetConfig+0x330>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b4a:	f023 010f 	bic.w	r1, r3, #15
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4aa6      	ldr	r2, [pc, #664]	@ (8005df8 <UART_SetConfig+0x334>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d177      	bne.n	8005c54 <UART_SetConfig+0x190>
 8005b64:	4ba5      	ldr	r3, [pc, #660]	@ (8005dfc <UART_SetConfig+0x338>)
 8005b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b6c:	2b28      	cmp	r3, #40	@ 0x28
 8005b6e:	d86d      	bhi.n	8005c4c <UART_SetConfig+0x188>
 8005b70:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <UART_SetConfig+0xb4>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005c1d 	.word	0x08005c1d
 8005b7c:	08005c4d 	.word	0x08005c4d
 8005b80:	08005c4d 	.word	0x08005c4d
 8005b84:	08005c4d 	.word	0x08005c4d
 8005b88:	08005c4d 	.word	0x08005c4d
 8005b8c:	08005c4d 	.word	0x08005c4d
 8005b90:	08005c4d 	.word	0x08005c4d
 8005b94:	08005c4d 	.word	0x08005c4d
 8005b98:	08005c25 	.word	0x08005c25
 8005b9c:	08005c4d 	.word	0x08005c4d
 8005ba0:	08005c4d 	.word	0x08005c4d
 8005ba4:	08005c4d 	.word	0x08005c4d
 8005ba8:	08005c4d 	.word	0x08005c4d
 8005bac:	08005c4d 	.word	0x08005c4d
 8005bb0:	08005c4d 	.word	0x08005c4d
 8005bb4:	08005c4d 	.word	0x08005c4d
 8005bb8:	08005c2d 	.word	0x08005c2d
 8005bbc:	08005c4d 	.word	0x08005c4d
 8005bc0:	08005c4d 	.word	0x08005c4d
 8005bc4:	08005c4d 	.word	0x08005c4d
 8005bc8:	08005c4d 	.word	0x08005c4d
 8005bcc:	08005c4d 	.word	0x08005c4d
 8005bd0:	08005c4d 	.word	0x08005c4d
 8005bd4:	08005c4d 	.word	0x08005c4d
 8005bd8:	08005c35 	.word	0x08005c35
 8005bdc:	08005c4d 	.word	0x08005c4d
 8005be0:	08005c4d 	.word	0x08005c4d
 8005be4:	08005c4d 	.word	0x08005c4d
 8005be8:	08005c4d 	.word	0x08005c4d
 8005bec:	08005c4d 	.word	0x08005c4d
 8005bf0:	08005c4d 	.word	0x08005c4d
 8005bf4:	08005c4d 	.word	0x08005c4d
 8005bf8:	08005c3d 	.word	0x08005c3d
 8005bfc:	08005c4d 	.word	0x08005c4d
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c4d 	.word	0x08005c4d
 8005c08:	08005c4d 	.word	0x08005c4d
 8005c0c:	08005c4d 	.word	0x08005c4d
 8005c10:	08005c4d 	.word	0x08005c4d
 8005c14:	08005c4d 	.word	0x08005c4d
 8005c18:	08005c45 	.word	0x08005c45
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e222      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c24:	2304      	movs	r3, #4
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e21e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e21a      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c34:	2310      	movs	r3, #16
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e216      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c3c:	2320      	movs	r3, #32
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e212      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c44:	2340      	movs	r3, #64	@ 0x40
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e20e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c4c:	2380      	movs	r3, #128	@ 0x80
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e20a      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a69      	ldr	r2, [pc, #420]	@ (8005e00 <UART_SetConfig+0x33c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d130      	bne.n	8005cc0 <UART_SetConfig+0x1fc>
 8005c5e:	4b67      	ldr	r3, [pc, #412]	@ (8005dfc <UART_SetConfig+0x338>)
 8005c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b05      	cmp	r3, #5
 8005c68:	d826      	bhi.n	8005cb8 <UART_SetConfig+0x1f4>
 8005c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c70 <UART_SetConfig+0x1ac>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c89 	.word	0x08005c89
 8005c74:	08005c91 	.word	0x08005c91
 8005c78:	08005c99 	.word	0x08005c99
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e1ec      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c90:	2304      	movs	r3, #4
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e1e8      	b.n	800606a <UART_SetConfig+0x5a6>
 8005c98:	2308      	movs	r3, #8
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e1e4      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ca0:	2310      	movs	r3, #16
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e1e0      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ca8:	2320      	movs	r3, #32
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cae:	e1dc      	b.n	800606a <UART_SetConfig+0x5a6>
 8005cb0:	2340      	movs	r3, #64	@ 0x40
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb6:	e1d8      	b.n	800606a <UART_SetConfig+0x5a6>
 8005cb8:	2380      	movs	r3, #128	@ 0x80
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cbe:	e1d4      	b.n	800606a <UART_SetConfig+0x5a6>
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005e04 <UART_SetConfig+0x340>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d130      	bne.n	8005d2c <UART_SetConfig+0x268>
 8005cca:	4b4c      	ldr	r3, [pc, #304]	@ (8005dfc <UART_SetConfig+0x338>)
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d826      	bhi.n	8005d24 <UART_SetConfig+0x260>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <UART_SetConfig+0x218>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005cfd 	.word	0x08005cfd
 8005ce4:	08005d05 	.word	0x08005d05
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d1d 	.word	0x08005d1d
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e1b6      	b.n	800606a <UART_SetConfig+0x5a6>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d02:	e1b2      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d04:	2308      	movs	r3, #8
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0a:	e1ae      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d0c:	2310      	movs	r3, #16
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d12:	e1aa      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d14:	2320      	movs	r3, #32
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1a:	e1a6      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d1c:	2340      	movs	r3, #64	@ 0x40
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d22:	e1a2      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d24:	2380      	movs	r3, #128	@ 0x80
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2a:	e19e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a35      	ldr	r2, [pc, #212]	@ (8005e08 <UART_SetConfig+0x344>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d130      	bne.n	8005d98 <UART_SetConfig+0x2d4>
 8005d36:	4b31      	ldr	r3, [pc, #196]	@ (8005dfc <UART_SetConfig+0x338>)
 8005d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d826      	bhi.n	8005d90 <UART_SetConfig+0x2cc>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <UART_SetConfig+0x284>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d61 	.word	0x08005d61
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d71 	.word	0x08005d71
 8005d54:	08005d79 	.word	0x08005d79
 8005d58:	08005d81 	.word	0x08005d81
 8005d5c:	08005d89 	.word	0x08005d89
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e180      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e17c      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e178      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e174      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d80:	2320      	movs	r3, #32
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e170      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d88:	2340      	movs	r3, #64	@ 0x40
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e16c      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d90:	2380      	movs	r3, #128	@ 0x80
 8005d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d96:	e168      	b.n	800606a <UART_SetConfig+0x5a6>
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e0c <UART_SetConfig+0x348>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d142      	bne.n	8005e28 <UART_SetConfig+0x364>
 8005da2:	4b16      	ldr	r3, [pc, #88]	@ (8005dfc <UART_SetConfig+0x338>)
 8005da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b05      	cmp	r3, #5
 8005dac:	d838      	bhi.n	8005e20 <UART_SetConfig+0x35c>
 8005dae:	a201      	add	r2, pc, #4	@ (adr r2, 8005db4 <UART_SetConfig+0x2f0>)
 8005db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db4:	08005dcd 	.word	0x08005dcd
 8005db8:	08005dd5 	.word	0x08005dd5
 8005dbc:	08005ddd 	.word	0x08005ddd
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005e11 	.word	0x08005e11
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e14a      	b.n	800606a <UART_SetConfig+0x5a6>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e146      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ddc:	2308      	movs	r3, #8
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e142      	b.n	800606a <UART_SetConfig+0x5a6>
 8005de4:	2310      	movs	r3, #16
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e13e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005dec:	cfff69f3 	.word	0xcfff69f3
 8005df0:	58000c00 	.word	0x58000c00
 8005df4:	11fff4ff 	.word	0x11fff4ff
 8005df8:	40011000 	.word	0x40011000
 8005dfc:	58024400 	.word	0x58024400
 8005e00:	40004400 	.word	0x40004400
 8005e04:	40004800 	.word	0x40004800
 8005e08:	40004c00 	.word	0x40004c00
 8005e0c:	40005000 	.word	0x40005000
 8005e10:	2320      	movs	r3, #32
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e128      	b.n	800606a <UART_SetConfig+0x5a6>
 8005e18:	2340      	movs	r3, #64	@ 0x40
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e124      	b.n	800606a <UART_SetConfig+0x5a6>
 8005e20:	2380      	movs	r3, #128	@ 0x80
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e120      	b.n	800606a <UART_SetConfig+0x5a6>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4acb      	ldr	r2, [pc, #812]	@ (800615c <UART_SetConfig+0x698>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d176      	bne.n	8005f20 <UART_SetConfig+0x45c>
 8005e32:	4bcb      	ldr	r3, [pc, #812]	@ (8006160 <UART_SetConfig+0x69c>)
 8005e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e3a:	2b28      	cmp	r3, #40	@ 0x28
 8005e3c:	d86c      	bhi.n	8005f18 <UART_SetConfig+0x454>
 8005e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e44 <UART_SetConfig+0x380>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005ee9 	.word	0x08005ee9
 8005e48:	08005f19 	.word	0x08005f19
 8005e4c:	08005f19 	.word	0x08005f19
 8005e50:	08005f19 	.word	0x08005f19
 8005e54:	08005f19 	.word	0x08005f19
 8005e58:	08005f19 	.word	0x08005f19
 8005e5c:	08005f19 	.word	0x08005f19
 8005e60:	08005f19 	.word	0x08005f19
 8005e64:	08005ef1 	.word	0x08005ef1
 8005e68:	08005f19 	.word	0x08005f19
 8005e6c:	08005f19 	.word	0x08005f19
 8005e70:	08005f19 	.word	0x08005f19
 8005e74:	08005f19 	.word	0x08005f19
 8005e78:	08005f19 	.word	0x08005f19
 8005e7c:	08005f19 	.word	0x08005f19
 8005e80:	08005f19 	.word	0x08005f19
 8005e84:	08005ef9 	.word	0x08005ef9
 8005e88:	08005f19 	.word	0x08005f19
 8005e8c:	08005f19 	.word	0x08005f19
 8005e90:	08005f19 	.word	0x08005f19
 8005e94:	08005f19 	.word	0x08005f19
 8005e98:	08005f19 	.word	0x08005f19
 8005e9c:	08005f19 	.word	0x08005f19
 8005ea0:	08005f19 	.word	0x08005f19
 8005ea4:	08005f01 	.word	0x08005f01
 8005ea8:	08005f19 	.word	0x08005f19
 8005eac:	08005f19 	.word	0x08005f19
 8005eb0:	08005f19 	.word	0x08005f19
 8005eb4:	08005f19 	.word	0x08005f19
 8005eb8:	08005f19 	.word	0x08005f19
 8005ebc:	08005f19 	.word	0x08005f19
 8005ec0:	08005f19 	.word	0x08005f19
 8005ec4:	08005f09 	.word	0x08005f09
 8005ec8:	08005f19 	.word	0x08005f19
 8005ecc:	08005f19 	.word	0x08005f19
 8005ed0:	08005f19 	.word	0x08005f19
 8005ed4:	08005f19 	.word	0x08005f19
 8005ed8:	08005f19 	.word	0x08005f19
 8005edc:	08005f19 	.word	0x08005f19
 8005ee0:	08005f19 	.word	0x08005f19
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e0bc      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ef0:	2304      	movs	r3, #4
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e0b8      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ef8:	2308      	movs	r3, #8
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e0b4      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f00:	2310      	movs	r3, #16
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e0b0      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e0ac      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f10:	2340      	movs	r3, #64	@ 0x40
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e0a8      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f18:	2380      	movs	r3, #128	@ 0x80
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e0a4      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a8f      	ldr	r2, [pc, #572]	@ (8006164 <UART_SetConfig+0x6a0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d130      	bne.n	8005f8c <UART_SetConfig+0x4c8>
 8005f2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006160 <UART_SetConfig+0x69c>)
 8005f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	2b05      	cmp	r3, #5
 8005f34:	d826      	bhi.n	8005f84 <UART_SetConfig+0x4c0>
 8005f36:	a201      	add	r2, pc, #4	@ (adr r2, 8005f3c <UART_SetConfig+0x478>)
 8005f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f3c:	08005f55 	.word	0x08005f55
 8005f40:	08005f5d 	.word	0x08005f5d
 8005f44:	08005f65 	.word	0x08005f65
 8005f48:	08005f6d 	.word	0x08005f6d
 8005f4c:	08005f75 	.word	0x08005f75
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e086      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f5c:	2304      	movs	r3, #4
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e082      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f64:	2308      	movs	r3, #8
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e07e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f6c:	2310      	movs	r3, #16
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e07a      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f74:	2320      	movs	r3, #32
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e076      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f7c:	2340      	movs	r3, #64	@ 0x40
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e072      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f84:	2380      	movs	r3, #128	@ 0x80
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e06e      	b.n	800606a <UART_SetConfig+0x5a6>
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a75      	ldr	r2, [pc, #468]	@ (8006168 <UART_SetConfig+0x6a4>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d130      	bne.n	8005ff8 <UART_SetConfig+0x534>
 8005f96:	4b72      	ldr	r3, [pc, #456]	@ (8006160 <UART_SetConfig+0x69c>)
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f003 0307 	and.w	r3, r3, #7
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d826      	bhi.n	8005ff0 <UART_SetConfig+0x52c>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x4e4>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fc1 	.word	0x08005fc1
 8005fac:	08005fc9 	.word	0x08005fc9
 8005fb0:	08005fd1 	.word	0x08005fd1
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fe1 	.word	0x08005fe1
 8005fbc:	08005fe9 	.word	0x08005fe9
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e050      	b.n	800606a <UART_SetConfig+0x5a6>
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fce:	e04c      	b.n	800606a <UART_SetConfig+0x5a6>
 8005fd0:	2308      	movs	r3, #8
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e048      	b.n	800606a <UART_SetConfig+0x5a6>
 8005fd8:	2310      	movs	r3, #16
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e044      	b.n	800606a <UART_SetConfig+0x5a6>
 8005fe0:	2320      	movs	r3, #32
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e040      	b.n	800606a <UART_SetConfig+0x5a6>
 8005fe8:	2340      	movs	r3, #64	@ 0x40
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e03c      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ff0:	2380      	movs	r3, #128	@ 0x80
 8005ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff6:	e038      	b.n	800606a <UART_SetConfig+0x5a6>
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a5b      	ldr	r2, [pc, #364]	@ (800616c <UART_SetConfig+0x6a8>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d130      	bne.n	8006064 <UART_SetConfig+0x5a0>
 8006002:	4b57      	ldr	r3, [pc, #348]	@ (8006160 <UART_SetConfig+0x69c>)
 8006004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	2b05      	cmp	r3, #5
 800600c:	d826      	bhi.n	800605c <UART_SetConfig+0x598>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x550>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	0800602d 	.word	0x0800602d
 8006018:	08006035 	.word	0x08006035
 800601c:	0800603d 	.word	0x0800603d
 8006020:	08006045 	.word	0x08006045
 8006024:	0800604d 	.word	0x0800604d
 8006028:	08006055 	.word	0x08006055
 800602c:	2302      	movs	r3, #2
 800602e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006032:	e01a      	b.n	800606a <UART_SetConfig+0x5a6>
 8006034:	2304      	movs	r3, #4
 8006036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603a:	e016      	b.n	800606a <UART_SetConfig+0x5a6>
 800603c:	2308      	movs	r3, #8
 800603e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006042:	e012      	b.n	800606a <UART_SetConfig+0x5a6>
 8006044:	2310      	movs	r3, #16
 8006046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604a:	e00e      	b.n	800606a <UART_SetConfig+0x5a6>
 800604c:	2320      	movs	r3, #32
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e00a      	b.n	800606a <UART_SetConfig+0x5a6>
 8006054:	2340      	movs	r3, #64	@ 0x40
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e006      	b.n	800606a <UART_SetConfig+0x5a6>
 800605c:	2380      	movs	r3, #128	@ 0x80
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e002      	b.n	800606a <UART_SetConfig+0x5a6>
 8006064:	2380      	movs	r3, #128	@ 0x80
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a3f      	ldr	r2, [pc, #252]	@ (800616c <UART_SetConfig+0x6a8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	f040 80f8 	bne.w	8006266 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006076:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800607a:	2b20      	cmp	r3, #32
 800607c:	dc46      	bgt.n	800610c <UART_SetConfig+0x648>
 800607e:	2b02      	cmp	r3, #2
 8006080:	f2c0 8082 	blt.w	8006188 <UART_SetConfig+0x6c4>
 8006084:	3b02      	subs	r3, #2
 8006086:	2b1e      	cmp	r3, #30
 8006088:	d87e      	bhi.n	8006188 <UART_SetConfig+0x6c4>
 800608a:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <UART_SetConfig+0x5cc>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	08006113 	.word	0x08006113
 8006094:	08006189 	.word	0x08006189
 8006098:	0800611b 	.word	0x0800611b
 800609c:	08006189 	.word	0x08006189
 80060a0:	08006189 	.word	0x08006189
 80060a4:	08006189 	.word	0x08006189
 80060a8:	0800612b 	.word	0x0800612b
 80060ac:	08006189 	.word	0x08006189
 80060b0:	08006189 	.word	0x08006189
 80060b4:	08006189 	.word	0x08006189
 80060b8:	08006189 	.word	0x08006189
 80060bc:	08006189 	.word	0x08006189
 80060c0:	08006189 	.word	0x08006189
 80060c4:	08006189 	.word	0x08006189
 80060c8:	0800613b 	.word	0x0800613b
 80060cc:	08006189 	.word	0x08006189
 80060d0:	08006189 	.word	0x08006189
 80060d4:	08006189 	.word	0x08006189
 80060d8:	08006189 	.word	0x08006189
 80060dc:	08006189 	.word	0x08006189
 80060e0:	08006189 	.word	0x08006189
 80060e4:	08006189 	.word	0x08006189
 80060e8:	08006189 	.word	0x08006189
 80060ec:	08006189 	.word	0x08006189
 80060f0:	08006189 	.word	0x08006189
 80060f4:	08006189 	.word	0x08006189
 80060f8:	08006189 	.word	0x08006189
 80060fc:	08006189 	.word	0x08006189
 8006100:	08006189 	.word	0x08006189
 8006104:	08006189 	.word	0x08006189
 8006108:	0800617b 	.word	0x0800617b
 800610c:	2b40      	cmp	r3, #64	@ 0x40
 800610e:	d037      	beq.n	8006180 <UART_SetConfig+0x6bc>
 8006110:	e03a      	b.n	8006188 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006112:	f7fe fd09 	bl	8004b28 <HAL_RCCEx_GetD3PCLK1Freq>
 8006116:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006118:	e03c      	b.n	8006194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800611a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800611e:	4618      	mov	r0, r3
 8006120:	f7fe fd18 	bl	8004b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006128:	e034      	b.n	8006194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800612a:	f107 0318 	add.w	r3, r7, #24
 800612e:	4618      	mov	r0, r3
 8006130:	f7fe fe64 	bl	8004dfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006138:	e02c      	b.n	8006194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800613a:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <UART_SetConfig+0x69c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0320 	and.w	r3, r3, #32
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006146:	4b06      	ldr	r3, [pc, #24]	@ (8006160 <UART_SetConfig+0x69c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	08db      	lsrs	r3, r3, #3
 800614c:	f003 0303 	and.w	r3, r3, #3
 8006150:	4a07      	ldr	r2, [pc, #28]	@ (8006170 <UART_SetConfig+0x6ac>)
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006158:	e01c      	b.n	8006194 <UART_SetConfig+0x6d0>
 800615a:	bf00      	nop
 800615c:	40011400 	.word	0x40011400
 8006160:	58024400 	.word	0x58024400
 8006164:	40007800 	.word	0x40007800
 8006168:	40007c00 	.word	0x40007c00
 800616c:	58000c00 	.word	0x58000c00
 8006170:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006174:	4b9d      	ldr	r3, [pc, #628]	@ (80063ec <UART_SetConfig+0x928>)
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006178:	e00c      	b.n	8006194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800617a:	4b9d      	ldr	r3, [pc, #628]	@ (80063f0 <UART_SetConfig+0x92c>)
 800617c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800617e:	e009      	b.n	8006194 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006180:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006186:	e005      	b.n	8006194 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006192:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 81de 	beq.w	8006558 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a0:	4a94      	ldr	r2, [pc, #592]	@ (80063f4 <UART_SetConfig+0x930>)
 80061a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80061ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	685a      	ldr	r2, [r3, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	4413      	add	r3, r2
 80061ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061bc:	429a      	cmp	r2, r3
 80061be:	d305      	bcc.n	80061cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80061c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d903      	bls.n	80061d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061d2:	e1c1      	b.n	8006558 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061d6:	2200      	movs	r2, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	60fa      	str	r2, [r7, #12]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	4a84      	ldr	r2, [pc, #528]	@ (80063f4 <UART_SetConfig+0x930>)
 80061e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	2200      	movs	r2, #0
 80061ea:	603b      	str	r3, [r7, #0]
 80061ec:	607a      	str	r2, [r7, #4]
 80061ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061f6:	f7fa f8cb 	bl	8000390 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	020b      	lsls	r3, r1, #8
 800620c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006210:	0202      	lsls	r2, r0, #8
 8006212:	6979      	ldr	r1, [r7, #20]
 8006214:	6849      	ldr	r1, [r1, #4]
 8006216:	0849      	lsrs	r1, r1, #1
 8006218:	2000      	movs	r0, #0
 800621a:	460c      	mov	r4, r1
 800621c:	4605      	mov	r5, r0
 800621e:	eb12 0804 	adds.w	r8, r2, r4
 8006222:	eb43 0905 	adc.w	r9, r3, r5
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	469a      	mov	sl, r3
 800622e:	4693      	mov	fp, r2
 8006230:	4652      	mov	r2, sl
 8006232:	465b      	mov	r3, fp
 8006234:	4640      	mov	r0, r8
 8006236:	4649      	mov	r1, r9
 8006238:	f7fa f8aa 	bl	8000390 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4613      	mov	r3, r2
 8006242:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006246:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800624a:	d308      	bcc.n	800625e <UART_SetConfig+0x79a>
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006252:	d204      	bcs.n	800625e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800625a:	60da      	str	r2, [r3, #12]
 800625c:	e17c      	b.n	8006558 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006264:	e178      	b.n	8006558 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	69db      	ldr	r3, [r3, #28]
 800626a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800626e:	f040 80c5 	bne.w	80063fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006272:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006276:	2b20      	cmp	r3, #32
 8006278:	dc48      	bgt.n	800630c <UART_SetConfig+0x848>
 800627a:	2b00      	cmp	r3, #0
 800627c:	db7b      	blt.n	8006376 <UART_SetConfig+0x8b2>
 800627e:	2b20      	cmp	r3, #32
 8006280:	d879      	bhi.n	8006376 <UART_SetConfig+0x8b2>
 8006282:	a201      	add	r2, pc, #4	@ (adr r2, 8006288 <UART_SetConfig+0x7c4>)
 8006284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006288:	08006313 	.word	0x08006313
 800628c:	0800631b 	.word	0x0800631b
 8006290:	08006377 	.word	0x08006377
 8006294:	08006377 	.word	0x08006377
 8006298:	08006323 	.word	0x08006323
 800629c:	08006377 	.word	0x08006377
 80062a0:	08006377 	.word	0x08006377
 80062a4:	08006377 	.word	0x08006377
 80062a8:	08006333 	.word	0x08006333
 80062ac:	08006377 	.word	0x08006377
 80062b0:	08006377 	.word	0x08006377
 80062b4:	08006377 	.word	0x08006377
 80062b8:	08006377 	.word	0x08006377
 80062bc:	08006377 	.word	0x08006377
 80062c0:	08006377 	.word	0x08006377
 80062c4:	08006377 	.word	0x08006377
 80062c8:	08006343 	.word	0x08006343
 80062cc:	08006377 	.word	0x08006377
 80062d0:	08006377 	.word	0x08006377
 80062d4:	08006377 	.word	0x08006377
 80062d8:	08006377 	.word	0x08006377
 80062dc:	08006377 	.word	0x08006377
 80062e0:	08006377 	.word	0x08006377
 80062e4:	08006377 	.word	0x08006377
 80062e8:	08006377 	.word	0x08006377
 80062ec:	08006377 	.word	0x08006377
 80062f0:	08006377 	.word	0x08006377
 80062f4:	08006377 	.word	0x08006377
 80062f8:	08006377 	.word	0x08006377
 80062fc:	08006377 	.word	0x08006377
 8006300:	08006377 	.word	0x08006377
 8006304:	08006377 	.word	0x08006377
 8006308:	08006369 	.word	0x08006369
 800630c:	2b40      	cmp	r3, #64	@ 0x40
 800630e:	d02e      	beq.n	800636e <UART_SetConfig+0x8aa>
 8006310:	e031      	b.n	8006376 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006312:	f7fd f991 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 8006316:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006318:	e033      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800631a:	f7fd f9a3 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 800631e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006320:	e02f      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006322:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fc14 	bl	8004b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800632c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006330:	e027      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006332:	f107 0318 	add.w	r3, r7, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fd60 	bl	8004dfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006340:	e01f      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006342:	4b2d      	ldr	r3, [pc, #180]	@ (80063f8 <UART_SetConfig+0x934>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d009      	beq.n	8006362 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634e:	4b2a      	ldr	r3, [pc, #168]	@ (80063f8 <UART_SetConfig+0x934>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	08db      	lsrs	r3, r3, #3
 8006354:	f003 0303 	and.w	r3, r3, #3
 8006358:	4a24      	ldr	r2, [pc, #144]	@ (80063ec <UART_SetConfig+0x928>)
 800635a:	fa22 f303 	lsr.w	r3, r2, r3
 800635e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006360:	e00f      	b.n	8006382 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006362:	4b22      	ldr	r3, [pc, #136]	@ (80063ec <UART_SetConfig+0x928>)
 8006364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006366:	e00c      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006368:	4b21      	ldr	r3, [pc, #132]	@ (80063f0 <UART_SetConfig+0x92c>)
 800636a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800636c:	e009      	b.n	8006382 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006374:	e005      	b.n	8006382 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 80e7 	beq.w	8006558 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	4a19      	ldr	r2, [pc, #100]	@ (80063f4 <UART_SetConfig+0x930>)
 8006390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006394:	461a      	mov	r2, r3
 8006396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006398:	fbb3 f3f2 	udiv	r3, r3, r2
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d916      	bls.n	80063e4 <UART_SetConfig+0x920>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d212      	bcs.n	80063e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f023 030f 	bic.w	r3, r3, #15
 80063c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80063d6:	4313      	orrs	r3, r2
 80063d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e0b9      	b.n	8006558 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063ea:	e0b5      	b.n	8006558 <UART_SetConfig+0xa94>
 80063ec:	03d09000 	.word	0x03d09000
 80063f0:	003d0900 	.word	0x003d0900
 80063f4:	0800a70c 	.word	0x0800a70c
 80063f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80063fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006400:	2b20      	cmp	r3, #32
 8006402:	dc49      	bgt.n	8006498 <UART_SetConfig+0x9d4>
 8006404:	2b00      	cmp	r3, #0
 8006406:	db7c      	blt.n	8006502 <UART_SetConfig+0xa3e>
 8006408:	2b20      	cmp	r3, #32
 800640a:	d87a      	bhi.n	8006502 <UART_SetConfig+0xa3e>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <UART_SetConfig+0x950>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	0800649f 	.word	0x0800649f
 8006418:	080064a7 	.word	0x080064a7
 800641c:	08006503 	.word	0x08006503
 8006420:	08006503 	.word	0x08006503
 8006424:	080064af 	.word	0x080064af
 8006428:	08006503 	.word	0x08006503
 800642c:	08006503 	.word	0x08006503
 8006430:	08006503 	.word	0x08006503
 8006434:	080064bf 	.word	0x080064bf
 8006438:	08006503 	.word	0x08006503
 800643c:	08006503 	.word	0x08006503
 8006440:	08006503 	.word	0x08006503
 8006444:	08006503 	.word	0x08006503
 8006448:	08006503 	.word	0x08006503
 800644c:	08006503 	.word	0x08006503
 8006450:	08006503 	.word	0x08006503
 8006454:	080064cf 	.word	0x080064cf
 8006458:	08006503 	.word	0x08006503
 800645c:	08006503 	.word	0x08006503
 8006460:	08006503 	.word	0x08006503
 8006464:	08006503 	.word	0x08006503
 8006468:	08006503 	.word	0x08006503
 800646c:	08006503 	.word	0x08006503
 8006470:	08006503 	.word	0x08006503
 8006474:	08006503 	.word	0x08006503
 8006478:	08006503 	.word	0x08006503
 800647c:	08006503 	.word	0x08006503
 8006480:	08006503 	.word	0x08006503
 8006484:	08006503 	.word	0x08006503
 8006488:	08006503 	.word	0x08006503
 800648c:	08006503 	.word	0x08006503
 8006490:	08006503 	.word	0x08006503
 8006494:	080064f5 	.word	0x080064f5
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d02e      	beq.n	80064fa <UART_SetConfig+0xa36>
 800649c:	e031      	b.n	8006502 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800649e:	f7fd f8cb 	bl	8003638 <HAL_RCC_GetPCLK1Freq>
 80064a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064a4:	e033      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a6:	f7fd f8dd 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 80064aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80064ac:	e02f      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fb4e 	bl	8004b54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064bc:	e027      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064be:	f107 0318 	add.w	r3, r7, #24
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fe fc9a 	bl	8004dfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064cc:	e01f      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <UART_SetConfig+0xac0>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0320 	and.w	r3, r3, #32
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80064da:	4b2a      	ldr	r3, [pc, #168]	@ (8006584 <UART_SetConfig+0xac0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	08db      	lsrs	r3, r3, #3
 80064e0:	f003 0303 	and.w	r3, r3, #3
 80064e4:	4a28      	ldr	r2, [pc, #160]	@ (8006588 <UART_SetConfig+0xac4>)
 80064e6:	fa22 f303 	lsr.w	r3, r2, r3
 80064ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80064ec:	e00f      	b.n	800650e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80064ee:	4b26      	ldr	r3, [pc, #152]	@ (8006588 <UART_SetConfig+0xac4>)
 80064f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f2:	e00c      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80064f4:	4b25      	ldr	r3, [pc, #148]	@ (800658c <UART_SetConfig+0xac8>)
 80064f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80064f8:	e009      	b.n	800650e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006500:	e005      	b.n	800650e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800650c:	bf00      	nop
    }

    if (pclk != 0U)
 800650e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d021      	beq.n	8006558 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	4a1d      	ldr	r2, [pc, #116]	@ (8006590 <UART_SetConfig+0xacc>)
 800651a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800651e:	461a      	mov	r2, r3
 8006520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006522:	fbb3 f2f2 	udiv	r2, r3, r2
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	085b      	lsrs	r3, r3, #1
 800652c:	441a      	add	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	fbb2 f3f3 	udiv	r3, r2, r3
 8006536:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800653a:	2b0f      	cmp	r3, #15
 800653c:	d909      	bls.n	8006552 <UART_SetConfig+0xa8e>
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d205      	bcs.n	8006552 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006548:	b29a      	uxth	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	60da      	str	r2, [r3, #12]
 8006550:	e002      	b.n	8006558 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2201      	movs	r2, #1
 800655c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2201      	movs	r2, #1
 8006564:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2200      	movs	r2, #0
 800656c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006574:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006578:	4618      	mov	r0, r3
 800657a:	3748      	adds	r7, #72	@ 0x48
 800657c:	46bd      	mov	sp, r7
 800657e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006582:	bf00      	nop
 8006584:	58024400 	.word	0x58024400
 8006588:	03d09000 	.word	0x03d09000
 800658c:	003d0900 	.word	0x003d0900
 8006590:	0800a70c 	.word	0x0800a70c

08006594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a0:	f003 0308 	and.w	r3, r3, #8
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00a      	beq.n	80065be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	430a      	orrs	r2, r1
 80065bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00a      	beq.n	80065e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	430a      	orrs	r2, r1
 80065de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	f003 0302 	and.w	r3, r3, #2
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00a      	beq.n	8006602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00a      	beq.n	8006624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	430a      	orrs	r2, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006628:	f003 0310 	and.w	r3, r3, #16
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00a      	beq.n	8006646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664a:	f003 0320 	and.w	r3, r3, #32
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01a      	beq.n	80066aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006692:	d10a      	bne.n	80066aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	605a      	str	r2, [r3, #4]
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b098      	sub	sp, #96	@ 0x60
 80066dc:	af02      	add	r7, sp, #8
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066e8:	f7fa ff44 	bl	8001574 <HAL_GetTick>
 80066ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d12f      	bne.n	800675c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006704:	2200      	movs	r2, #0
 8006706:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f88e 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d022      	beq.n	800675c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	e853 3f00 	ldrex	r3, [r3]
 8006722:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672a:	653b      	str	r3, [r7, #80]	@ 0x50
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	461a      	mov	r2, r3
 8006732:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006734:	647b      	str	r3, [r7, #68]	@ 0x44
 8006736:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006738:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800673a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800673c:	e841 2300 	strex	r3, r2, [r1]
 8006740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006744:	2b00      	cmp	r3, #0
 8006746:	d1e6      	bne.n	8006716 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e063      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d149      	bne.n	80067fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800676a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006772:	2200      	movs	r2, #0
 8006774:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f857 	bl	800682c <UART_WaitOnFlagUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d03c      	beq.n	80067fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	623b      	str	r3, [r7, #32]
   return(result);
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006798:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80067a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d6:	61fa      	str	r2, [r7, #28]
 80067d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	69b9      	ldr	r1, [r7, #24]
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	617b      	str	r3, [r7, #20]
   return(result);
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2220      	movs	r2, #32
 80067ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e012      	b.n	8006824 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3758      	adds	r7, #88	@ 0x58
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683c:	e04f      	b.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d04b      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fa fe95 	bl	8001574 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	69ba      	ldr	r2, [r7, #24]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <UART_WaitOnFlagUntilTimeout+0x30>
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e04e      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0304 	and.w	r3, r3, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	d037      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b80      	cmp	r3, #128	@ 0x80
 8006872:	d034      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	2b40      	cmp	r3, #64	@ 0x40
 8006878:	d031      	beq.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	69db      	ldr	r3, [r3, #28]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b08      	cmp	r3, #8
 8006886:	d110      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f000 f839 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2208      	movs	r2, #8
 800689a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e029      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b8:	d111      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f81f 	bl	8006908 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e00f      	b.n	80068fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	bf0c      	ite	eq
 80068ee:	2301      	moveq	r3, #1
 80068f0:	2300      	movne	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	461a      	mov	r2, r3
 80068f6:	79fb      	ldrb	r3, [r7, #7]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d0a0      	beq.n	800683e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b095      	sub	sp, #84	@ 0x54
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800691e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006930:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800693c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e6      	bne.n	8006910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3308      	adds	r3, #8
 8006948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	e853 3f00 	ldrex	r3, [r3]
 8006950:	61fb      	str	r3, [r7, #28]
   return(result);
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	4b1e      	ldr	r3, [pc, #120]	@ (80069d0 <UART_EndRxTransfer+0xc8>)
 8006956:	4013      	ands	r3, r2
 8006958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696a:	e841 2300 	strex	r3, r2, [r1]
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1e5      	bne.n	8006942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697a:	2b01      	cmp	r3, #1
 800697c:	d118      	bne.n	80069b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	60bb      	str	r3, [r7, #8]
   return(result);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0310 	bic.w	r3, r3, #16
 8006992:	647b      	str	r3, [r7, #68]	@ 0x44
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6979      	ldr	r1, [r7, #20]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	613b      	str	r3, [r7, #16]
   return(result);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2220      	movs	r2, #32
 80069b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069c4:	bf00      	nop
 80069c6:	3754      	adds	r7, #84	@ 0x54
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	effffffe 	.word	0xeffffffe

080069d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_UARTEx_DisableFifoMode+0x16>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e027      	b.n	8006a3a <HAL_UARTEx_DisableFifoMode+0x66>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2224      	movs	r2, #36	@ 0x24
 80069f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 0201 	bic.w	r2, r2, #1
 8006a10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2220      	movs	r2, #32
 8006a2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e02d      	b.n	8006aba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2224      	movs	r2, #36	@ 0x24
 8006a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f000 f850 	bl	8006b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2220      	movs	r2, #32
 8006aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d101      	bne.n	8006ada <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	e02d      	b.n	8006b36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2224      	movs	r2, #36	@ 0x24
 8006ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f022 0201 	bic.w	r2, r2, #1
 8006b00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 f812 	bl	8006b40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b085      	sub	sp, #20
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d108      	bne.n	8006b62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b60:	e031      	b.n	8006bc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b62:	2310      	movs	r3, #16
 8006b64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b66:	2310      	movs	r3, #16
 8006b68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0e5b      	lsrs	r3, r3, #25
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	0f5b      	lsrs	r3, r3, #29
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b8a:	7bbb      	ldrb	r3, [r7, #14]
 8006b8c:	7b3a      	ldrb	r2, [r7, #12]
 8006b8e:	4911      	ldr	r1, [pc, #68]	@ (8006bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006b90:	5c8a      	ldrb	r2, [r1, r2]
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b96:	7b3a      	ldrb	r2, [r7, #12]
 8006b98:	490f      	ldr	r1, [pc, #60]	@ (8006bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006b9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	7b7a      	ldrb	r2, [r7, #13]
 8006bac:	4909      	ldr	r1, [pc, #36]	@ (8006bd4 <UARTEx_SetNbDataToProcess+0x94>)
 8006bae:	5c8a      	ldrb	r2, [r1, r2]
 8006bb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bb4:	7b7a      	ldrb	r2, [r7, #13]
 8006bb6:	4908      	ldr	r1, [pc, #32]	@ (8006bd8 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bc6:	bf00      	nop
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	0800a724 	.word	0x0800a724
 8006bd8:	0800a72c 	.word	0x0800a72c

08006bdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bdc:	b084      	sub	sp, #16
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b084      	sub	sp, #16
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	f107 001c 	add.w	r0, r7, #28
 8006bea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d121      	bne.n	8006c3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb8 <USB_CoreInit+0xdc>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d105      	bne.n	8006c2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 faaa 	bl	8007188 <USB_CoreReset>
 8006c34:	4603      	mov	r3, r0
 8006c36:	73fb      	strb	r3, [r7, #15]
 8006c38:	e01b      	b.n	8006c72 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fa9e 	bl	8007188 <USB_CoreReset>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c50:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c64:	e005      	b.n	8006c72 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c72:	7fbb      	ldrb	r3, [r7, #30]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d116      	bne.n	8006ca6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c86:	4b0d      	ldr	r3, [pc, #52]	@ (8006cbc <USB_CoreInit+0xe0>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f043 0206 	orr.w	r2, r3, #6
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cb2:	b004      	add	sp, #16
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	ffbdffbf 	.word	0xffbdffbf
 8006cbc:	03ee0000 	.word	0x03ee0000

08006cc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f023 0201 	bic.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b084      	sub	sp, #16
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d115      	bne.n	8006d30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d10:	200a      	movs	r0, #10
 8006d12:	f7fa fc3b 	bl	800158c <HAL_Delay>
      ms += 10U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	330a      	adds	r3, #10
 8006d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fa25 	bl	800716c <USB_GetMode>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d01e      	beq.n	8006d66 <USB_SetCurrentMode+0x84>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d2c:	d9f0      	bls.n	8006d10 <USB_SetCurrentMode+0x2e>
 8006d2e:	e01a      	b.n	8006d66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d30:	78fb      	ldrb	r3, [r7, #3]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d115      	bne.n	8006d62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d42:	200a      	movs	r0, #10
 8006d44:	f7fa fc22 	bl	800158c <HAL_Delay>
      ms += 10U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	330a      	adds	r3, #10
 8006d4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fa0c 	bl	800716c <USB_GetMode>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d005      	beq.n	8006d66 <USB_SetCurrentMode+0x84>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d5e:	d9f0      	bls.n	8006d42 <USB_SetCurrentMode+0x60>
 8006d60:	e001      	b.n	8006d66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e005      	b.n	8006d72 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d6a:	d101      	bne.n	8006d70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b086      	sub	sp, #24
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d96:	2300      	movs	r3, #0
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	e009      	b.n	8006db0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3340      	adds	r3, #64	@ 0x40
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	2200      	movs	r2, #0
 8006da8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	3301      	adds	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b0e      	cmp	r3, #14
 8006db4:	d9f2      	bls.n	8006d9c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006db6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d11c      	bne.n	8006df8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dcc:	f043 0302 	orr.w	r3, r3, #2
 8006dd0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
 8006df6:	e005      	b.n	8006e04 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e10:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d10d      	bne.n	8006e34 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d104      	bne.n	8006e2a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e20:	2100      	movs	r1, #0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 f968 	bl	80070f8 <USB_SetDevSpeed>
 8006e28:	e008      	b.n	8006e3c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e2a:	2101      	movs	r1, #1
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f963 	bl	80070f8 <USB_SetDevSpeed>
 8006e32:	e003      	b.n	8006e3c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e34:	2103      	movs	r1, #3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f95e 	bl	80070f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e3c:	2110      	movs	r1, #16
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 f8fa 	bl	8007038 <USB_FlushTxFifo>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f924 	bl	800709c <USB_FlushRxFifo>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e64:	461a      	mov	r2, r3
 8006e66:	2300      	movs	r3, #0
 8006e68:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e70:	461a      	mov	r2, r3
 8006e72:	2300      	movs	r3, #0
 8006e74:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
 8006e86:	e043      	b.n	8006f10 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e9e:	d118      	bne.n	8006ed2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006eb8:	6013      	str	r3, [r2, #0]
 8006eba:	e013      	b.n	8006ee4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	e008      	b.n	8006ee4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f02:	461a      	mov	r2, r3
 8006f04:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f14:	461a      	mov	r2, r3
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d3b5      	bcc.n	8006e88 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	613b      	str	r3, [r7, #16]
 8006f20:	e043      	b.n	8006faa <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f38:	d118      	bne.n	8006f6c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e013      	b.n	8006f7e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f62:	461a      	mov	r2, r3
 8006f64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f68:	6013      	str	r3, [r2, #0]
 8006f6a:	e008      	b.n	8006f7e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f78:	461a      	mov	r2, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006fa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	613b      	str	r3, [r7, #16]
 8006faa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fae:	461a      	mov	r2, r3
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d3b5      	bcc.n	8006f22 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fd6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d105      	bne.n	8006fec <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	699b      	ldr	r3, [r3, #24]
 8006fe4:	f043 0210 	orr.w	r2, r3, #16
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699a      	ldr	r2, [r3, #24]
 8006ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8007030 <USB_DevInit+0x2b4>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ff8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d005      	beq.n	800700c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	f043 0208 	orr.w	r2, r3, #8
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800700c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007010:	2b01      	cmp	r3, #1
 8007012:	d105      	bne.n	8007020 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699a      	ldr	r2, [r3, #24]
 8007018:	4b06      	ldr	r3, [pc, #24]	@ (8007034 <USB_DevInit+0x2b8>)
 800701a:	4313      	orrs	r3, r2
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007020:	7dfb      	ldrb	r3, [r7, #23]
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800702c:	b004      	add	sp, #16
 800702e:	4770      	bx	lr
 8007030:	803c3800 	.word	0x803c3800
 8007034:	40000004 	.word	0x40000004

08007038 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007052:	d901      	bls.n	8007058 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e01b      	b.n	8007090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	daf2      	bge.n	8007046 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	019b      	lsls	r3, r3, #6
 8007068:	f043 0220 	orr.w	r2, r3, #32
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800707c:	d901      	bls.n	8007082 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e006      	b.n	8007090 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b20      	cmp	r3, #32
 800708c:	d0f0      	beq.n	8007070 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b4:	d901      	bls.n	80070ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e018      	b.n	80070ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	daf2      	bge.n	80070a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2210      	movs	r2, #16
 80070ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3301      	adds	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d8:	d901      	bls.n	80070de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e006      	b.n	80070ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	f003 0310 	and.w	r3, r3, #16
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d0f0      	beq.n	80070cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3714      	adds	r7, #20
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr

080070f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	68f9      	ldr	r1, [r7, #12]
 8007114:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007118:	4313      	orrs	r3, r2
 800711a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3714      	adds	r7, #20
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr

0800712a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007144:	f023 0303 	bic.w	r3, r3, #3
 8007148:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007158:	f043 0302 	orr.w	r3, r3, #2
 800715c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	f003 0301 	and.w	r3, r3, #1
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3301      	adds	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071a0:	d901      	bls.n	80071a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e01b      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	daf2      	bge.n	8007194 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	f043 0201 	orr.w	r2, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071ca:	d901      	bls.n	80071d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e006      	b.n	80071de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d0f0      	beq.n	80071be <USB_CoreReset+0x36>

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	4603      	mov	r3, r0
 80071f2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80071f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071fc:	2b84      	cmp	r3, #132	@ 0x84
 80071fe:	d005      	beq.n	800720c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007200:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	3303      	adds	r3, #3
 800720a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800720c:	68fb      	ldr	r3, [r7, #12]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3714      	adds	r7, #20
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr

0800721a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800721a:	b480      	push	{r7}
 800721c:	b083      	sub	sp, #12
 800721e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007220:	f3ef 8305 	mrs	r3, IPSR
 8007224:	607b      	str	r3, [r7, #4]
  return(result);
 8007226:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007228:	2b00      	cmp	r3, #0
 800722a:	bf14      	ite	ne
 800722c:	2301      	movne	r3, #1
 800722e:	2300      	moveq	r3, #0
 8007230:	b2db      	uxtb	r3, r3
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800723e:	b580      	push	{r7, lr}
 8007240:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007242:	f001 f9a5 	bl	8008590 <vTaskStartScheduler>
  
  return osOK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}

0800724c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800724c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800724e:	b089      	sub	sp, #36	@ 0x24
 8007250:	af04      	add	r7, sp, #16
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d020      	beq.n	80072a0 <osThreadCreate+0x54>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d01c      	beq.n	80072a0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685c      	ldr	r4, [r3, #4]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691e      	ldr	r6, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ffb6 	bl	80071ea <makeFreeRtosPriority>
 800727e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007288:	9202      	str	r2, [sp, #8]
 800728a:	9301      	str	r3, [sp, #4]
 800728c:	9100      	str	r1, [sp, #0]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	4632      	mov	r2, r6
 8007292:	4629      	mov	r1, r5
 8007294:	4620      	mov	r0, r4
 8007296:	f000 ff95 	bl	80081c4 <xTaskCreateStatic>
 800729a:	4603      	mov	r3, r0
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e01c      	b.n	80072da <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685c      	ldr	r4, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072ac:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff ff98 	bl	80071ea <makeFreeRtosPriority>
 80072ba:	4602      	mov	r2, r0
 80072bc:	f107 030c 	add.w	r3, r7, #12
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	9200      	str	r2, [sp, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	4632      	mov	r2, r6
 80072c8:	4629      	mov	r1, r5
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 ffda 	bl	8008284 <xTaskCreate>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d001      	beq.n	80072da <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	e000      	b.n	80072dc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80072da:	68fb      	ldr	r3, [r7, #12]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072e4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <osDelay+0x16>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	e000      	b.n	80072fc <osDelay+0x18>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4618      	mov	r0, r3
 80072fe:	f001 f911 	bl	8008524 <vTaskDelay>
  
  return osOK;
 8007302:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	4619      	mov	r1, r3
 8007322:	2001      	movs	r0, #1
 8007324:	f000 fae7 	bl	80078f6 <xQueueCreateMutexStatic>
 8007328:	4603      	mov	r3, r0
 800732a:	e003      	b.n	8007334 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800732c:	2001      	movs	r0, #1
 800732e:	f000 faca 	bl	80078c6 <xQueueCreateMutex>
 8007332:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <osMutexWait+0x18>
    return osErrorParameter;
 8007350:	2380      	movs	r3, #128	@ 0x80
 8007352:	e03a      	b.n	80073ca <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d103      	bne.n	8007368 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	e009      	b.n	800737c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d006      	beq.n	800737c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <osMutexWait+0x40>
      ticks = 1;
 8007378:	2301      	movs	r3, #1
 800737a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800737c:	f7ff ff4d 	bl	800721a <inHandlerMode>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d017      	beq.n	80073b6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007386:	f107 0308 	add.w	r3, r7, #8
 800738a:	461a      	mov	r2, r3
 800738c:	2100      	movs	r1, #0
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 fd6e 	bl	8007e70 <xQueueReceiveFromISR>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d001      	beq.n	800739e <osMutexWait+0x62>
      return osErrorOS;
 800739a:	23ff      	movs	r3, #255	@ 0xff
 800739c:	e015      	b.n	80073ca <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d011      	beq.n	80073c8 <osMutexWait+0x8c>
 80073a4:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <osMutexWait+0x98>)
 80073a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	e008      	b.n	80073c8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fc49 	bl	8007c50 <xQueueSemaphoreTake>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d001      	beq.n	80073c8 <osMutexWait+0x8c>
    return osErrorOS;
 80073c4:	23ff      	movs	r3, #255	@ 0xff
 80073c6:	e000      	b.n	80073ca <osMutexWait+0x8e>
  }
  
  return osOK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	e000ed04 	.word	0xe000ed04

080073d8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80073e8:	f7ff ff17 	bl	800721a <inHandlerMode>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d016      	beq.n	8007420 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80073f2:	f107 0308 	add.w	r3, r7, #8
 80073f6:	4619      	mov	r1, r3
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fb99 	bl	8007b30 <xQueueGiveFromISR>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b01      	cmp	r3, #1
 8007402:	d001      	beq.n	8007408 <osMutexRelease+0x30>
      return osErrorOS;
 8007404:	23ff      	movs	r3, #255	@ 0xff
 8007406:	e017      	b.n	8007438 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d013      	beq.n	8007436 <osMutexRelease+0x5e>
 800740e:	4b0c      	ldr	r3, [pc, #48]	@ (8007440 <osMutexRelease+0x68>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	e00a      	b.n	8007436 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007420:	2300      	movs	r3, #0
 8007422:	2200      	movs	r2, #0
 8007424:	2100      	movs	r1, #0
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fa80 	bl	800792c <xQueueGenericSend>
 800742c:	4603      	mov	r3, r0
 800742e:	2b01      	cmp	r3, #1
 8007430:	d001      	beq.n	8007436 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007432:	23ff      	movs	r3, #255	@ 0xff
 8007434:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00f      	beq.n	8007476 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d10a      	bne.n	8007472 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2203      	movs	r2, #3
 8007462:	9200      	str	r2, [sp, #0]
 8007464:	2200      	movs	r2, #0
 8007466:	2100      	movs	r1, #0
 8007468:	2001      	movs	r0, #1
 800746a:	f000 f93b 	bl	80076e4 <xQueueGenericCreateStatic>
 800746e:	4603      	mov	r3, r0
 8007470:	e016      	b.n	80074a0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	e014      	b.n	80074a0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d110      	bne.n	800749e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800747c:	2203      	movs	r2, #3
 800747e:	2100      	movs	r1, #0
 8007480:	2001      	movs	r0, #1
 8007482:	f000 f9ac 	bl	80077de <xQueueGenericCreate>
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <osSemaphoreCreate+0x56>
 800748e:	2300      	movs	r3, #0
 8007490:	2200      	movs	r2, #0
 8007492:	2100      	movs	r1, #0
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fa49 	bl	800792c <xQueueGenericSend>
      return sema;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	e000      	b.n	80074a0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800749e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f103 0208 	add.w	r2, r3, #8
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295
 80074c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f103 0208 	add.w	r2, r3, #8
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f103 0208 	add.w	r2, r3, #8
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074f6:	bf00      	nop
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	683a      	ldr	r2, [r7, #0]
 800752c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	601a      	str	r2, [r3, #0]
}
 800753e:	bf00      	nop
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d103      	bne.n	800756a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e00c      	b.n	8007584 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	3308      	adds	r3, #8
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	e002      	b.n	8007578 <vListInsert+0x2e>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	429a      	cmp	r2, r3
 8007582:	d2f6      	bcs.n	8007572 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	601a      	str	r2, [r3, #0]
}
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6892      	ldr	r2, [r2, #8]
 80075d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6852      	ldr	r2, [r2, #4]
 80075dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d103      	bne.n	80075f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	1e5a      	subs	r2, r3, #1
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10b      	bne.n	800763c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007628:	f383 8811 	msr	BASEPRI, r3
 800762c:	f3bf 8f6f 	isb	sy
 8007630:	f3bf 8f4f 	dsb	sy
 8007634:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007636:	bf00      	nop
 8007638:	bf00      	nop
 800763a:	e7fd      	b.n	8007638 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800763c:	f001 ff1c 	bl	8009478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007648:	68f9      	ldr	r1, [r7, #12]
 800764a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800764c:	fb01 f303 	mul.w	r3, r1, r3
 8007650:	441a      	add	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800766c:	3b01      	subs	r3, #1
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007672:	fb01 f303 	mul.w	r3, r1, r3
 8007676:	441a      	add	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	22ff      	movs	r2, #255	@ 0xff
 8007680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	22ff      	movs	r2, #255	@ 0xff
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d114      	bne.n	80076bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d01a      	beq.n	80076d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3310      	adds	r3, #16
 800769e:	4618      	mov	r0, r3
 80076a0:	f001 f9d0 	bl	8008a44 <xTaskRemoveFromEventList>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d012      	beq.n	80076d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80076aa:	4b0d      	ldr	r3, [pc, #52]	@ (80076e0 <xQueueGenericReset+0xd0>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
 80076ba:	e009      	b.n	80076d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3310      	adds	r3, #16
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff fef1 	bl	80074a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3324      	adds	r3, #36	@ 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff feec 	bl	80074a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80076d0:	f001 ff04 	bl	80094dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80076d4:	2301      	movs	r3, #1
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08e      	sub	sp, #56	@ 0x38
 80076e8:	af02      	add	r7, sp, #8
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d10b      	bne.n	800772e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d002      	beq.n	800773a <xQueueGenericCreateStatic+0x56>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <xQueueGenericCreateStatic+0x5a>
 800773a:	2301      	movs	r3, #1
 800773c:	e000      	b.n	8007740 <xQueueGenericCreateStatic+0x5c>
 800773e:	2300      	movs	r3, #0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d10b      	bne.n	800775c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007748:	f383 8811 	msr	BASEPRI, r3
 800774c:	f3bf 8f6f 	isb	sy
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	623b      	str	r3, [r7, #32]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d102      	bne.n	8007768 <xQueueGenericCreateStatic+0x84>
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <xQueueGenericCreateStatic+0x88>
 8007768:	2301      	movs	r3, #1
 800776a:	e000      	b.n	800776e <xQueueGenericCreateStatic+0x8a>
 800776c:	2300      	movs	r3, #0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10b      	bne.n	800778a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007776:	f383 8811 	msr	BASEPRI, r3
 800777a:	f3bf 8f6f 	isb	sy
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	61fb      	str	r3, [r7, #28]
}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	e7fd      	b.n	8007786 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800778a:	2348      	movs	r3, #72	@ 0x48
 800778c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b48      	cmp	r3, #72	@ 0x48
 8007792:	d00b      	beq.n	80077ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	61bb      	str	r3, [r7, #24]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80077ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80077b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00d      	beq.n	80077d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80077b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80077c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	4613      	mov	r3, r2
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	68b9      	ldr	r1, [r7, #8]
 80077ce:	68f8      	ldr	r0, [r7, #12]
 80077d0:	f000 f840 	bl	8007854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3730      	adds	r7, #48	@ 0x30
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b08a      	sub	sp, #40	@ 0x28
 80077e2:	af02      	add	r7, sp, #8
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	4613      	mov	r3, r2
 80077ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <xQueueGenericCreate+0x2c>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	613b      	str	r3, [r7, #16]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	68ba      	ldr	r2, [r7, #8]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
 8007812:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	3348      	adds	r3, #72	@ 0x48
 8007818:	4618      	mov	r0, r3
 800781a:	f001 ff4f 	bl	80096bc <pvPortMalloc>
 800781e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d011      	beq.n	800784a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	3348      	adds	r3, #72	@ 0x48
 800782e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007838:	79fa      	ldrb	r2, [r7, #7]
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	4613      	mov	r3, r2
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f805 	bl	8007854 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800784a:	69bb      	ldr	r3, [r7, #24]
	}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
 8007860:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	601a      	str	r2, [r3, #0]
 800786e:	e002      	b.n	8007876 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007882:	2101      	movs	r1, #1
 8007884:	69b8      	ldr	r0, [r7, #24]
 8007886:	f7ff fec3 	bl	8007610 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800788a:	bf00      	nop
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007892:	b580      	push	{r7, lr}
 8007894:	b082      	sub	sp, #8
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00e      	beq.n	80078be <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80078b2:	2300      	movs	r3, #0
 80078b4:	2200      	movs	r2, #0
 80078b6:	2100      	movs	r1, #0
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f837 	bl	800792c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b086      	sub	sp, #24
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	4603      	mov	r3, r0
 80078ce:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80078d0:	2301      	movs	r3, #1
 80078d2:	617b      	str	r3, [r7, #20]
 80078d4:	2300      	movs	r3, #0
 80078d6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80078d8:	79fb      	ldrb	r3, [r7, #7]
 80078da:	461a      	mov	r2, r3
 80078dc:	6939      	ldr	r1, [r7, #16]
 80078de:	6978      	ldr	r0, [r7, #20]
 80078e0:	f7ff ff7d 	bl	80077de <xQueueGenericCreate>
 80078e4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff ffd3 	bl	8007892 <prvInitialiseMutex>

		return xNewQueue;
 80078ec:	68fb      	ldr	r3, [r7, #12]
	}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af02      	add	r7, sp, #8
 80078fc:	4603      	mov	r3, r0
 80078fe:	6039      	str	r1, [r7, #0]
 8007900:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007902:	2301      	movs	r3, #1
 8007904:	617b      	str	r3, [r7, #20]
 8007906:	2300      	movs	r3, #0
 8007908:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800790a:	79fb      	ldrb	r3, [r7, #7]
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2200      	movs	r2, #0
 8007912:	6939      	ldr	r1, [r7, #16]
 8007914:	6978      	ldr	r0, [r7, #20]
 8007916:	f7ff fee5 	bl	80076e4 <xQueueGenericCreateStatic>
 800791a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f7ff ffb8 	bl	8007892 <prvInitialiseMutex>

		return xNewQueue;
 8007922:	68fb      	ldr	r3, [r7, #12]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08e      	sub	sp, #56	@ 0x38
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
 8007938:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800793a:	2300      	movs	r3, #0
 800793c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d10b      	bne.n	8007960 <xQueueGenericSend+0x34>
	__asm volatile
 8007948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794c:	f383 8811 	msr	BASEPRI, r3
 8007950:	f3bf 8f6f 	isb	sy
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	e7fd      	b.n	800795c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d103      	bne.n	800796e <xQueueGenericSend+0x42>
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	2b00      	cmp	r3, #0
 800796c:	d101      	bne.n	8007972 <xQueueGenericSend+0x46>
 800796e:	2301      	movs	r3, #1
 8007970:	e000      	b.n	8007974 <xQueueGenericSend+0x48>
 8007972:	2300      	movs	r3, #0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10b      	bne.n	8007990 <xQueueGenericSend+0x64>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d103      	bne.n	800799e <xQueueGenericSend+0x72>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <xQueueGenericSend+0x76>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueGenericSend+0x78>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <xQueueGenericSend+0x94>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	623b      	str	r3, [r7, #32]
}
 80079ba:	bf00      	nop
 80079bc:	bf00      	nop
 80079be:	e7fd      	b.n	80079bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c0:	f001 fa06 	bl	8008dd0 <xTaskGetSchedulerState>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <xQueueGenericSend+0xa4>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <xQueueGenericSend+0xa8>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <xQueueGenericSend+0xaa>
 80079d4:	2300      	movs	r3, #0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	61fb      	str	r3, [r7, #28]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f2:	f001 fd41 	bl	8009478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d302      	bcc.n	8007a08 <xQueueGenericSend+0xdc>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d129      	bne.n	8007a5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	68b9      	ldr	r1, [r7, #8]
 8007a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a0e:	f000 fac9 	bl	8007fa4 <prvCopyDataToQueue>
 8007a12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d010      	beq.n	8007a3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1e:	3324      	adds	r3, #36	@ 0x24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f001 f80f 	bl	8008a44 <xTaskRemoveFromEventList>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d013      	beq.n	8007a54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8007b2c <xQueueGenericSend+0x200>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	e00a      	b.n	8007a54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a44:	4b39      	ldr	r3, [pc, #228]	@ (8007b2c <xQueueGenericSend+0x200>)
 8007a46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a54:	f001 fd42 	bl	80094dc <vPortExitCritical>
				return pdPASS;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	e063      	b.n	8007b24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d103      	bne.n	8007a6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a62:	f001 fd3b 	bl	80094dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	e05c      	b.n	8007b24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a70:	f107 0314 	add.w	r3, r7, #20
 8007a74:	4618      	mov	r0, r3
 8007a76:	f001 f849 	bl	8008b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a7e:	f001 fd2d 	bl	80094dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a82:	f000 fdef 	bl	8008664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a86:	f001 fcf7 	bl	8009478 <vPortEnterCritical>
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a90:	b25b      	sxtb	r3, r3
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d103      	bne.n	8007aa0 <xQueueGenericSend+0x174>
 8007a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aac:	d103      	bne.n	8007ab6 <xQueueGenericSend+0x18a>
 8007aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ab6:	f001 fd11 	bl	80094dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aba:	1d3a      	adds	r2, r7, #4
 8007abc:	f107 0314 	add.w	r3, r7, #20
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f001 f838 	bl	8008b38 <xTaskCheckForTimeOut>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d124      	bne.n	8007b18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ace:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007ad0:	f000 fb60 	bl	8008194 <prvIsQueueFull>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d018      	beq.n	8007b0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007adc:	3310      	adds	r3, #16
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f000 ff88 	bl	80089f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ae8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007aea:	f000 faeb 	bl	80080c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007aee:	f000 fdc7 	bl	8008680 <xTaskResumeAll>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f47f af7c 	bne.w	80079f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007afa:	4b0c      	ldr	r3, [pc, #48]	@ (8007b2c <xQueueGenericSend+0x200>)
 8007afc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b00:	601a      	str	r2, [r3, #0]
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	f3bf 8f6f 	isb	sy
 8007b0a:	e772      	b.n	80079f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b0e:	f000 fad9 	bl	80080c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b12:	f000 fdb5 	bl	8008680 <xTaskResumeAll>
 8007b16:	e76c      	b.n	80079f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b1a:	f000 fad3 	bl	80080c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b1e:	f000 fdaf 	bl	8008680 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3738      	adds	r7, #56	@ 0x38
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	e000ed04 	.word	0xe000ed04

08007b30 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08e      	sub	sp, #56	@ 0x38
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10b      	bne.n	8007b5c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	623b      	str	r3, [r7, #32]
}
 8007b56:	bf00      	nop
 8007b58:	bf00      	nop
 8007b5a:	e7fd      	b.n	8007b58 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d00b      	beq.n	8007b7c <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	61fb      	str	r3, [r7, #28]
}
 8007b76:	bf00      	nop
 8007b78:	bf00      	nop
 8007b7a:	e7fd      	b.n	8007b78 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d103      	bne.n	8007b8c <xQueueGiveFromISR+0x5c>
 8007b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d101      	bne.n	8007b90 <xQueueGiveFromISR+0x60>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e000      	b.n	8007b92 <xQueueGiveFromISR+0x62>
 8007b90:	2300      	movs	r3, #0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <xQueueGiveFromISR+0x7e>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61bb      	str	r3, [r7, #24]
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	e7fd      	b.n	8007baa <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bae:	f001 fd43 	bl	8009638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bb2:	f3ef 8211 	mrs	r2, BASEPRI
 8007bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	617a      	str	r2, [r7, #20]
 8007bc8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007bca:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d22b      	bcs.n	8007c36 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007be4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d112      	bne.n	8007c20 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d016      	beq.n	8007c30 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 ff1c 	bl	8008a44 <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00e      	beq.n	8007c30 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007c24:	3301      	adds	r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	b25a      	sxtb	r2, r3
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007c30:	2301      	movs	r3, #1
 8007c32:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c34:	e001      	b.n	8007c3a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c3c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c44:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3738      	adds	r7, #56	@ 0x38
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b08e      	sub	sp, #56	@ 0x38
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007c62:	2300      	movs	r3, #0
 8007c64:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10b      	bne.n	8007c84 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	623b      	str	r3, [r7, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	bf00      	nop
 8007c82:	e7fd      	b.n	8007c80 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c90:	f383 8811 	msr	BASEPRI, r3
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	61fb      	str	r3, [r7, #28]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ca4:	f001 f894 	bl	8008dd0 <xTaskGetSchedulerState>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d102      	bne.n	8007cb4 <xQueueSemaphoreTake+0x64>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueSemaphoreTake+0x68>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <xQueueSemaphoreTake+0x6a>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10b      	bne.n	8007cd6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	61bb      	str	r3, [r7, #24]
}
 8007cd0:	bf00      	nop
 8007cd2:	bf00      	nop
 8007cd4:	e7fd      	b.n	8007cd2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cd6:	f001 fbcf 	bl	8009478 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d024      	beq.n	8007d30 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	1e5a      	subs	r2, r3, #1
 8007cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d104      	bne.n	8007d00 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007cf6:	f001 fa17 	bl	8009128 <pvTaskIncrementMutexHeldCount>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cfe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00f      	beq.n	8007d28 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	3310      	adds	r3, #16
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f000 fe99 	bl	8008a44 <xTaskRemoveFromEventList>
 8007d12:	4603      	mov	r3, r0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d18:	4b54      	ldr	r3, [pc, #336]	@ (8007e6c <xQueueSemaphoreTake+0x21c>)
 8007d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d28:	f001 fbd8 	bl	80094dc <vPortExitCritical>
				return pdPASS;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e098      	b.n	8007e62 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d112      	bne.n	8007d5c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00b      	beq.n	8007d54 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d40:	f383 8811 	msr	BASEPRI, r3
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	f3bf 8f4f 	dsb	sy
 8007d4c:	617b      	str	r3, [r7, #20]
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	e7fd      	b.n	8007d50 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007d54:	f001 fbc2 	bl	80094dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e082      	b.n	8007e62 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d106      	bne.n	8007d70 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fed0 	bl	8008b0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d70:	f001 fbb4 	bl	80094dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d74:	f000 fc76 	bl	8008664 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d78:	f001 fb7e 	bl	8009478 <vPortEnterCritical>
 8007d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d82:	b25b      	sxtb	r3, r3
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d88:	d103      	bne.n	8007d92 <xQueueSemaphoreTake+0x142>
 8007d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d9e:	d103      	bne.n	8007da8 <xQueueSemaphoreTake+0x158>
 8007da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007da8:	f001 fb98 	bl	80094dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dac:	463a      	mov	r2, r7
 8007dae:	f107 030c 	add.w	r3, r7, #12
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 febf 	bl	8008b38 <xTaskCheckForTimeOut>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d132      	bne.n	8007e26 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dc0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007dc2:	f000 f9d1 	bl	8008168 <prvIsQueueEmpty>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d026      	beq.n	8007e1a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d109      	bne.n	8007de8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007dd4:	f001 fb50 	bl	8009478 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 f815 	bl	8008e0c <xTaskPriorityInherit>
 8007de2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007de4:	f001 fb7a 	bl	80094dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dea:	3324      	adds	r3, #36	@ 0x24
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	4611      	mov	r1, r2
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fe01 	bl	80089f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007df8:	f000 f964 	bl	80080c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dfc:	f000 fc40 	bl	8008680 <xTaskResumeAll>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f47f af67 	bne.w	8007cd6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007e08:	4b18      	ldr	r3, [pc, #96]	@ (8007e6c <xQueueSemaphoreTake+0x21c>)
 8007e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	e75d      	b.n	8007cd6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007e1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e1c:	f000 f952 	bl	80080c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e20:	f000 fc2e 	bl	8008680 <xTaskResumeAll>
 8007e24:	e757      	b.n	8007cd6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007e26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e28:	f000 f94c 	bl	80080c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e2c:	f000 fc28 	bl	8008680 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e30:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e32:	f000 f999 	bl	8008168 <prvIsQueueEmpty>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f43f af4c 	beq.w	8007cd6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00d      	beq.n	8007e60 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007e44:	f001 fb18 	bl	8009478 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007e48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007e4a:	f000 f893 	bl	8007f74 <prvGetDisinheritPriorityAfterTimeout>
 8007e4e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 f8d6 	bl	8009008 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007e5c:	f001 fb3e 	bl	80094dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e60:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3738      	adds	r7, #56	@ 0x38
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08e      	sub	sp, #56	@ 0x38
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10b      	bne.n	8007e9e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	623b      	str	r3, [r7, #32]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d103      	bne.n	8007eac <xQueueReceiveFromISR+0x3c>
 8007ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <xQueueReceiveFromISR+0x40>
 8007eac:	2301      	movs	r3, #1
 8007eae:	e000      	b.n	8007eb2 <xQueueReceiveFromISR+0x42>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d10b      	bne.n	8007ece <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eba:	f383 8811 	msr	BASEPRI, r3
 8007ebe:	f3bf 8f6f 	isb	sy
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	61fb      	str	r3, [r7, #28]
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	e7fd      	b.n	8007eca <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ece:	f001 fbb3 	bl	8009638 <vPortValidateInterruptPriority>
	__asm volatile
 8007ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8007ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	61ba      	str	r2, [r7, #24]
 8007ee8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007eea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d02f      	beq.n	8007f5a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007f08:	f000 f8b6 	bl	8008078 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	1e5a      	subs	r2, r3, #1
 8007f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f12:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007f14:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1c:	d112      	bne.n	8007f44 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d016      	beq.n	8007f54 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f28:	3310      	adds	r3, #16
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fd8a 	bl	8008a44 <xTaskRemoveFromEventList>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00e      	beq.n	8007f54 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e007      	b.n	8007f54 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f48:	3301      	adds	r3, #1
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	b25a      	sxtb	r2, r3
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007f54:	2301      	movs	r3, #1
 8007f56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f58:	e001      	b.n	8007f5e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f383 8811 	msr	BASEPRI, r3
}
 8007f68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3738      	adds	r7, #56	@ 0x38
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d006      	beq.n	8007f92 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f1c3 0307 	rsb	r3, r3, #7
 8007f8e:	60fb      	str	r3, [r7, #12]
 8007f90:	e001      	b.n	8007f96 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f96:	68fb      	ldr	r3, [r7, #12]
	}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3714      	adds	r7, #20
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10d      	bne.n	8007fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d14d      	bne.n	8008066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 ff92 	bl	8008ef8 <xTaskPriorityDisinherit>
 8007fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	609a      	str	r2, [r3, #8]
 8007fdc:	e043      	b.n	8008066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d119      	bne.n	8008018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6858      	ldr	r0, [r3, #4]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fec:	461a      	mov	r2, r3
 8007fee:	68b9      	ldr	r1, [r7, #8]
 8007ff0:	f001 ff42 	bl	8009e78 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	685a      	ldr	r2, [r3, #4]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	429a      	cmp	r2, r3
 800800c:	d32b      	bcc.n	8008066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	e026      	b.n	8008066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68d8      	ldr	r0, [r3, #12]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008020:	461a      	mov	r2, r3
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	f001 ff28 	bl	8009e78 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008030:	425b      	negs	r3, r3
 8008032:	441a      	add	r2, r3
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	68da      	ldr	r2, [r3, #12]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d207      	bcs.n	8008054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800804c:	425b      	negs	r3, r3
 800804e:	441a      	add	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d105      	bne.n	8008066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3b01      	subs	r3, #1
 8008064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800806e:	697b      	ldr	r3, [r7, #20]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3718      	adds	r7, #24
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d018      	beq.n	80080bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	68da      	ldr	r2, [r3, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	441a      	add	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d303      	bcc.n	80080ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	68d9      	ldr	r1, [r3, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b4:	461a      	mov	r2, r3
 80080b6:	6838      	ldr	r0, [r7, #0]
 80080b8:	f001 fede 	bl	8009e78 <memcpy>
	}
}
 80080bc:	bf00      	nop
 80080be:	3708      	adds	r7, #8
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80080cc:	f001 f9d4 	bl	8009478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080d8:	e011      	b.n	80080fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d012      	beq.n	8008108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	3324      	adds	r3, #36	@ 0x24
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fcac 	bl	8008a44 <xTaskRemoveFromEventList>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080f2:	f000 fd85 	bl	8008c00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008102:	2b00      	cmp	r3, #0
 8008104:	dce9      	bgt.n	80080da <prvUnlockQueue+0x16>
 8008106:	e000      	b.n	800810a <prvUnlockQueue+0x46>
					break;
 8008108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	22ff      	movs	r2, #255	@ 0xff
 800810e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008112:	f001 f9e3 	bl	80094dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008116:	f001 f9af 	bl	8009478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008122:	e011      	b.n	8008148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691b      	ldr	r3, [r3, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d012      	beq.n	8008152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3310      	adds	r3, #16
 8008130:	4618      	mov	r0, r3
 8008132:	f000 fc87 	bl	8008a44 <xTaskRemoveFromEventList>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800813c:	f000 fd60 	bl	8008c00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008140:	7bbb      	ldrb	r3, [r7, #14]
 8008142:	3b01      	subs	r3, #1
 8008144:	b2db      	uxtb	r3, r3
 8008146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800814c:	2b00      	cmp	r3, #0
 800814e:	dce9      	bgt.n	8008124 <prvUnlockQueue+0x60>
 8008150:	e000      	b.n	8008154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	22ff      	movs	r2, #255	@ 0xff
 8008158:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800815c:	f001 f9be 	bl	80094dc <vPortExitCritical>
}
 8008160:	bf00      	nop
 8008162:	3710      	adds	r7, #16
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008170:	f001 f982 	bl	8009478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800817c:	2301      	movs	r3, #1
 800817e:	60fb      	str	r3, [r7, #12]
 8008180:	e001      	b.n	8008186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008186:	f001 f9a9 	bl	80094dc <vPortExitCritical>

	return xReturn;
 800818a:	68fb      	ldr	r3, [r7, #12]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800819c:	f001 f96c 	bl	8009478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d102      	bne.n	80081b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	60fb      	str	r3, [r7, #12]
 80081b0:	e001      	b.n	80081b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80081b6:	f001 f991 	bl	80094dc <vPortExitCritical>

	return xReturn;
 80081ba:	68fb      	ldr	r3, [r7, #12]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08e      	sub	sp, #56	@ 0x38
 80081c8:	af04      	add	r7, sp, #16
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80081d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10b      	bne.n	80081f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	623b      	str	r3, [r7, #32]
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	e7fd      	b.n	80081ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10b      	bne.n	800820e <xTaskCreateStatic+0x4a>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61fb      	str	r3, [r7, #28]
}
 8008208:	bf00      	nop
 800820a:	bf00      	nop
 800820c:	e7fd      	b.n	800820a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800820e:	23a0      	movs	r3, #160	@ 0xa0
 8008210:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2ba0      	cmp	r3, #160	@ 0xa0
 8008216:	d00b      	beq.n	8008230 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	61bb      	str	r3, [r7, #24]
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008230:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01e      	beq.n	8008276 <xTaskCreateStatic+0xb2>
 8008238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823a:	2b00      	cmp	r3, #0
 800823c:	d01b      	beq.n	8008276 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800823e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008240:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008246:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	2202      	movs	r2, #2
 800824c:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008250:	2300      	movs	r3, #0
 8008252:	9303      	str	r3, [sp, #12]
 8008254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008256:	9302      	str	r3, [sp, #8]
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	9301      	str	r3, [sp, #4]
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68b9      	ldr	r1, [r7, #8]
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f851 	bl	8008310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800826e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008270:	f000 f8ee 	bl	8008450 <prvAddNewTaskToReadyList>
 8008274:	e001      	b.n	800827a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800827a:	697b      	ldr	r3, [r7, #20]
	}
 800827c:	4618      	mov	r0, r3
 800827e:	3728      	adds	r7, #40	@ 0x28
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008284:	b580      	push	{r7, lr}
 8008286:	b08c      	sub	sp, #48	@ 0x30
 8008288:	af04      	add	r7, sp, #16
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	4613      	mov	r3, r2
 8008292:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008294:	88fb      	ldrh	r3, [r7, #6]
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4618      	mov	r0, r3
 800829a:	f001 fa0f 	bl	80096bc <pvPortMalloc>
 800829e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00e      	beq.n	80082c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082a6:	20a0      	movs	r0, #160	@ 0xa0
 80082a8:	f001 fa08 	bl	80096bc <pvPortMalloc>
 80082ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082b4:	69fb      	ldr	r3, [r7, #28]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80082ba:	e005      	b.n	80082c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80082bc:	6978      	ldr	r0, [r7, #20]
 80082be:	f001 facb 	bl	8009858 <vPortFree>
 80082c2:	e001      	b.n	80082c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d017      	beq.n	80082fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80082d6:	88fa      	ldrh	r2, [r7, #6]
 80082d8:	2300      	movs	r3, #0
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	9302      	str	r3, [sp, #8]
 80082e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e2:	9301      	str	r3, [sp, #4]
 80082e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f80f 	bl	8008310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082f2:	69f8      	ldr	r0, [r7, #28]
 80082f4:	f000 f8ac 	bl	8008450 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082f8:	2301      	movs	r3, #1
 80082fa:	61bb      	str	r3, [r7, #24]
 80082fc:	e002      	b.n	8008304 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008302:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008304:	69bb      	ldr	r3, [r7, #24]
	}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b088      	sub	sp, #32
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800831e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008320:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8008328:	440b      	add	r3, r1
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f023 0307 	bic.w	r3, r3, #7
 8008336:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01f      	beq.n	80083a0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
 8008364:	e012      	b.n	800838c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	69fb      	ldr	r3, [r7, #28]
 800836a:	4413      	add	r3, r2
 800836c:	7819      	ldrb	r1, [r3, #0]
 800836e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	4413      	add	r3, r2
 8008374:	3334      	adds	r3, #52	@ 0x34
 8008376:	460a      	mov	r2, r1
 8008378:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4413      	add	r3, r2
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d006      	beq.n	8008394 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	3301      	adds	r3, #1
 800838a:	61fb      	str	r3, [r7, #28]
 800838c:	69fb      	ldr	r3, [r7, #28]
 800838e:	2b0f      	cmp	r3, #15
 8008390:	d9e9      	bls.n	8008366 <prvInitialiseNewTask+0x56>
 8008392:	e000      	b.n	8008396 <prvInitialiseNewTask+0x86>
			{
				break;
 8008394:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800839e:	e003      	b.n	80083a8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a2:	2200      	movs	r2, #0
 80083a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083aa:	2b06      	cmp	r3, #6
 80083ac:	d901      	bls.n	80083b2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083ae:	2306      	movs	r3, #6
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083bc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	2200      	movs	r2, #0
 80083c2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80083c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7ff f88d 	bl	80074e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80083ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d0:	3318      	adds	r3, #24
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff f888 	bl	80074e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80083d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e0:	f1c3 0207 	rsb	r2, r3, #7
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083ec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008400:	334c      	adds	r3, #76	@ 0x4c
 8008402:	224c      	movs	r2, #76	@ 0x4c
 8008404:	2100      	movs	r1, #0
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fc58 	bl	8009cbc <memset>
 800840c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840e:	4a0d      	ldr	r2, [pc, #52]	@ (8008444 <prvInitialiseNewTask+0x134>)
 8008410:	651a      	str	r2, [r3, #80]	@ 0x50
 8008412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008414:	4a0c      	ldr	r2, [pc, #48]	@ (8008448 <prvInitialiseNewTask+0x138>)
 8008416:	655a      	str	r2, [r3, #84]	@ 0x54
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	4a0c      	ldr	r2, [pc, #48]	@ (800844c <prvInitialiseNewTask+0x13c>)
 800841c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	68f9      	ldr	r1, [r7, #12]
 8008422:	69b8      	ldr	r0, [r7, #24]
 8008424:	f000 fefa 	bl	800921c <pxPortInitialiseStack>
 8008428:	4602      	mov	r2, r0
 800842a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800842e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008436:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008438:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800843a:	bf00      	nop
 800843c:	3720      	adds	r7, #32
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	24004808 	.word	0x24004808
 8008448:	24004870 	.word	0x24004870
 800844c:	240048d8 	.word	0x240048d8

08008450 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008458:	f001 f80e 	bl	8009478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800845c:	4b2a      	ldr	r3, [pc, #168]	@ (8008508 <prvAddNewTaskToReadyList+0xb8>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	4a29      	ldr	r2, [pc, #164]	@ (8008508 <prvAddNewTaskToReadyList+0xb8>)
 8008464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008466:	4b29      	ldr	r3, [pc, #164]	@ (800850c <prvAddNewTaskToReadyList+0xbc>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800846e:	4a27      	ldr	r2, [pc, #156]	@ (800850c <prvAddNewTaskToReadyList+0xbc>)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008474:	4b24      	ldr	r3, [pc, #144]	@ (8008508 <prvAddNewTaskToReadyList+0xb8>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d110      	bne.n	800849e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800847c:	f000 fbe4 	bl	8008c48 <prvInitialiseTaskLists>
 8008480:	e00d      	b.n	800849e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008482:	4b23      	ldr	r3, [pc, #140]	@ (8008510 <prvAddNewTaskToReadyList+0xc0>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800848a:	4b20      	ldr	r3, [pc, #128]	@ (800850c <prvAddNewTaskToReadyList+0xbc>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	429a      	cmp	r2, r3
 8008496:	d802      	bhi.n	800849e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008498:	4a1c      	ldr	r2, [pc, #112]	@ (800850c <prvAddNewTaskToReadyList+0xbc>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800849e:	4b1d      	ldr	r3, [pc, #116]	@ (8008514 <prvAddNewTaskToReadyList+0xc4>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4a1b      	ldr	r2, [pc, #108]	@ (8008514 <prvAddNewTaskToReadyList+0xc4>)
 80084a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ac:	2201      	movs	r2, #1
 80084ae:	409a      	lsls	r2, r3
 80084b0:	4b19      	ldr	r3, [pc, #100]	@ (8008518 <prvAddNewTaskToReadyList+0xc8>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	4a18      	ldr	r2, [pc, #96]	@ (8008518 <prvAddNewTaskToReadyList+0xc8>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a15      	ldr	r2, [pc, #84]	@ (800851c <prvAddNewTaskToReadyList+0xcc>)
 80084c8:	441a      	add	r2, r3
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7ff f816 	bl	8007502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084d6:	f001 f801 	bl	80094dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084da:	4b0d      	ldr	r3, [pc, #52]	@ (8008510 <prvAddNewTaskToReadyList+0xc0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00e      	beq.n	8008500 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084e2:	4b0a      	ldr	r3, [pc, #40]	@ (800850c <prvAddNewTaskToReadyList+0xbc>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d207      	bcs.n	8008500 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084f0:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <prvAddNewTaskToReadyList+0xd0>)
 80084f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084f6:	601a      	str	r2, [r3, #0]
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	24000ba8 	.word	0x24000ba8
 800850c:	24000aa8 	.word	0x24000aa8
 8008510:	24000bb4 	.word	0x24000bb4
 8008514:	24000bc4 	.word	0x24000bc4
 8008518:	24000bb0 	.word	0x24000bb0
 800851c:	24000aac 	.word	0x24000aac
 8008520:	e000ed04 	.word	0xe000ed04

08008524 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d018      	beq.n	8008568 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008536:	4b14      	ldr	r3, [pc, #80]	@ (8008588 <vTaskDelay+0x64>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00b      	beq.n	8008556 <vTaskDelay+0x32>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	60bb      	str	r3, [r7, #8]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008556:	f000 f885 	bl	8008664 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800855a:	2100      	movs	r1, #0
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fdf7 	bl	8009150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008562:	f000 f88d 	bl	8008680 <xTaskResumeAll>
 8008566:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d107      	bne.n	800857e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800856e:	4b07      	ldr	r3, [pc, #28]	@ (800858c <vTaskDelay+0x68>)
 8008570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008574:	601a      	str	r2, [r3, #0]
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	24000bd0 	.word	0x24000bd0
 800858c:	e000ed04 	.word	0xe000ed04

08008590 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	@ 0x28
 8008594:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800859e:	463a      	mov	r2, r7
 80085a0:	1d39      	adds	r1, r7, #4
 80085a2:	f107 0308 	add.w	r3, r7, #8
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7f8 f92c 	bl	8000804 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80085ac:	6839      	ldr	r1, [r7, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	9202      	str	r2, [sp, #8]
 80085b4:	9301      	str	r3, [sp, #4]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	2300      	movs	r3, #0
 80085bc:	460a      	mov	r2, r1
 80085be:	4921      	ldr	r1, [pc, #132]	@ (8008644 <vTaskStartScheduler+0xb4>)
 80085c0:	4821      	ldr	r0, [pc, #132]	@ (8008648 <vTaskStartScheduler+0xb8>)
 80085c2:	f7ff fdff 	bl	80081c4 <xTaskCreateStatic>
 80085c6:	4603      	mov	r3, r0
 80085c8:	4a20      	ldr	r2, [pc, #128]	@ (800864c <vTaskStartScheduler+0xbc>)
 80085ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80085cc:	4b1f      	ldr	r3, [pc, #124]	@ (800864c <vTaskStartScheduler+0xbc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d002      	beq.n	80085da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	e001      	b.n	80085de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d11b      	bne.n	800861c <vTaskStartScheduler+0x8c>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	613b      	str	r3, [r7, #16]
}
 80085f6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085f8:	4b15      	ldr	r3, [pc, #84]	@ (8008650 <vTaskStartScheduler+0xc0>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	334c      	adds	r3, #76	@ 0x4c
 80085fe:	4a15      	ldr	r2, [pc, #84]	@ (8008654 <vTaskStartScheduler+0xc4>)
 8008600:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008602:	4b15      	ldr	r3, [pc, #84]	@ (8008658 <vTaskStartScheduler+0xc8>)
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800860a:	4b14      	ldr	r3, [pc, #80]	@ (800865c <vTaskStartScheduler+0xcc>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008610:	4b13      	ldr	r3, [pc, #76]	@ (8008660 <vTaskStartScheduler+0xd0>)
 8008612:	2200      	movs	r2, #0
 8008614:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008616:	f000 fe8b 	bl	8009330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800861a:	e00f      	b.n	800863c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008622:	d10b      	bne.n	800863c <vTaskStartScheduler+0xac>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <vTaskStartScheduler+0xa8>
}
 800863c:	bf00      	nop
 800863e:	3718      	adds	r7, #24
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	0800a6f4 	.word	0x0800a6f4
 8008648:	08008c19 	.word	0x08008c19
 800864c:	24000bcc 	.word	0x24000bcc
 8008650:	24000aa8 	.word	0x24000aa8
 8008654:	24000014 	.word	0x24000014
 8008658:	24000bc8 	.word	0x24000bc8
 800865c:	24000bb4 	.word	0x24000bb4
 8008660:	24000bac 	.word	0x24000bac

08008664 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008668:	4b04      	ldr	r3, [pc, #16]	@ (800867c <vTaskSuspendAll+0x18>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	3301      	adds	r3, #1
 800866e:	4a03      	ldr	r2, [pc, #12]	@ (800867c <vTaskSuspendAll+0x18>)
 8008670:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008672:	bf00      	nop
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	24000bd0 	.word	0x24000bd0

08008680 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800868e:	4b42      	ldr	r3, [pc, #264]	@ (8008798 <xTaskResumeAll+0x118>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10b      	bne.n	80086ae <xTaskResumeAll+0x2e>
	__asm volatile
 8008696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869a:	f383 8811 	msr	BASEPRI, r3
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	603b      	str	r3, [r7, #0]
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	e7fd      	b.n	80086aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086ae:	f000 fee3 	bl	8009478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086b2:	4b39      	ldr	r3, [pc, #228]	@ (8008798 <xTaskResumeAll+0x118>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3b01      	subs	r3, #1
 80086b8:	4a37      	ldr	r2, [pc, #220]	@ (8008798 <xTaskResumeAll+0x118>)
 80086ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086bc:	4b36      	ldr	r3, [pc, #216]	@ (8008798 <xTaskResumeAll+0x118>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d161      	bne.n	8008788 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086c4:	4b35      	ldr	r3, [pc, #212]	@ (800879c <xTaskResumeAll+0x11c>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05d      	beq.n	8008788 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086cc:	e02e      	b.n	800872c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ce:	4b34      	ldr	r3, [pc, #208]	@ (80087a0 <xTaskResumeAll+0x120>)
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	3318      	adds	r3, #24
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe ff6e 	bl	80075bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4618      	mov	r0, r3
 80086e6:	f7fe ff69 	bl	80075bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086ee:	2201      	movs	r2, #1
 80086f0:	409a      	lsls	r2, r3
 80086f2:	4b2c      	ldr	r3, [pc, #176]	@ (80087a4 <xTaskResumeAll+0x124>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	4a2a      	ldr	r2, [pc, #168]	@ (80087a4 <xTaskResumeAll+0x124>)
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4a27      	ldr	r2, [pc, #156]	@ (80087a8 <xTaskResumeAll+0x128>)
 800870a:	441a      	add	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	3304      	adds	r3, #4
 8008710:	4619      	mov	r1, r3
 8008712:	4610      	mov	r0, r2
 8008714:	f7fe fef5 	bl	8007502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800871c:	4b23      	ldr	r3, [pc, #140]	@ (80087ac <xTaskResumeAll+0x12c>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008722:	429a      	cmp	r2, r3
 8008724:	d302      	bcc.n	800872c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008726:	4b22      	ldr	r3, [pc, #136]	@ (80087b0 <xTaskResumeAll+0x130>)
 8008728:	2201      	movs	r2, #1
 800872a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800872c:	4b1c      	ldr	r3, [pc, #112]	@ (80087a0 <xTaskResumeAll+0x120>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1cc      	bne.n	80086ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800873a:	f000 fb29 	bl	8008d90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800873e:	4b1d      	ldr	r3, [pc, #116]	@ (80087b4 <xTaskResumeAll+0x134>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800874a:	f000 f837 	bl	80087bc <xTaskIncrementTick>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008754:	4b16      	ldr	r3, [pc, #88]	@ (80087b0 <xTaskResumeAll+0x130>)
 8008756:	2201      	movs	r2, #1
 8008758:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3b01      	subs	r3, #1
 800875e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1f1      	bne.n	800874a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008766:	4b13      	ldr	r3, [pc, #76]	@ (80087b4 <xTaskResumeAll+0x134>)
 8008768:	2200      	movs	r2, #0
 800876a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800876c:	4b10      	ldr	r3, [pc, #64]	@ (80087b0 <xTaskResumeAll+0x130>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d009      	beq.n	8008788 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008774:	2301      	movs	r3, #1
 8008776:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008778:	4b0f      	ldr	r3, [pc, #60]	@ (80087b8 <xTaskResumeAll+0x138>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008788:	f000 fea8 	bl	80094dc <vPortExitCritical>

	return xAlreadyYielded;
 800878c:	68bb      	ldr	r3, [r7, #8]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	24000bd0 	.word	0x24000bd0
 800879c:	24000ba8 	.word	0x24000ba8
 80087a0:	24000b68 	.word	0x24000b68
 80087a4:	24000bb0 	.word	0x24000bb0
 80087a8:	24000aac 	.word	0x24000aac
 80087ac:	24000aa8 	.word	0x24000aa8
 80087b0:	24000bbc 	.word	0x24000bbc
 80087b4:	24000bb8 	.word	0x24000bb8
 80087b8:	e000ed04 	.word	0xe000ed04

080087bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b086      	sub	sp, #24
 80087c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087c2:	2300      	movs	r3, #0
 80087c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008904 <xTaskIncrementTick+0x148>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f040 808f 	bne.w	80088ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008908 <xTaskIncrementTick+0x14c>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087d8:	4a4b      	ldr	r2, [pc, #300]	@ (8008908 <xTaskIncrementTick+0x14c>)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d121      	bne.n	8008828 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80087e4:	4b49      	ldr	r3, [pc, #292]	@ (800890c <xTaskIncrementTick+0x150>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00b      	beq.n	8008806 <xTaskIncrementTick+0x4a>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	603b      	str	r3, [r7, #0]
}
 8008800:	bf00      	nop
 8008802:	bf00      	nop
 8008804:	e7fd      	b.n	8008802 <xTaskIncrementTick+0x46>
 8008806:	4b41      	ldr	r3, [pc, #260]	@ (800890c <xTaskIncrementTick+0x150>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	4b40      	ldr	r3, [pc, #256]	@ (8008910 <xTaskIncrementTick+0x154>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a3e      	ldr	r2, [pc, #248]	@ (800890c <xTaskIncrementTick+0x150>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	4a3e      	ldr	r2, [pc, #248]	@ (8008910 <xTaskIncrementTick+0x154>)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	4b3e      	ldr	r3, [pc, #248]	@ (8008914 <xTaskIncrementTick+0x158>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	4a3c      	ldr	r2, [pc, #240]	@ (8008914 <xTaskIncrementTick+0x158>)
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	f000 fab4 	bl	8008d90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008828:	4b3b      	ldr	r3, [pc, #236]	@ (8008918 <xTaskIncrementTick+0x15c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	429a      	cmp	r2, r3
 8008830:	d348      	bcc.n	80088c4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008832:	4b36      	ldr	r3, [pc, #216]	@ (800890c <xTaskIncrementTick+0x150>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d104      	bne.n	8008846 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800883c:	4b36      	ldr	r3, [pc, #216]	@ (8008918 <xTaskIncrementTick+0x15c>)
 800883e:	f04f 32ff 	mov.w	r2, #4294967295
 8008842:	601a      	str	r2, [r3, #0]
					break;
 8008844:	e03e      	b.n	80088c4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008846:	4b31      	ldr	r3, [pc, #196]	@ (800890c <xTaskIncrementTick+0x150>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008856:	693a      	ldr	r2, [r7, #16]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	429a      	cmp	r2, r3
 800885c:	d203      	bcs.n	8008866 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800885e:	4a2e      	ldr	r2, [pc, #184]	@ (8008918 <xTaskIncrementTick+0x15c>)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008864:	e02e      	b.n	80088c4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	3304      	adds	r3, #4
 800886a:	4618      	mov	r0, r3
 800886c:	f7fe fea6 	bl	80075bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	3318      	adds	r3, #24
 800887c:	4618      	mov	r0, r3
 800887e:	f7fe fe9d 	bl	80075bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008886:	2201      	movs	r2, #1
 8008888:	409a      	lsls	r2, r3
 800888a:	4b24      	ldr	r3, [pc, #144]	@ (800891c <xTaskIncrementTick+0x160>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4313      	orrs	r3, r2
 8008890:	4a22      	ldr	r2, [pc, #136]	@ (800891c <xTaskIncrementTick+0x160>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008898:	4613      	mov	r3, r2
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	4a1f      	ldr	r2, [pc, #124]	@ (8008920 <xTaskIncrementTick+0x164>)
 80088a2:	441a      	add	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	3304      	adds	r3, #4
 80088a8:	4619      	mov	r1, r3
 80088aa:	4610      	mov	r0, r2
 80088ac:	f7fe fe29 	bl	8007502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b4:	4b1b      	ldr	r3, [pc, #108]	@ (8008924 <xTaskIncrementTick+0x168>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d3b9      	bcc.n	8008832 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80088be:	2301      	movs	r3, #1
 80088c0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088c2:	e7b6      	b.n	8008832 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088c4:	4b17      	ldr	r3, [pc, #92]	@ (8008924 <xTaskIncrementTick+0x168>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	4915      	ldr	r1, [pc, #84]	@ (8008920 <xTaskIncrementTick+0x164>)
 80088cc:	4613      	mov	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d901      	bls.n	80088e0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088e0:	4b11      	ldr	r3, [pc, #68]	@ (8008928 <xTaskIncrementTick+0x16c>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d007      	beq.n	80088f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088e8:	2301      	movs	r3, #1
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e004      	b.n	80088f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088ee:	4b0f      	ldr	r3, [pc, #60]	@ (800892c <xTaskIncrementTick+0x170>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3301      	adds	r3, #1
 80088f4:	4a0d      	ldr	r2, [pc, #52]	@ (800892c <xTaskIncrementTick+0x170>)
 80088f6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088f8:	697b      	ldr	r3, [r7, #20]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	24000bd0 	.word	0x24000bd0
 8008908:	24000bac 	.word	0x24000bac
 800890c:	24000b60 	.word	0x24000b60
 8008910:	24000b64 	.word	0x24000b64
 8008914:	24000bc0 	.word	0x24000bc0
 8008918:	24000bc8 	.word	0x24000bc8
 800891c:	24000bb0 	.word	0x24000bb0
 8008920:	24000aac 	.word	0x24000aac
 8008924:	24000aa8 	.word	0x24000aa8
 8008928:	24000bbc 	.word	0x24000bbc
 800892c:	24000bb8 	.word	0x24000bb8

08008930 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008936:	4b2a      	ldr	r3, [pc, #168]	@ (80089e0 <vTaskSwitchContext+0xb0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800893e:	4b29      	ldr	r3, [pc, #164]	@ (80089e4 <vTaskSwitchContext+0xb4>)
 8008940:	2201      	movs	r2, #1
 8008942:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008944:	e045      	b.n	80089d2 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8008946:	4b27      	ldr	r3, [pc, #156]	@ (80089e4 <vTaskSwitchContext+0xb4>)
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800894c:	4b26      	ldr	r3, [pc, #152]	@ (80089e8 <vTaskSwitchContext+0xb8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	fab3 f383 	clz	r3, r3
 8008958:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	f1c3 031f 	rsb	r3, r3, #31
 8008960:	617b      	str	r3, [r7, #20]
 8008962:	4922      	ldr	r1, [pc, #136]	@ (80089ec <vTaskSwitchContext+0xbc>)
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10b      	bne.n	800898e <vTaskSwitchContext+0x5e>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	607b      	str	r3, [r7, #4]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <vTaskSwitchContext+0x5a>
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4a14      	ldr	r2, [pc, #80]	@ (80089ec <vTaskSwitchContext+0xbc>)
 800899a:	4413      	add	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	3308      	adds	r3, #8
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d104      	bne.n	80089be <vTaskSwitchContext+0x8e>
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	685a      	ldr	r2, [r3, #4]
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	605a      	str	r2, [r3, #4]
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	4a0a      	ldr	r2, [pc, #40]	@ (80089f0 <vTaskSwitchContext+0xc0>)
 80089c6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089c8:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <vTaskSwitchContext+0xc0>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	334c      	adds	r3, #76	@ 0x4c
 80089ce:	4a09      	ldr	r2, [pc, #36]	@ (80089f4 <vTaskSwitchContext+0xc4>)
 80089d0:	6013      	str	r3, [r2, #0]
}
 80089d2:	bf00      	nop
 80089d4:	371c      	adds	r7, #28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	24000bd0 	.word	0x24000bd0
 80089e4:	24000bbc 	.word	0x24000bbc
 80089e8:	24000bb0 	.word	0x24000bb0
 80089ec:	24000aac 	.word	0x24000aac
 80089f0:	24000aa8 	.word	0x24000aa8
 80089f4:	24000014 	.word	0x24000014

080089f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10b      	bne.n	8008a20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a0c:	f383 8811 	msr	BASEPRI, r3
 8008a10:	f3bf 8f6f 	isb	sy
 8008a14:	f3bf 8f4f 	dsb	sy
 8008a18:	60fb      	str	r3, [r7, #12]
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	e7fd      	b.n	8008a1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a20:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <vTaskPlaceOnEventList+0x48>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	3318      	adds	r3, #24
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7fe fd8e 	bl	800754a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a2e:	2101      	movs	r1, #1
 8008a30:	6838      	ldr	r0, [r7, #0]
 8008a32:	f000 fb8d 	bl	8009150 <prvAddCurrentTaskToDelayedList>
}
 8008a36:	bf00      	nop
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	24000aa8 	.word	0x24000aa8

08008a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10b      	bne.n	8008a72 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	60fb      	str	r3, [r7, #12]
}
 8008a6c:	bf00      	nop
 8008a6e:	bf00      	nop
 8008a70:	e7fd      	b.n	8008a6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	3318      	adds	r3, #24
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fda0 	bl	80075bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8008af4 <xTaskRemoveFromEventList+0xb0>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11c      	bne.n	8008abe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	3304      	adds	r3, #4
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fe fd97 	bl	80075bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	2201      	movs	r2, #1
 8008a94:	409a      	lsls	r2, r3
 8008a96:	4b18      	ldr	r3, [pc, #96]	@ (8008af8 <xTaskRemoveFromEventList+0xb4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	4a16      	ldr	r2, [pc, #88]	@ (8008af8 <xTaskRemoveFromEventList+0xb4>)
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4a13      	ldr	r2, [pc, #76]	@ (8008afc <xTaskRemoveFromEventList+0xb8>)
 8008aae:	441a      	add	r2, r3
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7fe fd23 	bl	8007502 <vListInsertEnd>
 8008abc:	e005      	b.n	8008aca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	3318      	adds	r3, #24
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	480e      	ldr	r0, [pc, #56]	@ (8008b00 <xTaskRemoveFromEventList+0xbc>)
 8008ac6:	f7fe fd1c 	bl	8007502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ace:	4b0d      	ldr	r3, [pc, #52]	@ (8008b04 <xTaskRemoveFromEventList+0xc0>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d905      	bls.n	8008ae4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008adc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b08 <xTaskRemoveFromEventList+0xc4>)
 8008ade:	2201      	movs	r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	e001      	b.n	8008ae8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ae8:	697b      	ldr	r3, [r7, #20]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	24000bd0 	.word	0x24000bd0
 8008af8:	24000bb0 	.word	0x24000bb0
 8008afc:	24000aac 	.word	0x24000aac
 8008b00:	24000b68 	.word	0x24000b68
 8008b04:	24000aa8 	.word	0x24000aa8
 8008b08:	24000bbc 	.word	0x24000bbc

08008b0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b14:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <vTaskInternalSetTimeOutState+0x24>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b1c:	4b05      	ldr	r3, [pc, #20]	@ (8008b34 <vTaskInternalSetTimeOutState+0x28>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	605a      	str	r2, [r3, #4]
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	24000bc0 	.word	0x24000bc0
 8008b34:	24000bac 	.word	0x24000bac

08008b38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10b      	bne.n	8008b60 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4c:	f383 8811 	msr	BASEPRI, r3
 8008b50:	f3bf 8f6f 	isb	sy
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	613b      	str	r3, [r7, #16]
}
 8008b5a:	bf00      	nop
 8008b5c:	bf00      	nop
 8008b5e:	e7fd      	b.n	8008b5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10b      	bne.n	8008b7e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b6a:	f383 8811 	msr	BASEPRI, r3
 8008b6e:	f3bf 8f6f 	isb	sy
 8008b72:	f3bf 8f4f 	dsb	sy
 8008b76:	60fb      	str	r3, [r7, #12]
}
 8008b78:	bf00      	nop
 8008b7a:	bf00      	nop
 8008b7c:	e7fd      	b.n	8008b7a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b7e:	f000 fc7b 	bl	8009478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b82:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf8 <xTaskCheckForTimeOut+0xc0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9a:	d102      	bne.n	8008ba2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e023      	b.n	8008bea <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b15      	ldr	r3, [pc, #84]	@ (8008bfc <xTaskCheckForTimeOut+0xc4>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d007      	beq.n	8008bbe <xTaskCheckForTimeOut+0x86>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	69ba      	ldr	r2, [r7, #24]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d302      	bcc.n	8008bbe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bb8:	2301      	movs	r3, #1
 8008bba:	61fb      	str	r3, [r7, #28]
 8008bbc:	e015      	b.n	8008bea <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	429a      	cmp	r2, r3
 8008bc6:	d20b      	bcs.n	8008be0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff ff99 	bl	8008b0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	61fb      	str	r3, [r7, #28]
 8008bde:	e004      	b.n	8008bea <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008bea:	f000 fc77 	bl	80094dc <vPortExitCritical>

	return xReturn;
 8008bee:	69fb      	ldr	r3, [r7, #28]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	24000bac 	.word	0x24000bac
 8008bfc:	24000bc0 	.word	0x24000bc0

08008c00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c04:	4b03      	ldr	r3, [pc, #12]	@ (8008c14 <vTaskMissedYield+0x14>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	24000bbc 	.word	0x24000bbc

08008c18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c20:	f000 f852 	bl	8008cc8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c24:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <prvIdleTask+0x28>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d9f9      	bls.n	8008c20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c2c:	4b05      	ldr	r3, [pc, #20]	@ (8008c44 <prvIdleTask+0x2c>)
 8008c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c32:	601a      	str	r2, [r3, #0]
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c3c:	e7f0      	b.n	8008c20 <prvIdleTask+0x8>
 8008c3e:	bf00      	nop
 8008c40:	24000aac 	.word	0x24000aac
 8008c44:	e000ed04 	.word	0xe000ed04

08008c48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c4e:	2300      	movs	r3, #0
 8008c50:	607b      	str	r3, [r7, #4]
 8008c52:	e00c      	b.n	8008c6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a12      	ldr	r2, [pc, #72]	@ (8008ca8 <prvInitialiseTaskLists+0x60>)
 8008c60:	4413      	add	r3, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fc20 	bl	80074a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	607b      	str	r3, [r7, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b06      	cmp	r3, #6
 8008c72:	d9ef      	bls.n	8008c54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008c74:	480d      	ldr	r0, [pc, #52]	@ (8008cac <prvInitialiseTaskLists+0x64>)
 8008c76:	f7fe fc17 	bl	80074a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c7a:	480d      	ldr	r0, [pc, #52]	@ (8008cb0 <prvInitialiseTaskLists+0x68>)
 8008c7c:	f7fe fc14 	bl	80074a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c80:	480c      	ldr	r0, [pc, #48]	@ (8008cb4 <prvInitialiseTaskLists+0x6c>)
 8008c82:	f7fe fc11 	bl	80074a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c86:	480c      	ldr	r0, [pc, #48]	@ (8008cb8 <prvInitialiseTaskLists+0x70>)
 8008c88:	f7fe fc0e 	bl	80074a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c8c:	480b      	ldr	r0, [pc, #44]	@ (8008cbc <prvInitialiseTaskLists+0x74>)
 8008c8e:	f7fe fc0b 	bl	80074a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c92:	4b0b      	ldr	r3, [pc, #44]	@ (8008cc0 <prvInitialiseTaskLists+0x78>)
 8008c94:	4a05      	ldr	r2, [pc, #20]	@ (8008cac <prvInitialiseTaskLists+0x64>)
 8008c96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c98:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc4 <prvInitialiseTaskLists+0x7c>)
 8008c9a:	4a05      	ldr	r2, [pc, #20]	@ (8008cb0 <prvInitialiseTaskLists+0x68>)
 8008c9c:	601a      	str	r2, [r3, #0]
}
 8008c9e:	bf00      	nop
 8008ca0:	3708      	adds	r7, #8
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	24000aac 	.word	0x24000aac
 8008cac:	24000b38 	.word	0x24000b38
 8008cb0:	24000b4c 	.word	0x24000b4c
 8008cb4:	24000b68 	.word	0x24000b68
 8008cb8:	24000b7c 	.word	0x24000b7c
 8008cbc:	24000b94 	.word	0x24000b94
 8008cc0:	24000b60 	.word	0x24000b60
 8008cc4:	24000b64 	.word	0x24000b64

08008cc8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008cce:	e019      	b.n	8008d04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008cd0:	f000 fbd2 	bl	8009478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd4:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <prvCheckTasksWaitingTermination+0x50>)
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3304      	adds	r3, #4
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fc6b 	bl	80075bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d1c <prvCheckTasksWaitingTermination+0x54>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a0b      	ldr	r2, [pc, #44]	@ (8008d1c <prvCheckTasksWaitingTermination+0x54>)
 8008cee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008cf8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008cfa:	f000 fbef 	bl	80094dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 f810 	bl	8008d24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d04:	4b06      	ldr	r3, [pc, #24]	@ (8008d20 <prvCheckTasksWaitingTermination+0x58>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1e1      	bne.n	8008cd0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d0c:	bf00      	nop
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	24000b7c 	.word	0x24000b7c
 8008d1c:	24000ba8 	.word	0x24000ba8
 8008d20:	24000b90 	.word	0x24000b90

08008d24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	334c      	adds	r3, #76	@ 0x4c
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fffb 	bl	8009d2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d108      	bne.n	8008d52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 fd87 	bl	8009858 <vPortFree>
				vPortFree( pxTCB );
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 fd84 	bl	8009858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d50:	e019      	b.n	8008d86 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d103      	bne.n	8008d64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fd7b 	bl	8009858 <vPortFree>
	}
 8008d62:	e010      	b.n	8008d86 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d00b      	beq.n	8008d86 <prvDeleteTCB+0x62>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60fb      	str	r3, [r7, #12]
}
 8008d80:	bf00      	nop
 8008d82:	bf00      	nop
 8008d84:	e7fd      	b.n	8008d82 <prvDeleteTCB+0x5e>
	}
 8008d86:	bf00      	nop
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d96:	4b0c      	ldr	r3, [pc, #48]	@ (8008dc8 <prvResetNextTaskUnblockTime+0x38>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d104      	bne.n	8008daa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008da0:	4b0a      	ldr	r3, [pc, #40]	@ (8008dcc <prvResetNextTaskUnblockTime+0x3c>)
 8008da2:	f04f 32ff 	mov.w	r2, #4294967295
 8008da6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008da8:	e008      	b.n	8008dbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <prvResetNextTaskUnblockTime+0x38>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	4a04      	ldr	r2, [pc, #16]	@ (8008dcc <prvResetNextTaskUnblockTime+0x3c>)
 8008dba:	6013      	str	r3, [r2, #0]
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr
 8008dc8:	24000b60 	.word	0x24000b60
 8008dcc:	24000bc8 	.word	0x24000bc8

08008dd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <xTaskGetSchedulerState+0x34>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d102      	bne.n	8008de4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008dde:	2301      	movs	r3, #1
 8008de0:	607b      	str	r3, [r7, #4]
 8008de2:	e008      	b.n	8008df6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008de4:	4b08      	ldr	r3, [pc, #32]	@ (8008e08 <xTaskGetSchedulerState+0x38>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d102      	bne.n	8008df2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008dec:	2302      	movs	r3, #2
 8008dee:	607b      	str	r3, [r7, #4]
 8008df0:	e001      	b.n	8008df6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008df2:	2300      	movs	r3, #0
 8008df4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008df6:	687b      	ldr	r3, [r7, #4]
	}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	24000bb4 	.word	0x24000bb4
 8008e08:	24000bd0 	.word	0x24000bd0

08008e0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d05e      	beq.n	8008ee0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e26:	4b31      	ldr	r3, [pc, #196]	@ (8008eec <xTaskPriorityInherit+0xe0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d24e      	bcs.n	8008ece <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	db06      	blt.n	8008e46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e38:	4b2c      	ldr	r3, [pc, #176]	@ (8008eec <xTaskPriorityInherit+0xe0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e3e:	f1c3 0207 	rsb	r2, r3, #7
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	6959      	ldr	r1, [r3, #20]
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4a26      	ldr	r2, [pc, #152]	@ (8008ef0 <xTaskPriorityInherit+0xe4>)
 8008e58:	4413      	add	r3, r2
 8008e5a:	4299      	cmp	r1, r3
 8008e5c:	d12f      	bne.n	8008ebe <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	3304      	adds	r3, #4
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fe fbaa 	bl	80075bc <uxListRemove>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d10a      	bne.n	8008e84 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e72:	2201      	movs	r2, #1
 8008e74:	fa02 f303 	lsl.w	r3, r2, r3
 8008e78:	43da      	mvns	r2, r3
 8008e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef4 <xTaskPriorityInherit+0xe8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef4 <xTaskPriorityInherit+0xe8>)
 8008e82:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e84:	4b19      	ldr	r3, [pc, #100]	@ (8008eec <xTaskPriorityInherit+0xe0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	2201      	movs	r2, #1
 8008e94:	409a      	lsls	r2, r3
 8008e96:	4b17      	ldr	r3, [pc, #92]	@ (8008ef4 <xTaskPriorityInherit+0xe8>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	4a15      	ldr	r2, [pc, #84]	@ (8008ef4 <xTaskPriorityInherit+0xe8>)
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	4a10      	ldr	r2, [pc, #64]	@ (8008ef0 <xTaskPriorityInherit+0xe4>)
 8008eae:	441a      	add	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4610      	mov	r0, r2
 8008eb8:	f7fe fb23 	bl	8007502 <vListInsertEnd>
 8008ebc:	e004      	b.n	8008ec8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8008eec <xTaskPriorityInherit+0xe0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	60fb      	str	r3, [r7, #12]
 8008ecc:	e008      	b.n	8008ee0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ed2:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <xTaskPriorityInherit+0xe0>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d201      	bcs.n	8008ee0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008edc:	2301      	movs	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
	}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	24000aa8 	.word	0x24000aa8
 8008ef0:	24000aac 	.word	0x24000aac
 8008ef4:	24000bb0 	.word	0x24000bb0

08008ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b086      	sub	sp, #24
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f04:	2300      	movs	r3, #0
 8008f06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d070      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008ffc <xTaskPriorityDisinherit+0x104>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d00b      	beq.n	8008f30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	60fb      	str	r3, [r7, #12]
}
 8008f2a:	bf00      	nop
 8008f2c:	bf00      	nop
 8008f2e:	e7fd      	b.n	8008f2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10b      	bne.n	8008f50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f3c:	f383 8811 	msr	BASEPRI, r3
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	f3bf 8f4f 	dsb	sy
 8008f48:	60bb      	str	r3, [r7, #8]
}
 8008f4a:	bf00      	nop
 8008f4c:	bf00      	nop
 8008f4e:	e7fd      	b.n	8008f4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f54:	1e5a      	subs	r2, r3, #1
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f62:	429a      	cmp	r2, r3
 8008f64:	d044      	beq.n	8008ff0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d140      	bne.n	8008ff0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	3304      	adds	r3, #4
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe fb22 	bl	80075bc <uxListRemove>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d115      	bne.n	8008faa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f82:	491f      	ldr	r1, [pc, #124]	@ (8009000 <xTaskPriorityDisinherit+0x108>)
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	440b      	add	r3, r1
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d10a      	bne.n	8008faa <xTaskPriorityDisinherit+0xb2>
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f98:	2201      	movs	r2, #1
 8008f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f9e:	43da      	mvns	r2, r3
 8008fa0:	4b18      	ldr	r3, [pc, #96]	@ (8009004 <xTaskPriorityDisinherit+0x10c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	4a17      	ldr	r2, [pc, #92]	@ (8009004 <xTaskPriorityDisinherit+0x10c>)
 8008fa8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fb6:	f1c3 0207 	rsb	r2, r3, #7
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	409a      	lsls	r2, r3
 8008fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8009004 <xTaskPriorityDisinherit+0x10c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8009004 <xTaskPriorityDisinherit+0x10c>)
 8008fce:	6013      	str	r3, [r2, #0]
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd4:	4613      	mov	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4413      	add	r3, r2
 8008fda:	009b      	lsls	r3, r3, #2
 8008fdc:	4a08      	ldr	r2, [pc, #32]	@ (8009000 <xTaskPriorityDisinherit+0x108>)
 8008fde:	441a      	add	r2, r3
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	3304      	adds	r3, #4
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	f7fe fa8b 	bl	8007502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008ff0:	697b      	ldr	r3, [r7, #20]
	}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3718      	adds	r7, #24
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	24000aa8 	.word	0x24000aa8
 8009000:	24000aac 	.word	0x24000aac
 8009004:	24000bb0 	.word	0x24000bb0

08009008 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009008:	b580      	push	{r7, lr}
 800900a:	b088      	sub	sp, #32
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009016:	2301      	movs	r3, #1
 8009018:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d079      	beq.n	8009114 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10b      	bne.n	8009040 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	60fb      	str	r3, [r7, #12]
}
 800903a:	bf00      	nop
 800903c:	bf00      	nop
 800903e:	e7fd      	b.n	800903c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	429a      	cmp	r2, r3
 8009048:	d902      	bls.n	8009050 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	61fb      	str	r3, [r7, #28]
 800904e:	e002      	b.n	8009056 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009054:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800905a:	69fa      	ldr	r2, [r7, #28]
 800905c:	429a      	cmp	r2, r3
 800905e:	d059      	beq.n	8009114 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	429a      	cmp	r2, r3
 8009068:	d154      	bne.n	8009114 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800906a:	4b2c      	ldr	r3, [pc, #176]	@ (800911c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69ba      	ldr	r2, [r7, #24]
 8009070:	429a      	cmp	r2, r3
 8009072:	d10b      	bne.n	800908c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	60bb      	str	r3, [r7, #8]
}
 8009086:	bf00      	nop
 8009088:	bf00      	nop
 800908a:	e7fd      	b.n	8009088 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800908c:	69bb      	ldr	r3, [r7, #24]
 800908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009090:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009092:	69bb      	ldr	r3, [r7, #24]
 8009094:	69fa      	ldr	r2, [r7, #28]
 8009096:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	2b00      	cmp	r3, #0
 800909e:	db04      	blt.n	80090aa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	f1c3 0207 	rsb	r2, r3, #7
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	6959      	ldr	r1, [r3, #20]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4a19      	ldr	r2, [pc, #100]	@ (8009120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80090ba:	4413      	add	r3, r2
 80090bc:	4299      	cmp	r1, r3
 80090be:	d129      	bne.n	8009114 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fe fa79 	bl	80075bc <uxListRemove>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80090d0:	69bb      	ldr	r3, [r7, #24]
 80090d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d4:	2201      	movs	r2, #1
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	43da      	mvns	r2, r3
 80090dc:	4b11      	ldr	r3, [pc, #68]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4013      	ands	r3, r2
 80090e2:	4a10      	ldr	r2, [pc, #64]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80090e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ea:	2201      	movs	r2, #1
 80090ec:	409a      	lsls	r2, r3
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	4a0b      	ldr	r2, [pc, #44]	@ (8009124 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090fc:	4613      	mov	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4413      	add	r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a06      	ldr	r2, [pc, #24]	@ (8009120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009106:	441a      	add	r2, r3
 8009108:	69bb      	ldr	r3, [r7, #24]
 800910a:	3304      	adds	r3, #4
 800910c:	4619      	mov	r1, r3
 800910e:	4610      	mov	r0, r2
 8009110:	f7fe f9f7 	bl	8007502 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009114:	bf00      	nop
 8009116:	3720      	adds	r7, #32
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	24000aa8 	.word	0x24000aa8
 8009120:	24000aac 	.word	0x24000aac
 8009124:	24000bb0 	.word	0x24000bb0

08009128 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800912c:	4b07      	ldr	r3, [pc, #28]	@ (800914c <pvTaskIncrementMutexHeldCount+0x24>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009134:	4b05      	ldr	r3, [pc, #20]	@ (800914c <pvTaskIncrementMutexHeldCount+0x24>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800913a:	3201      	adds	r2, #1
 800913c:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800913e:	4b03      	ldr	r3, [pc, #12]	@ (800914c <pvTaskIncrementMutexHeldCount+0x24>)
 8009140:	681b      	ldr	r3, [r3, #0]
	}
 8009142:	4618      	mov	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	24000aa8 	.word	0x24000aa8

08009150 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800915a:	4b29      	ldr	r3, [pc, #164]	@ (8009200 <prvAddCurrentTaskToDelayedList+0xb0>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009160:	4b28      	ldr	r3, [pc, #160]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3304      	adds	r3, #4
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fa28 	bl	80075bc <uxListRemove>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10b      	bne.n	800918a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009172:	4b24      	ldr	r3, [pc, #144]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009178:	2201      	movs	r2, #1
 800917a:	fa02 f303 	lsl.w	r3, r2, r3
 800917e:	43da      	mvns	r2, r3
 8009180:	4b21      	ldr	r3, [pc, #132]	@ (8009208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4013      	ands	r3, r2
 8009186:	4a20      	ldr	r2, [pc, #128]	@ (8009208 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009188:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009190:	d10a      	bne.n	80091a8 <prvAddCurrentTaskToDelayedList+0x58>
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d007      	beq.n	80091a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009198:	4b1a      	ldr	r3, [pc, #104]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3304      	adds	r3, #4
 800919e:	4619      	mov	r1, r3
 80091a0:	481a      	ldr	r0, [pc, #104]	@ (800920c <prvAddCurrentTaskToDelayedList+0xbc>)
 80091a2:	f7fe f9ae 	bl	8007502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091a6:	e026      	b.n	80091f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4413      	add	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091b0:	4b14      	ldr	r3, [pc, #80]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d209      	bcs.n	80091d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091c0:	4b13      	ldr	r3, [pc, #76]	@ (8009210 <prvAddCurrentTaskToDelayedList+0xc0>)
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3304      	adds	r3, #4
 80091ca:	4619      	mov	r1, r3
 80091cc:	4610      	mov	r0, r2
 80091ce:	f7fe f9bc 	bl	800754a <vListInsert>
}
 80091d2:	e010      	b.n	80091f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009214 <prvAddCurrentTaskToDelayedList+0xc4>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f7fe f9b2 	bl	800754a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d202      	bcs.n	80091f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091f0:	4a09      	ldr	r2, [pc, #36]	@ (8009218 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	6013      	str	r3, [r2, #0]
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	24000bac 	.word	0x24000bac
 8009204:	24000aa8 	.word	0x24000aa8
 8009208:	24000bb0 	.word	0x24000bb0
 800920c:	24000b94 	.word	0x24000b94
 8009210:	24000b64 	.word	0x24000b64
 8009214:	24000b60 	.word	0x24000b60
 8009218:	24000bc8 	.word	0x24000bc8

0800921c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	3b04      	subs	r3, #4
 800922c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3b04      	subs	r3, #4
 800923a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	f023 0201 	bic.w	r2, r3, #1
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	3b04      	subs	r3, #4
 800924a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800924c:	4a0c      	ldr	r2, [pc, #48]	@ (8009280 <pxPortInitialiseStack+0x64>)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3b14      	subs	r3, #20
 8009256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	3b04      	subs	r3, #4
 8009262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f06f 0202 	mvn.w	r2, #2
 800926a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3b20      	subs	r3, #32
 8009270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009272:	68fb      	ldr	r3, [r7, #12]
}
 8009274:	4618      	mov	r0, r3
 8009276:	3714      	adds	r7, #20
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	08009285 	.word	0x08009285

08009284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800928a:	2300      	movs	r3, #0
 800928c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800928e:	4b13      	ldr	r3, [pc, #76]	@ (80092dc <prvTaskExitError+0x58>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009296:	d00b      	beq.n	80092b0 <prvTaskExitError+0x2c>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800929c:	f383 8811 	msr	BASEPRI, r3
 80092a0:	f3bf 8f6f 	isb	sy
 80092a4:	f3bf 8f4f 	dsb	sy
 80092a8:	60fb      	str	r3, [r7, #12]
}
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
 80092ae:	e7fd      	b.n	80092ac <prvTaskExitError+0x28>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60bb      	str	r3, [r7, #8]
}
 80092c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80092c4:	bf00      	nop
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0fc      	beq.n	80092c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	3714      	adds	r7, #20
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	24000010 	.word	0x24000010

080092e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092e0:	4b07      	ldr	r3, [pc, #28]	@ (8009300 <pxCurrentTCBConst2>)
 80092e2:	6819      	ldr	r1, [r3, #0]
 80092e4:	6808      	ldr	r0, [r1, #0]
 80092e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	f380 8809 	msr	PSP, r0
 80092ee:	f3bf 8f6f 	isb	sy
 80092f2:	f04f 0000 	mov.w	r0, #0
 80092f6:	f380 8811 	msr	BASEPRI, r0
 80092fa:	4770      	bx	lr
 80092fc:	f3af 8000 	nop.w

08009300 <pxCurrentTCBConst2>:
 8009300:	24000aa8 	.word	0x24000aa8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop

08009308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009308:	4808      	ldr	r0, [pc, #32]	@ (800932c <prvPortStartFirstTask+0x24>)
 800930a:	6800      	ldr	r0, [r0, #0]
 800930c:	6800      	ldr	r0, [r0, #0]
 800930e:	f380 8808 	msr	MSP, r0
 8009312:	f04f 0000 	mov.w	r0, #0
 8009316:	f380 8814 	msr	CONTROL, r0
 800931a:	b662      	cpsie	i
 800931c:	b661      	cpsie	f
 800931e:	f3bf 8f4f 	dsb	sy
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	df00      	svc	0
 8009328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800932a:	bf00      	nop
 800932c:	e000ed08 	.word	0xe000ed08

08009330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009336:	4b47      	ldr	r3, [pc, #284]	@ (8009454 <xPortStartScheduler+0x124>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a47      	ldr	r2, [pc, #284]	@ (8009458 <xPortStartScheduler+0x128>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10b      	bne.n	8009358 <xPortStartScheduler+0x28>
	__asm volatile
 8009340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009344:	f383 8811 	msr	BASEPRI, r3
 8009348:	f3bf 8f6f 	isb	sy
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	613b      	str	r3, [r7, #16]
}
 8009352:	bf00      	nop
 8009354:	bf00      	nop
 8009356:	e7fd      	b.n	8009354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009358:	4b3e      	ldr	r3, [pc, #248]	@ (8009454 <xPortStartScheduler+0x124>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a3f      	ldr	r2, [pc, #252]	@ (800945c <xPortStartScheduler+0x12c>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d10b      	bne.n	800937a <xPortStartScheduler+0x4a>
	__asm volatile
 8009362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009366:	f383 8811 	msr	BASEPRI, r3
 800936a:	f3bf 8f6f 	isb	sy
 800936e:	f3bf 8f4f 	dsb	sy
 8009372:	60fb      	str	r3, [r7, #12]
}
 8009374:	bf00      	nop
 8009376:	bf00      	nop
 8009378:	e7fd      	b.n	8009376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800937a:	4b39      	ldr	r3, [pc, #228]	@ (8009460 <xPortStartScheduler+0x130>)
 800937c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	22ff      	movs	r2, #255	@ 0xff
 800938a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	781b      	ldrb	r3, [r3, #0]
 8009390:	b2db      	uxtb	r3, r3
 8009392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800939c:	b2da      	uxtb	r2, r3
 800939e:	4b31      	ldr	r3, [pc, #196]	@ (8009464 <xPortStartScheduler+0x134>)
 80093a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093a2:	4b31      	ldr	r3, [pc, #196]	@ (8009468 <xPortStartScheduler+0x138>)
 80093a4:	2207      	movs	r2, #7
 80093a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093a8:	e009      	b.n	80093be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80093aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009468 <xPortStartScheduler+0x138>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4a2d      	ldr	r2, [pc, #180]	@ (8009468 <xPortStartScheduler+0x138>)
 80093b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093c6:	2b80      	cmp	r3, #128	@ 0x80
 80093c8:	d0ef      	beq.n	80093aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80093ca:	4b27      	ldr	r3, [pc, #156]	@ (8009468 <xPortStartScheduler+0x138>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f1c3 0307 	rsb	r3, r3, #7
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d00b      	beq.n	80093ee <xPortStartScheduler+0xbe>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	60bb      	str	r3, [r7, #8]
}
 80093e8:	bf00      	nop
 80093ea:	bf00      	nop
 80093ec:	e7fd      	b.n	80093ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009468 <xPortStartScheduler+0x138>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009468 <xPortStartScheduler+0x138>)
 80093f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009468 <xPortStartScheduler+0x138>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009400:	4a19      	ldr	r2, [pc, #100]	@ (8009468 <xPortStartScheduler+0x138>)
 8009402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	b2da      	uxtb	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800940c:	4b17      	ldr	r3, [pc, #92]	@ (800946c <xPortStartScheduler+0x13c>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a16      	ldr	r2, [pc, #88]	@ (800946c <xPortStartScheduler+0x13c>)
 8009412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009418:	4b14      	ldr	r3, [pc, #80]	@ (800946c <xPortStartScheduler+0x13c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a13      	ldr	r2, [pc, #76]	@ (800946c <xPortStartScheduler+0x13c>)
 800941e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009424:	f000 f8da 	bl	80095dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009428:	4b11      	ldr	r3, [pc, #68]	@ (8009470 <xPortStartScheduler+0x140>)
 800942a:	2200      	movs	r2, #0
 800942c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800942e:	f000 f8f9 	bl	8009624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009432:	4b10      	ldr	r3, [pc, #64]	@ (8009474 <xPortStartScheduler+0x144>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a0f      	ldr	r2, [pc, #60]	@ (8009474 <xPortStartScheduler+0x144>)
 8009438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800943c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800943e:	f7ff ff63 	bl	8009308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009442:	f7ff fa75 	bl	8008930 <vTaskSwitchContext>
	prvTaskExitError();
 8009446:	f7ff ff1d 	bl	8009284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3718      	adds	r7, #24
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	e000ed00 	.word	0xe000ed00
 8009458:	410fc271 	.word	0x410fc271
 800945c:	410fc270 	.word	0x410fc270
 8009460:	e000e400 	.word	0xe000e400
 8009464:	24000bd4 	.word	0x24000bd4
 8009468:	24000bd8 	.word	0x24000bd8
 800946c:	e000ed20 	.word	0xe000ed20
 8009470:	24000010 	.word	0x24000010
 8009474:	e000ef34 	.word	0xe000ef34

08009478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
	__asm volatile
 800947e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	607b      	str	r3, [r7, #4]
}
 8009490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009492:	4b10      	ldr	r3, [pc, #64]	@ (80094d4 <vPortEnterCritical+0x5c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3301      	adds	r3, #1
 8009498:	4a0e      	ldr	r2, [pc, #56]	@ (80094d4 <vPortEnterCritical+0x5c>)
 800949a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800949c:	4b0d      	ldr	r3, [pc, #52]	@ (80094d4 <vPortEnterCritical+0x5c>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d110      	bne.n	80094c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80094a4:	4b0c      	ldr	r3, [pc, #48]	@ (80094d8 <vPortEnterCritical+0x60>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00b      	beq.n	80094c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80094ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b2:	f383 8811 	msr	BASEPRI, r3
 80094b6:	f3bf 8f6f 	isb	sy
 80094ba:	f3bf 8f4f 	dsb	sy
 80094be:	603b      	str	r3, [r7, #0]
}
 80094c0:	bf00      	nop
 80094c2:	bf00      	nop
 80094c4:	e7fd      	b.n	80094c2 <vPortEnterCritical+0x4a>
	}
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop
 80094d4:	24000010 	.word	0x24000010
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094e2:	4b12      	ldr	r3, [pc, #72]	@ (800952c <vPortExitCritical+0x50>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d10b      	bne.n	8009502 <vPortExitCritical+0x26>
	__asm volatile
 80094ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ee:	f383 8811 	msr	BASEPRI, r3
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	607b      	str	r3, [r7, #4]
}
 80094fc:	bf00      	nop
 80094fe:	bf00      	nop
 8009500:	e7fd      	b.n	80094fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009502:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <vPortExitCritical+0x50>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3b01      	subs	r3, #1
 8009508:	4a08      	ldr	r2, [pc, #32]	@ (800952c <vPortExitCritical+0x50>)
 800950a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800950c:	4b07      	ldr	r3, [pc, #28]	@ (800952c <vPortExitCritical+0x50>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <vPortExitCritical+0x44>
 8009514:	2300      	movs	r3, #0
 8009516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f383 8811 	msr	BASEPRI, r3
}
 800951e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	24000010 	.word	0x24000010

08009530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009530:	f3ef 8009 	mrs	r0, PSP
 8009534:	f3bf 8f6f 	isb	sy
 8009538:	4b15      	ldr	r3, [pc, #84]	@ (8009590 <pxCurrentTCBConst>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	f01e 0f10 	tst.w	lr, #16
 8009540:	bf08      	it	eq
 8009542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800954a:	6010      	str	r0, [r2, #0]
 800954c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009554:	f380 8811 	msr	BASEPRI, r0
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f7ff f9e6 	bl	8008930 <vTaskSwitchContext>
 8009564:	f04f 0000 	mov.w	r0, #0
 8009568:	f380 8811 	msr	BASEPRI, r0
 800956c:	bc09      	pop	{r0, r3}
 800956e:	6819      	ldr	r1, [r3, #0]
 8009570:	6808      	ldr	r0, [r1, #0]
 8009572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009576:	f01e 0f10 	tst.w	lr, #16
 800957a:	bf08      	it	eq
 800957c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009580:	f380 8809 	msr	PSP, r0
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	4770      	bx	lr
 800958a:	bf00      	nop
 800958c:	f3af 8000 	nop.w

08009590 <pxCurrentTCBConst>:
 8009590:	24000aa8 	.word	0x24000aa8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop

08009598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	607b      	str	r3, [r7, #4]
}
 80095b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80095b2:	f7ff f903 	bl	80087bc <xTaskIncrementTick>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <SysTick_Handler+0x40>)
 80095be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c2:	601a      	str	r2, [r3, #0]
 80095c4:	2300      	movs	r3, #0
 80095c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80095d0:	bf00      	nop
 80095d2:	3708      	adds	r7, #8
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	e000ed04 	.word	0xe000ed04

080095dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80095dc:	b480      	push	{r7}
 80095de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095e0:	4b0b      	ldr	r3, [pc, #44]	@ (8009610 <vPortSetupTimerInterrupt+0x34>)
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <vPortSetupTimerInterrupt+0x38>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009618 <vPortSetupTimerInterrupt+0x3c>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	@ (800961c <vPortSetupTimerInterrupt+0x40>)
 80095f2:	fba2 2303 	umull	r2, r3, r2, r3
 80095f6:	099b      	lsrs	r3, r3, #6
 80095f8:	4a09      	ldr	r2, [pc, #36]	@ (8009620 <vPortSetupTimerInterrupt+0x44>)
 80095fa:	3b01      	subs	r3, #1
 80095fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095fe:	4b04      	ldr	r3, [pc, #16]	@ (8009610 <vPortSetupTimerInterrupt+0x34>)
 8009600:	2207      	movs	r2, #7
 8009602:	601a      	str	r2, [r3, #0]
}
 8009604:	bf00      	nop
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	e000e010 	.word	0xe000e010
 8009614:	e000e018 	.word	0xe000e018
 8009618:	24000000 	.word	0x24000000
 800961c:	10624dd3 	.word	0x10624dd3
 8009620:	e000e014 	.word	0xe000e014

08009624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009634 <vPortEnableVFP+0x10>
 8009628:	6801      	ldr	r1, [r0, #0]
 800962a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800962e:	6001      	str	r1, [r0, #0]
 8009630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009632:	bf00      	nop
 8009634:	e000ed88 	.word	0xe000ed88

08009638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800963e:	f3ef 8305 	mrs	r3, IPSR
 8009642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2b0f      	cmp	r3, #15
 8009648:	d915      	bls.n	8009676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800964a:	4a18      	ldr	r2, [pc, #96]	@ (80096ac <vPortValidateInterruptPriority+0x74>)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	4413      	add	r3, r2
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009654:	4b16      	ldr	r3, [pc, #88]	@ (80096b0 <vPortValidateInterruptPriority+0x78>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	7afa      	ldrb	r2, [r7, #11]
 800965a:	429a      	cmp	r2, r3
 800965c:	d20b      	bcs.n	8009676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009662:	f383 8811 	msr	BASEPRI, r3
 8009666:	f3bf 8f6f 	isb	sy
 800966a:	f3bf 8f4f 	dsb	sy
 800966e:	607b      	str	r3, [r7, #4]
}
 8009670:	bf00      	nop
 8009672:	bf00      	nop
 8009674:	e7fd      	b.n	8009672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009676:	4b0f      	ldr	r3, [pc, #60]	@ (80096b4 <vPortValidateInterruptPriority+0x7c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800967e:	4b0e      	ldr	r3, [pc, #56]	@ (80096b8 <vPortValidateInterruptPriority+0x80>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	429a      	cmp	r2, r3
 8009684:	d90b      	bls.n	800969e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800968a:	f383 8811 	msr	BASEPRI, r3
 800968e:	f3bf 8f6f 	isb	sy
 8009692:	f3bf 8f4f 	dsb	sy
 8009696:	603b      	str	r3, [r7, #0]
}
 8009698:	bf00      	nop
 800969a:	bf00      	nop
 800969c:	e7fd      	b.n	800969a <vPortValidateInterruptPriority+0x62>
	}
 800969e:	bf00      	nop
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	e000e3f0 	.word	0xe000e3f0
 80096b0:	24000bd4 	.word	0x24000bd4
 80096b4:	e000ed0c 	.word	0xe000ed0c
 80096b8:	24000bd8 	.word	0x24000bd8

080096bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	@ 0x28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80096c8:	f7fe ffcc 	bl	8008664 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80096cc:	4b5c      	ldr	r3, [pc, #368]	@ (8009840 <pvPortMalloc+0x184>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80096d4:	f000 f924 	bl	8009920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80096d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009844 <pvPortMalloc+0x188>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4013      	ands	r3, r2
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f040 8095 	bne.w	8009810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01e      	beq.n	800972a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80096ec:	2208      	movs	r2, #8
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4413      	add	r3, r2
 80096f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d015      	beq.n	800972a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f023 0307 	bic.w	r3, r3, #7
 8009704:	3308      	adds	r3, #8
 8009706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f003 0307 	and.w	r3, r3, #7
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <pvPortMalloc+0x6e>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	617b      	str	r3, [r7, #20]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d06f      	beq.n	8009810 <pvPortMalloc+0x154>
 8009730:	4b45      	ldr	r3, [pc, #276]	@ (8009848 <pvPortMalloc+0x18c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	429a      	cmp	r2, r3
 8009738:	d86a      	bhi.n	8009810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800973a:	4b44      	ldr	r3, [pc, #272]	@ (800984c <pvPortMalloc+0x190>)
 800973c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800973e:	4b43      	ldr	r3, [pc, #268]	@ (800984c <pvPortMalloc+0x190>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009744:	e004      	b.n	8009750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800974a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d903      	bls.n	8009762 <pvPortMalloc+0xa6>
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1f1      	bne.n	8009746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009762:	4b37      	ldr	r3, [pc, #220]	@ (8009840 <pvPortMalloc+0x184>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009768:	429a      	cmp	r2, r3
 800976a:	d051      	beq.n	8009810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	2208      	movs	r2, #8
 8009772:	4413      	add	r3, r2
 8009774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	1ad2      	subs	r2, r2, r3
 8009786:	2308      	movs	r3, #8
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	429a      	cmp	r2, r3
 800978c:	d920      	bls.n	80097d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800978e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	4413      	add	r3, r2
 8009794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f003 0307 	and.w	r3, r3, #7
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <pvPortMalloc+0xfc>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	613b      	str	r3, [r7, #16]
}
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
 80097b6:	e7fd      	b.n	80097b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80097ca:	69b8      	ldr	r0, [r7, #24]
 80097cc:	f000 f90a 	bl	80099e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80097d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009848 <pvPortMalloc+0x18c>)
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	4a1b      	ldr	r2, [pc, #108]	@ (8009848 <pvPortMalloc+0x18c>)
 80097dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80097de:	4b1a      	ldr	r3, [pc, #104]	@ (8009848 <pvPortMalloc+0x18c>)
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009850 <pvPortMalloc+0x194>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d203      	bcs.n	80097f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097ea:	4b17      	ldr	r3, [pc, #92]	@ (8009848 <pvPortMalloc+0x18c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a18      	ldr	r2, [pc, #96]	@ (8009850 <pvPortMalloc+0x194>)
 80097f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	4b13      	ldr	r3, [pc, #76]	@ (8009844 <pvPortMalloc+0x188>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	431a      	orrs	r2, r3
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	2200      	movs	r2, #0
 8009804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009806:	4b13      	ldr	r3, [pc, #76]	@ (8009854 <pvPortMalloc+0x198>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3301      	adds	r3, #1
 800980c:	4a11      	ldr	r2, [pc, #68]	@ (8009854 <pvPortMalloc+0x198>)
 800980e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009810:	f7fe ff36 	bl	8008680 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	f003 0307 	and.w	r3, r3, #7
 800981a:	2b00      	cmp	r3, #0
 800981c:	d00b      	beq.n	8009836 <pvPortMalloc+0x17a>
	__asm volatile
 800981e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	60fb      	str	r3, [r7, #12]
}
 8009830:	bf00      	nop
 8009832:	bf00      	nop
 8009834:	e7fd      	b.n	8009832 <pvPortMalloc+0x176>
	return pvReturn;
 8009836:	69fb      	ldr	r3, [r7, #28]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3728      	adds	r7, #40	@ 0x28
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	240047e4 	.word	0x240047e4
 8009844:	240047f8 	.word	0x240047f8
 8009848:	240047e8 	.word	0x240047e8
 800984c:	240047dc 	.word	0x240047dc
 8009850:	240047ec 	.word	0x240047ec
 8009854:	240047f0 	.word	0x240047f0

08009858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d04f      	beq.n	800990a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800986a:	2308      	movs	r3, #8
 800986c:	425b      	negs	r3, r3
 800986e:	697a      	ldr	r2, [r7, #20]
 8009870:	4413      	add	r3, r2
 8009872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	685a      	ldr	r2, [r3, #4]
 800987c:	4b25      	ldr	r3, [pc, #148]	@ (8009914 <vPortFree+0xbc>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4013      	ands	r3, r2
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10b      	bne.n	800989e <vPortFree+0x46>
	__asm volatile
 8009886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800988a:	f383 8811 	msr	BASEPRI, r3
 800988e:	f3bf 8f6f 	isb	sy
 8009892:	f3bf 8f4f 	dsb	sy
 8009896:	60fb      	str	r3, [r7, #12]
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	e7fd      	b.n	800989a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00b      	beq.n	80098be <vPortFree+0x66>
	__asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60bb      	str	r3, [r7, #8]
}
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	685a      	ldr	r2, [r3, #4]
 80098c2:	4b14      	ldr	r3, [pc, #80]	@ (8009914 <vPortFree+0xbc>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4013      	ands	r3, r2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01e      	beq.n	800990a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d11a      	bne.n	800990a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	685a      	ldr	r2, [r3, #4]
 80098d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009914 <vPortFree+0xbc>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	43db      	mvns	r3, r3
 80098de:	401a      	ands	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098e4:	f7fe febe 	bl	8008664 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685a      	ldr	r2, [r3, #4]
 80098ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009918 <vPortFree+0xc0>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4413      	add	r3, r2
 80098f2:	4a09      	ldr	r2, [pc, #36]	@ (8009918 <vPortFree+0xc0>)
 80098f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098f6:	6938      	ldr	r0, [r7, #16]
 80098f8:	f000 f874 	bl	80099e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098fc:	4b07      	ldr	r3, [pc, #28]	@ (800991c <vPortFree+0xc4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	4a06      	ldr	r2, [pc, #24]	@ (800991c <vPortFree+0xc4>)
 8009904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009906:	f7fe febb 	bl	8008680 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800990a:	bf00      	nop
 800990c:	3718      	adds	r7, #24
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
 8009912:	bf00      	nop
 8009914:	240047f8 	.word	0x240047f8
 8009918:	240047e8 	.word	0x240047e8
 800991c:	240047f4 	.word	0x240047f4

08009920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009926:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800992a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800992c:	4b27      	ldr	r3, [pc, #156]	@ (80099cc <prvHeapInit+0xac>)
 800992e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f003 0307 	and.w	r3, r3, #7
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00c      	beq.n	8009954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	3307      	adds	r3, #7
 800993e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0307 	bic.w	r3, r3, #7
 8009946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	1ad3      	subs	r3, r2, r3
 800994e:	4a1f      	ldr	r2, [pc, #124]	@ (80099cc <prvHeapInit+0xac>)
 8009950:	4413      	add	r3, r2
 8009952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009958:	4a1d      	ldr	r2, [pc, #116]	@ (80099d0 <prvHeapInit+0xb0>)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800995e:	4b1c      	ldr	r3, [pc, #112]	@ (80099d0 <prvHeapInit+0xb0>)
 8009960:	2200      	movs	r2, #0
 8009962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	4413      	add	r3, r2
 800996a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800996c:	2208      	movs	r2, #8
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f023 0307 	bic.w	r3, r3, #7
 800997a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4a15      	ldr	r2, [pc, #84]	@ (80099d4 <prvHeapInit+0xb4>)
 8009980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009982:	4b14      	ldr	r3, [pc, #80]	@ (80099d4 <prvHeapInit+0xb4>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800998a:	4b12      	ldr	r3, [pc, #72]	@ (80099d4 <prvHeapInit+0xb4>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	1ad2      	subs	r2, r2, r3
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099a0:	4b0c      	ldr	r3, [pc, #48]	@ (80099d4 <prvHeapInit+0xb4>)
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	4a0a      	ldr	r2, [pc, #40]	@ (80099d8 <prvHeapInit+0xb8>)
 80099ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	4a09      	ldr	r2, [pc, #36]	@ (80099dc <prvHeapInit+0xbc>)
 80099b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80099b8:	4b09      	ldr	r3, [pc, #36]	@ (80099e0 <prvHeapInit+0xc0>)
 80099ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80099be:	601a      	str	r2, [r3, #0]
}
 80099c0:	bf00      	nop
 80099c2:	3714      	adds	r7, #20
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	24000bdc 	.word	0x24000bdc
 80099d0:	240047dc 	.word	0x240047dc
 80099d4:	240047e4 	.word	0x240047e4
 80099d8:	240047ec 	.word	0x240047ec
 80099dc:	240047e8 	.word	0x240047e8
 80099e0:	240047f8 	.word	0x240047f8

080099e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099ec:	4b28      	ldr	r3, [pc, #160]	@ (8009a90 <prvInsertBlockIntoFreeList+0xac>)
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e002      	b.n	80099f8 <prvInsertBlockIntoFreeList+0x14>
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d8f7      	bhi.n	80099f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	68ba      	ldr	r2, [r7, #8]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	429a      	cmp	r2, r3
 8009a12:	d108      	bne.n	8009a26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	441a      	add	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	441a      	add	r2, r3
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d118      	bne.n	8009a6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	4b15      	ldr	r3, [pc, #84]	@ (8009a94 <prvInsertBlockIntoFreeList+0xb0>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	d00d      	beq.n	8009a62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	685a      	ldr	r2, [r3, #4]
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	441a      	add	r2, r3
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	e008      	b.n	8009a74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a62:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <prvInsertBlockIntoFreeList+0xb0>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	e003      	b.n	8009a74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d002      	beq.n	8009a82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a82:	bf00      	nop
 8009a84:	3714      	adds	r7, #20
 8009a86:	46bd      	mov	sp, r7
 8009a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	240047dc 	.word	0x240047dc
 8009a94:	240047e4 	.word	0x240047e4

08009a98 <_Znwj>:
 8009a98:	2801      	cmp	r0, #1
 8009a9a:	bf38      	it	cc
 8009a9c:	2001      	movcc	r0, #1
 8009a9e:	b510      	push	{r4, lr}
 8009aa0:	4604      	mov	r4, r0
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f81a 	bl	8009adc <malloc>
 8009aa8:	b100      	cbz	r0, 8009aac <_Znwj+0x14>
 8009aaa:	bd10      	pop	{r4, pc}
 8009aac:	f000 f806 	bl	8009abc <_ZSt15get_new_handlerv>
 8009ab0:	b908      	cbnz	r0, 8009ab6 <_Znwj+0x1e>
 8009ab2:	f000 f80b 	bl	8009acc <abort>
 8009ab6:	4780      	blx	r0
 8009ab8:	e7f3      	b.n	8009aa2 <_Znwj+0xa>
	...

08009abc <_ZSt15get_new_handlerv>:
 8009abc:	4b02      	ldr	r3, [pc, #8]	@ (8009ac8 <_ZSt15get_new_handlerv+0xc>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	f3bf 8f5b 	dmb	ish
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	240047fc 	.word	0x240047fc

08009acc <abort>:
 8009acc:	b508      	push	{r3, lr}
 8009ace:	2006      	movs	r0, #6
 8009ad0:	f000 f924 	bl	8009d1c <raise>
 8009ad4:	2001      	movs	r0, #1
 8009ad6:	f7f7 fc09 	bl	80012ec <_exit>
	...

08009adc <malloc>:
 8009adc:	4b02      	ldr	r3, [pc, #8]	@ (8009ae8 <malloc+0xc>)
 8009ade:	4601      	mov	r1, r0
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	f000 b825 	b.w	8009b30 <_malloc_r>
 8009ae6:	bf00      	nop
 8009ae8:	24000014 	.word	0x24000014

08009aec <sbrk_aligned>:
 8009aec:	b570      	push	{r4, r5, r6, lr}
 8009aee:	4e0f      	ldr	r6, [pc, #60]	@ (8009b2c <sbrk_aligned+0x40>)
 8009af0:	460c      	mov	r4, r1
 8009af2:	6831      	ldr	r1, [r6, #0]
 8009af4:	4605      	mov	r5, r0
 8009af6:	b911      	cbnz	r1, 8009afe <sbrk_aligned+0x12>
 8009af8:	f000 f982 	bl	8009e00 <_sbrk_r>
 8009afc:	6030      	str	r0, [r6, #0]
 8009afe:	4621      	mov	r1, r4
 8009b00:	4628      	mov	r0, r5
 8009b02:	f000 f97d 	bl	8009e00 <_sbrk_r>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d103      	bne.n	8009b12 <sbrk_aligned+0x26>
 8009b0a:	f04f 34ff 	mov.w	r4, #4294967295
 8009b0e:	4620      	mov	r0, r4
 8009b10:	bd70      	pop	{r4, r5, r6, pc}
 8009b12:	1cc4      	adds	r4, r0, #3
 8009b14:	f024 0403 	bic.w	r4, r4, #3
 8009b18:	42a0      	cmp	r0, r4
 8009b1a:	d0f8      	beq.n	8009b0e <sbrk_aligned+0x22>
 8009b1c:	1a21      	subs	r1, r4, r0
 8009b1e:	4628      	mov	r0, r5
 8009b20:	f000 f96e 	bl	8009e00 <_sbrk_r>
 8009b24:	3001      	adds	r0, #1
 8009b26:	d1f2      	bne.n	8009b0e <sbrk_aligned+0x22>
 8009b28:	e7ef      	b.n	8009b0a <sbrk_aligned+0x1e>
 8009b2a:	bf00      	nop
 8009b2c:	24004800 	.word	0x24004800

08009b30 <_malloc_r>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	1ccd      	adds	r5, r1, #3
 8009b36:	f025 0503 	bic.w	r5, r5, #3
 8009b3a:	3508      	adds	r5, #8
 8009b3c:	2d0c      	cmp	r5, #12
 8009b3e:	bf38      	it	cc
 8009b40:	250c      	movcc	r5, #12
 8009b42:	2d00      	cmp	r5, #0
 8009b44:	4606      	mov	r6, r0
 8009b46:	db01      	blt.n	8009b4c <_malloc_r+0x1c>
 8009b48:	42a9      	cmp	r1, r5
 8009b4a:	d904      	bls.n	8009b56 <_malloc_r+0x26>
 8009b4c:	230c      	movs	r3, #12
 8009b4e:	6033      	str	r3, [r6, #0]
 8009b50:	2000      	movs	r0, #0
 8009b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c2c <_malloc_r+0xfc>
 8009b5a:	f000 f869 	bl	8009c30 <__malloc_lock>
 8009b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8009b62:	461c      	mov	r4, r3
 8009b64:	bb44      	cbnz	r4, 8009bb8 <_malloc_r+0x88>
 8009b66:	4629      	mov	r1, r5
 8009b68:	4630      	mov	r0, r6
 8009b6a:	f7ff ffbf 	bl	8009aec <sbrk_aligned>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	4604      	mov	r4, r0
 8009b72:	d158      	bne.n	8009c26 <_malloc_r+0xf6>
 8009b74:	f8d8 4000 	ldr.w	r4, [r8]
 8009b78:	4627      	mov	r7, r4
 8009b7a:	2f00      	cmp	r7, #0
 8009b7c:	d143      	bne.n	8009c06 <_malloc_r+0xd6>
 8009b7e:	2c00      	cmp	r4, #0
 8009b80:	d04b      	beq.n	8009c1a <_malloc_r+0xea>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	4639      	mov	r1, r7
 8009b86:	4630      	mov	r0, r6
 8009b88:	eb04 0903 	add.w	r9, r4, r3
 8009b8c:	f000 f938 	bl	8009e00 <_sbrk_r>
 8009b90:	4581      	cmp	r9, r0
 8009b92:	d142      	bne.n	8009c1a <_malloc_r+0xea>
 8009b94:	6821      	ldr	r1, [r4, #0]
 8009b96:	1a6d      	subs	r5, r5, r1
 8009b98:	4629      	mov	r1, r5
 8009b9a:	4630      	mov	r0, r6
 8009b9c:	f7ff ffa6 	bl	8009aec <sbrk_aligned>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d03a      	beq.n	8009c1a <_malloc_r+0xea>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	442b      	add	r3, r5
 8009ba8:	6023      	str	r3, [r4, #0]
 8009baa:	f8d8 3000 	ldr.w	r3, [r8]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	bb62      	cbnz	r2, 8009c0c <_malloc_r+0xdc>
 8009bb2:	f8c8 7000 	str.w	r7, [r8]
 8009bb6:	e00f      	b.n	8009bd8 <_malloc_r+0xa8>
 8009bb8:	6822      	ldr	r2, [r4, #0]
 8009bba:	1b52      	subs	r2, r2, r5
 8009bbc:	d420      	bmi.n	8009c00 <_malloc_r+0xd0>
 8009bbe:	2a0b      	cmp	r2, #11
 8009bc0:	d917      	bls.n	8009bf2 <_malloc_r+0xc2>
 8009bc2:	1961      	adds	r1, r4, r5
 8009bc4:	42a3      	cmp	r3, r4
 8009bc6:	6025      	str	r5, [r4, #0]
 8009bc8:	bf18      	it	ne
 8009bca:	6059      	strne	r1, [r3, #4]
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	bf08      	it	eq
 8009bd0:	f8c8 1000 	streq.w	r1, [r8]
 8009bd4:	5162      	str	r2, [r4, r5]
 8009bd6:	604b      	str	r3, [r1, #4]
 8009bd8:	4630      	mov	r0, r6
 8009bda:	f000 f82f 	bl	8009c3c <__malloc_unlock>
 8009bde:	f104 000b 	add.w	r0, r4, #11
 8009be2:	1d23      	adds	r3, r4, #4
 8009be4:	f020 0007 	bic.w	r0, r0, #7
 8009be8:	1ac2      	subs	r2, r0, r3
 8009bea:	bf1c      	itt	ne
 8009bec:	1a1b      	subne	r3, r3, r0
 8009bee:	50a3      	strne	r3, [r4, r2]
 8009bf0:	e7af      	b.n	8009b52 <_malloc_r+0x22>
 8009bf2:	6862      	ldr	r2, [r4, #4]
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	bf0c      	ite	eq
 8009bf8:	f8c8 2000 	streq.w	r2, [r8]
 8009bfc:	605a      	strne	r2, [r3, #4]
 8009bfe:	e7eb      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c00:	4623      	mov	r3, r4
 8009c02:	6864      	ldr	r4, [r4, #4]
 8009c04:	e7ae      	b.n	8009b64 <_malloc_r+0x34>
 8009c06:	463c      	mov	r4, r7
 8009c08:	687f      	ldr	r7, [r7, #4]
 8009c0a:	e7b6      	b.n	8009b7a <_malloc_r+0x4a>
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d1fb      	bne.n	8009c0c <_malloc_r+0xdc>
 8009c14:	2300      	movs	r3, #0
 8009c16:	6053      	str	r3, [r2, #4]
 8009c18:	e7de      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c1a:	230c      	movs	r3, #12
 8009c1c:	6033      	str	r3, [r6, #0]
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f000 f80c 	bl	8009c3c <__malloc_unlock>
 8009c24:	e794      	b.n	8009b50 <_malloc_r+0x20>
 8009c26:	6005      	str	r5, [r0, #0]
 8009c28:	e7d6      	b.n	8009bd8 <_malloc_r+0xa8>
 8009c2a:	bf00      	nop
 8009c2c:	24004804 	.word	0x24004804

08009c30 <__malloc_lock>:
 8009c30:	4801      	ldr	r0, [pc, #4]	@ (8009c38 <__malloc_lock+0x8>)
 8009c32:	f000 b91f 	b.w	8009e74 <__retarget_lock_acquire_recursive>
 8009c36:	bf00      	nop
 8009c38:	24004944 	.word	0x24004944

08009c3c <__malloc_unlock>:
 8009c3c:	4801      	ldr	r0, [pc, #4]	@ (8009c44 <__malloc_unlock+0x8>)
 8009c3e:	f000 b91a 	b.w	8009e76 <__retarget_lock_release_recursive>
 8009c42:	bf00      	nop
 8009c44:	24004944 	.word	0x24004944

08009c48 <_vsniprintf_r>:
 8009c48:	b530      	push	{r4, r5, lr}
 8009c4a:	4614      	mov	r4, r2
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	b09b      	sub	sp, #108	@ 0x6c
 8009c50:	4605      	mov	r5, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	da05      	bge.n	8009c62 <_vsniprintf_r+0x1a>
 8009c56:	238b      	movs	r3, #139	@ 0x8b
 8009c58:	6003      	str	r3, [r0, #0]
 8009c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5e:	b01b      	add	sp, #108	@ 0x6c
 8009c60:	bd30      	pop	{r4, r5, pc}
 8009c62:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c66:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009c6a:	bf14      	ite	ne
 8009c6c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c70:	4623      	moveq	r3, r4
 8009c72:	9302      	str	r3, [sp, #8]
 8009c74:	9305      	str	r3, [sp, #20]
 8009c76:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c7a:	9100      	str	r1, [sp, #0]
 8009c7c:	9104      	str	r1, [sp, #16]
 8009c7e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009c82:	4669      	mov	r1, sp
 8009c84:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009c86:	f000 f9ab 	bl	8009fe0 <_svfiprintf_r>
 8009c8a:	1c43      	adds	r3, r0, #1
 8009c8c:	bfbc      	itt	lt
 8009c8e:	238b      	movlt	r3, #139	@ 0x8b
 8009c90:	602b      	strlt	r3, [r5, #0]
 8009c92:	2c00      	cmp	r4, #0
 8009c94:	d0e3      	beq.n	8009c5e <_vsniprintf_r+0x16>
 8009c96:	9b00      	ldr	r3, [sp, #0]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e7df      	b.n	8009c5e <_vsniprintf_r+0x16>
	...

08009ca0 <vsniprintf>:
 8009ca0:	b507      	push	{r0, r1, r2, lr}
 8009ca2:	9300      	str	r3, [sp, #0]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	460a      	mov	r2, r1
 8009ca8:	4601      	mov	r1, r0
 8009caa:	4803      	ldr	r0, [pc, #12]	@ (8009cb8 <vsniprintf+0x18>)
 8009cac:	6800      	ldr	r0, [r0, #0]
 8009cae:	f7ff ffcb 	bl	8009c48 <_vsniprintf_r>
 8009cb2:	b003      	add	sp, #12
 8009cb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009cb8:	24000014 	.word	0x24000014

08009cbc <memset>:
 8009cbc:	4402      	add	r2, r0
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d100      	bne.n	8009cc6 <memset+0xa>
 8009cc4:	4770      	bx	lr
 8009cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cca:	e7f9      	b.n	8009cc0 <memset+0x4>

08009ccc <_raise_r>:
 8009ccc:	291f      	cmp	r1, #31
 8009cce:	b538      	push	{r3, r4, r5, lr}
 8009cd0:	4605      	mov	r5, r0
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	d904      	bls.n	8009ce0 <_raise_r+0x14>
 8009cd6:	2316      	movs	r3, #22
 8009cd8:	6003      	str	r3, [r0, #0]
 8009cda:	f04f 30ff 	mov.w	r0, #4294967295
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ce2:	b112      	cbz	r2, 8009cea <_raise_r+0x1e>
 8009ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ce8:	b94b      	cbnz	r3, 8009cfe <_raise_r+0x32>
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f886 	bl	8009dfc <_getpid_r>
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	4601      	mov	r1, r0
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cfa:	f000 b86d 	b.w	8009dd8 <_kill_r>
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d00a      	beq.n	8009d18 <_raise_r+0x4c>
 8009d02:	1c59      	adds	r1, r3, #1
 8009d04:	d103      	bne.n	8009d0e <_raise_r+0x42>
 8009d06:	2316      	movs	r3, #22
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	e7e7      	b.n	8009cde <_raise_r+0x12>
 8009d0e:	2100      	movs	r1, #0
 8009d10:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d14:	4620      	mov	r0, r4
 8009d16:	4798      	blx	r3
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e7e0      	b.n	8009cde <_raise_r+0x12>

08009d1c <raise>:
 8009d1c:	4b02      	ldr	r3, [pc, #8]	@ (8009d28 <raise+0xc>)
 8009d1e:	4601      	mov	r1, r0
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	f7ff bfd3 	b.w	8009ccc <_raise_r>
 8009d26:	bf00      	nop
 8009d28:	24000014 	.word	0x24000014

08009d2c <_reclaim_reent>:
 8009d2c:	4b29      	ldr	r3, [pc, #164]	@ (8009dd4 <_reclaim_reent+0xa8>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4283      	cmp	r3, r0
 8009d32:	b570      	push	{r4, r5, r6, lr}
 8009d34:	4604      	mov	r4, r0
 8009d36:	d04b      	beq.n	8009dd0 <_reclaim_reent+0xa4>
 8009d38:	69c3      	ldr	r3, [r0, #28]
 8009d3a:	b1ab      	cbz	r3, 8009d68 <_reclaim_reent+0x3c>
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	b16b      	cbz	r3, 8009d5c <_reclaim_reent+0x30>
 8009d40:	2500      	movs	r5, #0
 8009d42:	69e3      	ldr	r3, [r4, #28]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	5959      	ldr	r1, [r3, r5]
 8009d48:	2900      	cmp	r1, #0
 8009d4a:	d13b      	bne.n	8009dc4 <_reclaim_reent+0x98>
 8009d4c:	3504      	adds	r5, #4
 8009d4e:	2d80      	cmp	r5, #128	@ 0x80
 8009d50:	d1f7      	bne.n	8009d42 <_reclaim_reent+0x16>
 8009d52:	69e3      	ldr	r3, [r4, #28]
 8009d54:	4620      	mov	r0, r4
 8009d56:	68d9      	ldr	r1, [r3, #12]
 8009d58:	f000 f89c 	bl	8009e94 <_free_r>
 8009d5c:	69e3      	ldr	r3, [r4, #28]
 8009d5e:	6819      	ldr	r1, [r3, #0]
 8009d60:	b111      	cbz	r1, 8009d68 <_reclaim_reent+0x3c>
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 f896 	bl	8009e94 <_free_r>
 8009d68:	6961      	ldr	r1, [r4, #20]
 8009d6a:	b111      	cbz	r1, 8009d72 <_reclaim_reent+0x46>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f891 	bl	8009e94 <_free_r>
 8009d72:	69e1      	ldr	r1, [r4, #28]
 8009d74:	b111      	cbz	r1, 8009d7c <_reclaim_reent+0x50>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f88c 	bl	8009e94 <_free_r>
 8009d7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d7e:	b111      	cbz	r1, 8009d86 <_reclaim_reent+0x5a>
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 f887 	bl	8009e94 <_free_r>
 8009d86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d88:	b111      	cbz	r1, 8009d90 <_reclaim_reent+0x64>
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 f882 	bl	8009e94 <_free_r>
 8009d90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d92:	b111      	cbz	r1, 8009d9a <_reclaim_reent+0x6e>
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 f87d 	bl	8009e94 <_free_r>
 8009d9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d9c:	b111      	cbz	r1, 8009da4 <_reclaim_reent+0x78>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 f878 	bl	8009e94 <_free_r>
 8009da4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009da6:	b111      	cbz	r1, 8009dae <_reclaim_reent+0x82>
 8009da8:	4620      	mov	r0, r4
 8009daa:	f000 f873 	bl	8009e94 <_free_r>
 8009dae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009db0:	b111      	cbz	r1, 8009db8 <_reclaim_reent+0x8c>
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f86e 	bl	8009e94 <_free_r>
 8009db8:	6a23      	ldr	r3, [r4, #32]
 8009dba:	b14b      	cbz	r3, 8009dd0 <_reclaim_reent+0xa4>
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dc2:	4718      	bx	r3
 8009dc4:	680e      	ldr	r6, [r1, #0]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 f864 	bl	8009e94 <_free_r>
 8009dcc:	4631      	mov	r1, r6
 8009dce:	e7bb      	b.n	8009d48 <_reclaim_reent+0x1c>
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	bf00      	nop
 8009dd4:	24000014 	.word	0x24000014

08009dd8 <_kill_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	@ (8009df8 <_kill_r+0x20>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7f7 fa71 	bl	80012cc <_kill>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_kill_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_kill_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	24004940 	.word	0x24004940

08009dfc <_getpid_r>:
 8009dfc:	f7f7 ba5e 	b.w	80012bc <_getpid>

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	@ (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 fa7a 	bl	8001304 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	24004940 	.word	0x24004940

08009e20 <__errno>:
 8009e20:	4b01      	ldr	r3, [pc, #4]	@ (8009e28 <__errno+0x8>)
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	24000014 	.word	0x24000014

08009e2c <__libc_init_array>:
 8009e2c:	b570      	push	{r4, r5, r6, lr}
 8009e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e64 <__libc_init_array+0x38>)
 8009e30:	4c0d      	ldr	r4, [pc, #52]	@ (8009e68 <__libc_init_array+0x3c>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	2600      	movs	r6, #0
 8009e38:	42a6      	cmp	r6, r4
 8009e3a:	d109      	bne.n	8009e50 <__libc_init_array+0x24>
 8009e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e6c <__libc_init_array+0x40>)
 8009e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8009e70 <__libc_init_array+0x44>)
 8009e40:	f000 fba8 	bl	800a594 <_init>
 8009e44:	1b64      	subs	r4, r4, r5
 8009e46:	10a4      	asrs	r4, r4, #2
 8009e48:	2600      	movs	r6, #0
 8009e4a:	42a6      	cmp	r6, r4
 8009e4c:	d105      	bne.n	8009e5a <__libc_init_array+0x2e>
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e54:	4798      	blx	r3
 8009e56:	3601      	adds	r6, #1
 8009e58:	e7ee      	b.n	8009e38 <__libc_init_array+0xc>
 8009e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e5e:	4798      	blx	r3
 8009e60:	3601      	adds	r6, #1
 8009e62:	e7f2      	b.n	8009e4a <__libc_init_array+0x1e>
 8009e64:	0800a770 	.word	0x0800a770
 8009e68:	0800a770 	.word	0x0800a770
 8009e6c:	0800a770 	.word	0x0800a770
 8009e70:	0800a774 	.word	0x0800a774

08009e74 <__retarget_lock_acquire_recursive>:
 8009e74:	4770      	bx	lr

08009e76 <__retarget_lock_release_recursive>:
 8009e76:	4770      	bx	lr

08009e78 <memcpy>:
 8009e78:	440a      	add	r2, r1
 8009e7a:	4291      	cmp	r1, r2
 8009e7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e80:	d100      	bne.n	8009e84 <memcpy+0xc>
 8009e82:	4770      	bx	lr
 8009e84:	b510      	push	{r4, lr}
 8009e86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e8e:	4291      	cmp	r1, r2
 8009e90:	d1f9      	bne.n	8009e86 <memcpy+0xe>
 8009e92:	bd10      	pop	{r4, pc}

08009e94 <_free_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4605      	mov	r5, r0
 8009e98:	2900      	cmp	r1, #0
 8009e9a:	d041      	beq.n	8009f20 <_free_r+0x8c>
 8009e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea0:	1f0c      	subs	r4, r1, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bfb8      	it	lt
 8009ea6:	18e4      	addlt	r4, r4, r3
 8009ea8:	f7ff fec2 	bl	8009c30 <__malloc_lock>
 8009eac:	4a1d      	ldr	r2, [pc, #116]	@ (8009f24 <_free_r+0x90>)
 8009eae:	6813      	ldr	r3, [r2, #0]
 8009eb0:	b933      	cbnz	r3, 8009ec0 <_free_r+0x2c>
 8009eb2:	6063      	str	r3, [r4, #4]
 8009eb4:	6014      	str	r4, [r2, #0]
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ebc:	f7ff bebe 	b.w	8009c3c <__malloc_unlock>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d908      	bls.n	8009ed6 <_free_r+0x42>
 8009ec4:	6820      	ldr	r0, [r4, #0]
 8009ec6:	1821      	adds	r1, r4, r0
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf01      	itttt	eq
 8009ecc:	6819      	ldreq	r1, [r3, #0]
 8009ece:	685b      	ldreq	r3, [r3, #4]
 8009ed0:	1809      	addeq	r1, r1, r0
 8009ed2:	6021      	streq	r1, [r4, #0]
 8009ed4:	e7ed      	b.n	8009eb2 <_free_r+0x1e>
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	b10b      	cbz	r3, 8009ee0 <_free_r+0x4c>
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	d9fa      	bls.n	8009ed6 <_free_r+0x42>
 8009ee0:	6811      	ldr	r1, [r2, #0]
 8009ee2:	1850      	adds	r0, r2, r1
 8009ee4:	42a0      	cmp	r0, r4
 8009ee6:	d10b      	bne.n	8009f00 <_free_r+0x6c>
 8009ee8:	6820      	ldr	r0, [r4, #0]
 8009eea:	4401      	add	r1, r0
 8009eec:	1850      	adds	r0, r2, r1
 8009eee:	4283      	cmp	r3, r0
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	d1e0      	bne.n	8009eb6 <_free_r+0x22>
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	6053      	str	r3, [r2, #4]
 8009efa:	4408      	add	r0, r1
 8009efc:	6010      	str	r0, [r2, #0]
 8009efe:	e7da      	b.n	8009eb6 <_free_r+0x22>
 8009f00:	d902      	bls.n	8009f08 <_free_r+0x74>
 8009f02:	230c      	movs	r3, #12
 8009f04:	602b      	str	r3, [r5, #0]
 8009f06:	e7d6      	b.n	8009eb6 <_free_r+0x22>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	1821      	adds	r1, r4, r0
 8009f0c:	428b      	cmp	r3, r1
 8009f0e:	bf04      	itt	eq
 8009f10:	6819      	ldreq	r1, [r3, #0]
 8009f12:	685b      	ldreq	r3, [r3, #4]
 8009f14:	6063      	str	r3, [r4, #4]
 8009f16:	bf04      	itt	eq
 8009f18:	1809      	addeq	r1, r1, r0
 8009f1a:	6021      	streq	r1, [r4, #0]
 8009f1c:	6054      	str	r4, [r2, #4]
 8009f1e:	e7ca      	b.n	8009eb6 <_free_r+0x22>
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
 8009f22:	bf00      	nop
 8009f24:	24004804 	.word	0x24004804

08009f28 <__ssputs_r>:
 8009f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f2c:	688e      	ldr	r6, [r1, #8]
 8009f2e:	461f      	mov	r7, r3
 8009f30:	42be      	cmp	r6, r7
 8009f32:	680b      	ldr	r3, [r1, #0]
 8009f34:	4682      	mov	sl, r0
 8009f36:	460c      	mov	r4, r1
 8009f38:	4690      	mov	r8, r2
 8009f3a:	d82d      	bhi.n	8009f98 <__ssputs_r+0x70>
 8009f3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f40:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f44:	d026      	beq.n	8009f94 <__ssputs_r+0x6c>
 8009f46:	6965      	ldr	r5, [r4, #20]
 8009f48:	6909      	ldr	r1, [r1, #16]
 8009f4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f4e:	eba3 0901 	sub.w	r9, r3, r1
 8009f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f56:	1c7b      	adds	r3, r7, #1
 8009f58:	444b      	add	r3, r9
 8009f5a:	106d      	asrs	r5, r5, #1
 8009f5c:	429d      	cmp	r5, r3
 8009f5e:	bf38      	it	cc
 8009f60:	461d      	movcc	r5, r3
 8009f62:	0553      	lsls	r3, r2, #21
 8009f64:	d527      	bpl.n	8009fb6 <__ssputs_r+0x8e>
 8009f66:	4629      	mov	r1, r5
 8009f68:	f7ff fde2 	bl	8009b30 <_malloc_r>
 8009f6c:	4606      	mov	r6, r0
 8009f6e:	b360      	cbz	r0, 8009fca <__ssputs_r+0xa2>
 8009f70:	6921      	ldr	r1, [r4, #16]
 8009f72:	464a      	mov	r2, r9
 8009f74:	f7ff ff80 	bl	8009e78 <memcpy>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6126      	str	r6, [r4, #16]
 8009f86:	6165      	str	r5, [r4, #20]
 8009f88:	444e      	add	r6, r9
 8009f8a:	eba5 0509 	sub.w	r5, r5, r9
 8009f8e:	6026      	str	r6, [r4, #0]
 8009f90:	60a5      	str	r5, [r4, #8]
 8009f92:	463e      	mov	r6, r7
 8009f94:	42be      	cmp	r6, r7
 8009f96:	d900      	bls.n	8009f9a <__ssputs_r+0x72>
 8009f98:	463e      	mov	r6, r7
 8009f9a:	6820      	ldr	r0, [r4, #0]
 8009f9c:	4632      	mov	r2, r6
 8009f9e:	4641      	mov	r1, r8
 8009fa0:	f000 faa8 	bl	800a4f4 <memmove>
 8009fa4:	68a3      	ldr	r3, [r4, #8]
 8009fa6:	1b9b      	subs	r3, r3, r6
 8009fa8:	60a3      	str	r3, [r4, #8]
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	4433      	add	r3, r6
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	462a      	mov	r2, r5
 8009fb8:	f000 fab6 	bl	800a528 <_realloc_r>
 8009fbc:	4606      	mov	r6, r0
 8009fbe:	2800      	cmp	r0, #0
 8009fc0:	d1e0      	bne.n	8009f84 <__ssputs_r+0x5c>
 8009fc2:	6921      	ldr	r1, [r4, #16]
 8009fc4:	4650      	mov	r0, sl
 8009fc6:	f7ff ff65 	bl	8009e94 <_free_r>
 8009fca:	230c      	movs	r3, #12
 8009fcc:	f8ca 3000 	str.w	r3, [sl]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fdc:	e7e9      	b.n	8009fb2 <__ssputs_r+0x8a>
	...

08009fe0 <_svfiprintf_r>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4698      	mov	r8, r3
 8009fe6:	898b      	ldrh	r3, [r1, #12]
 8009fe8:	061b      	lsls	r3, r3, #24
 8009fea:	b09d      	sub	sp, #116	@ 0x74
 8009fec:	4607      	mov	r7, r0
 8009fee:	460d      	mov	r5, r1
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	d510      	bpl.n	800a016 <_svfiprintf_r+0x36>
 8009ff4:	690b      	ldr	r3, [r1, #16]
 8009ff6:	b973      	cbnz	r3, 800a016 <_svfiprintf_r+0x36>
 8009ff8:	2140      	movs	r1, #64	@ 0x40
 8009ffa:	f7ff fd99 	bl	8009b30 <_malloc_r>
 8009ffe:	6028      	str	r0, [r5, #0]
 800a000:	6128      	str	r0, [r5, #16]
 800a002:	b930      	cbnz	r0, 800a012 <_svfiprintf_r+0x32>
 800a004:	230c      	movs	r3, #12
 800a006:	603b      	str	r3, [r7, #0]
 800a008:	f04f 30ff 	mov.w	r0, #4294967295
 800a00c:	b01d      	add	sp, #116	@ 0x74
 800a00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a012:	2340      	movs	r3, #64	@ 0x40
 800a014:	616b      	str	r3, [r5, #20]
 800a016:	2300      	movs	r3, #0
 800a018:	9309      	str	r3, [sp, #36]	@ 0x24
 800a01a:	2320      	movs	r3, #32
 800a01c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a020:	f8cd 800c 	str.w	r8, [sp, #12]
 800a024:	2330      	movs	r3, #48	@ 0x30
 800a026:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1c4 <_svfiprintf_r+0x1e4>
 800a02a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a02e:	f04f 0901 	mov.w	r9, #1
 800a032:	4623      	mov	r3, r4
 800a034:	469a      	mov	sl, r3
 800a036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a03a:	b10a      	cbz	r2, 800a040 <_svfiprintf_r+0x60>
 800a03c:	2a25      	cmp	r2, #37	@ 0x25
 800a03e:	d1f9      	bne.n	800a034 <_svfiprintf_r+0x54>
 800a040:	ebba 0b04 	subs.w	fp, sl, r4
 800a044:	d00b      	beq.n	800a05e <_svfiprintf_r+0x7e>
 800a046:	465b      	mov	r3, fp
 800a048:	4622      	mov	r2, r4
 800a04a:	4629      	mov	r1, r5
 800a04c:	4638      	mov	r0, r7
 800a04e:	f7ff ff6b 	bl	8009f28 <__ssputs_r>
 800a052:	3001      	adds	r0, #1
 800a054:	f000 80a7 	beq.w	800a1a6 <_svfiprintf_r+0x1c6>
 800a058:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a05a:	445a      	add	r2, fp
 800a05c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a05e:	f89a 3000 	ldrb.w	r3, [sl]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 809f 	beq.w	800a1a6 <_svfiprintf_r+0x1c6>
 800a068:	2300      	movs	r3, #0
 800a06a:	f04f 32ff 	mov.w	r2, #4294967295
 800a06e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a072:	f10a 0a01 	add.w	sl, sl, #1
 800a076:	9304      	str	r3, [sp, #16]
 800a078:	9307      	str	r3, [sp, #28]
 800a07a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a07e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a080:	4654      	mov	r4, sl
 800a082:	2205      	movs	r2, #5
 800a084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a088:	484e      	ldr	r0, [pc, #312]	@ (800a1c4 <_svfiprintf_r+0x1e4>)
 800a08a:	f7f6 f931 	bl	80002f0 <memchr>
 800a08e:	9a04      	ldr	r2, [sp, #16]
 800a090:	b9d8      	cbnz	r0, 800a0ca <_svfiprintf_r+0xea>
 800a092:	06d0      	lsls	r0, r2, #27
 800a094:	bf44      	itt	mi
 800a096:	2320      	movmi	r3, #32
 800a098:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a09c:	0711      	lsls	r1, r2, #28
 800a09e:	bf44      	itt	mi
 800a0a0:	232b      	movmi	r3, #43	@ 0x2b
 800a0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a0aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ac:	d015      	beq.n	800a0da <_svfiprintf_r+0xfa>
 800a0ae:	9a07      	ldr	r2, [sp, #28]
 800a0b0:	4654      	mov	r4, sl
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	f04f 0c0a 	mov.w	ip, #10
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0be:	3b30      	subs	r3, #48	@ 0x30
 800a0c0:	2b09      	cmp	r3, #9
 800a0c2:	d94b      	bls.n	800a15c <_svfiprintf_r+0x17c>
 800a0c4:	b1b0      	cbz	r0, 800a0f4 <_svfiprintf_r+0x114>
 800a0c6:	9207      	str	r2, [sp, #28]
 800a0c8:	e014      	b.n	800a0f4 <_svfiprintf_r+0x114>
 800a0ca:	eba0 0308 	sub.w	r3, r0, r8
 800a0ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	46a2      	mov	sl, r4
 800a0d8:	e7d2      	b.n	800a080 <_svfiprintf_r+0xa0>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	1d19      	adds	r1, r3, #4
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	9103      	str	r1, [sp, #12]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfbb      	ittet	lt
 800a0e6:	425b      	neglt	r3, r3
 800a0e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0ec:	9307      	strge	r3, [sp, #28]
 800a0ee:	9307      	strlt	r3, [sp, #28]
 800a0f0:	bfb8      	it	lt
 800a0f2:	9204      	strlt	r2, [sp, #16]
 800a0f4:	7823      	ldrb	r3, [r4, #0]
 800a0f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0f8:	d10a      	bne.n	800a110 <_svfiprintf_r+0x130>
 800a0fa:	7863      	ldrb	r3, [r4, #1]
 800a0fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0fe:	d132      	bne.n	800a166 <_svfiprintf_r+0x186>
 800a100:	9b03      	ldr	r3, [sp, #12]
 800a102:	1d1a      	adds	r2, r3, #4
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	9203      	str	r2, [sp, #12]
 800a108:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a10c:	3402      	adds	r4, #2
 800a10e:	9305      	str	r3, [sp, #20]
 800a110:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1d4 <_svfiprintf_r+0x1f4>
 800a114:	7821      	ldrb	r1, [r4, #0]
 800a116:	2203      	movs	r2, #3
 800a118:	4650      	mov	r0, sl
 800a11a:	f7f6 f8e9 	bl	80002f0 <memchr>
 800a11e:	b138      	cbz	r0, 800a130 <_svfiprintf_r+0x150>
 800a120:	9b04      	ldr	r3, [sp, #16]
 800a122:	eba0 000a 	sub.w	r0, r0, sl
 800a126:	2240      	movs	r2, #64	@ 0x40
 800a128:	4082      	lsls	r2, r0
 800a12a:	4313      	orrs	r3, r2
 800a12c:	3401      	adds	r4, #1
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a134:	4824      	ldr	r0, [pc, #144]	@ (800a1c8 <_svfiprintf_r+0x1e8>)
 800a136:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a13a:	2206      	movs	r2, #6
 800a13c:	f7f6 f8d8 	bl	80002f0 <memchr>
 800a140:	2800      	cmp	r0, #0
 800a142:	d036      	beq.n	800a1b2 <_svfiprintf_r+0x1d2>
 800a144:	4b21      	ldr	r3, [pc, #132]	@ (800a1cc <_svfiprintf_r+0x1ec>)
 800a146:	bb1b      	cbnz	r3, 800a190 <_svfiprintf_r+0x1b0>
 800a148:	9b03      	ldr	r3, [sp, #12]
 800a14a:	3307      	adds	r3, #7
 800a14c:	f023 0307 	bic.w	r3, r3, #7
 800a150:	3308      	adds	r3, #8
 800a152:	9303      	str	r3, [sp, #12]
 800a154:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a156:	4433      	add	r3, r6
 800a158:	9309      	str	r3, [sp, #36]	@ 0x24
 800a15a:	e76a      	b.n	800a032 <_svfiprintf_r+0x52>
 800a15c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a160:	460c      	mov	r4, r1
 800a162:	2001      	movs	r0, #1
 800a164:	e7a8      	b.n	800a0b8 <_svfiprintf_r+0xd8>
 800a166:	2300      	movs	r3, #0
 800a168:	3401      	adds	r4, #1
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	4619      	mov	r1, r3
 800a16e:	f04f 0c0a 	mov.w	ip, #10
 800a172:	4620      	mov	r0, r4
 800a174:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a178:	3a30      	subs	r2, #48	@ 0x30
 800a17a:	2a09      	cmp	r2, #9
 800a17c:	d903      	bls.n	800a186 <_svfiprintf_r+0x1a6>
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0c6      	beq.n	800a110 <_svfiprintf_r+0x130>
 800a182:	9105      	str	r1, [sp, #20]
 800a184:	e7c4      	b.n	800a110 <_svfiprintf_r+0x130>
 800a186:	fb0c 2101 	mla	r1, ip, r1, r2
 800a18a:	4604      	mov	r4, r0
 800a18c:	2301      	movs	r3, #1
 800a18e:	e7f0      	b.n	800a172 <_svfiprintf_r+0x192>
 800a190:	ab03      	add	r3, sp, #12
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	462a      	mov	r2, r5
 800a196:	4b0e      	ldr	r3, [pc, #56]	@ (800a1d0 <_svfiprintf_r+0x1f0>)
 800a198:	a904      	add	r1, sp, #16
 800a19a:	4638      	mov	r0, r7
 800a19c:	f3af 8000 	nop.w
 800a1a0:	1c42      	adds	r2, r0, #1
 800a1a2:	4606      	mov	r6, r0
 800a1a4:	d1d6      	bne.n	800a154 <_svfiprintf_r+0x174>
 800a1a6:	89ab      	ldrh	r3, [r5, #12]
 800a1a8:	065b      	lsls	r3, r3, #25
 800a1aa:	f53f af2d 	bmi.w	800a008 <_svfiprintf_r+0x28>
 800a1ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1b0:	e72c      	b.n	800a00c <_svfiprintf_r+0x2c>
 800a1b2:	ab03      	add	r3, sp, #12
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	462a      	mov	r2, r5
 800a1b8:	4b05      	ldr	r3, [pc, #20]	@ (800a1d0 <_svfiprintf_r+0x1f0>)
 800a1ba:	a904      	add	r1, sp, #16
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f000 f879 	bl	800a2b4 <_printf_i>
 800a1c2:	e7ed      	b.n	800a1a0 <_svfiprintf_r+0x1c0>
 800a1c4:	0800a734 	.word	0x0800a734
 800a1c8:	0800a73e 	.word	0x0800a73e
 800a1cc:	00000000 	.word	0x00000000
 800a1d0:	08009f29 	.word	0x08009f29
 800a1d4:	0800a73a 	.word	0x0800a73a

0800a1d8 <_printf_common>:
 800a1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	4616      	mov	r6, r2
 800a1de:	4698      	mov	r8, r3
 800a1e0:	688a      	ldr	r2, [r1, #8]
 800a1e2:	690b      	ldr	r3, [r1, #16]
 800a1e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	bfb8      	it	lt
 800a1ec:	4613      	movlt	r3, r2
 800a1ee:	6033      	str	r3, [r6, #0]
 800a1f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1f4:	4607      	mov	r7, r0
 800a1f6:	460c      	mov	r4, r1
 800a1f8:	b10a      	cbz	r2, 800a1fe <_printf_common+0x26>
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	0699      	lsls	r1, r3, #26
 800a202:	bf42      	ittt	mi
 800a204:	6833      	ldrmi	r3, [r6, #0]
 800a206:	3302      	addmi	r3, #2
 800a208:	6033      	strmi	r3, [r6, #0]
 800a20a:	6825      	ldr	r5, [r4, #0]
 800a20c:	f015 0506 	ands.w	r5, r5, #6
 800a210:	d106      	bne.n	800a220 <_printf_common+0x48>
 800a212:	f104 0a19 	add.w	sl, r4, #25
 800a216:	68e3      	ldr	r3, [r4, #12]
 800a218:	6832      	ldr	r2, [r6, #0]
 800a21a:	1a9b      	subs	r3, r3, r2
 800a21c:	42ab      	cmp	r3, r5
 800a21e:	dc26      	bgt.n	800a26e <_printf_common+0x96>
 800a220:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	3b00      	subs	r3, #0
 800a228:	bf18      	it	ne
 800a22a:	2301      	movne	r3, #1
 800a22c:	0692      	lsls	r2, r2, #26
 800a22e:	d42b      	bmi.n	800a288 <_printf_common+0xb0>
 800a230:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a234:	4641      	mov	r1, r8
 800a236:	4638      	mov	r0, r7
 800a238:	47c8      	blx	r9
 800a23a:	3001      	adds	r0, #1
 800a23c:	d01e      	beq.n	800a27c <_printf_common+0xa4>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	6922      	ldr	r2, [r4, #16]
 800a242:	f003 0306 	and.w	r3, r3, #6
 800a246:	2b04      	cmp	r3, #4
 800a248:	bf02      	ittt	eq
 800a24a:	68e5      	ldreq	r5, [r4, #12]
 800a24c:	6833      	ldreq	r3, [r6, #0]
 800a24e:	1aed      	subeq	r5, r5, r3
 800a250:	68a3      	ldr	r3, [r4, #8]
 800a252:	bf0c      	ite	eq
 800a254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a258:	2500      	movne	r5, #0
 800a25a:	4293      	cmp	r3, r2
 800a25c:	bfc4      	itt	gt
 800a25e:	1a9b      	subgt	r3, r3, r2
 800a260:	18ed      	addgt	r5, r5, r3
 800a262:	2600      	movs	r6, #0
 800a264:	341a      	adds	r4, #26
 800a266:	42b5      	cmp	r5, r6
 800a268:	d11a      	bne.n	800a2a0 <_printf_common+0xc8>
 800a26a:	2000      	movs	r0, #0
 800a26c:	e008      	b.n	800a280 <_printf_common+0xa8>
 800a26e:	2301      	movs	r3, #1
 800a270:	4652      	mov	r2, sl
 800a272:	4641      	mov	r1, r8
 800a274:	4638      	mov	r0, r7
 800a276:	47c8      	blx	r9
 800a278:	3001      	adds	r0, #1
 800a27a:	d103      	bne.n	800a284 <_printf_common+0xac>
 800a27c:	f04f 30ff 	mov.w	r0, #4294967295
 800a280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a284:	3501      	adds	r5, #1
 800a286:	e7c6      	b.n	800a216 <_printf_common+0x3e>
 800a288:	18e1      	adds	r1, r4, r3
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	2030      	movs	r0, #48	@ 0x30
 800a28e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a292:	4422      	add	r2, r4
 800a294:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a298:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a29c:	3302      	adds	r3, #2
 800a29e:	e7c7      	b.n	800a230 <_printf_common+0x58>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	47c8      	blx	r9
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	d0e6      	beq.n	800a27c <_printf_common+0xa4>
 800a2ae:	3601      	adds	r6, #1
 800a2b0:	e7d9      	b.n	800a266 <_printf_common+0x8e>
	...

0800a2b4 <_printf_i>:
 800a2b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2b8:	7e0f      	ldrb	r7, [r1, #24]
 800a2ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2bc:	2f78      	cmp	r7, #120	@ 0x78
 800a2be:	4691      	mov	r9, r2
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	460c      	mov	r4, r1
 800a2c4:	469a      	mov	sl, r3
 800a2c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ca:	d807      	bhi.n	800a2dc <_printf_i+0x28>
 800a2cc:	2f62      	cmp	r7, #98	@ 0x62
 800a2ce:	d80a      	bhi.n	800a2e6 <_printf_i+0x32>
 800a2d0:	2f00      	cmp	r7, #0
 800a2d2:	f000 80d2 	beq.w	800a47a <_printf_i+0x1c6>
 800a2d6:	2f58      	cmp	r7, #88	@ 0x58
 800a2d8:	f000 80b9 	beq.w	800a44e <_printf_i+0x19a>
 800a2dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2e4:	e03a      	b.n	800a35c <_printf_i+0xa8>
 800a2e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2ea:	2b15      	cmp	r3, #21
 800a2ec:	d8f6      	bhi.n	800a2dc <_printf_i+0x28>
 800a2ee:	a101      	add	r1, pc, #4	@ (adr r1, 800a2f4 <_printf_i+0x40>)
 800a2f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2f4:	0800a34d 	.word	0x0800a34d
 800a2f8:	0800a361 	.word	0x0800a361
 800a2fc:	0800a2dd 	.word	0x0800a2dd
 800a300:	0800a2dd 	.word	0x0800a2dd
 800a304:	0800a2dd 	.word	0x0800a2dd
 800a308:	0800a2dd 	.word	0x0800a2dd
 800a30c:	0800a361 	.word	0x0800a361
 800a310:	0800a2dd 	.word	0x0800a2dd
 800a314:	0800a2dd 	.word	0x0800a2dd
 800a318:	0800a2dd 	.word	0x0800a2dd
 800a31c:	0800a2dd 	.word	0x0800a2dd
 800a320:	0800a461 	.word	0x0800a461
 800a324:	0800a38b 	.word	0x0800a38b
 800a328:	0800a41b 	.word	0x0800a41b
 800a32c:	0800a2dd 	.word	0x0800a2dd
 800a330:	0800a2dd 	.word	0x0800a2dd
 800a334:	0800a483 	.word	0x0800a483
 800a338:	0800a2dd 	.word	0x0800a2dd
 800a33c:	0800a38b 	.word	0x0800a38b
 800a340:	0800a2dd 	.word	0x0800a2dd
 800a344:	0800a2dd 	.word	0x0800a2dd
 800a348:	0800a423 	.word	0x0800a423
 800a34c:	6833      	ldr	r3, [r6, #0]
 800a34e:	1d1a      	adds	r2, r3, #4
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6032      	str	r2, [r6, #0]
 800a354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a358:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a35c:	2301      	movs	r3, #1
 800a35e:	e09d      	b.n	800a49c <_printf_i+0x1e8>
 800a360:	6833      	ldr	r3, [r6, #0]
 800a362:	6820      	ldr	r0, [r4, #0]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	6031      	str	r1, [r6, #0]
 800a368:	0606      	lsls	r6, r0, #24
 800a36a:	d501      	bpl.n	800a370 <_printf_i+0xbc>
 800a36c:	681d      	ldr	r5, [r3, #0]
 800a36e:	e003      	b.n	800a378 <_printf_i+0xc4>
 800a370:	0645      	lsls	r5, r0, #25
 800a372:	d5fb      	bpl.n	800a36c <_printf_i+0xb8>
 800a374:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a378:	2d00      	cmp	r5, #0
 800a37a:	da03      	bge.n	800a384 <_printf_i+0xd0>
 800a37c:	232d      	movs	r3, #45	@ 0x2d
 800a37e:	426d      	negs	r5, r5
 800a380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a384:	4859      	ldr	r0, [pc, #356]	@ (800a4ec <_printf_i+0x238>)
 800a386:	230a      	movs	r3, #10
 800a388:	e011      	b.n	800a3ae <_printf_i+0xfa>
 800a38a:	6821      	ldr	r1, [r4, #0]
 800a38c:	6833      	ldr	r3, [r6, #0]
 800a38e:	0608      	lsls	r0, r1, #24
 800a390:	f853 5b04 	ldr.w	r5, [r3], #4
 800a394:	d402      	bmi.n	800a39c <_printf_i+0xe8>
 800a396:	0649      	lsls	r1, r1, #25
 800a398:	bf48      	it	mi
 800a39a:	b2ad      	uxthmi	r5, r5
 800a39c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a39e:	4853      	ldr	r0, [pc, #332]	@ (800a4ec <_printf_i+0x238>)
 800a3a0:	6033      	str	r3, [r6, #0]
 800a3a2:	bf14      	ite	ne
 800a3a4:	230a      	movne	r3, #10
 800a3a6:	2308      	moveq	r3, #8
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3ae:	6866      	ldr	r6, [r4, #4]
 800a3b0:	60a6      	str	r6, [r4, #8]
 800a3b2:	2e00      	cmp	r6, #0
 800a3b4:	bfa2      	ittt	ge
 800a3b6:	6821      	ldrge	r1, [r4, #0]
 800a3b8:	f021 0104 	bicge.w	r1, r1, #4
 800a3bc:	6021      	strge	r1, [r4, #0]
 800a3be:	b90d      	cbnz	r5, 800a3c4 <_printf_i+0x110>
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	d04b      	beq.n	800a45c <_printf_i+0x1a8>
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3ca:	fb03 5711 	mls	r7, r3, r1, r5
 800a3ce:	5dc7      	ldrb	r7, [r0, r7]
 800a3d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3d4:	462f      	mov	r7, r5
 800a3d6:	42bb      	cmp	r3, r7
 800a3d8:	460d      	mov	r5, r1
 800a3da:	d9f4      	bls.n	800a3c6 <_printf_i+0x112>
 800a3dc:	2b08      	cmp	r3, #8
 800a3de:	d10b      	bne.n	800a3f8 <_printf_i+0x144>
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	07df      	lsls	r7, r3, #31
 800a3e4:	d508      	bpl.n	800a3f8 <_printf_i+0x144>
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	4299      	cmp	r1, r3
 800a3ec:	bfde      	ittt	le
 800a3ee:	2330      	movle	r3, #48	@ 0x30
 800a3f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3f8:	1b92      	subs	r2, r2, r6
 800a3fa:	6122      	str	r2, [r4, #16]
 800a3fc:	f8cd a000 	str.w	sl, [sp]
 800a400:	464b      	mov	r3, r9
 800a402:	aa03      	add	r2, sp, #12
 800a404:	4621      	mov	r1, r4
 800a406:	4640      	mov	r0, r8
 800a408:	f7ff fee6 	bl	800a1d8 <_printf_common>
 800a40c:	3001      	adds	r0, #1
 800a40e:	d14a      	bne.n	800a4a6 <_printf_i+0x1f2>
 800a410:	f04f 30ff 	mov.w	r0, #4294967295
 800a414:	b004      	add	sp, #16
 800a416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	f043 0320 	orr.w	r3, r3, #32
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	4833      	ldr	r0, [pc, #204]	@ (800a4f0 <_printf_i+0x23c>)
 800a424:	2778      	movs	r7, #120	@ 0x78
 800a426:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	6831      	ldr	r1, [r6, #0]
 800a42e:	061f      	lsls	r7, r3, #24
 800a430:	f851 5b04 	ldr.w	r5, [r1], #4
 800a434:	d402      	bmi.n	800a43c <_printf_i+0x188>
 800a436:	065f      	lsls	r7, r3, #25
 800a438:	bf48      	it	mi
 800a43a:	b2ad      	uxthmi	r5, r5
 800a43c:	6031      	str	r1, [r6, #0]
 800a43e:	07d9      	lsls	r1, r3, #31
 800a440:	bf44      	itt	mi
 800a442:	f043 0320 	orrmi.w	r3, r3, #32
 800a446:	6023      	strmi	r3, [r4, #0]
 800a448:	b11d      	cbz	r5, 800a452 <_printf_i+0x19e>
 800a44a:	2310      	movs	r3, #16
 800a44c:	e7ac      	b.n	800a3a8 <_printf_i+0xf4>
 800a44e:	4827      	ldr	r0, [pc, #156]	@ (800a4ec <_printf_i+0x238>)
 800a450:	e7e9      	b.n	800a426 <_printf_i+0x172>
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	f023 0320 	bic.w	r3, r3, #32
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	e7f6      	b.n	800a44a <_printf_i+0x196>
 800a45c:	4616      	mov	r6, r2
 800a45e:	e7bd      	b.n	800a3dc <_printf_i+0x128>
 800a460:	6833      	ldr	r3, [r6, #0]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	6961      	ldr	r1, [r4, #20]
 800a466:	1d18      	adds	r0, r3, #4
 800a468:	6030      	str	r0, [r6, #0]
 800a46a:	062e      	lsls	r6, r5, #24
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	d501      	bpl.n	800a474 <_printf_i+0x1c0>
 800a470:	6019      	str	r1, [r3, #0]
 800a472:	e002      	b.n	800a47a <_printf_i+0x1c6>
 800a474:	0668      	lsls	r0, r5, #25
 800a476:	d5fb      	bpl.n	800a470 <_printf_i+0x1bc>
 800a478:	8019      	strh	r1, [r3, #0]
 800a47a:	2300      	movs	r3, #0
 800a47c:	6123      	str	r3, [r4, #16]
 800a47e:	4616      	mov	r6, r2
 800a480:	e7bc      	b.n	800a3fc <_printf_i+0x148>
 800a482:	6833      	ldr	r3, [r6, #0]
 800a484:	1d1a      	adds	r2, r3, #4
 800a486:	6032      	str	r2, [r6, #0]
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	6862      	ldr	r2, [r4, #4]
 800a48c:	2100      	movs	r1, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	f7f5 ff2e 	bl	80002f0 <memchr>
 800a494:	b108      	cbz	r0, 800a49a <_printf_i+0x1e6>
 800a496:	1b80      	subs	r0, r0, r6
 800a498:	6060      	str	r0, [r4, #4]
 800a49a:	6863      	ldr	r3, [r4, #4]
 800a49c:	6123      	str	r3, [r4, #16]
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4a4:	e7aa      	b.n	800a3fc <_printf_i+0x148>
 800a4a6:	6923      	ldr	r3, [r4, #16]
 800a4a8:	4632      	mov	r2, r6
 800a4aa:	4649      	mov	r1, r9
 800a4ac:	4640      	mov	r0, r8
 800a4ae:	47d0      	blx	sl
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	d0ad      	beq.n	800a410 <_printf_i+0x15c>
 800a4b4:	6823      	ldr	r3, [r4, #0]
 800a4b6:	079b      	lsls	r3, r3, #30
 800a4b8:	d413      	bmi.n	800a4e2 <_printf_i+0x22e>
 800a4ba:	68e0      	ldr	r0, [r4, #12]
 800a4bc:	9b03      	ldr	r3, [sp, #12]
 800a4be:	4298      	cmp	r0, r3
 800a4c0:	bfb8      	it	lt
 800a4c2:	4618      	movlt	r0, r3
 800a4c4:	e7a6      	b.n	800a414 <_printf_i+0x160>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	4649      	mov	r1, r9
 800a4cc:	4640      	mov	r0, r8
 800a4ce:	47d0      	blx	sl
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	d09d      	beq.n	800a410 <_printf_i+0x15c>
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	9903      	ldr	r1, [sp, #12]
 800a4da:	1a5b      	subs	r3, r3, r1
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dcf2      	bgt.n	800a4c6 <_printf_i+0x212>
 800a4e0:	e7eb      	b.n	800a4ba <_printf_i+0x206>
 800a4e2:	2500      	movs	r5, #0
 800a4e4:	f104 0619 	add.w	r6, r4, #25
 800a4e8:	e7f5      	b.n	800a4d6 <_printf_i+0x222>
 800a4ea:	bf00      	nop
 800a4ec:	0800a745 	.word	0x0800a745
 800a4f0:	0800a756 	.word	0x0800a756

0800a4f4 <memmove>:
 800a4f4:	4288      	cmp	r0, r1
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	eb01 0402 	add.w	r4, r1, r2
 800a4fc:	d902      	bls.n	800a504 <memmove+0x10>
 800a4fe:	4284      	cmp	r4, r0
 800a500:	4623      	mov	r3, r4
 800a502:	d807      	bhi.n	800a514 <memmove+0x20>
 800a504:	1e43      	subs	r3, r0, #1
 800a506:	42a1      	cmp	r1, r4
 800a508:	d008      	beq.n	800a51c <memmove+0x28>
 800a50a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a50e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a512:	e7f8      	b.n	800a506 <memmove+0x12>
 800a514:	4402      	add	r2, r0
 800a516:	4601      	mov	r1, r0
 800a518:	428a      	cmp	r2, r1
 800a51a:	d100      	bne.n	800a51e <memmove+0x2a>
 800a51c:	bd10      	pop	{r4, pc}
 800a51e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a526:	e7f7      	b.n	800a518 <memmove+0x24>

0800a528 <_realloc_r>:
 800a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52c:	4680      	mov	r8, r0
 800a52e:	4615      	mov	r5, r2
 800a530:	460c      	mov	r4, r1
 800a532:	b921      	cbnz	r1, 800a53e <_realloc_r+0x16>
 800a534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	4611      	mov	r1, r2
 800a53a:	f7ff baf9 	b.w	8009b30 <_malloc_r>
 800a53e:	b92a      	cbnz	r2, 800a54c <_realloc_r+0x24>
 800a540:	f7ff fca8 	bl	8009e94 <_free_r>
 800a544:	2400      	movs	r4, #0
 800a546:	4620      	mov	r0, r4
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a54c:	f000 f81a 	bl	800a584 <_malloc_usable_size_r>
 800a550:	4285      	cmp	r5, r0
 800a552:	4606      	mov	r6, r0
 800a554:	d802      	bhi.n	800a55c <_realloc_r+0x34>
 800a556:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a55a:	d8f4      	bhi.n	800a546 <_realloc_r+0x1e>
 800a55c:	4629      	mov	r1, r5
 800a55e:	4640      	mov	r0, r8
 800a560:	f7ff fae6 	bl	8009b30 <_malloc_r>
 800a564:	4607      	mov	r7, r0
 800a566:	2800      	cmp	r0, #0
 800a568:	d0ec      	beq.n	800a544 <_realloc_r+0x1c>
 800a56a:	42b5      	cmp	r5, r6
 800a56c:	462a      	mov	r2, r5
 800a56e:	4621      	mov	r1, r4
 800a570:	bf28      	it	cs
 800a572:	4632      	movcs	r2, r6
 800a574:	f7ff fc80 	bl	8009e78 <memcpy>
 800a578:	4621      	mov	r1, r4
 800a57a:	4640      	mov	r0, r8
 800a57c:	f7ff fc8a 	bl	8009e94 <_free_r>
 800a580:	463c      	mov	r4, r7
 800a582:	e7e0      	b.n	800a546 <_realloc_r+0x1e>

0800a584 <_malloc_usable_size_r>:
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f18      	subs	r0, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfbc      	itt	lt
 800a58e:	580b      	ldrlt	r3, [r1, r0]
 800a590:	18c0      	addlt	r0, r0, r3
 800a592:	4770      	bx	lr

0800a594 <_init>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_fini>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr
