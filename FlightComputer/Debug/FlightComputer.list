
FlightComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b85c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  0800bb00  0800bb00  0000cb00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd74  0800bd74  0000cd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd7c  0800bd7c  0000cd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800bd80  0800bd80  0000cd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000f4  24000000  0800bd84  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000f4  0800be78  0000d0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000154  0800bed8  0000d154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000487c  240001b4  0800bf38  0000d1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004a30  0800bf38  0000da30  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000d1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003226b  00000000  00000000  0000d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057bb  00000000  00000000  0003f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00044c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001856  00000000  00000000  00046b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000407ad  00000000  00000000  0004839e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b4f1  00000000  00000000  00088b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017a517  00000000  00000000  000b403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022e553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d80  00000000  00000000  0022e598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00237318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001b4 	.word	0x240001b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bae4 	.word	0x0800bae4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001b8 	.word	0x240001b8
 80002dc:	0800bae4 	.word	0x0800bae4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_ZN3GPS8vGPStaskEPKv>:
GPS::~GPS() {
	// TODO Auto-generated destructor stub
}

 void GPS::vGPStask(void const* argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
	  LOGu("GPS Task Giris\n");
 8000688:	4803      	ldr	r0, [pc, #12]	@ (8000698 <_ZN3GPS8vGPStaskEPKv+0x18>)
 800068a:	f000 fbc5 	bl	8000e18 <_Z4LOGuPKcz>
    while (1) {


  	 // LOGu("GPS\n");
  	osDelay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f007 fed4 	bl	800843c <osDelay>
 8000694:	e7fb      	b.n	800068e <_ZN3GPS8vGPStaskEPKv+0xe>
 8000696:	bf00      	nop
 8000698:	0800bb00 	.word	0x0800bb00

0800069c <_ZN3IMUC1Ev>:
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};


IMU::IMU() {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <_ZN3IMUC1Ev+0x1c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub


}
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4618      	mov	r0, r3
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	0800bc90 	.word	0x0800bc90

080006bc <_ZN3IMUD1Ev>:

IMU::~IMU() {
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <_ZN3IMUD1Ev+0x1c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4618      	mov	r0, r3
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	0800bc90 	.word	0x0800bc90

080006dc <_ZN3IMUD0Ev>:
IMU::~IMU() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
}
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	f7ff ffe9 	bl	80006bc <_ZN3IMUD1Ev>
 80006ea:	2104      	movs	r1, #4
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f00a fa83 	bl	800abf8 <_ZdlPvj>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_ZN3IMU8vIMUtaskEPKv>:

void IMU::vIMUtask(void const* argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0a2      	sub	sp, #136	@ 0x88
 8000700:	af02      	add	r7, sp, #8
 8000702:	6078      	str	r0, [r7, #4]
	LOGu("IMU Taska Giris\n");
 8000704:	4823      	ldr	r0, [pc, #140]	@ (8000794 <_ZN3IMU8vIMUtaskEPKv+0x98>)
 8000706:	f000 fb87 	bl	8000e18 <_Z4LOGuPKcz>
IMU imu;
 800070a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffc4 	bl	800069c <_ZN3IMUC1Ev>
MPU6050_t MPU6050;
if(imu.MPU6050_Init(&hi2c1))
 8000714:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000718:	491f      	ldr	r1, [pc, #124]	@ (8000798 <_ZN3IMU8vIMUtaskEPKv+0x9c>)
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f844 	bl	80007a8 <_ZN3IMU12MPU6050_InitEP19__I2C_HandleTypeDef>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	bf14      	ite	ne
 8000726:	2301      	movne	r3, #1
 8000728:	2300      	moveq	r3, #0
 800072a:	b2db      	uxtb	r3, r3
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <_ZN3IMU8vIMUtaskEPKv+0x3c>
{
	LOGu("MPU6050 BASLATILDI\n");
 8000730:	481a      	ldr	r0, [pc, #104]	@ (800079c <_ZN3IMU8vIMUtaskEPKv+0xa0>)
 8000732:	f000 fb71 	bl	8000e18 <_Z4LOGuPKcz>
 8000736:	e002      	b.n	800073e <_ZN3IMU8vIMUtaskEPKv+0x42>
}
else{
	LOGu("MPU6050 BASLATILAMADI\n");
 8000738:	4819      	ldr	r0, [pc, #100]	@ (80007a0 <_ZN3IMU8vIMUtaskEPKv+0xa4>)
 800073a:	f000 fb6d 	bl	8000e18 <_Z4LOGuPKcz>
}
	while(1)
	{

		imu.MPU6050_Read_All(&hi2c1, &MPU6050);
 800073e:	f107 0208 	add.w	r2, r7, #8
 8000742:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000746:	4914      	ldr	r1, [pc, #80]	@ (8000798 <_ZN3IMU8vIMUtaskEPKv+0x9c>)
 8000748:	4618      	mov	r0, r3
 800074a:	f000 f885 	bl	8000858 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t>
		  double pitch =MPU6050.KalmanAngleY;
 800074e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8000752:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
		  double roll =MPU6050.KalmanAngleX;
 8000756:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800075a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		  double X=0;
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

		LOGu("Pitch:%d Roll:%.2f X:%f \n",(int)(pitch),roll,X);
 800076a:	ed97 7b1e 	vldr	d7, [r7, #120]	@ 0x78
 800076e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000772:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000776:	e9cd 2300 	strd	r2, r3, [sp]
 800077a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800077e:	ee17 1a90 	vmov	r1, s15
 8000782:	4808      	ldr	r0, [pc, #32]	@ (80007a4 <_ZN3IMU8vIMUtaskEPKv+0xa8>)
 8000784:	f000 fb48 	bl	8000e18 <_Z4LOGuPKcz>
		osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f007 fe57 	bl	800843c <osDelay>


	}
 800078e:	bf00      	nop
 8000790:	e7d5      	b.n	800073e <_ZN3IMU8vIMUtaskEPKv+0x42>
 8000792:	bf00      	nop
 8000794:	0800bb10 	.word	0x0800bb10
 8000798:	240005f0 	.word	0x240005f0
 800079c:	0800bb24 	.word	0x0800bb24
 80007a0:	0800bb38 	.word	0x0800bb38
 80007a4:	0800bb50 	.word	0x0800bb50

080007a8 <_ZN3IMU12MPU6050_InitEP19__I2C_HandleTypeDef>:
}



uint8_t IMU::MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80007b2:	2364      	movs	r3, #100	@ 0x64
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	f107 030f 	add.w	r3, r7, #15
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2301      	movs	r3, #1
 80007c2:	2275      	movs	r2, #117	@ 0x75
 80007c4:	21d0      	movs	r1, #208	@ 0xd0
 80007c6:	6838      	ldr	r0, [r7, #0]
 80007c8:	f002 fad2 	bl	8002d70 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	2b68      	cmp	r3, #104	@ 0x68
 80007d0:	d13d      	bne.n	800084e <_ZN3IMU12MPU6050_InitEP19__I2C_HandleTypeDef+0xa6>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80007d6:	2364      	movs	r3, #100	@ 0x64
 80007d8:	9302      	str	r3, [sp, #8]
 80007da:	2301      	movs	r3, #1
 80007dc:	9301      	str	r3, [sp, #4]
 80007de:	f107 030e 	add.w	r3, r7, #14
 80007e2:	9300      	str	r3, [sp, #0]
 80007e4:	2301      	movs	r3, #1
 80007e6:	226b      	movs	r2, #107	@ 0x6b
 80007e8:	21d0      	movs	r1, #208	@ 0xd0
 80007ea:	6838      	ldr	r0, [r7, #0]
 80007ec:	f002 f9ac 	bl	8002b48 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80007f0:	2307      	movs	r3, #7
 80007f2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80007f4:	2364      	movs	r3, #100	@ 0x64
 80007f6:	9302      	str	r3, [sp, #8]
 80007f8:	2301      	movs	r3, #1
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	f107 030e 	add.w	r3, r7, #14
 8000800:	9300      	str	r3, [sp, #0]
 8000802:	2301      	movs	r3, #1
 8000804:	2219      	movs	r2, #25
 8000806:	21d0      	movs	r1, #208	@ 0xd0
 8000808:	6838      	ldr	r0, [r7, #0]
 800080a:	f002 f99d 	bl	8002b48 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000812:	2364      	movs	r3, #100	@ 0x64
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	2301      	movs	r3, #1
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	f107 030e 	add.w	r3, r7, #14
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	221c      	movs	r2, #28
 8000824:	21d0      	movs	r1, #208	@ 0xd0
 8000826:	6838      	ldr	r0, [r7, #0]
 8000828:	f002 f98e 	bl	8002b48 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8000830:	2364      	movs	r3, #100	@ 0x64
 8000832:	9302      	str	r3, [sp, #8]
 8000834:	2301      	movs	r3, #1
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	f107 030e 	add.w	r3, r7, #14
 800083c:	9300      	str	r3, [sp, #0]
 800083e:	2301      	movs	r3, #1
 8000840:	221b      	movs	r2, #27
 8000842:	21d0      	movs	r1, #208	@ 0xd0
 8000844:	6838      	ldr	r0, [r7, #0]
 8000846:	f002 f97f 	bl	8002b48 <HAL_I2C_Mem_Write>
        return 0;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <_ZN3IMU12MPU6050_InitEP19__I2C_HandleTypeDef+0xa8>
    }
    return 1;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void IMU::MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b096      	sub	sp, #88	@ 0x58
 800085c:	af04      	add	r7, sp, #16
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8000864:	2364      	movs	r3, #100	@ 0x64
 8000866:	9302      	str	r3, [sp, #8]
 8000868:	230e      	movs	r3, #14
 800086a:	9301      	str	r3, [sp, #4]
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	2301      	movs	r3, #1
 8000874:	223b      	movs	r2, #59	@ 0x3b
 8000876:	21d0      	movs	r1, #208	@ 0xd0
 8000878:	68b8      	ldr	r0, [r7, #8]
 800087a:	f002 fa79 	bl	8002d70 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800087e:	7c3b      	ldrb	r3, [r7, #16]
 8000880:	021b      	lsls	r3, r3, #8
 8000882:	b21a      	sxth	r2, r3
 8000884:	7c7b      	ldrb	r3, [r7, #17]
 8000886:	b21b      	sxth	r3, r3
 8000888:	4313      	orrs	r3, r2
 800088a:	b21a      	sxth	r2, r3
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8000890:	7cbb      	ldrb	r3, [r7, #18]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	7cfb      	ldrb	r3, [r7, #19]
 8000898:	b21b      	sxth	r3, r3
 800089a:	4313      	orrs	r3, r2
 800089c:	b21a      	sxth	r2, r3
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80008a2:	7d3b      	ldrb	r3, [r7, #20]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	7d7b      	ldrb	r3, [r7, #21]
 80008aa:	b21b      	sxth	r3, r3
 80008ac:	4313      	orrs	r3, r2
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80008b4:	7dbb      	ldrb	r3, [r7, #22]
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80008c2:	7e3b      	ldrb	r3, [r7, #24]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	7e7b      	ldrb	r3, [r7, #25]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21a      	sxth	r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80008d4:	7ebb      	ldrb	r3, [r7, #26]
 80008d6:	021b      	lsls	r3, r3, #8
 80008d8:	b21a      	sxth	r2, r3
 80008da:	7efb      	ldrb	r3, [r7, #27]
 80008dc:	b21b      	sxth	r3, r3
 80008de:	4313      	orrs	r3, r2
 80008e0:	b21a      	sxth	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80008e6:	7f3b      	ldrb	r3, [r7, #28]
 80008e8:	021b      	lsls	r3, r3, #8
 80008ea:	b21a      	sxth	r2, r3
 80008ec:	7f7b      	ldrb	r3, [r7, #29]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000906:	ed9f 5b98 	vldr	d5, [pc, #608]	@ 8000b68 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x310>
 800090a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	ed83 7b02 	vstr	d7, [r3, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800091a:	ee07 3a90 	vmov	s15, r3
 800091e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000922:	ed9f 5b91 	vldr	d5, [pc, #580]	@ 8000b68 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x310>
 8000926:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	ed83 7b04 	vstr	d7, [r3, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800093e:	ed9f 5b8c 	vldr	d5, [pc, #560]	@ 8000b70 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x318>
 8000942:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	ed83 7b06 	vstr	d7, [r3, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 800094c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8000950:	ee07 3a90 	vmov	s15, r3
 8000954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000958:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8000ba0 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x348>
 800095c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000960:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8000ba4 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x34c>
 8000964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000974:	ee07 3a90 	vmov	s15, r3
 8000978:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800097c:	ed9f 5b7e 	vldr	d5, [pc, #504]	@ 8000b78 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x320>
 8000980:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8000990:	ee07 3a90 	vmov	s15, r3
 8000994:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000998:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 8000b78 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x320>
 800099c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80009ac:	ee07 3a90 	vmov	s15, r3
 80009b0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80009b4:	ed9f 5b70 	vldr	d5, [pc, #448]	@ 8000b78 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x320>
 80009b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80009c2:	f001 f993 	bl	8001cec <HAL_GetTick>
 80009c6:	4602      	mov	r2, r0
 80009c8:	4b77      	ldr	r3, [pc, #476]	@ (8000ba8 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x350>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	ee07 3a90 	vmov	s15, r3
 80009d2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80009d6:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 8000b80 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x328>
 80009da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009de:	ed87 7b0c 	vstr	d7, [r7, #48]	@ 0x30
    timer = HAL_GetTick();
 80009e2:	f001 f983 	bl	8001cec <HAL_GetTick>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a6f      	ldr	r2, [pc, #444]	@ (8000ba8 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x350>)
 80009ea:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009f2:	461a      	mov	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009fa:	fb03 f202 	mul.w	r2, r3, r2
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a04:	4619      	mov	r1, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a0c:	fb01 f303 	mul.w	r3, r1, r3
    double roll_sqrt = sqrt(
 8000a10:	4413      	add	r3, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f9ce 	bl	8000db4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a18:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28
    if (roll_sqrt != 0.0) {
 8000a1c:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000a20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a28:	d017      	beq.n	8000a5a <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x202>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000a30:	ee07 3a90 	vmov	s15, r3
 8000a34:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000a38:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8000a3c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000a40:	eeb0 0b45 	vmov.f64	d0, d5
 8000a44:	f00a f918 	bl	800ac78 <atan>
 8000a48:	eeb0 7b40 	vmov.f64	d7, d0
 8000a4c:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 8000b88 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x330>
 8000a50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a54:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
 8000a58:	e005      	b.n	8000a66 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x20e>
    } else {
        roll = 0.0;
 8000a5a:	f04f 0200 	mov.w	r2, #0
 8000a5e:	f04f 0300 	mov.w	r3, #0
 8000a62:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a6c:	425a      	negs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4610      	mov	r0, r2
 8000a78:	f000 f9b0 	bl	8000ddc <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a80:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8000b88 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x330>
 8000a84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a88:	ed87 7b08 	vstr	d7, [r7, #32]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8000a8c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000a90:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8000b90 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x338>
 8000a94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9c:	d509      	bpl.n	8000ab2 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x25a>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000aa4:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 8000b98 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x340>
 8000aa8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	dc12      	bgt.n	8000ad8 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x280>
 8000ab2:	ed97 7b08 	vldr	d7, [r7, #32]
 8000ab6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8000b98 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x340>
 8000aba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	dd14      	ble.n	8000aee <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x296>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000aca:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000b90 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x338>
 8000ace:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ad6:	d50a      	bpl.n	8000aee <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x296>
        KalmanY.angle = pitch;
 8000ad8:	4934      	ldr	r1, [pc, #208]	@ (8000bac <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x354>)
 8000ada:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ade:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000ae8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 8000aec:	e011      	b.n	8000b12 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x2ba>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8000af4:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8000af8:	eeb0 1b47 	vmov.f64	d1, d7
 8000afc:	ed97 0b08 	vldr	d0, [r7, #32]
 8000b00:	492a      	ldr	r1, [pc, #168]	@ (8000bac <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x354>)
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f000 f856 	bl	8000bb4 <_ZN3IMU15Kalman_getAngleEP8Kalman_tddd>
 8000b08:	eeb0 7b40 	vmov.f64	d7, d0
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 8000b18:	eeb0 7bc7 	vabs.f64	d7, d7
 8000b1c:	ed9f 6b1e 	vldr	d6, [pc, #120]	@ 8000b98 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x340>
 8000b20:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b28:	dd07      	ble.n	8000b3a <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x2e2>
        DataStruct->Gx = -DataStruct->Gx;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8000b30:	eeb1 7b47 	vneg.f64	d7, d7
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8000b40:	ed97 2b0c 	vldr	d2, [r7, #48]	@ 0x30
 8000b44:	eeb0 1b47 	vmov.f64	d1, d7
 8000b48:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8000b4c:	4918      	ldr	r1, [pc, #96]	@ (8000bb0 <_ZN3IMU16MPU6050_Read_AllEP19__I2C_HandleTypeDefP9MPU6050_t+0x358>)
 8000b4e:	68f8      	ldr	r0, [r7, #12]
 8000b50:	f000 f830 	bl	8000bb4 <_ZN3IMU15Kalman_getAngleEP8Kalman_tddd>
 8000b54:	eeb0 7b40 	vmov.f64	d7, d0
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48

}
 8000b5e:	bf00      	nop
 8000b60:	3748      	adds	r7, #72	@ 0x48
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40d00000 	.word	0x40d00000
 8000b70:	00000000 	.word	0x00000000
 8000b74:	40cc2900 	.word	0x40cc2900
 8000b78:	00000000 	.word	0x00000000
 8000b7c:	40606000 	.word	0x40606000
 8000b80:	00000000 	.word	0x00000000
 8000b84:	408f4000 	.word	0x408f4000
 8000b88:	1a63c1f8 	.word	0x1a63c1f8
 8000b8c:	404ca5dc 	.word	0x404ca5dc
 8000b90:	00000000 	.word	0x00000000
 8000b94:	c0568000 	.word	0xc0568000
 8000b98:	00000000 	.word	0x00000000
 8000b9c:	40568000 	.word	0x40568000
 8000ba0:	43aa0000 	.word	0x43aa0000
 8000ba4:	42121eb8 	.word	0x42121eb8
 8000ba8:	240001d0 	.word	0x240001d0
 8000bac:	24000048 	.word	0x24000048
 8000bb0:	24000000 	.word	0x24000000

08000bb4 <_ZN3IMU15Kalman_getAngleEP8Kalman_tddd>:

double IMU::Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8000bb4:	b480      	push	{r7}
 8000bb6:	b097      	sub	sp, #92	@ 0x5c
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	61f8      	str	r0, [r7, #28]
 8000bbc:	61b9      	str	r1, [r7, #24]
 8000bbe:	ed87 0b04 	vstr	d0, [r7, #16]
 8000bc2:	ed87 1b02 	vstr	d1, [r7, #8]
 8000bc6:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	ed93 7b08 	vldr	d7, [r3, #32]
 8000bd0:	ed97 6b02 	vldr	d6, [r7, #8]
 8000bd4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bd8:	ed87 7b14 	vstr	d7, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	ed93 6b06 	vldr	d6, [r3, #24]
 8000be2:	ed97 5b00 	vldr	d5, [r7]
 8000be6:	ed97 7b14 	vldr	d7, [r7, #80]	@ 0x50
 8000bea:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000bee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	ed83 7b06 	vstr	d7, [r3, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8000c04:	ed97 7b00 	vldr	d7, [r7]
 8000c08:	ee25 5b07 	vmul.f64	d5, d5, d7
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 8000c12:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 8000c1c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	ed93 7b00 	vldr	d7, [r3]
 8000c26:	ee35 5b07 	vadd.f64	d5, d5, d7
 8000c2a:	ed97 7b00 	vldr	d7, [r7]
 8000c2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8000c48:	ed97 7b00 	vldr	d7, [r7]
 8000c4c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c50:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8000c66:	ed97 7b00 	vldr	d7, [r7]
 8000c6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c6e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	ed93 5b02 	vldr	d5, [r3, #8]
 8000c84:	ed97 7b00 	vldr	d7, [r7]
 8000c88:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000ca2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ca6:	ed87 7b12 	vstr	d7, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	ed93 5b0a 	vldr	d5, [r3, #40]	@ 0x28
 8000cb0:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8000cb4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cb8:	ed87 7b08 	vstr	d7, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8000cbc:	69bb      	ldr	r3, [r7, #24]
 8000cbe:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8000cc2:	ed97 6b12 	vldr	d6, [r7, #72]	@ 0x48
 8000cc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cca:	ed87 7b0a 	vstr	d7, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	ed93 7b06 	vldr	d7, [r3, #24]
 8000cd4:	ed97 6b04 	vldr	d6, [r7, #16]
 8000cd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000cdc:	ed87 7b10 	vstr	d7, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	ed93 6b06 	vldr	d6, [r3, #24]
 8000ce6:	ed97 5b08 	vldr	d5, [r7, #32]
 8000cea:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8000cee:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000cf2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	ed83 7b06 	vstr	d7, [r3, #24]
    Kalman->bias += K[1] * y;
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	ed93 6b08 	vldr	d6, [r3, #32]
 8000d02:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8000d06:	ed97 7b10 	vldr	d7, [r7, #64]	@ 0x40
 8000d0a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	ed83 7b08 	vstr	d7, [r3, #32]

    double P00_temp = Kalman->P[0][0];
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000d1e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8000d28:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8000d32:	ed97 5b08 	vldr	d5, [r7, #32]
 8000d36:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8000d3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	ed93 6b0c 	vldr	d6, [r3, #48]	@ 0x30
 8000d4e:	ed97 5b08 	vldr	d5, [r7, #32]
 8000d52:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000d56:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	ed83 7b0c 	vstr	d7, [r3, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	ed93 6b0e 	vldr	d6, [r3, #56]	@ 0x38
 8000d6a:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8000d6e:	ed97 7b0e 	vldr	d7, [r7, #56]	@ 0x38
 8000d72:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	ed83 7b0e 	vstr	d7, [r3, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	ed93 6b10 	vldr	d6, [r3, #64]	@ 0x40
 8000d86:	ed97 5b0a 	vldr	d5, [r7, #40]	@ 0x28
 8000d8a:	ed97 7b0c 	vldr	d7, [r7, #48]	@ 0x30
 8000d8e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d92:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	ed83 7b10 	vstr	d7, [r3, #64]	@ 0x40

    return Kalman->angle;
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000da2:	ec43 2b17 	vmov	d7, r2, r3
};
 8000da6:	eeb0 0b47 	vmov.f64	d0, d7
 8000daa:	375c      	adds	r7, #92	@ 0x5c
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	ee07 3a90 	vmov	s15, r3
 8000dc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dc6:	eeb0 0b47 	vmov.f64	d0, d7
 8000dca:	f009 ff35 	bl	800ac38 <sqrt>
 8000dce:	eeb0 7b40 	vmov.f64	d7, d0
 8000dd2:	eeb0 0b47 	vmov.f64	d0, d7
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <_ZSt5atan2IisEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    atan2(_Tp __y, _Up __x)
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
      return atan2(__type(__y), __type(__x));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	ee07 3a90 	vmov	s15, r3
 8000dee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000df2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000df6:	ee06 3a90 	vmov	s13, r3
 8000dfa:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8000dfe:	eeb0 1b46 	vmov.f64	d1, d6
 8000e02:	eeb0 0b47 	vmov.f64	d0, d7
 8000e06:	f009 ff15 	bl	800ac34 <atan2>
 8000e0a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8000e0e:	eeb0 0b47 	vmov.f64	d0, d7
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_Z4LOGuPKcz>:
extern UART_HandleTypeDef huart2;
extern osMutexId LogMutexHandle;


void LOGu(const char *format, ...)
{
 8000e18:	b40f      	push	{r0, r1, r2, r3}
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b0cc      	sub	sp, #304	@ 0x130
 8000e1e:	af00      	add	r7, sp, #0
    char message[300]; // Mesajı tutacak bir dizi
    va_list args; // Değişken argümanlar için
    va_start(args, format); // Argüman listesini başlat
 8000e20:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8000e24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000e2c:	601a      	str	r2, [r3, #0]

    // Mesajı formatlayın
    vsnprintf(message, sizeof(message), format, args);
 8000e2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000e32:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000e36:	1d38      	adds	r0, r7, #4
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000e3e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8000e42:	f00a f9d5 	bl	800b1f0 <vsniprintf>

    va_end(args); // Argüman listesini sonlandır

    // Mutex ile UART erişimini güvenli hale getirin
    if (osMutexWait(LogMutexHandle, osWaitForever) == osOK)
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <_Z4LOGuPKcz+0x80>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f007 fb20 	bl	8008494 <osMutexWait>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bf0c      	ite	eq
 8000e5a:	2301      	moveq	r3, #1
 8000e5c:	2300      	movne	r3, #0
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d011      	beq.n	8000e88 <_Z4LOGuPKcz+0x70>
    {
        // Mesajı UART üzerinden gönderin
        if (HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 10) != HAL_OK)
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fa3a 	bl	80002e0 <strlen>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	1d39      	adds	r1, r7, #4
 8000e72:	230a      	movs	r3, #10
 8000e74:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <_Z4LOGuPKcz+0x84>)
 8000e76:	f005 fe43 	bl	8006b00 <HAL_UART_Transmit>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
        {
            // Hata durumu yönetimi
        }

        // UART erişimi bitti, mutex'i bırak
        osMutexRelease(LogMutexHandle);
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <_Z4LOGuPKcz+0x80>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f007 fb54 	bl	8008530 <osMutexRelease>
    }
}
 8000e88:	bf00      	nop
 8000e8a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e94:	b004      	add	sp, #16
 8000e96:	4770      	bx	lr
 8000e98:	24000b2c 	.word	0x24000b2c
 8000e9c:	2400055c 	.word	0x2400055c

08000ea0 <_ZN19SistemYapilandiriciC1Ev>:
#include "LOG.h"
/**
 * @brief SistemYapilandirici constructor
 */

 SistemYapilandirici::SistemYapilandirici()
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
{
	 //Instance();
	 if(!SistemYapilandiriciBaslatildi)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	f083 0301 	eor.w	r3, r3, #1
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <_ZN19SistemYapilandiriciC1Ev+0x24>
	 {
    	islevBaslat();
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 f807 	bl	8000ed0 <_ZN19SistemYapilandirici11islevBaslatEv>
    	return;
 8000ec2:	bf00      	nop
	 }

}
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <_ZN19SistemYapilandirici11islevBaslatEv>:

/**
 * @brief Sistemde olan tasklari baslatir
 */
void SistemYapilandirici::islevBaslat()
{
 8000ed0:	b5b0      	push	{r4, r5, r7, lr}
 8000ed2:	b092      	sub	sp, #72	@ 0x48
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]


    /* definition and creation of IMUtask */
    osThreadId IMUtaskHandle;
    osThreadDef(IMUtask, IMU::vIMUtask, osPriorityAboveNormal, 0, taskSize);
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <_ZN19SistemYapilandirici11islevBaslatEv+0x88>)
 8000eda:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000ede:	461d      	mov	r5, r3
 8000ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ee8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8000eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f007 fa56 	bl	80083a4 <osThreadCreate>
 8000ef8:	6478      	str	r0, [r7, #68]	@ 0x44
    // Task'ın başarıyla oluşturulup oluşturulmadığını kontrol et
    if (IMUtaskHandle == NULL)
 8000efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <_ZN19SistemYapilandirici11islevBaslatEv+0x38>
    {
    	LOGu("IMUtask olusturulamadi \n");
 8000f00:	4816      	ldr	r0, [pc, #88]	@ (8000f5c <_ZN19SistemYapilandirici11islevBaslatEv+0x8c>)
 8000f02:	f7ff ff89 	bl	8000e18 <_Z4LOGuPKcz>
 8000f06:	e002      	b.n	8000f0e <_ZN19SistemYapilandirici11islevBaslatEv+0x3e>

    }
    else
    {
    	LOGu("IMUtask olusturuldu \n");
 8000f08:	4815      	ldr	r0, [pc, #84]	@ (8000f60 <_ZN19SistemYapilandirici11islevBaslatEv+0x90>)
 8000f0a:	f7ff ff85 	bl	8000e18 <_Z4LOGuPKcz>
    }


	  /* definition and creation of GPStask */
		osThreadId GPStaskHandle;
	  osThreadDef(GPStask, GPS::vGPStask, osPriorityAboveNormal, 0, taskSize);
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_ZN19SistemYapilandirici11islevBaslatEv+0x94>)
 8000f10:	f107 0408 	add.w	r4, r7, #8
 8000f14:	461d      	mov	r5, r3
 8000f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	  GPStaskHandle = osThreadCreate(osThread(GPStask), NULL);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 fa3b 	bl	80083a4 <osThreadCreate>
 8000f2e:	6438      	str	r0, [r7, #64]	@ 0x40
	    // Task'ın başarıyla oluşturulup oluşturulmadığını kontrol et
	    if (GPStaskHandle == NULL)
 8000f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d103      	bne.n	8000f3e <_ZN19SistemYapilandirici11islevBaslatEv+0x6e>
	    {
	    	LOGu("GPStask olusturulamadi \n");
 8000f36:	480c      	ldr	r0, [pc, #48]	@ (8000f68 <_ZN19SistemYapilandirici11islevBaslatEv+0x98>)
 8000f38:	f7ff ff6e 	bl	8000e18 <_Z4LOGuPKcz>
 8000f3c:	e002      	b.n	8000f44 <_ZN19SistemYapilandirici11islevBaslatEv+0x74>
	    }
	    else
	    {
	    	LOGu("GPStask olusturuldu \n");
 8000f3e:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <_ZN19SistemYapilandirici11islevBaslatEv+0x9c>)
 8000f40:	f7ff ff6a 	bl	8000e18 <_Z4LOGuPKcz>
	    {
	    	LOGu("NAVtask olusturuldu \n");
	    }
#endif

	    LOGu("Sistem Yapilandirici Bitti\n");
 8000f44:	480a      	ldr	r0, [pc, #40]	@ (8000f70 <_ZN19SistemYapilandirici11islevBaslatEv+0xa0>)
 8000f46:	f7ff ff67 	bl	8000e18 <_Z4LOGuPKcz>
	    SistemYapilandiriciBaslatildi=true;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]

return;
 8000f50:	bf00      	nop
	}
 8000f52:	3748      	adds	r7, #72	@ 0x48
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bdb0      	pop	{r4, r5, r7, pc}
 8000f58:	0800bbf8 	.word	0x0800bbf8
 8000f5c:	0800bb6c 	.word	0x0800bb6c
 8000f60:	0800bb88 	.word	0x0800bb88
 8000f64:	0800bc1c 	.word	0x0800bc1c
 8000f68:	0800bba0 	.word	0x0800bba0
 8000f6c:	0800bbbc 	.word	0x0800bbbc
 8000f70:	0800bbd4 	.word	0x0800bbd4

08000f74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2280      	movs	r2, #128	@ 0x80
 8000f90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f92:	bf00      	nop
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	240001d4 	.word	0x240001d4
 8000fa4:	24000274 	.word	0x24000274

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b5b0      	push	{r4, r5, r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f000 fe4d 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f83f 	bl	8001034 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 f9b3 	bl	8001320 <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 8000fba:	f000 f8c9 	bl	8001150 <_ZL11MX_ETH_Initv>
  MX_USART2_UART_Init();
 8000fbe:	f000 f919 	bl	80011f4 <_ZL19MX_USART2_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 8000fc2:	f000 f977 	bl	80012b4 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 8000fce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f007 fae1 	bl	800859c <osSemaphoreCreate>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a11      	ldr	r2, [pc, #68]	@ (8001024 <main+0x7c>)
 8000fde:	6013      	str	r3, [r2, #0]

  osMutexDef(LogMutex);
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	@ 0x24
  LogMutexHandle = osMutexCreate(osMutex(LogMutex));
 8000fe8:	f107 0320 	add.w	r3, r7, #32
 8000fec:	4618      	mov	r0, r3
 8000fee:	f007 fa39 	bl	8008464 <osMutexCreate>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8001028 <main+0x80>)
 8000ff6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityHigh, 0, 1024);
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <main+0x84>)
 8000ffa:	1d3c      	adds	r4, r7, #4
 8000ffc:	461d      	mov	r5, r3
 8000ffe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001000:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001002:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001006:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f007 f9c8 	bl	80083a4 <osThreadCreate>
 8001014:	4603      	mov	r3, r0
 8001016:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <main+0x88>)
 8001018:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800101a:	f007 f9bc 	bl	8008396 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800101e:	bf00      	nop
 8001020:	e7fd      	b.n	800101e <main+0x76>
 8001022:	bf00      	nop
 8001024:	24000b30 	.word	0x24000b30
 8001028:	24000b2c 	.word	0x24000b2c
 800102c:	0800bc44 	.word	0x0800bc44
 8001030:	24000b28 	.word	0x24000b28

08001034 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b09c      	sub	sp, #112	@ 0x70
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	224c      	movs	r2, #76	@ 0x4c
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f00a f8e2 	bl	800b20c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2220      	movs	r2, #32
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f00a f8dc 	bl	800b20c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001054:	2002      	movs	r0, #2
 8001056:	f002 fb97 	bl	8003788 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b3a      	ldr	r3, [pc, #232]	@ (8001148 <_Z18SystemClock_Configv+0x114>)
 8001060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001062:	4a39      	ldr	r2, [pc, #228]	@ (8001148 <_Z18SystemClock_Configv+0x114>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800106a:	4b37      	ldr	r3, [pc, #220]	@ (8001148 <_Z18SystemClock_Configv+0x114>)
 800106c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	4b35      	ldr	r3, [pc, #212]	@ (800114c <_Z18SystemClock_Configv+0x118>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800107c:	4a33      	ldr	r2, [pc, #204]	@ (800114c <_Z18SystemClock_Configv+0x118>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b31      	ldr	r3, [pc, #196]	@ (800114c <_Z18SystemClock_Configv+0x118>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800108c:	603b      	str	r3, [r7, #0]
 800108e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001090:	bf00      	nop
 8001092:	4b2e      	ldr	r3, [pc, #184]	@ (800114c <_Z18SystemClock_Configv+0x118>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800109a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800109e:	bf14      	ite	ne
 80010a0:	2301      	movne	r3, #1
 80010a2:	2300      	moveq	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f3      	bne.n	8001092 <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010aa:	2303      	movs	r3, #3
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80010b4:	2301      	movs	r3, #1
 80010b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b8:	2340      	movs	r3, #64	@ 0x40
 80010ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	2302      	movs	r3, #2
 80010be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80010c8:	2318      	movs	r3, #24
 80010ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d0:	2304      	movs	r3, #4
 80010d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010d8:	230c      	movs	r3, #12
 80010da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010dc:	2300      	movs	r3, #0
 80010de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f002 fb97 	bl	800381c <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	bf14      	ite	ne
 80010f4:	2301      	movne	r3, #1
 80010f6:	2300      	moveq	r3, #0
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80010fe:	f000 fa17 	bl	8001530 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	233f      	movs	r3, #63	@ 0x3f
 8001104:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001116:	2340      	movs	r3, #64	@ 0x40
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f002 ffd2 	bl	80040d0 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	bf14      	ite	ne
 8001132:	2301      	movne	r3, #1
 8001134:	2300      	moveq	r3, #0
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 800113c:	f000 f9f8 	bl	8001530 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3770      	adds	r7, #112	@ 0x70
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58000400 	.word	0x58000400
 800114c:	58024800 	.word	0x58024800

08001150 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 8001156:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <_ZL11MX_ETH_Initv+0x90>)
 8001158:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001166:	4b1f      	ldr	r3, [pc, #124]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 8001168:	22e1      	movs	r2, #225	@ 0xe1
 800116a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800116c:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001172:	4b1c      	ldr	r3, [pc, #112]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001178:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 800117a:	2200      	movs	r2, #0
 800117c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 8001180:	4a18      	ldr	r2, [pc, #96]	@ (80011e4 <_ZL11MX_ETH_Initv+0x94>)
 8001182:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 8001186:	2201      	movs	r2, #1
 8001188:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 800118c:	4a16      	ldr	r2, [pc, #88]	@ (80011e8 <_ZL11MX_ETH_Initv+0x98>)
 800118e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 8001192:	4a16      	ldr	r2, [pc, #88]	@ (80011ec <_ZL11MX_ETH_Initv+0x9c>)
 8001194:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 8001198:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800119c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800119e:	480f      	ldr	r0, [pc, #60]	@ (80011dc <_ZL11MX_ETH_Initv+0x8c>)
 80011a0:	f000 fed4 	bl	8001f4c <HAL_ETH_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf14      	ite	ne
 80011aa:	2301      	movne	r3, #1
 80011ac:	2300      	moveq	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 80011b4:	f000 f9bc 	bl	8001530 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80011b8:	2238      	movs	r2, #56	@ 0x38
 80011ba:	2100      	movs	r1, #0
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <_ZL11MX_ETH_Initv+0xa0>)
 80011be:	f00a f825 	bl	800b20c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <_ZL11MX_ETH_Initv+0xa0>)
 80011c4:	2221      	movs	r2, #33	@ 0x21
 80011c6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011c8:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <_ZL11MX_ETH_Initv+0xa0>)
 80011ca:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011ce:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_ZL11MX_ETH_Initv+0xa0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	240004ac 	.word	0x240004ac
 80011e0:	40028000 	.word	0x40028000
 80011e4:	24000b34 	.word	0x24000b34
 80011e8:	24000154 	.word	0x24000154
 80011ec:	240000f4 	.word	0x240000f4
 80011f0:	24000474 	.word	0x24000474

080011f4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
	  huart2.Instance = USART2;
 80011f8:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 80011fa:	4a2d      	ldr	r2, [pc, #180]	@ (80012b0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80011fc:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 115200;
 80011fe:	4b2b      	ldr	r3, [pc, #172]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b26      	ldr	r3, [pc, #152]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b21      	ldr	r3, [pc, #132]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800122c:	2200      	movs	r2, #0
 800122e:	621a      	str	r2, [r3, #32]
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001232:	2200      	movs	r2, #0
 8001234:	625a      	str	r2, [r3, #36]	@ 0x24
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001236:	4b1d      	ldr	r3, [pc, #116]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	@ 0x28
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 800123c:	481b      	ldr	r0, [pc, #108]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800123e:	f005 fc0f 	bl	8006a60 <HAL_UART_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <_ZL19MX_USART2_UART_Initv+0x62>
	  {
	    Error_Handler();
 8001252:	f000 f96d 	bl	8001530 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001256:	2100      	movs	r1, #0
 8001258:	4814      	ldr	r0, [pc, #80]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800125a:	f006 fca0 	bl	8007b9e <HAL_UARTEx_SetTxFifoThreshold>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <_ZL19MX_USART2_UART_Initv+0x7e>
	  {
	    Error_Handler();
 800126e:	f000 f95f 	bl	8001530 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001272:	2100      	movs	r1, #0
 8001274:	480d      	ldr	r0, [pc, #52]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001276:	f006 fcd0 	bl	8007c1a <HAL_UARTEx_SetRxFifoThreshold>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZL19MX_USART2_UART_Initv+0x9a>
	  {
	    Error_Handler();
 800128a:	f000 f951 	bl	8001530 <Error_Handler>
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8001290:	f006 fc4c 	bl	8007b2c <HAL_UARTEx_DisableFifoMode>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	bf14      	ite	ne
 800129a:	2301      	movne	r3, #1
 800129c:	2300      	moveq	r3, #0
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <_ZL19MX_USART2_UART_Initv+0xb4>
	  {
	    Error_Handler();
 80012a4:	f000 f944 	bl	8001530 <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2400055c 	.word	0x2400055c
 80012b0:	40004400 	.word	0x40004400

080012b4 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012ba:	4a18      	ldr	r2, [pc, #96]	@ (800131c <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 80012bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80012be:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012c0:	2209      	movs	r2, #9
 80012c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012d8:	2201      	movs	r2, #1
 80012da:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012de:	2200      	movs	r2, #0
 80012e0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012fa:	4807      	ldr	r0, [pc, #28]	@ (8001318 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 80012fc:	f002 f914 	bl	8003528 <HAL_PCD_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	bf14      	ite	ne
 8001306:	2301      	movne	r3, #1
 8001308:	2300      	moveq	r3, #0
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8001310:	f000 f90e 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	24000644 	.word	0x24000644
 800131c:	40080000 	.word	0x40080000

08001320 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	@ 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	4b62      	ldr	r3, [pc, #392]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	4a60      	ldr	r2, [pc, #384]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 800133e:	f043 0304 	orr.w	r3, r3, #4
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001346:	4b5e      	ldr	r3, [pc, #376]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001354:	4b5a      	ldr	r3, [pc, #360]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	4a59      	ldr	r2, [pc, #356]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001364:	4b56      	ldr	r3, [pc, #344]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	4b53      	ldr	r3, [pc, #332]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	4a51      	ldr	r2, [pc, #324]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001382:	4b4f      	ldr	r3, [pc, #316]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b4b      	ldr	r3, [pc, #300]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	4a4a      	ldr	r2, [pc, #296]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a0:	4b47      	ldr	r3, [pc, #284]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	4b44      	ldr	r3, [pc, #272]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	4a42      	ldr	r2, [pc, #264]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013be:	4b40      	ldr	r3, [pc, #256]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c4:	f003 0308 	and.w	r3, r3, #8
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013cc:	4b3c      	ldr	r3, [pc, #240]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	4a3b      	ldr	r2, [pc, #236]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013dc:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ea:	4b35      	ldr	r3, [pc, #212]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f0:	4a33      	ldr	r2, [pc, #204]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <_ZL12MX_GPIO_Initv+0x1a0>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f244 0101 	movw	r1, #16385	@ 0x4001
 800140e:	482d      	ldr	r0, [pc, #180]	@ (80014c4 <_ZL12MX_GPIO_Initv+0x1a4>)
 8001410:	f001 fb80 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800141a:	482b      	ldr	r0, [pc, #172]	@ (80014c8 <_ZL12MX_GPIO_Initv+0x1a8>)
 800141c:	f001 fb7a 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2102      	movs	r1, #2
 8001424:	4829      	ldr	r0, [pc, #164]	@ (80014cc <_ZL12MX_GPIO_Initv+0x1ac>)
 8001426:	f001 fb75 	bl	8002b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800142a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	4824      	ldr	r0, [pc, #144]	@ (80014d0 <_ZL12MX_GPIO_Initv+0x1b0>)
 8001440:	f001 f9b8 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001444:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <_ZL12MX_GPIO_Initv+0x1a4>)
 800145e:	f001 f9a9 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001466:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <_ZL12MX_GPIO_Initv+0x1a8>)
 800147c:	f001 f99a 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001484:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800148e:	f107 031c 	add.w	r3, r7, #28
 8001492:	4619      	mov	r1, r3
 8001494:	480f      	ldr	r0, [pc, #60]	@ (80014d4 <_ZL12MX_GPIO_Initv+0x1b4>)
 8001496:	f001 f98d 	bl	80027b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800149a:	2302      	movs	r3, #2
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	2301      	movs	r3, #1
 80014a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4806      	ldr	r0, [pc, #24]	@ (80014cc <_ZL12MX_GPIO_Initv+0x1ac>)
 80014b2:	f001 f97f 	bl	80027b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014b6:	bf00      	nop
 80014b8:	3730      	adds	r7, #48	@ 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58020400 	.word	0x58020400
 80014c8:	58020c00 	.word	0x58020c00
 80014cc:	58021000 	.word	0x58021000
 80014d0:	58020800 	.word	0x58020800
 80014d4:	58021800 	.word	0x58021800

080014d8 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */



	LOGu("Sistem Yapilandirici Basliyor\n");
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <_Z16StartDefaultTaskPKv+0x30>)
 80014e2:	f7ff fc99 	bl	8000e18 <_Z4LOGuPKcz>
	SistemYapilandirici *p_SistemYapilandirici = new SistemYapilandirici();
 80014e6:	2001      	movs	r0, #1
 80014e8:	f009 fb88 	bl	800abfc <_Znwj>
 80014ec:	4603      	mov	r3, r0
 80014ee:	461c      	mov	r4, r3
 80014f0:	4620      	mov	r0, r4
 80014f2:	f7ff fcd5 	bl	8000ea0 <_ZN19SistemYapilandiriciC1Ev>
 80014f6:	60fc      	str	r4, [r7, #12]
	osDelay(1000);
 80014f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014fc:	f006 ff9e 	bl	800843c <osDelay>

	return;
 8001500:	bf00      	nop
 /* USER CODE END 5 */
}
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bd90      	pop	{r4, r7, pc}
 8001508:	0800bc60 	.word	0x0800bc60

0800150c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a04      	ldr	r2, [pc, #16]	@ (800152c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d101      	bne.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800151e:	f000 fbd1 	bl	8001cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40010000 	.word	0x40010000

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <Error_Handler+0x8>

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <HAL_MspInit+0x38>)
 8001544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001548:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <HAL_MspInit+0x38>)
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001552:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <HAL_MspInit+0x38>)
 8001554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	210f      	movs	r1, #15
 8001564:	f06f 0001 	mvn.w	r0, #1
 8001568:	f000 fcc8 	bl	8001efc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400

08001578 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	@ 0x38
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a59      	ldr	r2, [pc, #356]	@ (80016fc <HAL_ETH_MspInit+0x184>)
 8001596:	4293      	cmp	r3, r2
 8001598:	f040 80ab 	bne.w	80016f2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800159c:	4b58      	ldr	r3, [pc, #352]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 800159e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015a2:	4a57      	ldr	r2, [pc, #348]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015a8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ac:	4b54      	ldr	r3, [pc, #336]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015ba:	4b51      	ldr	r3, [pc, #324]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c0:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015d8:	4b49      	ldr	r3, [pc, #292]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015de:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015e8:	4b45      	ldr	r3, [pc, #276]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b42      	ldr	r3, [pc, #264]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015fc:	4a40      	ldr	r2, [pc, #256]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001606:	4b3e      	ldr	r3, [pc, #248]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b3a      	ldr	r3, [pc, #232]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800161a:	4a39      	ldr	r2, [pc, #228]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001638:	4a31      	ldr	r2, [pc, #196]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001650:	4b2b      	ldr	r3, [pc, #172]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001656:	4a2a      	ldr	r2, [pc, #168]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001660:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <HAL_ETH_MspInit+0x188>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800166e:	2332      	movs	r3, #50	@ 0x32
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800167e:	230b      	movs	r3, #11
 8001680:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	481e      	ldr	r0, [pc, #120]	@ (8001704 <HAL_ETH_MspInit+0x18c>)
 800168a:	f001 f893 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800168e:	2386      	movs	r3, #134	@ 0x86
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800169e:	230b      	movs	r3, #11
 80016a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4817      	ldr	r0, [pc, #92]	@ (8001708 <HAL_ETH_MspInit+0x190>)
 80016aa:	f001 f883 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b4:	2302      	movs	r3, #2
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c0:	230b      	movs	r3, #11
 80016c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c8:	4619      	mov	r1, r3
 80016ca:	4810      	ldr	r0, [pc, #64]	@ (800170c <HAL_ETH_MspInit+0x194>)
 80016cc:	f001 f872 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80016d0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80016d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e2:	230b      	movs	r3, #11
 80016e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4808      	ldr	r0, [pc, #32]	@ (8001710 <HAL_ETH_MspInit+0x198>)
 80016ee:	f001 f861 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80016f2:	bf00      	nop
 80016f4:	3738      	adds	r7, #56	@ 0x38
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40028000 	.word	0x40028000
 8001700:	58024400 	.word	0x58024400
 8001704:	58020800 	.word	0x58020800
 8001708:	58020000 	.word	0x58020000
 800170c:	58020400 	.word	0x58020400
 8001710:	58021800 	.word	0x58021800

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b0bc      	sub	sp, #240	@ 0xf0
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800172c:	f107 0318 	add.w	r3, r7, #24
 8001730:	22c0      	movs	r2, #192	@ 0xc0
 8001732:	2100      	movs	r1, #0
 8001734:	4618      	mov	r0, r3
 8001736:	f009 fd69 	bl	800b20c <memset>
  if(huart->Instance==USART2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <HAL_UART_MspInit+0x10c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d169      	bne.n	8001818 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001744:	f04f 0202 	mov.w	r2, #2
 8001748:	f04f 0300 	mov.w	r3, #0
 800174c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001750:	2300      	movs	r3, #0
 8001752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	4618      	mov	r0, r3
 800175c:	f003 f886 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001766:	f7ff fee3 	bl	8001530 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <HAL_UART_MspInit+0x110>)
 800176c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001770:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <HAL_UART_MspInit+0x110>)
 8001772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001776:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <HAL_UART_MspInit+0x110>)
 800177c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001788:	4b26      	ldr	r3, [pc, #152]	@ (8001824 <HAL_UART_MspInit+0x110>)
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800178e:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <HAL_UART_MspInit+0x110>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001798:	4b22      	ldr	r3, [pc, #136]	@ (8001824 <HAL_UART_MspInit+0x110>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001824 <HAL_UART_MspInit+0x110>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <HAL_UART_MspInit+0x110>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001824 <HAL_UART_MspInit+0x110>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017c4:	2308      	movs	r3, #8
 80017c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017dc:	2307      	movs	r3, #7
 80017de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017e6:	4619      	mov	r1, r3
 80017e8:	480f      	ldr	r0, [pc, #60]	@ (8001828 <HAL_UART_MspInit+0x114>)
 80017ea:	f000 ffe3 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017ee:	2320      	movs	r3, #32
 80017f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001806:	2307      	movs	r3, #7
 8001808:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001810:	4619      	mov	r1, r3
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <HAL_UART_MspInit+0x118>)
 8001814:	f000 ffce 	bl	80027b4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001818:	bf00      	nop
 800181a:	37f0      	adds	r7, #240	@ 0xf0
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004400 	.word	0x40004400
 8001824:	58024400 	.word	0x58024400
 8001828:	58020000 	.word	0x58020000
 800182c:	58020c00 	.word	0x58020c00

08001830 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0ba      	sub	sp, #232	@ 0xe8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	22c0      	movs	r2, #192	@ 0xc0
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f009 fcdb 	bl	800b20c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a30      	ldr	r2, [pc, #192]	@ (800191c <HAL_PCD_MspInit+0xec>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d159      	bne.n	8001914 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001860:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001864:	f04f 0300 	mov.w	r3, #0
 8001868:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800186c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001874:	f107 0310 	add.w	r3, r7, #16
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fff7 	bl	800486c <HAL_RCCEx_PeriphCLKConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001884:	f7ff fe54 	bl	8001530 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001888:	f001 ffb8 	bl	80037fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b24      	ldr	r3, [pc, #144]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001892:	4a23      	ldr	r2, [pc, #140]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800189c:	4b20      	ldr	r3, [pc, #128]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80018aa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80018ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4814      	ldr	r0, [pc, #80]	@ (8001924 <HAL_PCD_MspInit+0xf4>)
 80018d2:	f000 ff6f 	bl	80027b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <HAL_PCD_MspInit+0xf4>)
 80018f2:	f000 ff5f 	bl	80027b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 80018f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80018fc:	4a08      	ldr	r2, [pc, #32]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 80018fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001902:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001906:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_PCD_MspInit+0xf0>)
 8001908:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800190c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001914:	bf00      	nop
 8001916:	37e8      	adds	r7, #232	@ 0xe8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40080000 	.word	0x40080000
 8001920:	58024400 	.word	0x58024400
 8001924:	58020000 	.word	0x58020000

08001928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	@ 0x38
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	d842      	bhi.n	80019bc <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001936:	2200      	movs	r2, #0
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	2019      	movs	r0, #25
 800193c:	f000 fade 	bl	8001efc <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001940:	2019      	movs	r0, #25
 8001942:	f000 faf5 	bl	8001f30 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001946:	4a23      	ldr	r2, [pc, #140]	@ (80019d4 <HAL_InitTick+0xac>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800194c:	4b22      	ldr	r3, [pc, #136]	@ (80019d8 <HAL_InitTick+0xb0>)
 800194e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001952:	4a21      	ldr	r2, [pc, #132]	@ (80019d8 <HAL_InitTick+0xb0>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800195c:	4b1e      	ldr	r3, [pc, #120]	@ (80019d8 <HAL_InitTick+0xb0>)
 800195e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800196a:	f107 020c 	add.w	r2, r7, #12
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f002 ff37 	bl	80047e8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800197a:	f002 ff1f 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 800197e:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001982:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <HAL_InitTick+0xb4>)
 8001984:	fba2 2303 	umull	r2, r3, r2, r3
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	3b01      	subs	r3, #1
 800198c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <HAL_InitTick+0xb8>)
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <HAL_InitTick+0xbc>)
 8001992:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <HAL_InitTick+0xb8>)
 8001996:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800199a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800199c:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <HAL_InitTick+0xb8>)
 800199e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019a0:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019a2:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <HAL_InitTick+0xb8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_InitTick+0xb8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019ae:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <HAL_InitTick+0xb8>)
 80019b0:	f004 fd88 	bl	80064c4 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d107      	bne.n	80019ca <HAL_InitTick+0xa2>
 80019ba:	e001      	b.n	80019c0 <HAL_InitTick+0x98>
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e005      	b.n	80019cc <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019c0:	4807      	ldr	r0, [pc, #28]	@ (80019e0 <HAL_InitTick+0xb8>)
 80019c2:	f004 fde1 	bl	8006588 <HAL_TIM_Base_Start_IT>
 80019c6:	4603      	mov	r3, r0
 80019c8:	e000      	b.n	80019cc <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3738      	adds	r7, #56	@ 0x38
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24000098 	.word	0x24000098
 80019d8:	58024400 	.word	0x58024400
 80019dc:	431bde83 	.word	0x431bde83
 80019e0:	24000b3c 	.word	0x24000b3c
 80019e4:	40010000 	.word	0x40010000

080019e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <NMI_Handler+0x4>

080019f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <HardFault_Handler+0x4>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <MemManage_Handler+0x4>

08001a00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <BusFault_Handler+0x4>

08001a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	bf00      	nop
 8001a0e:	e7fd      	b.n	8001a0c <UsageFault_Handler+0x4>

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a24:	4802      	ldr	r0, [pc, #8]	@ (8001a30 <TIM1_UP_IRQHandler+0x10>)
 8001a26:	f004 fe27 	bl	8006678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	24000b3c 	.word	0x24000b3c

08001a34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return 1;
 8001a38:	2301      	movs	r3, #1
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <_kill>:

int _kill(int pid, int sig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a4e:	f009 fc8f 	bl	800b370 <__errno>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2216      	movs	r2, #22
 8001a56:	601a      	str	r2, [r3, #0]
  return -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <_exit>:

void _exit (int status)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ffe7 	bl	8001a44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a76:	bf00      	nop
 8001a78:	e7fd      	b.n	8001a76 <_exit+0x12>
	...

08001a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a84:	4a14      	ldr	r2, [pc, #80]	@ (8001ad8 <_sbrk+0x5c>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <_sbrk+0x60>)
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a90:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <_sbrk+0x64>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <_sbrk+0x68>)
 8001a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d207      	bcs.n	8001abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aac:	f009 fc60 	bl	800b370 <__errno>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	220c      	movs	r2, #12
 8001ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aba:	e009      	b.n	8001ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001abc:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ac2:	4b07      	ldr	r3, [pc, #28]	@ (8001ae0 <_sbrk+0x64>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a05      	ldr	r2, [pc, #20]	@ (8001ae0 <_sbrk+0x64>)
 8001acc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	24080000 	.word	0x24080000
 8001adc:	00000400 	.word	0x00000400
 8001ae0:	24000b88 	.word	0x24000b88
 8001ae4:	24004a30 	.word	0x24004a30

08001ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aec:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <SystemInit+0xe4>)
 8001aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001af2:	4a36      	ldr	r2, [pc, #216]	@ (8001bcc <SystemInit+0xe4>)
 8001af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <SystemInit+0xe8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d807      	bhi.n	8001b18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b08:	4b31      	ldr	r3, [pc, #196]	@ (8001bd0 <SystemInit+0xe8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f023 030f 	bic.w	r3, r3, #15
 8001b10:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd0 <SystemInit+0xe8>)
 8001b12:	f043 0307 	orr.w	r3, r3, #7
 8001b16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b18:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <SystemInit+0xec>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd4 <SystemInit+0xec>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b24:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd4 <SystemInit+0xec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <SystemInit+0xec>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4929      	ldr	r1, [pc, #164]	@ (8001bd4 <SystemInit+0xec>)
 8001b30:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <SystemInit+0xf0>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b36:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <SystemInit+0xe8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0308 	and.w	r3, r3, #8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b42:	4b23      	ldr	r3, [pc, #140]	@ (8001bd0 <SystemInit+0xe8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 030f 	bic.w	r3, r3, #15
 8001b4a:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <SystemInit+0xe8>)
 8001b4c:	f043 0307 	orr.w	r3, r3, #7
 8001b50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <SystemInit+0xec>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <SystemInit+0xec>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <SystemInit+0xec>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <SystemInit+0xec>)
 8001b66:	4a1d      	ldr	r2, [pc, #116]	@ (8001bdc <SystemInit+0xf4>)
 8001b68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd4 <SystemInit+0xec>)
 8001b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8001be0 <SystemInit+0xf8>)
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001b70:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <SystemInit+0xec>)
 8001b72:	4a1c      	ldr	r2, [pc, #112]	@ (8001be4 <SystemInit+0xfc>)
 8001b74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b76:	4b17      	ldr	r3, [pc, #92]	@ (8001bd4 <SystemInit+0xec>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <SystemInit+0xec>)
 8001b7e:	4a19      	ldr	r2, [pc, #100]	@ (8001be4 <SystemInit+0xfc>)
 8001b80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001b82:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <SystemInit+0xec>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <SystemInit+0xec>)
 8001b8a:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <SystemInit+0xfc>)
 8001b8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <SystemInit+0xec>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <SystemInit+0xec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <SystemInit+0xec>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <SystemInit+0xec>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <SystemInit+0x100>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <SystemInit+0x104>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001bb2:	d202      	bcs.n	8001bba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <SystemInit+0x108>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf4 <SystemInit+0x10c>)
 8001bbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001bc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001bc2:	bf00      	nop
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	52002000 	.word	0x52002000
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bdc:	02020200 	.word	0x02020200
 8001be0:	01ff0000 	.word	0x01ff0000
 8001be4:	01010280 	.word	0x01010280
 8001be8:	5c001000 	.word	0x5c001000
 8001bec:	ffff0000 	.word	0xffff0000
 8001bf0:	51008108 	.word	0x51008108
 8001bf4:	52004000 	.word	0x52004000

08001bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bfc:	f7ff ff74 	bl	8001ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c02:	490d      	ldr	r1, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c18:	4c0a      	ldr	r4, [pc, #40]	@ (8001c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f009 fba9 	bl	800b37c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2a:	f7ff f9bd 	bl	8000fa8 <main>
  bx  lr
 8001c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c38:	240000f4 	.word	0x240000f4
  ldr r2, =_sidata
 8001c3c:	0800bd84 	.word	0x0800bd84
  ldr r2, =_sbss
 8001c40:	240001b4 	.word	0x240001b4
  ldr r4, =_ebss
 8001c44:	24004a30 	.word	0x24004a30

08001c48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC3_IRQHandler>
	...

08001c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f947 	bl	8001ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c58:	f002 fbf0 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	4b15      	ldr	r3, [pc, #84]	@ (8001cb4 <HAL_Init+0x68>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	4913      	ldr	r1, [pc, #76]	@ (8001cb8 <HAL_Init+0x6c>)
 8001c6a:	5ccb      	ldrb	r3, [r1, r3]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa22 f303 	lsr.w	r3, r2, r3
 8001c74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c76:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb4 <HAL_Init+0x68>)
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <HAL_Init+0x6c>)
 8001c80:	5cd3      	ldrb	r3, [r2, r3]
 8001c82:	f003 031f 	and.w	r3, r3, #31
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8001cbc <HAL_Init+0x70>)
 8001c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c90:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <HAL_Init+0x74>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c96:	200f      	movs	r0, #15
 8001c98:	f7ff fe46 	bl	8001928 <HAL_InitTick>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e002      	b.n	8001cac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001ca6:	f7ff fc49 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	0800bc98 	.word	0x0800bc98
 8001cbc:	24000094 	.word	0x24000094
 8001cc0:	24000090 	.word	0x24000090

08001cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x20>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4b06      	ldr	r3, [pc, #24]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_IncTick+0x24>)
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	2400009c 	.word	0x2400009c
 8001ce8:	24000b8c 	.word	0x24000b8c

08001cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	@ (8001d00 <HAL_GetTick+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	24000b8c 	.word	0x24000b8c

08001d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff ffee 	bl	8001cec <HAL_GetTick>
 8001d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d1c:	d005      	beq.n	8001d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_Delay+0x44>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d2a:	bf00      	nop
 8001d2c:	f7ff ffde 	bl	8001cec <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f7      	bhi.n	8001d2c <HAL_Delay+0x28>
  {
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2400009c 	.word	0x2400009c

08001d4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <HAL_GetREVID+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1b      	lsrs	r3, r3, #16
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	5c001000 	.word	0x5c001000

08001d64 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d6c:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001d74:	4904      	ldr	r1, [pc, #16]	@ (8001d88 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	58000400 	.word	0x58000400

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x40>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x40>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00
 8001dd0:	05fa0000 	.word	0x05fa0000

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	@ (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	@ (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff ff4c 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0a:	f7ff ff63 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	68b9      	ldr	r1, [r7, #8]
 8001f14:	6978      	ldr	r0, [r7, #20]
 8001f16:	f7ff ffb3 	bl	8001e80 <NVIC_EncodePriority>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff ff82 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f28:	bf00      	nop
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff56 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e3      	b.n	8002126 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2223      	movs	r2, #35	@ 0x23
 8001f6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fb01 	bl	8001578 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	4b6e      	ldr	r3, [pc, #440]	@ (8002130 <HAL_ETH_Init+0x1e4>)
 8001f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f7c:	4a6c      	ldr	r2, [pc, #432]	@ (8002130 <HAL_ETH_Init+0x1e4>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f86:	4b6a      	ldr	r3, [pc, #424]	@ (8002130 <HAL_ETH_Init+0x1e4>)
 8001f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7a1b      	ldrb	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d103      	bne.n	8001fa4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7ff fee1 	bl	8001d64 <HAL_SYSCFG_ETHInterfaceSelect>
 8001fa2:	e003      	b.n	8001fac <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001fa4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001fa8:	f7ff fedc 	bl	8001d64 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001fac:	4b61      	ldr	r3, [pc, #388]	@ (8002134 <HAL_ETH_Init+0x1e8>)
 8001fae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	6812      	ldr	r2, [r2, #0]
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc8:	f7ff fe90 	bl	8001cec <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fce:	e011      	b.n	8001ff4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fd0:	f7ff fe8c 	bl	8001cec <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fde:	d909      	bls.n	8001ff4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	22e0      	movs	r2, #224	@ 0xe0
 8001fec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e098      	b.n	8002126 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1e4      	bne.n	8001fd0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f89e 	bl	8002148 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800200c:	f002 fb90 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8002010:	4603      	mov	r3, r0
 8002012:	4a49      	ldr	r2, [pc, #292]	@ (8002138 <HAL_ETH_Init+0x1ec>)
 8002014:	fba2 2303 	umull	r2, r3, r2, r3
 8002018:	0c9a      	lsrs	r2, r3, #18
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3a01      	subs	r2, #1
 8002020:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 fa81 	bl	800252c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002032:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002036:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6812      	ldr	r2, [r2, #0]
 800203e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002042:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002046:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d009      	beq.n	800206a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	22e0      	movs	r2, #224	@ 0xe0
 8002062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e05d      	b.n	8002126 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002072:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002076:	4b31      	ldr	r3, [pc, #196]	@ (800213c <HAL_ETH_Init+0x1f0>)
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6952      	ldr	r2, [r2, #20]
 800207e:	0051      	lsls	r1, r2, #1
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	430b      	orrs	r3, r1
 8002086:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800208a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 fae9 	bl	8002666 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 fb2f 	bl	80026f8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	3305      	adds	r3, #5
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	021a      	lsls	r2, r3, #8
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	3303      	adds	r3, #3
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	061a      	lsls	r2, r3, #24
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	3302      	adds	r3, #2
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	041b      	lsls	r3, r3, #16
 80020cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	3301      	adds	r3, #1
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020e8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b11      	ldr	r3, [pc, #68]	@ (8002140 <HAL_ETH_Init+0x1f4>)
 80020fa:	430b      	orrs	r3, r1
 80020fc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	4b0d      	ldr	r3, [pc, #52]	@ (8002144 <HAL_ETH_Init+0x1f8>)
 800210e:	430b      	orrs	r3, r1
 8002110:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2210      	movs	r2, #16
 8002120:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	58024400 	.word	0x58024400
 8002134:	58000400 	.word	0x58000400
 8002138:	431bde83 	.word	0x431bde83
 800213c:	ffff8001 	.word	0xffff8001
 8002140:	0c020060 	.word	0x0c020060
 8002144:	0c20c000 	.word	0x0c20c000

08002148 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002158:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002160:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002162:	f002 fae5 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8002166:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4a1a      	ldr	r2, [pc, #104]	@ (80021d4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d804      	bhi.n	800217a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e022      	b.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <HAL_ETH_SetMDIOClockRange+0x90>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d204      	bcs.n	800218c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e019      	b.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_ETH_SetMDIOClockRange+0x94>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d915      	bls.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d804      	bhi.n	80021a6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e00c      	b.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d804      	bhi.n	80021b8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	e003      	b.n	80021c0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80021be:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	02160ebf 	.word	0x02160ebf
 80021d8:	03938700 	.word	0x03938700
 80021dc:	05f5e0ff 	.word	0x05f5e0ff
 80021e0:	08f0d17f 	.word	0x08f0d17f
 80021e4:	0ee6b27f 	.word	0x0ee6b27f

080021e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80021fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002202:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	7b1b      	ldrb	r3, [r3, #12]
 8002208:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800220a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	7b5b      	ldrb	r3, [r3, #13]
 8002210:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002212:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	7b9b      	ldrb	r3, [r3, #14]
 8002218:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800221a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	7bdb      	ldrb	r3, [r3, #15]
 8002220:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002222:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	7c12      	ldrb	r2, [r2, #16]
 8002228:	2a00      	cmp	r2, #0
 800222a:	d102      	bne.n	8002232 <ETH_SetMACConfig+0x4a>
 800222c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002230:	e000      	b.n	8002234 <ETH_SetMACConfig+0x4c>
 8002232:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002234:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	7c52      	ldrb	r2, [r2, #17]
 800223a:	2a00      	cmp	r2, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetMACConfig+0x5c>
 800223e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002242:	e000      	b.n	8002246 <ETH_SetMACConfig+0x5e>
 8002244:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002246:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7c9b      	ldrb	r3, [r3, #18]
 800224c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800224e:	431a      	orrs	r2, r3
               macconf->Speed |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002254:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800225a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	7f1b      	ldrb	r3, [r3, #28]
 8002260:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002262:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	7f5b      	ldrb	r3, [r3, #29]
 8002268:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800226a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	7f92      	ldrb	r2, [r2, #30]
 8002270:	2a00      	cmp	r2, #0
 8002272:	d102      	bne.n	800227a <ETH_SetMACConfig+0x92>
 8002274:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002278:	e000      	b.n	800227c <ETH_SetMACConfig+0x94>
 800227a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800227c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	7fdb      	ldrb	r3, [r3, #31]
 8002282:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002284:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	f892 2020 	ldrb.w	r2, [r2, #32]
 800228c:	2a00      	cmp	r2, #0
 800228e:	d102      	bne.n	8002296 <ETH_SetMACConfig+0xae>
 8002290:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002294:	e000      	b.n	8002298 <ETH_SetMACConfig+0xb0>
 8002296:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002298:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800229e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022a6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022a8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b56      	ldr	r3, [pc, #344]	@ (8002414 <ETH_SetMACConfig+0x22c>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	68f9      	ldr	r1, [r7, #12]
 80022c2:	430b      	orrs	r3, r1
 80022c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80022d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80022de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80022e6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80022e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d102      	bne.n	80022fa <ETH_SetMACConfig+0x112>
 80022f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022f8:	e000      	b.n	80022fc <ETH_SetMACConfig+0x114>
 80022fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80022fc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4b42      	ldr	r3, [pc, #264]	@ (8002418 <ETH_SetMACConfig+0x230>)
 800230e:	4013      	ands	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	430b      	orrs	r3, r1
 8002318:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002320:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68da      	ldr	r2, [r3, #12]
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <ETH_SetMACConfig+0x234>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	68f9      	ldr	r1, [r7, #12]
 800233a:	430b      	orrs	r3, r1
 800233c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002344:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800234a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002352:	2a00      	cmp	r2, #0
 8002354:	d101      	bne.n	800235a <ETH_SetMACConfig+0x172>
 8002356:	2280      	movs	r2, #128	@ 0x80
 8002358:	e000      	b.n	800235c <ETH_SetMACConfig+0x174>
 800235a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800235c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002362:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800236e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002372:	4013      	ands	r3, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	68f9      	ldr	r1, [r7, #12]
 800237a:	430b      	orrs	r3, r1
 800237c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002384:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800238c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800238e:	4313      	orrs	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239a:	f023 0103 	bic.w	r1, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80023b2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d101      	bne.n	80023d6 <ETH_SetMACConfig+0x1ee>
 80023d2:	2240      	movs	r2, #64	@ 0x40
 80023d4:	e000      	b.n	80023d8 <ETH_SetMACConfig+0x1f0>
 80023d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80023e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80023ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023f8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	430a      	orrs	r2, r1
 8002404:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	00048083 	.word	0x00048083
 8002418:	c0f88000 	.word	0xc0f88000
 800241c:	fffffef0 	.word	0xfffffef0

08002420 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <ETH_SetDMAConfig+0xf8>)
 8002436:	4013      	ands	r3, r2
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	6811      	ldr	r1, [r2, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002446:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	791b      	ldrb	r3, [r3, #4]
 800244c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002452:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	7b1b      	ldrb	r3, [r3, #12]
 8002458:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800245a:	4313      	orrs	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <ETH_SetDMAConfig+0xfc>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	68f9      	ldr	r1, [r7, #12]
 8002472:	430b      	orrs	r3, r1
 8002474:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002478:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	7b5b      	ldrb	r3, [r3, #13]
 800247e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002490:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002494:	4b22      	ldr	r3, [pc, #136]	@ (8002520 <ETH_SetDMAConfig+0x100>)
 8002496:	4013      	ands	r3, r2
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	430b      	orrs	r3, r1
 80024a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024a4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	7d1b      	ldrb	r3, [r3, #20]
 80024b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	7f5b      	ldrb	r3, [r3, #29]
 80024b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024c6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80024ca:	4b16      	ldr	r3, [pc, #88]	@ (8002524 <ETH_SetDMAConfig+0x104>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6812      	ldr	r2, [r2, #0]
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024da:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
 80024e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80024f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <ETH_SetDMAConfig+0x108>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	68f9      	ldr	r1, [r7, #12]
 8002502:	430b      	orrs	r3, r1
 8002504:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002508:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	ffff87fd 	.word	0xffff87fd
 800251c:	ffff2ffe 	.word	0xffff2ffe
 8002520:	fffec000 	.word	0xfffec000
 8002524:	ffc0efef 	.word	0xffc0efef
 8002528:	7fc0ffff 	.word	0x7fc0ffff

0800252c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b0a4      	sub	sp, #144	@ 0x90
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800253a:	2300      	movs	r3, #0
 800253c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002544:	2300      	movs	r3, #0
 8002546:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800254a:	2301      	movs	r3, #1
 800254c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002550:	2301      	movs	r3, #1
 8002552:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002556:	2301      	movs	r3, #1
 8002558:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800255c:	2300      	movs	r3, #0
 800255e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002562:	2301      	movs	r3, #1
 8002564:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002568:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800256c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002574:	2300      	movs	r3, #0
 8002576:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002578:	2300      	movs	r3, #0
 800257a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002584:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002588:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002590:	2300      	movs	r3, #0
 8002592:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002594:	2301      	movs	r3, #1
 8002596:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025a6:	2300      	movs	r3, #0
 80025a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025ae:	2300      	movs	r3, #0
 80025b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025c4:	2320      	movs	r3, #32
 80025c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025d6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80025da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025dc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025e0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002600:	2301      	movs	r3, #1
 8002602:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002606:	2300      	movs	r3, #0
 8002608:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002610:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7ff fde6 	bl	80021e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800261c:	2301      	movs	r3, #1
 800261e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002620:	2301      	movs	r3, #1
 8002622:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002624:	2300      	movs	r3, #0
 8002626:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002632:	2300      	movs	r3, #0
 8002634:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002636:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800263a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002640:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002644:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800264c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff fee1 	bl	8002420 <ETH_SetDMAConfig>
}
 800265e:	bf00      	nop
 8002660:	3790      	adds	r7, #144	@ 0x90
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	60fb      	str	r3, [r7, #12]
 8002672:	e01d      	b.n	80026b0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68d9      	ldr	r1, [r3, #12]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	440b      	add	r3, r1
 8002684:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2200      	movs	r2, #0
 8002690:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800269e:	68b9      	ldr	r1, [r7, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	3206      	adds	r2, #6
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3301      	adds	r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d9de      	bls.n	8002674 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026c4:	461a      	mov	r2, r3
 80026c6:	2303      	movs	r3, #3
 80026c8:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026d8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026e8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	e023      	b.n	800274e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6919      	ldr	r1, [r3, #16]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	440b      	add	r3, r1
 8002716:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2200      	movs	r2, #0
 8002722:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	3212      	adds	r2, #18
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d9d8      	bls.n	8002706 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800277a:	461a      	mov	r2, r3
 800277c:	2303      	movs	r3, #3
 800277e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a2:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027c2:	4b89      	ldr	r3, [pc, #548]	@ (80029e8 <HAL_GPIO_Init+0x234>)
 80027c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027c6:	e194      	b.n	8002af2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa01 f303 	lsl.w	r3, r1, r3
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 8186 	beq.w	8002aec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d005      	beq.n	80027f8 <HAL_GPIO_Init+0x44>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d130      	bne.n	800285a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800282e:	2201      	movs	r2, #1
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4013      	ands	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	f003 0201 	and.w	r2, r3, #1
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	2b03      	cmp	r3, #3
 8002864:	d017      	beq.n	8002896 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	2203      	movs	r2, #3
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43db      	mvns	r3, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4013      	ands	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d123      	bne.n	80028ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	691a      	ldr	r2, [r3, #16]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f003 0307 	and.w	r3, r3, #7
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	08da      	lsrs	r2, r3, #3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3208      	adds	r2, #8
 80028e4:	69b9      	ldr	r1, [r7, #24]
 80028e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	2203      	movs	r2, #3
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0203 	and.w	r2, r3, #3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80e0 	beq.w	8002aec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292c:	4b2f      	ldr	r3, [pc, #188]	@ (80029ec <HAL_GPIO_Init+0x238>)
 800292e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002932:	4a2e      	ldr	r2, [pc, #184]	@ (80029ec <HAL_GPIO_Init+0x238>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <HAL_GPIO_Init+0x238>)
 800293e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800294a:	4a29      	ldr	r2, [pc, #164]	@ (80029f0 <HAL_GPIO_Init+0x23c>)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	220f      	movs	r2, #15
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_GPIO_Init+0x240>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d052      	beq.n	8002a1c <HAL_GPIO_Init+0x268>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1f      	ldr	r2, [pc, #124]	@ (80029f8 <HAL_GPIO_Init+0x244>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d031      	beq.n	80029e2 <HAL_GPIO_Init+0x22e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a1e      	ldr	r2, [pc, #120]	@ (80029fc <HAL_GPIO_Init+0x248>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d02b      	beq.n	80029de <HAL_GPIO_Init+0x22a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a1d      	ldr	r2, [pc, #116]	@ (8002a00 <HAL_GPIO_Init+0x24c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d025      	beq.n	80029da <HAL_GPIO_Init+0x226>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1c      	ldr	r2, [pc, #112]	@ (8002a04 <HAL_GPIO_Init+0x250>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d01f      	beq.n	80029d6 <HAL_GPIO_Init+0x222>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1b      	ldr	r2, [pc, #108]	@ (8002a08 <HAL_GPIO_Init+0x254>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d019      	beq.n	80029d2 <HAL_GPIO_Init+0x21e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a0c <HAL_GPIO_Init+0x258>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_GPIO_Init+0x21a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_GPIO_Init+0x25c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00d      	beq.n	80029ca <HAL_GPIO_Init+0x216>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <HAL_GPIO_Init+0x260>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d007      	beq.n	80029c6 <HAL_GPIO_Init+0x212>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <HAL_GPIO_Init+0x264>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_GPIO_Init+0x20e>
 80029be:	2309      	movs	r3, #9
 80029c0:	e02d      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029c2:	230a      	movs	r3, #10
 80029c4:	e02b      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029c6:	2308      	movs	r3, #8
 80029c8:	e029      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029ca:	2307      	movs	r3, #7
 80029cc:	e027      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029ce:	2306      	movs	r3, #6
 80029d0:	e025      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029d2:	2305      	movs	r3, #5
 80029d4:	e023      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029d6:	2304      	movs	r3, #4
 80029d8:	e021      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029da:	2303      	movs	r3, #3
 80029dc:	e01f      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029de:	2302      	movs	r3, #2
 80029e0:	e01d      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e01b      	b.n	8002a1e <HAL_GPIO_Init+0x26a>
 80029e6:	bf00      	nop
 80029e8:	58000080 	.word	0x58000080
 80029ec:	58024400 	.word	0x58024400
 80029f0:	58000400 	.word	0x58000400
 80029f4:	58020000 	.word	0x58020000
 80029f8:	58020400 	.word	0x58020400
 80029fc:	58020800 	.word	0x58020800
 8002a00:	58020c00 	.word	0x58020c00
 8002a04:	58021000 	.word	0x58021000
 8002a08:	58021400 	.word	0x58021400
 8002a0c:	58021800 	.word	0x58021800
 8002a10:	58021c00 	.word	0x58021c00
 8002a14:	58022000 	.word	0x58022000
 8002a18:	58022400 	.word	0x58022400
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	69fa      	ldr	r2, [r7, #28]
 8002a20:	f002 0203 	and.w	r2, r2, #3
 8002a24:	0092      	lsls	r2, r2, #2
 8002a26:	4093      	lsls	r3, r2
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a2e:	4938      	ldr	r1, [pc, #224]	@ (8002b10 <HAL_GPIO_Init+0x35c>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	3301      	adds	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f ae63 	bne.w	80027c8 <HAL_GPIO_Init+0x14>
  }
}
 8002b02:	bf00      	nop
 8002b04:	bf00      	nop
 8002b06:	3724      	adds	r7, #36	@ 0x24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	58000400 	.word	0x58000400

08002b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	807b      	strh	r3, [r7, #2]
 8002b20:	4613      	mov	r3, r2
 8002b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b24:	787b      	ldrb	r3, [r7, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b2a:	887a      	ldrh	r2, [r7, #2]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b30:	e003      	b.n	8002b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b32:	887b      	ldrh	r3, [r7, #2]
 8002b34:	041a      	lsls	r2, r3, #16
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	619a      	str	r2, [r3, #24]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80f9 	bne.w	8002d62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x34>
 8002b76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0ed      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Mem_Write+0x4e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0e6      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b9e:	f7ff f8a5 	bl	8001cec <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fac3 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d1      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	@ 0x21
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	@ 0x40
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be8:	88f8      	ldrh	r0, [r7, #6]
 8002bea:	893a      	ldrh	r2, [r7, #8]
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f9d3 	bl	8002fa4 <I2C_RequestMemoryWrite>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0a9      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2bff      	cmp	r3, #255	@ 0xff
 8002c18:	d90e      	bls.n	8002c38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22ff      	movs	r2, #255	@ 0xff
 8002c1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fc47 	bl	80034c4 <I2C_TransferConfig>
 8002c36:	e00f      	b.n	8002c58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fc36 	bl	80034c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fac6 	bl	80031ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e07b      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d034      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d130      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	@ 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa3f 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04d      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	@ 0xff
 8002cd0:	d90e      	bls.n	8002cf0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	@ 0xff
 8002cd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fbeb 	bl	80034c4 <I2C_TransferConfig>
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fbda 	bl	80034c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d19e      	bne.n	8002c58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 faac 	bl	800327c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01a      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_I2C_Mem_Write+0x224>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	fe00e800 	.word	0xfe00e800

08002d70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 80fd 	bne.w	8002f92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x34>
 8002d9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0f1      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x4e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ea      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc6:	f7fe ff91 	bl	8001cec <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9af 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0d5      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2222      	movs	r2, #34	@ 0x22
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2240      	movs	r2, #64	@ 0x40
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e10:	88f8      	ldrh	r0, [r7, #6]
 8002e12:	893a      	ldrh	r2, [r7, #8]
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4603      	mov	r3, r0
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f913 	bl	800304c <I2C_RequestMemoryRead>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0ad      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2bff      	cmp	r3, #255	@ 0xff
 8002e40:	d90e      	bls.n	8002e60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	22ff      	movs	r2, #255	@ 0xff
 8002e46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	4b52      	ldr	r3, [pc, #328]	@ (8002f9c <HAL_I2C_Mem_Read+0x22c>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fb33 	bl	80034c4 <I2C_TransferConfig>
 8002e5e:	e00f      	b.n	8002e80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	8979      	ldrh	r1, [r7, #10]
 8002e72:	4b4a      	ldr	r3, [pc, #296]	@ (8002f9c <HAL_I2C_Mem_Read+0x22c>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fb22 	bl	80034c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e86:	2200      	movs	r2, #0
 8002e88:	2104      	movs	r1, #4
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f956 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e07c      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	@ 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f927 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04d      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2bff      	cmp	r3, #255	@ 0xff
 8002f00:	d90e      	bls.n	8002f20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22ff      	movs	r2, #255	@ 0xff
 8002f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fad3 	bl	80034c4 <I2C_TransferConfig>
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fac2 	bl	80034c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d19a      	bne.n	8002e80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f994 	bl	800327c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01a      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_I2C_Mem_Read+0x230>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	80002400 	.word	0x80002400
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	8979      	ldrh	r1, [r7, #10]
 8002fc4:	4b20      	ldr	r3, [pc, #128]	@ (8003048 <I2C_RequestMemoryWrite+0xa4>)
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 fa79 	bl	80034c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f909 	bl	80031ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e02c      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ff6:	e015      	b.n	8003024 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8ef 	bl	80031ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e012      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	@ 0x80
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f884 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	80002000 	.word	0x80002000

0800304c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	4b20      	ldr	r3, [pc, #128]	@ (80030f0 <I2C_RequestMemoryRead+0xa4>)
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa26 	bl	80034c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f8b6 	bl	80031ee <I2C_WaitOnTXISFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e02c      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	629a      	str	r2, [r3, #40]	@ 0x28
 800309c:	e015      	b.n	80030ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800309e:	893b      	ldrh	r3, [r7, #8]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f89c 	bl	80031ee <I2C_WaitOnTXISFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e012      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2140      	movs	r1, #64	@ 0x40
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f831 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	80002000 	.word	0x80002000

080030f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d103      	bne.n	8003112 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	619a      	str	r2, [r3, #24]
  }
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	e03b      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	6839      	ldr	r1, [r7, #0]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8d6 	bl	8003304 <I2C_IsErrorOccurred>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e041      	b.n	80031e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003168:	d02d      	beq.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316a:	f7fe fdbf 	bl	8001cec <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d302      	bcc.n	8003180 <I2C_WaitOnFlagUntilTimeout+0x44>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d122      	bne.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	4013      	ands	r3, r2
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	429a      	cmp	r2, r3
 800318e:	bf0c      	ite	eq
 8003190:	2301      	moveq	r3, #1
 8003192:	2300      	movne	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	429a      	cmp	r2, r3
 800319c:	d113      	bne.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f043 0220 	orr.w	r2, r3, #32
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00f      	b.n	80031e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699a      	ldr	r2, [r3, #24]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d0b4      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031fa:	e033      	b.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f87f 	bl	8003304 <I2C_IsErrorOccurred>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e031      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d025      	beq.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe fd68 	bl	8001cec <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11a      	bne.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b02      	cmp	r3, #2
 800323a:	d013      	beq.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d1c4      	bne.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003288:	e02f      	b.n	80032ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f838 	bl	8003304 <I2C_IsErrorOccurred>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e02d      	b.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7fe fd25 	bl	8001cec <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d11a      	bne.n	80032ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d013      	beq.n	80032ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c6:	f043 0220 	orr.w	r2, r3, #32
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e007      	b.n	80032fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b20      	cmp	r3, #32
 80032f6:	d1c8      	bne.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	@ 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	d068      	beq.n	8003402 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2210      	movs	r2, #16
 8003336:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003338:	e049      	b.n	80033ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d045      	beq.n	80033ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe fcd3 	bl	8001cec <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_IsErrorOccurred+0x54>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d13a      	bne.n	80033ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003362:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800336a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800337a:	d121      	bne.n	80033c0 <I2C_IsErrorOccurred+0xbc>
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003382:	d01d      	beq.n	80033c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b20      	cmp	r3, #32
 8003388:	d01a      	beq.n	80033c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003398:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800339a:	f7fe fca7 	bl	8001cec <HAL_GetTick>
 800339e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033a0:	e00e      	b.n	80033c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80033a2:	f7fe fca3 	bl	8001cec <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b19      	cmp	r3, #25
 80033ae:	d907      	bls.n	80033c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f043 0320 	orr.w	r3, r3, #32
 80033b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033be:	e006      	b.n	80033ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d1e9      	bne.n	80033a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d003      	beq.n	80033e4 <I2C_IsErrorOccurred+0xe0>
 80033dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0aa      	beq.n	800333a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d103      	bne.n	80033f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2220      	movs	r2, #32
 80033f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033f4:	6a3b      	ldr	r3, [r7, #32]
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00b      	beq.n	800342c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003414:	6a3b      	ldr	r3, [r7, #32]
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003424:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003446:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00b      	beq.n	8003470 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003458:	6a3b      	ldr	r3, [r7, #32]
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003468:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003470:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01c      	beq.n	80034b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff fe3b 	bl	80030f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b0d      	ldr	r3, [pc, #52]	@ (80034c0 <I2C_IsErrorOccurred+0x1bc>)
 800348a:	400b      	ands	r3, r1
 800348c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80034b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3728      	adds	r7, #40	@ 0x28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	fe00e800 	.word	0xfe00e800

080034c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	60f8      	str	r0, [r7, #12]
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	817b      	strh	r3, [r7, #10]
 80034d2:	4613      	mov	r3, r2
 80034d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d6:	897b      	ldrh	r3, [r7, #10]
 80034d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034dc:	7a7b      	ldrb	r3, [r7, #9]
 80034de:	041b      	lsls	r3, r3, #16
 80034e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034e4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034f2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	0d5b      	lsrs	r3, r3, #21
 80034fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003502:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <I2C_TransferConfig+0x60>)
 8003504:	430b      	orrs	r3, r1
 8003506:	43db      	mvns	r3, r3
 8003508:	ea02 0103 	and.w	r1, r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003516:	bf00      	nop
 8003518:	371c      	adds	r7, #28
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	03ff63ff 	.word	0x03ff63ff

08003528 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af02      	add	r7, sp, #8
 800352e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e0fe      	b.n	8003738 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fe f96e 	bl	8001830 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2203      	movs	r2, #3
 8003558:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f004 fc59 	bl	8007e18 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	7c1a      	ldrb	r2, [r3, #16]
 800356e:	f88d 2000 	strb.w	r2, [sp]
 8003572:	3304      	adds	r3, #4
 8003574:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003576:	f004 fbdd 	bl	8007d34 <USB_CoreInit>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0d5      	b.n	8003738 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fc51 	bl	8007e3a <USB_SetCurrentMode>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2202      	movs	r2, #2
 80035a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0c6      	b.n	8003738 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
 80035ae:	e04a      	b.n	8003646 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	3315      	adds	r3, #21
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	3314      	adds	r3, #20
 80035d4:	7bfa      	ldrb	r2, [r7, #15]
 80035d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035d8:	7bfa      	ldrb	r2, [r7, #15]
 80035da:	7bfb      	ldrb	r3, [r7, #15]
 80035dc:	b298      	uxth	r0, r3
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	332e      	adds	r3, #46	@ 0x2e
 80035ec:	4602      	mov	r2, r0
 80035ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	3318      	adds	r3, #24
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003604:	7bfa      	ldrb	r2, [r7, #15]
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	4613      	mov	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4413      	add	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	331c      	adds	r3, #28
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3320      	adds	r3, #32
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800362c:	7bfa      	ldrb	r2, [r7, #15]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	3324      	adds	r3, #36	@ 0x24
 800363c:	2200      	movs	r2, #0
 800363e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	3301      	adds	r3, #1
 8003644:	73fb      	strb	r3, [r7, #15]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	791b      	ldrb	r3, [r3, #4]
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	429a      	cmp	r2, r3
 800364e:	d3af      	bcc.n	80035b0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003650:	2300      	movs	r3, #0
 8003652:	73fb      	strb	r3, [r7, #15]
 8003654:	e044      	b.n	80036e0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003656:	7bfa      	ldrb	r2, [r7, #15]
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	4613      	mov	r3, r2
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	4413      	add	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	440b      	add	r3, r1
 8003664:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800366c:	7bfa      	ldrb	r2, [r7, #15]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003698:	7bfa      	ldrb	r2, [r7, #15]
 800369a:	6879      	ldr	r1, [r7, #4]
 800369c:	4613      	mov	r3, r2
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036c4:	7bfa      	ldrb	r2, [r7, #15]
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	3301      	adds	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	791b      	ldrb	r3, [r3, #4]
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d3b5      	bcc.n	8003656 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7c1a      	ldrb	r2, [r3, #16]
 80036f2:	f88d 2000 	strb.w	r2, [sp]
 80036f6:	3304      	adds	r3, #4
 80036f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036fa:	f004 fbeb 	bl	8007ed4 <USB_DevInit>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e013      	b.n	8003738 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7b1b      	ldrb	r3, [r3, #12]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f80a 	bl	8003740 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4618      	mov	r0, r3
 8003732:	f004 fda6 	bl	8008282 <USB_DevDisconnect>

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800376e:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_PCDEx_ActivateLPM+0x44>)
 8003770:	4313      	orrs	r3, r2
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	10000003 	.word	0x10000003

08003788 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003790:	4b19      	ldr	r3, [pc, #100]	@ (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00a      	beq.n	80037b2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800379c:	4b16      	ldr	r3, [pc, #88]	@ (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d001      	beq.n	80037ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e01f      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e01d      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	490f      	ldr	r1, [pc, #60]	@ (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80037c2:	f7fe fa93 	bl	8001cec <HAL_GetTick>
 80037c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037c8:	e009      	b.n	80037de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80037ca:	f7fe fa8f 	bl	8001cec <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80037d8:	d901      	bls.n	80037de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e007      	b.n	80037ee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80037de:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <HAL_PWREx_ConfigSupply+0x70>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ea:	d1ee      	bne.n	80037ca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	58024800 	.word	0x58024800

080037fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4a04      	ldr	r2, [pc, #16]	@ (8003818 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003806:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	58024800 	.word	0x58024800

0800381c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	@ 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f000 bc48 	b.w	80040c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 8088 	beq.w	800394e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800383e:	4b99      	ldr	r3, [pc, #612]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003846:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003848:	4b96      	ldr	r3, [pc, #600]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 800384a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	2b10      	cmp	r3, #16
 8003852:	d007      	beq.n	8003864 <HAL_RCC_OscConfig+0x48>
 8003854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003856:	2b18      	cmp	r3, #24
 8003858:	d111      	bne.n	800387e <HAL_RCC_OscConfig+0x62>
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003864:	4b8f      	ldr	r3, [pc, #572]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386c:	2b00      	cmp	r3, #0
 800386e:	d06d      	beq.n	800394c <HAL_RCC_OscConfig+0x130>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d169      	bne.n	800394c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	f000 bc21 	b.w	80040c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003886:	d106      	bne.n	8003896 <HAL_RCC_OscConfig+0x7a>
 8003888:	4b86      	ldr	r3, [pc, #536]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a85      	ldr	r2, [pc, #532]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e02e      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10c      	bne.n	80038b8 <HAL_RCC_OscConfig+0x9c>
 800389e:	4b81      	ldr	r3, [pc, #516]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a80      	ldr	r2, [pc, #512]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7d      	ldr	r2, [pc, #500]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	e01d      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0xc0>
 80038c2:	4b78      	ldr	r3, [pc, #480]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a77      	ldr	r2, [pc, #476]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b75      	ldr	r3, [pc, #468]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a74      	ldr	r2, [pc, #464]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038d8:	6013      	str	r3, [r2, #0]
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0xd8>
 80038dc:	4b71      	ldr	r3, [pc, #452]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a70      	ldr	r2, [pc, #448]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e6:	6013      	str	r3, [r2, #0]
 80038e8:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6d      	ldr	r2, [pc, #436]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80038ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d013      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fe f9f6 	bl	8001cec <HAL_GetTick>
 8003900:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003904:	f7fe f9f2 	bl	8001cec <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b64      	cmp	r3, #100	@ 0x64
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e3d4      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003916:	4b63      	ldr	r3, [pc, #396]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0xe8>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe f9e2 	bl	8001cec <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800392c:	f7fe f9de 	bl	8001cec <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b64      	cmp	r3, #100	@ 0x64
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e3c0      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800393e:	4b59      	ldr	r3, [pc, #356]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x110>
 800394a:	e000      	b.n	800394e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80ca 	beq.w	8003af0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395c:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003964:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003966:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_RCC_OscConfig+0x166>
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	2b18      	cmp	r3, #24
 8003976:	d156      	bne.n	8003a26 <HAL_RCC_OscConfig+0x20a>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d151      	bne.n	8003a26 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003982:	4b48      	ldr	r3, [pc, #288]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_RCC_OscConfig+0x17e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e392      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800399a:	4b42      	ldr	r3, [pc, #264]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 0219 	bic.w	r2, r3, #25
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	493f      	ldr	r1, [pc, #252]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe f99e 	bl	8001cec <HAL_GetTick>
 80039b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b4:	f7fe f99a 	bl	8001cec <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e37c      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0304 	and.w	r3, r3, #4
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d2:	f7fe f9bb 	bl	8001d4c <HAL_GetREVID>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039dc:	4293      	cmp	r3, r2
 80039de:	d817      	bhi.n	8003a10 <HAL_RCC_OscConfig+0x1f4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d108      	bne.n	80039fa <HAL_RCC_OscConfig+0x1de>
 80039e8:	4b2e      	ldr	r3, [pc, #184]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80039f0:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80039f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039f8:	e07a      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b2a      	ldr	r3, [pc, #168]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	4926      	ldr	r1, [pc, #152]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a0e:	e06f      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a10:	4b24      	ldr	r3, [pc, #144]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	4921      	ldr	r1, [pc, #132]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	e064      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d047      	beq.n	8003abe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0219 	bic.w	r2, r3, #25
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	491a      	ldr	r1, [pc, #104]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe f954 	bl	8001cec <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fe f950 	bl	8001cec <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e332      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a5a:	4b12      	ldr	r3, [pc, #72]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a66:	f7fe f971 	bl	8001d4c <HAL_GetREVID>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d819      	bhi.n	8003aa8 <HAL_RCC_OscConfig+0x28c>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	691b      	ldr	r3, [r3, #16]
 8003a78:	2b40      	cmp	r3, #64	@ 0x40
 8003a7a:	d108      	bne.n	8003a8e <HAL_RCC_OscConfig+0x272>
 8003a7c:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003a84:	4a07      	ldr	r2, [pc, #28]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a8a:	6053      	str	r3, [r2, #4]
 8003a8c:	e030      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
 8003a8e:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	031b      	lsls	r3, r3, #12
 8003a9c:	4901      	ldr	r1, [pc, #4]	@ (8003aa4 <HAL_RCC_OscConfig+0x288>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
 8003aa2:	e025      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	4b9a      	ldr	r3, [pc, #616]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	4997      	ldr	r1, [pc, #604]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	e018      	b.n	8003af0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b95      	ldr	r3, [pc, #596]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a94      	ldr	r2, [pc, #592]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ac4:	f023 0301 	bic.w	r3, r3, #1
 8003ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aca:	f7fe f90f 	bl	8001cec <HAL_GetTick>
 8003ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ad0:	e008      	b.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ad2:	f7fe f90b 	bl	8001cec <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e2ed      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ae4:	4b8b      	ldr	r3, [pc, #556]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80a9 	beq.w	8003c50 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003afe:	4b85      	ldr	r3, [pc, #532]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b06:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b08:	4b82      	ldr	r3, [pc, #520]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d007      	beq.n	8003b24 <HAL_RCC_OscConfig+0x308>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b18      	cmp	r3, #24
 8003b18:	d13a      	bne.n	8003b90 <HAL_RCC_OscConfig+0x374>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d135      	bne.n	8003b90 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b24:	4b7b      	ldr	r3, [pc, #492]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_OscConfig+0x320>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	2b80      	cmp	r3, #128	@ 0x80
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e2c1      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b3c:	f7fe f906 	bl	8001d4c <HAL_GetREVID>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d817      	bhi.n	8003b7a <HAL_RCC_OscConfig+0x35e>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d108      	bne.n	8003b64 <HAL_RCC_OscConfig+0x348>
 8003b52:	4b70      	ldr	r3, [pc, #448]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b60:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b62:	e075      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b64:	4b6b      	ldr	r3, [pc, #428]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	069b      	lsls	r3, r3, #26
 8003b72:	4968      	ldr	r1, [pc, #416]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b78:	e06a      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b7a:	4b66      	ldr	r3, [pc, #408]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	061b      	lsls	r3, r3, #24
 8003b88:	4962      	ldr	r1, [pc, #392]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b8e:	e05f      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	69db      	ldr	r3, [r3, #28]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d042      	beq.n	8003c1e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003b98:	4b5e      	ldr	r3, [pc, #376]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe f8a2 	bl	8001cec <HAL_GetTick>
 8003ba8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bac:	f7fe f89e 	bl	8001cec <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e280      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bbe:	4b55      	ldr	r3, [pc, #340]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bca:	f7fe f8bf 	bl	8001d4c <HAL_GetREVID>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d817      	bhi.n	8003c08 <HAL_RCC_OscConfig+0x3ec>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d108      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x3d6>
 8003be0:	4b4c      	ldr	r3, [pc, #304]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003be8:	4a4a      	ldr	r2, [pc, #296]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003bea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003bee:	6053      	str	r3, [r2, #4]
 8003bf0:	e02e      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
 8003bf2:	4b48      	ldr	r3, [pc, #288]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	069b      	lsls	r3, r3, #26
 8003c00:	4944      	ldr	r1, [pc, #272]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
 8003c06:	e023      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
 8003c08:	4b42      	ldr	r3, [pc, #264]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	061b      	lsls	r3, r3, #24
 8003c16:	493f      	ldr	r1, [pc, #252]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60cb      	str	r3, [r1, #12]
 8003c1c:	e018      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3c      	ldr	r2, [pc, #240]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fe f85f 	bl	8001cec <HAL_GetTick>
 8003c2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c32:	f7fe f85b 	bl	8001cec <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e23d      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c44:	4b33      	ldr	r3, [pc, #204]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d036      	beq.n	8003cca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d019      	beq.n	8003c98 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c64:	4b2b      	ldr	r3, [pc, #172]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c68:	4a2a      	ldr	r2, [pc, #168]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c6a:	f043 0301 	orr.w	r3, r3, #1
 8003c6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fe f83c 	bl	8001cec <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c78:	f7fe f838 	bl	8001cec <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e21a      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c8a:	4b22      	ldr	r3, [pc, #136]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x45c>
 8003c96:	e018      	b.n	8003cca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c98:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fe f822 	bl	8001cec <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cac:	f7fe f81e 	bl	8001cec <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e200      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d039      	beq.n	8003d4a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ce8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003cea:	f7fd ffff 	bl	8001cec <HAL_GetTick>
 8003cee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cf2:	f7fd fffb 	bl	8001cec <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e1dd      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d04:	4b03      	ldr	r3, [pc, #12]	@ (8003d14 <HAL_RCC_OscConfig+0x4f8>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x4d6>
 8003d10:	e01b      	b.n	8003d4a <HAL_RCC_OscConfig+0x52e>
 8003d12:	bf00      	nop
 8003d14:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d18:	4b9b      	ldr	r3, [pc, #620]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a9a      	ldr	r2, [pc, #616]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d24:	f7fd ffe2 	bl	8001cec <HAL_GetTick>
 8003d28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d2c:	f7fd ffde 	bl	8001cec <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e1c0      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d3e:	4b92      	ldr	r3, [pc, #584]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8081 	beq.w	8003e5a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d58:	4b8c      	ldr	r3, [pc, #560]	@ (8003f8c <HAL_RCC_OscConfig+0x770>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8b      	ldr	r2, [pc, #556]	@ (8003f8c <HAL_RCC_OscConfig+0x770>)
 8003d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d64:	f7fd ffc2 	bl	8001cec <HAL_GetTick>
 8003d68:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fd ffbe 	bl	8001cec <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1a0      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d7e:	4b83      	ldr	r3, [pc, #524]	@ (8003f8c <HAL_RCC_OscConfig+0x770>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x584>
 8003d92:	4b7d      	ldr	r3, [pc, #500]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d96:	4a7c      	ldr	r2, [pc, #496]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9e:	e02d      	b.n	8003dfc <HAL_RCC_OscConfig+0x5e0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x5a6>
 8003da8:	4b77      	ldr	r3, [pc, #476]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	4a76      	ldr	r2, [pc, #472]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db4:	4b74      	ldr	r3, [pc, #464]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	4a73      	ldr	r2, [pc, #460]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dba:	f023 0304 	bic.w	r3, r3, #4
 8003dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dc0:	e01c      	b.n	8003dfc <HAL_RCC_OscConfig+0x5e0>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x5c8>
 8003dca:	4b6f      	ldr	r3, [pc, #444]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dce:	4a6e      	ldr	r2, [pc, #440]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dd0:	f043 0304 	orr.w	r3, r3, #4
 8003dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dda:	4a6b      	ldr	r2, [pc, #428]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de2:	e00b      	b.n	8003dfc <HAL_RCC_OscConfig+0x5e0>
 8003de4:	4b68      	ldr	r3, [pc, #416]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	4a67      	ldr	r2, [pc, #412]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003df0:	4b65      	ldr	r3, [pc, #404]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4a64      	ldr	r2, [pc, #400]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003df6:	f023 0304 	bic.w	r3, r3, #4
 8003dfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7fd ff72 	bl	8001cec <HAL_GetTick>
 8003e08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fd ff6e 	bl	8001cec <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e14e      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e22:	4b59      	ldr	r3, [pc, #356]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ee      	beq.n	8003e0c <HAL_RCC_OscConfig+0x5f0>
 8003e2e:	e014      	b.n	8003e5a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fd ff5c 	bl	8001cec <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e38:	f7fd ff58 	bl	8001cec <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e138      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1ee      	bne.n	8003e38 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 812d 	beq.w	80040be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e64:	4b48      	ldr	r3, [pc, #288]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e6c:	2b18      	cmp	r3, #24
 8003e6e:	f000 80bd 	beq.w	8003fec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	f040 809e 	bne.w	8003fb8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b42      	ldr	r3, [pc, #264]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a41      	ldr	r2, [pc, #260]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003e82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fd ff30 	bl	8001cec <HAL_GetTick>
 8003e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fd ff2c 	bl	8001cec <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e10e      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ea2:	4b39      	ldr	r3, [pc, #228]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eae:	4b36      	ldr	r3, [pc, #216]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003eb0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <HAL_RCC_OscConfig+0x774>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003ebe:	0112      	lsls	r2, r2, #4
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	4931      	ldr	r1, [pc, #196]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	025b      	lsls	r3, r3, #9
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	041b      	lsls	r3, r3, #16
 8003ee6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	3b01      	subs	r3, #1
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003ef8:	4923      	ldr	r1, [pc, #140]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003efe:	4b22      	ldr	r3, [pc, #136]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	4a21      	ldr	r2, [pc, #132]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f0e:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <HAL_RCC_OscConfig+0x778>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f16:	00d2      	lsls	r2, r2, #3
 8003f18:	491b      	ldr	r1, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f22:	f023 020c 	bic.w	r2, r3, #12
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	4917      	ldr	r1, [pc, #92]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f30:	4b15      	ldr	r3, [pc, #84]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f34:	f023 0202 	bic.w	r2, r3, #2
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3c:	4912      	ldr	r1, [pc, #72]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f42:	4b11      	ldr	r3, [pc, #68]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f46:	4a10      	ldr	r2, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a0d      	ldr	r2, [pc, #52]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f66:	4b08      	ldr	r3, [pc, #32]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	4a07      	ldr	r2, [pc, #28]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f72:	4b05      	ldr	r3, [pc, #20]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a04      	ldr	r2, [pc, #16]	@ (8003f88 <HAL_RCC_OscConfig+0x76c>)
 8003f78:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd feb5 	bl	8001cec <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003f84:	e011      	b.n	8003faa <HAL_RCC_OscConfig+0x78e>
 8003f86:	bf00      	nop
 8003f88:	58024400 	.word	0x58024400
 8003f8c:	58024800 	.word	0x58024800
 8003f90:	fffffc0c 	.word	0xfffffc0c
 8003f94:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fd fea8 	bl	8001cec <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e08a      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003faa:	4b47      	ldr	r3, [pc, #284]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0f0      	beq.n	8003f98 <HAL_RCC_OscConfig+0x77c>
 8003fb6:	e082      	b.n	80040be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb8:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a42      	ldr	r2, [pc, #264]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003fbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fd fe92 	bl	8001cec <HAL_GetTick>
 8003fc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7fd fe8e 	bl	8001cec <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e070      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x7b0>
 8003fea:	e068      	b.n	80040be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003ff2:	4b35      	ldr	r3, [pc, #212]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d031      	beq.n	8004064 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0203 	and.w	r2, r3, #3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400a:	429a      	cmp	r2, r3
 800400c:	d12a      	bne.n	8004064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	429a      	cmp	r2, r3
 800401c:	d122      	bne.n	8004064 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800402a:	429a      	cmp	r2, r3
 800402c:	d11a      	bne.n	8004064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	0a5b      	lsrs	r3, r3, #9
 8004032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800403a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d111      	bne.n	8004064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	0c1b      	lsrs	r3, r3, #16
 8004044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d108      	bne.n	8004064 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	0e1b      	lsrs	r3, r3, #24
 8004056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e02b      	b.n	80040c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004068:	4b17      	ldr	r3, [pc, #92]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 800406a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800406c:	08db      	lsrs	r3, r3, #3
 800406e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004072:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	429a      	cmp	r2, r3
 800407c:	d01f      	beq.n	80040be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800407e:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	4a11      	ldr	r2, [pc, #68]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 8004084:	f023 0301 	bic.w	r3, r3, #1
 8004088:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800408a:	f7fd fe2f 	bl	8001cec <HAL_GetTick>
 800408e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004090:	bf00      	nop
 8004092:	f7fd fe2b 	bl	8001cec <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409a:	4293      	cmp	r3, r2
 800409c:	d0f9      	beq.n	8004092 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800409e:	4b0a      	ldr	r3, [pc, #40]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 80040a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040a2:	4b0a      	ldr	r3, [pc, #40]	@ (80040cc <HAL_RCC_OscConfig+0x8b0>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80040aa:	00d2      	lsls	r2, r2, #3
 80040ac:	4906      	ldr	r1, [pc, #24]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040b2:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 80040b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b6:	4a04      	ldr	r2, [pc, #16]	@ (80040c8 <HAL_RCC_OscConfig+0x8ac>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040be:	2300      	movs	r3, #0
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3730      	adds	r7, #48	@ 0x30
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	58024400 	.word	0x58024400
 80040cc:	ffff0007 	.word	0xffff0007

080040d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e19c      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 030f 	and.w	r3, r3, #15
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d910      	bls.n	8004114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b87      	ldr	r3, [pc, #540]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 020f 	bic.w	r2, r3, #15
 80040fa:	4985      	ldr	r1, [pc, #532]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b83      	ldr	r3, [pc, #524]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e184      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691a      	ldr	r2, [r3, #16]
 8004124:	4b7b      	ldr	r3, [pc, #492]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800412c:	429a      	cmp	r2, r3
 800412e:	d908      	bls.n	8004142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004130:	4b78      	ldr	r3, [pc, #480]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4975      	ldr	r1, [pc, #468]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800413e:	4313      	orrs	r3, r2
 8004140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d010      	beq.n	8004170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	4b70      	ldr	r3, [pc, #448]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800415a:	429a      	cmp	r2, r3
 800415c:	d908      	bls.n	8004170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800415e:	4b6d      	ldr	r3, [pc, #436]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	496a      	ldr	r1, [pc, #424]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d010      	beq.n	800419e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	699a      	ldr	r2, [r3, #24]
 8004180:	4b64      	ldr	r3, [pc, #400]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004188:	429a      	cmp	r2, r3
 800418a:	d908      	bls.n	800419e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800418c:	4b61      	ldr	r3, [pc, #388]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	495e      	ldr	r1, [pc, #376]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800419a:	4313      	orrs	r3, r2
 800419c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d010      	beq.n	80041cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69da      	ldr	r2, [r3, #28]
 80041ae:	4b59      	ldr	r3, [pc, #356]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d908      	bls.n	80041cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041ba:	4b56      	ldr	r3, [pc, #344]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	4953      	ldr	r1, [pc, #332]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d010      	beq.n	80041fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d908      	bls.n	80041fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e8:	4b4a      	ldr	r3, [pc, #296]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f023 020f 	bic.w	r2, r3, #15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4947      	ldr	r1, [pc, #284]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b00      	cmp	r3, #0
 8004204:	d055      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004206:	4b43      	ldr	r3, [pc, #268]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	4940      	ldr	r1, [pc, #256]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004214:	4313      	orrs	r3, r2
 8004216:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d107      	bne.n	8004230 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004220:	4b3c      	ldr	r3, [pc, #240]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d121      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0f6      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b03      	cmp	r3, #3
 8004236:	d107      	bne.n	8004248 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004238:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d115      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0ea      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d107      	bne.n	8004260 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004250:	4b30      	ldr	r3, [pc, #192]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0de      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004260:	4b2c      	ldr	r3, [pc, #176]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e0d6      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004270:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	f023 0207 	bic.w	r2, r3, #7
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4925      	ldr	r1, [pc, #148]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 800427e:	4313      	orrs	r3, r2
 8004280:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004282:	f7fd fd33 	bl	8001cec <HAL_GetTick>
 8004286:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800428a:	f7fd fd2f 	bl	8001cec <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0be      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d1eb      	bne.n	800428a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	4b14      	ldr	r3, [pc, #80]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d208      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	490e      	ldr	r1, [pc, #56]	@ (8004314 <HAL_RCC_ClockConfig+0x244>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d214      	bcs.n	8004318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b08      	ldr	r3, [pc, #32]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	4906      	ldr	r1, [pc, #24]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b04      	ldr	r3, [pc, #16]	@ (8004310 <HAL_RCC_ClockConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d005      	beq.n	8004318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e086      	b.n	800441e <HAL_RCC_ClockConfig+0x34e>
 8004310:	52002000 	.word	0x52002000
 8004314:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d010      	beq.n	8004346 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	4b3f      	ldr	r3, [pc, #252]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004330:	429a      	cmp	r2, r3
 8004332:	d208      	bcs.n	8004346 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004334:	4b3c      	ldr	r3, [pc, #240]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	4939      	ldr	r1, [pc, #228]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004342:	4313      	orrs	r3, r2
 8004344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d010      	beq.n	8004374 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004358:	69db      	ldr	r3, [r3, #28]
 800435a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800435e:	429a      	cmp	r2, r3
 8004360:	d208      	bcs.n	8004374 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004362:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	492e      	ldr	r1, [pc, #184]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004370:	4313      	orrs	r3, r2
 8004372:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	4b28      	ldr	r3, [pc, #160]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800438c:	429a      	cmp	r2, r3
 800438e:	d208      	bcs.n	80043a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004390:	4b25      	ldr	r3, [pc, #148]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 8004392:	69db      	ldr	r3, [r3, #28]
 8004394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	4922      	ldr	r1, [pc, #136]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d208      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043be:	4b1a      	ldr	r3, [pc, #104]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	4917      	ldr	r1, [pc, #92]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043d0:	f000 f834 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b14      	ldr	r3, [pc, #80]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	4912      	ldr	r1, [pc, #72]	@ (800442c <HAL_RCC_ClockConfig+0x35c>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <HAL_RCC_ClockConfig+0x358>)
 80043f0:	699b      	ldr	r3, [r3, #24]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	4a0d      	ldr	r2, [pc, #52]	@ (800442c <HAL_RCC_ClockConfig+0x35c>)
 80043f8:	5cd3      	ldrb	r3, [r2, r3]
 80043fa:	f003 031f 	and.w	r3, r3, #31
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_RCC_ClockConfig+0x360>)
 8004406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004408:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <HAL_RCC_ClockConfig+0x364>)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800440e:	4b0a      	ldr	r3, [pc, #40]	@ (8004438 <HAL_RCC_ClockConfig+0x368>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd fa88 	bl	8001928 <HAL_InitTick>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	58024400 	.word	0x58024400
 800442c:	0800bc98 	.word	0x0800bc98
 8004430:	24000094 	.word	0x24000094
 8004434:	24000090 	.word	0x24000090
 8004438:	24000098 	.word	0x24000098

0800443c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	@ 0x24
 8004440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004442:	4bb3      	ldr	r3, [pc, #716]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800444a:	2b18      	cmp	r3, #24
 800444c:	f200 8155 	bhi.w	80046fa <HAL_RCC_GetSysClockFreq+0x2be>
 8004450:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	080044bd 	.word	0x080044bd
 800445c:	080046fb 	.word	0x080046fb
 8004460:	080046fb 	.word	0x080046fb
 8004464:	080046fb 	.word	0x080046fb
 8004468:	080046fb 	.word	0x080046fb
 800446c:	080046fb 	.word	0x080046fb
 8004470:	080046fb 	.word	0x080046fb
 8004474:	080046fb 	.word	0x080046fb
 8004478:	080044e3 	.word	0x080044e3
 800447c:	080046fb 	.word	0x080046fb
 8004480:	080046fb 	.word	0x080046fb
 8004484:	080046fb 	.word	0x080046fb
 8004488:	080046fb 	.word	0x080046fb
 800448c:	080046fb 	.word	0x080046fb
 8004490:	080046fb 	.word	0x080046fb
 8004494:	080046fb 	.word	0x080046fb
 8004498:	080044e9 	.word	0x080044e9
 800449c:	080046fb 	.word	0x080046fb
 80044a0:	080046fb 	.word	0x080046fb
 80044a4:	080046fb 	.word	0x080046fb
 80044a8:	080046fb 	.word	0x080046fb
 80044ac:	080046fb 	.word	0x080046fb
 80044b0:	080046fb 	.word	0x080046fb
 80044b4:	080046fb 	.word	0x080046fb
 80044b8:	080044ef 	.word	0x080044ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044bc:	4b94      	ldr	r3, [pc, #592]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0320 	and.w	r3, r3, #32
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044c8:	4b91      	ldr	r3, [pc, #580]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	08db      	lsrs	r3, r3, #3
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	4a90      	ldr	r2, [pc, #576]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044d4:	fa22 f303 	lsr.w	r3, r2, r3
 80044d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80044da:	e111      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80044dc:	4b8d      	ldr	r3, [pc, #564]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80044de:	61bb      	str	r3, [r7, #24]
      break;
 80044e0:	e10e      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80044e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80044e4:	61bb      	str	r3, [r7, #24]
      break;
 80044e6:	e10b      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80044e8:	4b8c      	ldr	r3, [pc, #560]	@ (800471c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80044ea:	61bb      	str	r3, [r7, #24]
      break;
 80044ec:	e108      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044ee:	4b88      	ldr	r3, [pc, #544]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f2:	f003 0303 	and.w	r3, r3, #3
 80044f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80044f8:	4b85      	ldr	r3, [pc, #532]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004502:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004504:	4b82      	ldr	r3, [pc, #520]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800450e:	4b80      	ldr	r3, [pc, #512]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004512:	08db      	lsrs	r3, r3, #3
 8004514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80e1 	beq.w	80046f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	2b02      	cmp	r3, #2
 8004536:	f000 8083 	beq.w	8004640 <HAL_RCC_GetSysClockFreq+0x204>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b02      	cmp	r3, #2
 800453e:	f200 80a1 	bhi.w	8004684 <HAL_RCC_GetSysClockFreq+0x248>
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x114>
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d056      	beq.n	80045fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800454e:	e099      	b.n	8004684 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004550:	4b6f      	ldr	r3, [pc, #444]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0320 	and.w	r3, r3, #32
 8004558:	2b00      	cmp	r3, #0
 800455a:	d02d      	beq.n	80045b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800455c:	4b6c      	ldr	r3, [pc, #432]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	08db      	lsrs	r3, r3, #3
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	4a6b      	ldr	r2, [pc, #428]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
 800456c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004586:	4b62      	ldr	r3, [pc, #392]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004596:	ed97 6a02 	vldr	s12, [r7, #8]
 800459a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800459e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045b6:	e087      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b51      	ldr	r3, [pc, #324]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a02 	vldr	s12, [r7, #8]
 80045de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80045fa:	e065      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b40      	ldr	r3, [pc, #256]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004622:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800463e:	e043      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800472c <HAL_RCC_GetSysClockFreq+0x2f0>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b2f      	ldr	r3, [pc, #188]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a02 	vldr	s12, [r7, #8]
 8004666:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004682:	e021      	b.n	80046c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b1e      	ldr	r3, [pc, #120]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80046aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046c8:	4b11      	ldr	r3, [pc, #68]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046cc:	0a5b      	lsrs	r3, r3, #9
 80046ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d2:	3301      	adds	r3, #1
 80046d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ec:	ee17 3a90 	vmov	r3, s15
 80046f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80046f2:	e005      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
      break;
 80046f8:	e002      	b.n	8004700 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80046fa:	4b07      	ldr	r3, [pc, #28]	@ (8004718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80046fc:	61bb      	str	r3, [r7, #24]
      break;
 80046fe:	bf00      	nop
  }

  return sysclockfreq;
 8004700:	69bb      	ldr	r3, [r7, #24]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	@ 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	58024400 	.word	0x58024400
 8004714:	03d09000 	.word	0x03d09000
 8004718:	003d0900 	.word	0x003d0900
 800471c:	007a1200 	.word	0x007a1200
 8004720:	46000000 	.word	0x46000000
 8004724:	4c742400 	.word	0x4c742400
 8004728:	4a742400 	.word	0x4a742400
 800472c:	4af42400 	.word	0x4af42400

08004730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004736:	f7ff fe81 	bl	800443c <HAL_RCC_GetSysClockFreq>
 800473a:	4602      	mov	r2, r0
 800473c:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x50>)
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	0a1b      	lsrs	r3, r3, #8
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x54>)
 8004748:	5ccb      	ldrb	r3, [r1, r3]
 800474a:	f003 031f 	and.w	r3, r3, #31
 800474e:	fa22 f303 	lsr.w	r3, r2, r3
 8004752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <HAL_RCC_GetHCLKFreq+0x50>)
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <HAL_RCC_GetHCLKFreq+0x54>)
 800475e:	5cd3      	ldrb	r3, [r2, r3]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a07      	ldr	r2, [pc, #28]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x58>)
 800476c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800476e:	4a07      	ldr	r2, [pc, #28]	@ (800478c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004774:	4b04      	ldr	r3, [pc, #16]	@ (8004788 <HAL_RCC_GetHCLKFreq+0x58>)
 8004776:	681b      	ldr	r3, [r3, #0]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	58024400 	.word	0x58024400
 8004784:	0800bc98 	.word	0x0800bc98
 8004788:	24000094 	.word	0x24000094
 800478c:	24000090 	.word	0x24000090

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004794:	f7ff ffcc 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8004798:	4602      	mov	r2, r0
 800479a:	4b06      	ldr	r3, [pc, #24]	@ (80047b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479c:	69db      	ldr	r3, [r3, #28]
 800479e:	091b      	lsrs	r3, r3, #4
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	4904      	ldr	r1, [pc, #16]	@ (80047b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a6:	5ccb      	ldrb	r3, [r1, r3]
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	58024400 	.word	0x58024400
 80047b8:	0800bc98 	.word	0x0800bc98

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80047c0:	f7ff ffb6 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 80047c4:	4602      	mov	r2, r0
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	0a1b      	lsrs	r3, r3, #8
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d2:	5ccb      	ldrb	r3, [r1, r3]
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80047dc:	4618      	mov	r0, r3
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	58024400 	.word	0x58024400
 80047e4:	0800bc98 	.word	0x0800bc98

080047e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	223f      	movs	r2, #63	@ 0x3f
 80047f6:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0207 	and.w	r2, r3, #7
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004804:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004810:	4b14      	ldr	r3, [pc, #80]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	f003 020f 	and.w	r2, r3, #15
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800481c:	4b11      	ldr	r3, [pc, #68]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004828:	4b0e      	ldr	r3, [pc, #56]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 800482a:	69db      	ldr	r3, [r3, #28]
 800482c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004834:	4b0b      	ldr	r3, [pc, #44]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004840:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_RCC_GetClockConfig+0x7c>)
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_RCC_GetClockConfig+0x80>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	601a      	str	r2, [r3, #0]
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	58024400 	.word	0x58024400
 8004868:	52002000 	.word	0x52002000

0800486c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800486c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004870:	b0ca      	sub	sp, #296	@ 0x128
 8004872:	af00      	add	r7, sp, #0
 8004874:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004878:	2300      	movs	r3, #0
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004890:	2500      	movs	r5, #0
 8004892:	ea54 0305 	orrs.w	r3, r4, r5
 8004896:	d049      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800489e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a2:	d02f      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80048a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048a8:	d828      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ae:	d01a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80048b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048b4:	d822      	bhi.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80048ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048be:	d007      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048c0:	e01c      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048c2:	4bb8      	ldr	r3, [pc, #736]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4ab7      	ldr	r2, [pc, #732]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048ce:	e01a      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d4:	3308      	adds	r3, #8
 80048d6:	2102      	movs	r1, #2
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fc8f 	bl	80061fc <RCCEx_PLL2_Config>
 80048de:	4603      	mov	r3, r0
 80048e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048e4:	e00f      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	2102      	movs	r1, #2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f001 fd36 	bl	8006360 <RCCEx_PLL3_Config>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80048fa:	e004      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004902:	e000      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004904:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10a      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800490e:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004910:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004912:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800491c:	4aa1      	ldr	r2, [pc, #644]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800491e:	430b      	orrs	r3, r1
 8004920:	6513      	str	r3, [r2, #80]	@ 0x50
 8004922:	e003      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004928:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800492c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	ea58 0309 	orrs.w	r3, r8, r9
 8004940:	d047      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004948:	2b04      	cmp	r3, #4
 800494a:	d82a      	bhi.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800494c:	a201      	add	r2, pc, #4	@ (adr r2, 8004954 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004969 	.word	0x08004969
 8004958:	08004977 	.word	0x08004977
 800495c:	0800498d 	.word	0x0800498d
 8004960:	080049ab 	.word	0x080049ab
 8004964:	080049ab 	.word	0x080049ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b8e      	ldr	r3, [pc, #568]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a8d      	ldr	r2, [pc, #564]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004974:	e01a      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800497a:	3308      	adds	r3, #8
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f001 fc3c 	bl	80061fc <RCCEx_PLL2_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800498a:	e00f      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800498c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004990:	3328      	adds	r3, #40	@ 0x28
 8004992:	2100      	movs	r1, #0
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fce3 	bl	8006360 <RCCEx_PLL3_Config>
 800499a:	4603      	mov	r3, r0
 800499c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049a0:	e004      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a8:	e000      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80049aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10a      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049b4:	4b7b      	ldr	r3, [pc, #492]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049b8:	f023 0107 	bic.w	r1, r3, #7
 80049bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	4a78      	ldr	r2, [pc, #480]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049c4:	430b      	orrs	r3, r1
 80049c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80049c8:	e003      	b.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80049d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80049de:	f04f 0b00 	mov.w	fp, #0
 80049e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80049e6:	d04c      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80049e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f2:	d030      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f8:	d829      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80049fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fc:	d02d      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80049fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a00:	d825      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a02:	2b80      	cmp	r3, #128	@ 0x80
 8004a04:	d018      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004a06:	2b80      	cmp	r3, #128	@ 0x80
 8004a08:	d821      	bhi.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a0e:	2b40      	cmp	r3, #64	@ 0x40
 8004a10:	d007      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004a12:	e01c      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a14:	4b63      	ldr	r3, [pc, #396]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	4a62      	ldr	r2, [pc, #392]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a20:	e01c      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	3308      	adds	r3, #8
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fbe6 	bl	80061fc <RCCEx_PLL2_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a36:	e011      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a3c:	3328      	adds	r3, #40	@ 0x28
 8004a3e:	2100      	movs	r1, #0
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fc8d 	bl	8006360 <RCCEx_PLL3_Config>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004a4c:	e006      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a54:	e002      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004a5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004a64:	4b4f      	ldr	r3, [pc, #316]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a68:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a72:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004a8e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004a98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	d053      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004aaa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004aae:	d035      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004ab0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ab4:	d82e      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ab6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004aba:	d031      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004abc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004ac0:	d828      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ac2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac6:	d01a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004acc:	d822      	bhi.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004ad2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ad6:	d007      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004ad8:	e01c      	b.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ada:	4b32      	ldr	r3, [pc, #200]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ade:	4a31      	ldr	r2, [pc, #196]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ae6:	e01c      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	3308      	adds	r3, #8
 8004aee:	2100      	movs	r1, #0
 8004af0:	4618      	mov	r0, r3
 8004af2:	f001 fb83 	bl	80061fc <RCCEx_PLL2_Config>
 8004af6:	4603      	mov	r3, r0
 8004af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004afc:	e011      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b02:	3328      	adds	r3, #40	@ 0x28
 8004b04:	2100      	movs	r1, #0
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fc2a 	bl	8006360 <RCCEx_PLL3_Config>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004b12:	e006      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b1a:	e002      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b1c:	bf00      	nop
 8004b1e:	e000      	b.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10b      	bne.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b2e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b52:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004b56:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004b60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004b64:	460b      	mov	r3, r1
 8004b66:	4313      	orrs	r3, r2
 8004b68:	d056      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004b72:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b76:	d038      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b7c:	d831      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b7e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b82:	d034      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004b84:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004b88:	d82b      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b8e:	d01d      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004b90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b94:	d825      	bhi.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004ba0:	e01f      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004ba2:	bf00      	nop
 8004ba4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba8:	4ba2      	ldr	r3, [pc, #648]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bac:	4aa1      	ldr	r2, [pc, #644]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004bb4:	e01c      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	3308      	adds	r3, #8
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 fb1c 	bl	80061fc <RCCEx_PLL2_Config>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004bca:	e011      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd0:	3328      	adds	r3, #40	@ 0x28
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f001 fbc3 	bl	8006360 <RCCEx_PLL3_Config>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004be0:	e006      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be8:	e002      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bea:	bf00      	nop
 8004bec:	e000      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004bee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004bf8:	4b8e      	ldr	r3, [pc, #568]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bfc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004c08:	4a8a      	ldr	r2, [pc, #552]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c0e:	e003      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004c24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004c2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004c32:	460b      	mov	r3, r1
 8004c34:	4313      	orrs	r3, r2
 8004c36:	d03a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3e:	2b30      	cmp	r3, #48	@ 0x30
 8004c40:	d01f      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004c42:	2b30      	cmp	r3, #48	@ 0x30
 8004c44:	d819      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d00c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d815      	bhi.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004c52:	2b10      	cmp	r3, #16
 8004c54:	d111      	bne.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c56:	4b77      	ldr	r3, [pc, #476]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4a76      	ldr	r2, [pc, #472]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c62:	e011      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	3308      	adds	r3, #8
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fac5 	bl	80061fc <RCCEx_PLL2_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004c78:	e006      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c80:	e002      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004c86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004c90:	4b68      	ldr	r3, [pc, #416]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c9e:	4a65      	ldr	r2, [pc, #404]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ca4:	e003      	b.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004cba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004cc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d051      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cd8:	d035      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cde:	d82e      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004ce0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ce4:	d031      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cea:	d828      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf0:	d01a      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d822      	bhi.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d00:	d007      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004d02:	e01c      	b.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d04:	4b4b      	ldr	r3, [pc, #300]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d08:	4a4a      	ldr	r2, [pc, #296]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d10:	e01c      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d16:	3308      	adds	r3, #8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fa6e 	bl	80061fc <RCCEx_PLL2_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d26:	e011      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	3328      	adds	r3, #40	@ 0x28
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fb15 	bl	8006360 <RCCEx_PLL3_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e006      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d44:	e002      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004d54:	4b37      	ldr	r3, [pc, #220]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d62:	4a34      	ldr	r2, [pc, #208]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d68:	e003      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004d7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004d82:	2300      	movs	r3, #0
 8004d84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004d88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	d056      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d9c:	d033      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004d9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004da2:	d82c      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004da4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004da8:	d02f      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004daa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dae:	d826      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004db0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004db4:	d02b      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004dba:	d820      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc0:	d012      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004dc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dc6:	d81a      	bhi.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d022      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dd0:	d115      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	2101      	movs	r1, #1
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fa0e 	bl	80061fc <RCCEx_PLL2_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004de6:	e015      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	3328      	adds	r3, #40	@ 0x28
 8004dee:	2101      	movs	r1, #1
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fab5 	bl	8006360 <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e04:	e006      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e06:	bf00      	nop
 8004e08:	e004      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e0a:	bf00      	nop
 8004e0c:	e002      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e0e:	bf00      	nop
 8004e10:	e000      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004e12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10d      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004e1c:	4b05      	ldr	r3, [pc, #20]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e2a:	4a02      	ldr	r2, [pc, #8]	@ (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004e32:	bf00      	nop
 8004e34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d055      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004e68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e6c:	d033      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004e6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e72:	d82c      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e78:	d02f      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e7e:	d826      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e84:	d02b      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004e86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004e8a:	d820      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e90:	d012      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004e92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e96:	d81a      	bhi.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d022      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ea0:	d115      	bne.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea6:	3308      	adds	r3, #8
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 f9a6 	bl	80061fc <RCCEx_PLL2_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e015      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ebc:	3328      	adds	r3, #40	@ 0x28
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fa4d 	bl	8006360 <RCCEx_PLL3_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ed4:	e006      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e004      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004eda:	bf00      	nop
 8004edc:	e002      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e000      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004ee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004eec:	4ba3      	ldr	r3, [pc, #652]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004efc:	4a9f      	ldr	r2, [pc, #636]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004efe:	430b      	orrs	r3, r1
 8004f00:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f02:	e003      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004f18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004f22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d037      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f36:	d00e      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004f38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3c:	d816      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f48:	4b8c      	ldr	r3, [pc, #560]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	4a8b      	ldr	r2, [pc, #556]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f54:	e00f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 f94c 	bl	80061fc <RCCEx_PLL2_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004f6a:	e004      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f72:	e000      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10a      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f8c:	4a7b      	ldr	r2, [pc, #492]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6513      	str	r3, [r2, #80]	@ 0x50
 8004f92:	e003      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fac:	2300      	movs	r3, #0
 8004fae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004fb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	d039      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d81c      	bhi.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004fcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005009 	.word	0x08005009
 8004fd0:	08004fdd 	.word	0x08004fdd
 8004fd4:	08004feb 	.word	0x08004feb
 8004fd8:	08005009 	.word	0x08005009
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fdc:	4b67      	ldr	r3, [pc, #412]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	4a66      	ldr	r2, [pc, #408]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004fe2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004fe8:	e00f      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004fea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fee:	3308      	adds	r3, #8
 8004ff0:	2102      	movs	r1, #2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f001 f902 	bl	80061fc <RCCEx_PLL2_Config>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ffe:	e004      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005006:	e000      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005012:	4b5a      	ldr	r3, [pc, #360]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005016:	f023 0103 	bic.w	r1, r3, #3
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005020:	4a56      	ldr	r2, [pc, #344]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005022:	430b      	orrs	r3, r1
 8005024:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005026:	e003      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800502c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005038:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800503c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005040:	2300      	movs	r3, #0
 8005042:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005046:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800504a:	460b      	mov	r3, r1
 800504c:	4313      	orrs	r3, r2
 800504e:	f000 809f 	beq.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005052:	4b4b      	ldr	r3, [pc, #300]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a4a      	ldr	r2, [pc, #296]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005058:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800505c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800505e:	f7fc fe45 	bl	8001cec <HAL_GetTick>
 8005062:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005066:	e00b      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005068:	f7fc fe40 	bl	8001cec <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b64      	cmp	r3, #100	@ 0x64
 8005076:	d903      	bls.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800507e:	e005      	b.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005080:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0ed      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800508c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005090:	2b00      	cmp	r3, #0
 8005092:	d179      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005094:	4b39      	ldr	r3, [pc, #228]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005096:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050a0:	4053      	eors	r3, r2
 80050a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d015      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050aa:	4b34      	ldr	r3, [pc, #208]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050b6:	4b31      	ldr	r3, [pc, #196]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ba:	4a30      	ldr	r2, [pc, #192]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050c2:	4b2e      	ldr	r3, [pc, #184]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	4a2d      	ldr	r2, [pc, #180]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050cc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80050ce:	4a2b      	ldr	r2, [pc, #172]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80050d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80050d4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80050de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050e2:	d118      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fc fe02 	bl	8001cec <HAL_GetTick>
 80050e8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80050ec:	e00d      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ee:	f7fc fdfd 	bl	8001cec <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	f241 3388 	movw	r3, #5000	@ 0x1388
 80050fe:	429a      	cmp	r2, r3
 8005100:	d903      	bls.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005108:	e005      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0eb      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800511a:	2b00      	cmp	r3, #0
 800511c:	d129      	bne.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005122:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800512e:	d10e      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005130:	4b12      	ldr	r3, [pc, #72]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005140:	091a      	lsrs	r2, r3, #4
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005144:	4013      	ands	r3, r2
 8005146:	4a0d      	ldr	r2, [pc, #52]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005148:	430b      	orrs	r3, r1
 800514a:	6113      	str	r3, [r2, #16]
 800514c:	e005      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800514e:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	4a0a      	ldr	r2, [pc, #40]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005154:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005158:	6113      	str	r3, [r2, #16]
 800515a:	4b08      	ldr	r3, [pc, #32]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800515c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800515e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005162:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005166:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800516a:	4a04      	ldr	r2, [pc, #16]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800516c:	430b      	orrs	r3, r1
 800516e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005170:	e00e      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800517a:	e009      	b.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800517c:	58024400 	.word	0x58024400
 8005180:	58024800 	.word	0x58024800
 8005184:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800518c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005198:	f002 0301 	and.w	r3, r2, #1
 800519c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80051a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f000 8089 	beq.w	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051b8:	2b28      	cmp	r3, #40	@ 0x28
 80051ba:	d86b      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80051bc:	a201      	add	r2, pc, #4	@ (adr r2, 80051c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80051be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c2:	bf00      	nop
 80051c4:	0800529d 	.word	0x0800529d
 80051c8:	08005295 	.word	0x08005295
 80051cc:	08005295 	.word	0x08005295
 80051d0:	08005295 	.word	0x08005295
 80051d4:	08005295 	.word	0x08005295
 80051d8:	08005295 	.word	0x08005295
 80051dc:	08005295 	.word	0x08005295
 80051e0:	08005295 	.word	0x08005295
 80051e4:	08005269 	.word	0x08005269
 80051e8:	08005295 	.word	0x08005295
 80051ec:	08005295 	.word	0x08005295
 80051f0:	08005295 	.word	0x08005295
 80051f4:	08005295 	.word	0x08005295
 80051f8:	08005295 	.word	0x08005295
 80051fc:	08005295 	.word	0x08005295
 8005200:	08005295 	.word	0x08005295
 8005204:	0800527f 	.word	0x0800527f
 8005208:	08005295 	.word	0x08005295
 800520c:	08005295 	.word	0x08005295
 8005210:	08005295 	.word	0x08005295
 8005214:	08005295 	.word	0x08005295
 8005218:	08005295 	.word	0x08005295
 800521c:	08005295 	.word	0x08005295
 8005220:	08005295 	.word	0x08005295
 8005224:	0800529d 	.word	0x0800529d
 8005228:	08005295 	.word	0x08005295
 800522c:	08005295 	.word	0x08005295
 8005230:	08005295 	.word	0x08005295
 8005234:	08005295 	.word	0x08005295
 8005238:	08005295 	.word	0x08005295
 800523c:	08005295 	.word	0x08005295
 8005240:	08005295 	.word	0x08005295
 8005244:	0800529d 	.word	0x0800529d
 8005248:	08005295 	.word	0x08005295
 800524c:	08005295 	.word	0x08005295
 8005250:	08005295 	.word	0x08005295
 8005254:	08005295 	.word	0x08005295
 8005258:	08005295 	.word	0x08005295
 800525c:	08005295 	.word	0x08005295
 8005260:	08005295 	.word	0x08005295
 8005264:	0800529d 	.word	0x0800529d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526c:	3308      	adds	r3, #8
 800526e:	2101      	movs	r1, #1
 8005270:	4618      	mov	r0, r3
 8005272:	f000 ffc3 	bl	80061fc <RCCEx_PLL2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800527c:	e00f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	3328      	adds	r3, #40	@ 0x28
 8005284:	2101      	movs	r1, #1
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f86a 	bl	8006360 <RCCEx_PLL3_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005292:	e004      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800529c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80052a6:	4bbf      	ldr	r3, [pc, #764]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052b4:	4abb      	ldr	r2, [pc, #748]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f002 0302 	and.w	r3, r2, #2
 80052d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80052da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	d041      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80052e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d824      	bhi.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80052ee:	a201      	add	r2, pc, #4	@ (adr r2, 80052f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80052f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f4:	08005341 	.word	0x08005341
 80052f8:	0800530d 	.word	0x0800530d
 80052fc:	08005323 	.word	0x08005323
 8005300:	08005341 	.word	0x08005341
 8005304:	08005341 	.word	0x08005341
 8005308:	08005341 	.word	0x08005341
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800530c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005310:	3308      	adds	r3, #8
 8005312:	2101      	movs	r1, #1
 8005314:	4618      	mov	r0, r3
 8005316:	f000 ff71 	bl	80061fc <RCCEx_PLL2_Config>
 800531a:	4603      	mov	r3, r0
 800531c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005320:	e00f      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005326:	3328      	adds	r3, #40	@ 0x28
 8005328:	2101      	movs	r1, #1
 800532a:	4618      	mov	r0, r3
 800532c:	f001 f818 	bl	8006360 <RCCEx_PLL3_Config>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005336:	e004      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800533e:	e000      	b.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800534a:	4b96      	ldr	r3, [pc, #600]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800534c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800534e:	f023 0107 	bic.w	r1, r3, #7
 8005352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005358:	4a92      	ldr	r2, [pc, #584]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800535a:	430b      	orrs	r3, r1
 800535c:	6553      	str	r3, [r2, #84]	@ 0x54
 800535e:	e003      	b.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f002 0304 	and.w	r3, r2, #4
 8005374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005378:	2300      	movs	r3, #0
 800537a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800537e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005382:	460b      	mov	r3, r1
 8005384:	4313      	orrs	r3, r2
 8005386:	d044      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005390:	2b05      	cmp	r3, #5
 8005392:	d825      	bhi.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053e9 	.word	0x080053e9
 80053a0:	080053b5 	.word	0x080053b5
 80053a4:	080053cb 	.word	0x080053cb
 80053a8:	080053e9 	.word	0x080053e9
 80053ac:	080053e9 	.word	0x080053e9
 80053b0:	080053e9 	.word	0x080053e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b8:	3308      	adds	r3, #8
 80053ba:	2101      	movs	r1, #1
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 ff1d 	bl	80061fc <RCCEx_PLL2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053c8:	e00f      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80053ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ce:	3328      	adds	r3, #40	@ 0x28
 80053d0:	2101      	movs	r1, #1
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 ffc4 	bl	8006360 <RCCEx_PLL3_Config>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80053de:	e004      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80053e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80053f2:	4b6c      	ldr	r3, [pc, #432]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053f6:	f023 0107 	bic.w	r1, r3, #7
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005402:	4a68      	ldr	r2, [pc, #416]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005404:	430b      	orrs	r3, r1
 8005406:	6593      	str	r3, [r2, #88]	@ 0x58
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f002 0320 	and.w	r3, r2, #32
 800541e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d055      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800543a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800543e:	d033      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005440:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005444:	d82c      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800544a:	d02f      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800544c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005450:	d826      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005452:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005456:	d02b      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005458:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800545c:	d820      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800545e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005462:	d012      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005468:	d81a      	bhi.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800546a:	2b00      	cmp	r3, #0
 800546c:	d022      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800546e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005472:	d115      	bne.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	3308      	adds	r3, #8
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f000 febd 	bl	80061fc <RCCEx_PLL2_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005488:	e015      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800548a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800548e:	3328      	adds	r3, #40	@ 0x28
 8005490:	2102      	movs	r1, #2
 8005492:	4618      	mov	r0, r3
 8005494:	f000 ff64 	bl	8006360 <RCCEx_PLL3_Config>
 8005498:	4603      	mov	r3, r0
 800549a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800549e:	e00a      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054a6:	e006      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054a8:	bf00      	nop
 80054aa:	e004      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054ac:	bf00      	nop
 80054ae:	e002      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80054b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10b      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80054c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054ce:	4a35      	ldr	r2, [pc, #212]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80054d0:	430b      	orrs	r3, r1
 80054d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80054d4:	e003      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80054de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80054ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80054f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4313      	orrs	r3, r2
 80054fc:	d058      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005506:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800550a:	d033      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800550c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005510:	d82c      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005516:	d02f      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005518:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800551c:	d826      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800551e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005522:	d02b      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005524:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005528:	d820      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800552a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800552e:	d012      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005534:	d81a      	bhi.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d022      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800553e:	d115      	bne.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005544:	3308      	adds	r3, #8
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fe57 	bl	80061fc <RCCEx_PLL2_Config>
 800554e:	4603      	mov	r3, r0
 8005550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005554:	e015      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555a:	3328      	adds	r3, #40	@ 0x28
 800555c:	2102      	movs	r1, #2
 800555e:	4618      	mov	r0, r3
 8005560:	f000 fefe 	bl	8006360 <RCCEx_PLL3_Config>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800556a:	e00a      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005572:	e006      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005574:	bf00      	nop
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005578:	bf00      	nop
 800557a:	e002      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800557c:	bf00      	nop
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800558a:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800559a:	4a02      	ldr	r2, [pc, #8]	@ (80055a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800559c:	430b      	orrs	r3, r1
 800559e:	6593      	str	r3, [r2, #88]	@ 0x58
 80055a0:	e006      	b.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80055bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80055c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80055ca:	460b      	mov	r3, r1
 80055cc:	4313      	orrs	r3, r2
 80055ce:	d055      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055dc:	d033      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80055de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80055e2:	d82c      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e8:	d02f      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80055ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ee:	d826      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055f4:	d02b      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80055f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80055fa:	d820      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80055fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005600:	d012      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005602:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005606:	d81a      	bhi.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d022      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800560c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005610:	d115      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005616:	3308      	adds	r3, #8
 8005618:	2100      	movs	r1, #0
 800561a:	4618      	mov	r0, r3
 800561c:	f000 fdee 	bl	80061fc <RCCEx_PLL2_Config>
 8005620:	4603      	mov	r3, r0
 8005622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005626:	e015      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562c:	3328      	adds	r3, #40	@ 0x28
 800562e:	2102      	movs	r1, #2
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fe95 	bl	8006360 <RCCEx_PLL3_Config>
 8005636:	4603      	mov	r3, r0
 8005638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800563c:	e00a      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005644:	e006      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005646:	bf00      	nop
 8005648:	e004      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800564a:	bf00      	nop
 800564c:	e002      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800564e:	bf00      	nop
 8005650:	e000      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005652:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005654:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800565c:	4ba1      	ldr	r3, [pc, #644]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005668:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800566c:	4a9d      	ldr	r2, [pc, #628]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800566e:	430b      	orrs	r3, r1
 8005670:	6593      	str	r3, [r2, #88]	@ 0x58
 8005672:	e003      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005678:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800567c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 0308 	and.w	r3, r2, #8
 8005688:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800568c:	2300      	movs	r3, #0
 800568e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005692:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d01e      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800569c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056a8:	d10c      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80056aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ae:	3328      	adds	r3, #40	@ 0x28
 80056b0:	2102      	movs	r1, #2
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fe54 	bl	8006360 <RCCEx_PLL3_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056c4:	4b87      	ldr	r3, [pc, #540]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d4:	4a83      	ldr	r2, [pc, #524]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056d6:	430b      	orrs	r3, r1
 80056d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f002 0310 	and.w	r3, r2, #16
 80056e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80056ea:	2300      	movs	r3, #0
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80056f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80056f4:	460b      	mov	r3, r1
 80056f6:	4313      	orrs	r3, r2
 80056f8:	d01e      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005702:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005706:	d10c      	bne.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	3328      	adds	r3, #40	@ 0x28
 800570e:	2102      	movs	r1, #2
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fe25 	bl	8006360 <RCCEx_PLL3_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d002      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005722:	4b70      	ldr	r3, [pc, #448]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005732:	4a6c      	ldr	r2, [pc, #432]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005734:	430b      	orrs	r3, r1
 8005736:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005744:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800574e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d03e      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005760:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005764:	d022      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005766:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800576a:	d81b      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005770:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005774:	d00b      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005776:	e015      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577c:	3308      	adds	r3, #8
 800577e:	2100      	movs	r1, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fd3b 	bl	80061fc <RCCEx_PLL2_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800578c:	e00f      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	3328      	adds	r3, #40	@ 0x28
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fde2 	bl	8006360 <RCCEx_PLL3_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80057a2:	e004      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057b6:	4b4b      	ldr	r3, [pc, #300]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057c6:	4a47      	ldr	r2, [pc, #284]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80057c8:	430b      	orrs	r3, r1
 80057ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80057cc:	e003      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057e4:	2300      	movs	r3, #0
 80057e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80057e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80057ec:	460b      	mov	r3, r1
 80057ee:	4313      	orrs	r3, r2
 80057f0:	d03b      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80057fe:	d01f      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005800:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005804:	d818      	bhi.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580a:	d003      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800580c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005810:	d007      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005812:	e011      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005814:	4b33      	ldr	r3, [pc, #204]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	4a32      	ldr	r2, [pc, #200]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800581a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800581e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005820:	e00f      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005826:	3328      	adds	r3, #40	@ 0x28
 8005828:	2101      	movs	r1, #1
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fd98 	bl	8006360 <RCCEx_PLL3_Config>
 8005830:	4603      	mov	r3, r0
 8005832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005836:	e004      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800583e:	e000      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10b      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800584a:	4b26      	ldr	r3, [pc, #152]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800584c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800584e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800585a:	4a22      	ldr	r2, [pc, #136]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800585c:	430b      	orrs	r3, r1
 800585e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005860:	e003      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800586a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800586e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005872:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005876:	673b      	str	r3, [r7, #112]	@ 0x70
 8005878:	2300      	movs	r3, #0
 800587a:	677b      	str	r3, [r7, #116]	@ 0x74
 800587c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005880:	460b      	mov	r3, r1
 8005882:	4313      	orrs	r3, r2
 8005884:	d034      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005894:	d007      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005898:	4b12      	ldr	r3, [pc, #72]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589c:	4a11      	ldr	r2, [pc, #68]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800589e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058a4:	e00e      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2102      	movs	r1, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fca4 	bl	80061fc <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10d      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80058cc:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058da:	4a02      	ldr	r2, [pc, #8]	@ (80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058dc:	430b      	orrs	r3, r1
 80058de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80058e0:	e006      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80058e2:	bf00      	nop
 80058e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80058f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80058fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058fe:	2300      	movs	r3, #0
 8005900:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005902:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005906:	460b      	mov	r3, r1
 8005908:	4313      	orrs	r3, r2
 800590a:	d00c      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fd23 	bl	8006360 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800592e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005932:	663b      	str	r3, [r7, #96]	@ 0x60
 8005934:	2300      	movs	r3, #0
 8005936:	667b      	str	r3, [r7, #100]	@ 0x64
 8005938:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800593c:	460b      	mov	r3, r1
 800593e:	4313      	orrs	r3, r2
 8005940:	d038      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800594a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800594e:	d018      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005950:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005954:	d811      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005956:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800595a:	d014      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800595c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005960:	d80b      	bhi.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800596a:	d106      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800596c:	4bc3      	ldr	r3, [pc, #780]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800596e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005970:	4ac2      	ldr	r2, [pc, #776]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005976:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005978:	e008      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005980:	e004      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005982:	bf00      	nop
 8005984:	e002      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005986:	bf00      	nop
 8005988:	e000      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800598a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800598c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005994:	4bb9      	ldr	r3, [pc, #740]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005998:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059a4:	4ab5      	ldr	r2, [pc, #724]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059a6:	430b      	orrs	r3, r1
 80059a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80059aa:	e003      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80059c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059c2:	2300      	movs	r3, #0
 80059c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059ca:	460b      	mov	r3, r1
 80059cc:	4313      	orrs	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80059d0:	4baa      	ldr	r3, [pc, #680]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80059d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059de:	4aa7      	ldr	r2, [pc, #668]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80059e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80059f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80059f2:	2300      	movs	r3, #0
 80059f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80059fa:	460b      	mov	r3, r1
 80059fc:	4313      	orrs	r3, r2
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a00:	4b9e      	ldr	r3, [pc, #632]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005a10:	4a9a      	ldr	r2, [pc, #616]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a24:	2300      	movs	r3, #0
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	d009      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a32:	4b92      	ldr	r3, [pc, #584]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a36:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a40:	4a8e      	ldr	r2, [pc, #568]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a42:	430b      	orrs	r3, r1
 8005a44:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005a52:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a54:	2300      	movs	r3, #0
 8005a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	d00e      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a62:	4b86      	ldr	r3, [pc, #536]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	4a85      	ldr	r2, [pc, #532]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a68:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a6c:	6113      	str	r3, [r2, #16]
 8005a6e:	4b83      	ldr	r3, [pc, #524]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a7a:	4a80      	ldr	r2, [pc, #512]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a88:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005a8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a8e:	2300      	movs	r3, #0
 8005a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005a96:	460b      	mov	r3, r1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d009      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005a9c:	4b77      	ldr	r3, [pc, #476]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005a9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aaa:	4a74      	ldr	r2, [pc, #464]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005abe:	2300      	movs	r3, #0
 8005ac0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ac2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d00a      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005acc:	4b6b      	ldr	r3, [pc, #428]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005adc:	4a67      	ldr	r2, [pc, #412]	@ (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	2100      	movs	r1, #0
 8005aec:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005af4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d011      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	3308      	adds	r3, #8
 8005b04:	2100      	movs	r1, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fb78 	bl	80061fc <RCCEx_PLL2_Config>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	6239      	str	r1, [r7, #32]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	d011      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	3308      	adds	r3, #8
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f000 fb58 	bl	80061fc <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	61b9      	str	r1, [r7, #24]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	61fb      	str	r3, [r7, #28]
 8005b74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d011      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b82:	3308      	adds	r3, #8
 8005b84:	2102      	movs	r1, #2
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 fb38 	bl	80061fc <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005b92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	2100      	movs	r1, #0
 8005bac:	6139      	str	r1, [r7, #16]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	d011      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc2:	3328      	adds	r3, #40	@ 0x28
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fbca 	bl	8006360 <RCCEx_PLL3_Config>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005bd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	2100      	movs	r1, #0
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	d011      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c02:	3328      	adds	r3, #40	@ 0x28
 8005c04:	2101      	movs	r1, #1
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 fbaa 	bl	8006360 <RCCEx_PLL3_Config>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	d011      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c42:	3328      	adds	r3, #40	@ 0x28
 8005c44:	2102      	movs	r1, #2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fb8a 	bl	8006360 <RCCEx_PLL3_Config>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005c62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e000      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005c76:	46bd      	mov	sp, r7
 8005c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7c:	58024400 	.word	0x58024400

08005c80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c84:	f7fe fd54 	bl	8004730 <HAL_RCC_GetHCLKFreq>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	091b      	lsrs	r3, r3, #4
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	4904      	ldr	r1, [pc, #16]	@ (8005ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c96:	5ccb      	ldrb	r3, [r1, r3]
 8005c98:	f003 031f 	and.w	r3, r3, #31
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	58024400 	.word	0x58024400
 8005ca8:	0800bc98 	.word	0x0800bc98

08005cac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	f003 0303 	and.w	r3, r3, #3
 8005cbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005cbe:	4b9f      	ldr	r3, [pc, #636]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	0b1b      	lsrs	r3, r3, #12
 8005cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005cca:	4b9c      	ldr	r3, [pc, #624]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cd6:	4b99      	ldr	r3, [pc, #612]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	08db      	lsrs	r3, r3, #3
 8005cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8111 	beq.w	8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	f000 8083 	beq.w	8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	f200 80a1 	bhi.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d056      	beq.n	8005dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d16:	e099      	b.n	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d18:	4b88      	ldr	r3, [pc, #544]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d02d      	beq.n	8005d80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d24:	4b85      	ldr	r3, [pc, #532]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	4a84      	ldr	r2, [pc, #528]	@ (8005f40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
 8005d34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d7e:	e087      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d92:	4b6a      	ldr	r3, [pc, #424]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dc2:	e065      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dd6:	4b59      	ldr	r3, [pc, #356]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e06:	e043      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1a:	4b48      	ldr	r3, [pc, #288]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e4a:	e021      	b.n	8005e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e5e:	4b37      	ldr	r3, [pc, #220]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e90:	4b2a      	ldr	r3, [pc, #168]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb6:	ee17 2a90 	vmov	r2, s15
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee4:	ee17 2a90 	vmov	r2, s15
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005eec:	4b13      	ldr	r3, [pc, #76]	@ (8005f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	0e1b      	lsrs	r3, r3, #24
 8005ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f1a:	e008      	b.n	8005f2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	3724      	adds	r7, #36	@ 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	58024400 	.word	0x58024400
 8005f40:	03d09000 	.word	0x03d09000
 8005f44:	46000000 	.word	0x46000000
 8005f48:	4c742400 	.word	0x4c742400
 8005f4c:	4a742400 	.word	0x4a742400
 8005f50:	4af42400 	.word	0x4af42400

08005f54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	@ 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f66:	4b9f      	ldr	r3, [pc, #636]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	0d1b      	lsrs	r3, r3, #20
 8005f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f72:	4b9c      	ldr	r3, [pc, #624]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	0a1b      	lsrs	r3, r3, #8
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f7e:	4b99      	ldr	r3, [pc, #612]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8111 	beq.w	80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	f000 8083 	beq.w	80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	f200 80a1 	bhi.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d056      	beq.n	800606c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005fbe:	e099      	b.n	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fc0:	4b88      	ldr	r3, [pc, #544]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d02d      	beq.n	8006028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fcc:	4b85      	ldr	r3, [pc, #532]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	08db      	lsrs	r3, r3, #3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	4a84      	ldr	r2, [pc, #528]	@ (80061e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	ee07 3a90 	vmov	s15, r3
 8005fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006006:	ed97 6a03 	vldr	s12, [r7, #12]
 800600a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800601a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006026:	e087      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	ee07 3a90 	vmov	s15, r3
 800602e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800603a:	4b6a      	ldr	r3, [pc, #424]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	ed97 6a03 	vldr	s12, [r7, #12]
 800604e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800605a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800605e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800606a:	e065      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800607a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800607e:	4b59      	ldr	r3, [pc, #356]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800608e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800609a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800609e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ae:	e043      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80060be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060c2:	4b48      	ldr	r3, [pc, #288]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060f2:	e021      	b.n	8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006106:	4b37      	ldr	r3, [pc, #220]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006116:	ed97 6a03 	vldr	s12, [r7, #12]
 800611a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800611e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800612a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006138:	4b2a      	ldr	r3, [pc, #168]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800613a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613c:	0a5b      	lsrs	r3, r3, #9
 800613e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006142:	ee07 3a90 	vmov	s15, r3
 8006146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800614a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800614e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006152:	edd7 6a07 	vldr	s13, [r7, #28]
 8006156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800615e:	ee17 2a90 	vmov	r2, s15
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006166:	4b1f      	ldr	r3, [pc, #124]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006170:	ee07 3a90 	vmov	s15, r3
 8006174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800617c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006180:	edd7 6a07 	vldr	s13, [r7, #28]
 8006184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618c:	ee17 2a90 	vmov	r2, s15
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006194:	4b13      	ldr	r3, [pc, #76]	@ (80061e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006198:	0e1b      	lsrs	r3, r3, #24
 800619a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ba:	ee17 2a90 	vmov	r2, s15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	609a      	str	r2, [r3, #8]
}
 80061d6:	bf00      	nop
 80061d8:	3724      	adds	r7, #36	@ 0x24
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	03d09000 	.word	0x03d09000
 80061ec:	46000000 	.word	0x46000000
 80061f0:	4c742400 	.word	0x4c742400
 80061f4:	4a742400 	.word	0x4a742400
 80061f8:	4af42400 	.word	0x4af42400

080061fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800620a:	4b53      	ldr	r3, [pc, #332]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b03      	cmp	r3, #3
 8006214:	d101      	bne.n	800621a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e099      	b.n	800634e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800621a:	4b4f      	ldr	r3, [pc, #316]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4e      	ldr	r2, [pc, #312]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006220:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006226:	f7fb fd61 	bl	8001cec <HAL_GetTick>
 800622a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800622c:	e008      	b.n	8006240 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800622e:	f7fb fd5d 	bl	8001cec <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e086      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006240:	4b45      	ldr	r3, [pc, #276]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f0      	bne.n	800622e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800624c:	4b42      	ldr	r3, [pc, #264]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	031b      	lsls	r3, r3, #12
 800625a:	493f      	ldr	r1, [pc, #252]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	628b      	str	r3, [r1, #40]	@ 0x28
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	3b01      	subs	r3, #1
 8006266:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	3b01      	subs	r3, #1
 8006270:	025b      	lsls	r3, r3, #9
 8006272:	b29b      	uxth	r3, r3
 8006274:	431a      	orrs	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	3b01      	subs	r3, #1
 800627c:	041b      	lsls	r3, r3, #16
 800627e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	3b01      	subs	r3, #1
 800628a:	061b      	lsls	r3, r3, #24
 800628c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006290:	4931      	ldr	r1, [pc, #196]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006296:	4b30      	ldr	r3, [pc, #192]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	492d      	ldr	r1, [pc, #180]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062a4:	4313      	orrs	r3, r2
 80062a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80062a8:	4b2b      	ldr	r3, [pc, #172]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ac:	f023 0220 	bic.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	699b      	ldr	r3, [r3, #24]
 80062b4:	4928      	ldr	r1, [pc, #160]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062b6:	4313      	orrs	r3, r2
 80062b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80062ba:	4b27      	ldr	r3, [pc, #156]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	4a26      	ldr	r2, [pc, #152]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c0:	f023 0310 	bic.w	r3, r3, #16
 80062c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80062c6:	4b24      	ldr	r3, [pc, #144]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062ca:	4b24      	ldr	r3, [pc, #144]	@ (800635c <RCCEx_PLL2_Config+0x160>)
 80062cc:	4013      	ands	r3, r2
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	69d2      	ldr	r2, [r2, #28]
 80062d2:	00d2      	lsls	r2, r2, #3
 80062d4:	4920      	ldr	r1, [pc, #128]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80062da:	4b1f      	ldr	r3, [pc, #124]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	4a1e      	ldr	r2, [pc, #120]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062e0:	f043 0310 	orr.w	r3, r3, #16
 80062e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80062ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f0:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 80062f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80062f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80062f8:	e00f      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d106      	bne.n	800630e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006300:	4b15      	ldr	r3, [pc, #84]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	4a14      	ldr	r2, [pc, #80]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800630a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800630c:	e005      	b.n	800631a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	4a11      	ldr	r2, [pc, #68]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006314:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006318:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800631a:	4b0f      	ldr	r3, [pc, #60]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a0e      	ldr	r2, [pc, #56]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006320:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006324:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006326:	f7fb fce1 	bl	8001cec <HAL_GetTick>
 800632a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800632c:	e008      	b.n	8006340 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800632e:	f7fb fcdd 	bl	8001cec <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	2b02      	cmp	r3, #2
 800633a:	d901      	bls.n	8006340 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e006      	b.n	800634e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006340:	4b05      	ldr	r3, [pc, #20]	@ (8006358 <RCCEx_PLL2_Config+0x15c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d0f0      	beq.n	800632e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800634c:	7bfb      	ldrb	r3, [r7, #15]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	58024400 	.word	0x58024400
 800635c:	ffff0007 	.word	0xffff0007

08006360 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800636e:	4b53      	ldr	r3, [pc, #332]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006370:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b03      	cmp	r3, #3
 8006378:	d101      	bne.n	800637e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e099      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800637e:	4b4f      	ldr	r3, [pc, #316]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a4e      	ldr	r2, [pc, #312]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006384:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800638a:	f7fb fcaf 	bl	8001cec <HAL_GetTick>
 800638e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006390:	e008      	b.n	80063a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006392:	f7fb fcab 	bl	8001cec <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e086      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a4:	4b45      	ldr	r3, [pc, #276]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f0      	bne.n	8006392 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80063b0:	4b42      	ldr	r3, [pc, #264]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	051b      	lsls	r3, r3, #20
 80063be:	493f      	ldr	r1, [pc, #252]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	3b01      	subs	r3, #1
 80063ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063e6:	431a      	orrs	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	3b01      	subs	r3, #1
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063f4:	4931      	ldr	r1, [pc, #196]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80063fa:	4b30      	ldr	r3, [pc, #192]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	492d      	ldr	r1, [pc, #180]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800640c:	4b2b      	ldr	r3, [pc, #172]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	4928      	ldr	r1, [pc, #160]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800641e:	4b27      	ldr	r3, [pc, #156]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006428:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800642a:	4b24      	ldr	r3, [pc, #144]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800642c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800642e:	4b24      	ldr	r3, [pc, #144]	@ (80064c0 <RCCEx_PLL3_Config+0x160>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	69d2      	ldr	r2, [r2, #28]
 8006436:	00d2      	lsls	r2, r2, #3
 8006438:	4920      	ldr	r1, [pc, #128]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800643e:	4b1f      	ldr	r3, [pc, #124]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	4a1e      	ldr	r2, [pc, #120]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006448:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d106      	bne.n	800645e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006450:	4b1a      	ldr	r3, [pc, #104]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006456:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800645a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800645c:	e00f      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006464:	4b15      	ldr	r3, [pc, #84]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006468:	4a14      	ldr	r2, [pc, #80]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 800646a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800646e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006470:	e005      	b.n	800647e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006472:	4b12      	ldr	r3, [pc, #72]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006476:	4a11      	ldr	r2, [pc, #68]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006478:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800647c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800647e:	4b0f      	ldr	r3, [pc, #60]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a0e      	ldr	r2, [pc, #56]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 8006484:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006488:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800648a:	f7fb fc2f 	bl	8001cec <HAL_GetTick>
 800648e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006490:	e008      	b.n	80064a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006492:	f7fb fc2b 	bl	8001cec <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e006      	b.n	80064b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80064a4:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <RCCEx_PLL3_Config+0x15c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	58024400 	.word	0x58024400
 80064c0:	ffff0007 	.word	0xffff0007

080064c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e049      	b.n	800656a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f841 	bl	8006572 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4610      	mov	r0, r2
 8006504:	f000 f9e8 	bl	80068d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2201      	movs	r2, #1
 8006554:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006572:	b480      	push	{r7}
 8006574:	b083      	sub	sp, #12
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
	...

08006588 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b01      	cmp	r3, #1
 800659a:	d001      	beq.n	80065a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e054      	b.n	800664a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2202      	movs	r2, #2
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a26      	ldr	r2, [pc, #152]	@ (8006658 <HAL_TIM_Base_Start_IT+0xd0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d022      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	d01d      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a22      	ldr	r2, [pc, #136]	@ (800665c <HAL_TIM_Base_Start_IT+0xd4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d018      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a21      	ldr	r2, [pc, #132]	@ (8006660 <HAL_TIM_Base_Start_IT+0xd8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006664 <HAL_TIM_Base_Start_IT+0xdc>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00e      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006668 <HAL_TIM_Base_Start_IT+0xe0>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d009      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	@ (800666c <HAL_TIM_Base_Start_IT+0xe4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <HAL_TIM_Base_Start_IT+0x80>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1b      	ldr	r2, [pc, #108]	@ (8006670 <HAL_TIM_Base_Start_IT+0xe8>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d115      	bne.n	8006634 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	4b19      	ldr	r3, [pc, #100]	@ (8006674 <HAL_TIM_Base_Start_IT+0xec>)
 8006610:	4013      	ands	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2b06      	cmp	r3, #6
 8006618:	d015      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0xbe>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d011      	beq.n	8006646 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0201 	orr.w	r2, r2, #1
 8006630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006632:	e008      	b.n	8006646 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	e000      	b.n	8006648 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006646:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	40010000 	.word	0x40010000
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40010400 	.word	0x40010400
 800666c:	40001800 	.word	0x40001800
 8006670:	40014000 	.word	0x40014000
 8006674:	00010007 	.word	0x00010007

08006678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d020      	beq.n	80066dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d01b      	beq.n	80066dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f06f 0202 	mvn.w	r2, #2
 80066ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	f003 0303 	and.w	r3, r3, #3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d003      	beq.n	80066ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8e9 	bl	800689a <HAL_TIM_IC_CaptureCallback>
 80066c8:	e005      	b.n	80066d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f8db 	bl	8006886 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 f8ec 	bl	80068ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d020      	beq.n	8006728 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f003 0304 	and.w	r3, r3, #4
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d01b      	beq.n	8006728 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f06f 0204 	mvn.w	r2, #4
 80066f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f8c3 	bl	800689a <HAL_TIM_IC_CaptureCallback>
 8006714:	e005      	b.n	8006722 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8b5 	bl	8006886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f8c6 	bl	80068ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d020      	beq.n	8006774 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f003 0308 	and.w	r3, r3, #8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f06f 0208 	mvn.w	r2, #8
 8006744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2204      	movs	r2, #4
 800674a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f89d 	bl	800689a <HAL_TIM_IC_CaptureCallback>
 8006760:	e005      	b.n	800676e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f88f 	bl	8006886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f8a0 	bl	80068ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0310 	and.w	r3, r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	d020      	beq.n	80067c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01b      	beq.n	80067c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f06f 0210 	mvn.w	r2, #16
 8006790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2208      	movs	r2, #8
 8006796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f877 	bl	800689a <HAL_TIM_IC_CaptureCallback>
 80067ac:	e005      	b.n	80067ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f869 	bl	8006886 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f87a 	bl	80068ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00c      	beq.n	80067e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d007      	beq.n	80067e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f06f 0201 	mvn.w	r2, #1
 80067dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7fa fe94 	bl	800150c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00c      	beq.n	8006812 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800680a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f913 	bl	8006a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d007      	beq.n	8006836 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800682e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f90b 	bl	8006a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00c      	beq.n	800685a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d007      	beq.n	800685a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f834 	bl	80068c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f003 0320 	and.w	r3, r3, #32
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00c      	beq.n	800687e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f06f 0220 	mvn.w	r2, #32
 8006876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f8d3 	bl	8006a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800687e:	bf00      	nop
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006886:	b480      	push	{r7}
 8006888:	b083      	sub	sp, #12
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800688e:	bf00      	nop
 8006890:	370c      	adds	r7, #12
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a2:	bf00      	nop
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ae:	b480      	push	{r7}
 80068b0:	b083      	sub	sp, #12
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
	...

080068d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a46      	ldr	r2, [pc, #280]	@ (8006a04 <TIM_Base_SetConfig+0x12c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f6:	d00f      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a43      	ldr	r2, [pc, #268]	@ (8006a08 <TIM_Base_SetConfig+0x130>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d00b      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a42      	ldr	r2, [pc, #264]	@ (8006a0c <TIM_Base_SetConfig+0x134>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d007      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a41      	ldr	r2, [pc, #260]	@ (8006a10 <TIM_Base_SetConfig+0x138>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_Base_SetConfig+0x40>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a40      	ldr	r2, [pc, #256]	@ (8006a14 <TIM_Base_SetConfig+0x13c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d108      	bne.n	800692a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a35      	ldr	r2, [pc, #212]	@ (8006a04 <TIM_Base_SetConfig+0x12c>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01f      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006938:	d01b      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a32      	ldr	r2, [pc, #200]	@ (8006a08 <TIM_Base_SetConfig+0x130>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d017      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a31      	ldr	r2, [pc, #196]	@ (8006a0c <TIM_Base_SetConfig+0x134>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d013      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a30      	ldr	r2, [pc, #192]	@ (8006a10 <TIM_Base_SetConfig+0x138>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a2f      	ldr	r2, [pc, #188]	@ (8006a14 <TIM_Base_SetConfig+0x13c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a2e      	ldr	r2, [pc, #184]	@ (8006a18 <TIM_Base_SetConfig+0x140>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a2d      	ldr	r2, [pc, #180]	@ (8006a1c <TIM_Base_SetConfig+0x144>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_Base_SetConfig+0x9a>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2c      	ldr	r2, [pc, #176]	@ (8006a20 <TIM_Base_SetConfig+0x148>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d108      	bne.n	8006984 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006978:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a16      	ldr	r2, [pc, #88]	@ (8006a04 <TIM_Base_SetConfig+0x12c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00f      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a18      	ldr	r2, [pc, #96]	@ (8006a14 <TIM_Base_SetConfig+0x13c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d00b      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a17      	ldr	r2, [pc, #92]	@ (8006a18 <TIM_Base_SetConfig+0x140>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d007      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a16      	ldr	r2, [pc, #88]	@ (8006a1c <TIM_Base_SetConfig+0x144>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_Base_SetConfig+0xf8>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a15      	ldr	r2, [pc, #84]	@ (8006a20 <TIM_Base_SetConfig+0x148>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d103      	bne.n	80069d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d105      	bne.n	80069f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	f023 0201 	bic.w	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	611a      	str	r2, [r3, #16]
  }
}
 80069f6:	bf00      	nop
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40010000 	.word	0x40010000
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00
 8006a14:	40010400 	.word	0x40010400
 8006a18:	40014000 	.word	0x40014000
 8006a1c:	40014400 	.word	0x40014400
 8006a20:	40014800 	.word	0x40014800

08006a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e042      	b.n	8006af8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d106      	bne.n	8006a8a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fa fe45 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	@ 0x24
 8006a8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 0201 	bic.w	r2, r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d002      	beq.n	8006ab0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fe1e 	bl	80076ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 f8b3 	bl	8006c1c <UART_SetConfig>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d101      	bne.n	8006ac0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e01b      	b.n	8006af8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ace:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ade:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fe9d 	bl	8007830 <UART_CheckIdleState>
 8006af6:	4603      	mov	r3, r0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	603b      	str	r3, [r7, #0]
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d17b      	bne.n	8006c12 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <HAL_UART_Transmit+0x26>
 8006b20:	88fb      	ldrh	r3, [r7, #6]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e074      	b.n	8006c14 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2221      	movs	r2, #33	@ 0x21
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b3a:	f7fb f8d7 	bl	8001cec <HAL_GetTick>
 8006b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b58:	d108      	bne.n	8006b6c <HAL_UART_Transmit+0x6c>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	691b      	ldr	r3, [r3, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d104      	bne.n	8006b6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e003      	b.n	8006b74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b74:	e030      	b.n	8006bd8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	9300      	str	r3, [sp, #0]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2180      	movs	r1, #128	@ 0x80
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 feff 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e03d      	b.n	8006c14 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10b      	bne.n	8006bb6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	e007      	b.n	8006bc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	781a      	ldrb	r2, [r3, #0]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1c8      	bne.n	8006b76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2140      	movs	r1, #64	@ 0x40
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 fec8 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e006      	b.n	8006c14 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e000      	b.n	8006c14 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006c12:	2302      	movs	r3, #2
  }
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c20:	b092      	sub	sp, #72	@ 0x48
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	431a      	orrs	r2, r3
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4bbe      	ldr	r3, [pc, #760]	@ (8006f44 <UART_SetConfig+0x328>)
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c54:	430b      	orrs	r3, r1
 8006c56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4ab3      	ldr	r2, [pc, #716]	@ (8006f48 <UART_SetConfig+0x32c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c84:	4313      	orrs	r3, r2
 8006c86:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	4baf      	ldr	r3, [pc, #700]	@ (8006f4c <UART_SetConfig+0x330>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006c98:	430b      	orrs	r3, r1
 8006c9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca2:	f023 010f 	bic.w	r1, r3, #15
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4aa6      	ldr	r2, [pc, #664]	@ (8006f50 <UART_SetConfig+0x334>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d177      	bne.n	8006dac <UART_SetConfig+0x190>
 8006cbc:	4ba5      	ldr	r3, [pc, #660]	@ (8006f54 <UART_SetConfig+0x338>)
 8006cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006cc4:	2b28      	cmp	r3, #40	@ 0x28
 8006cc6:	d86d      	bhi.n	8006da4 <UART_SetConfig+0x188>
 8006cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0xb4>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d75 	.word	0x08006d75
 8006cd4:	08006da5 	.word	0x08006da5
 8006cd8:	08006da5 	.word	0x08006da5
 8006cdc:	08006da5 	.word	0x08006da5
 8006ce0:	08006da5 	.word	0x08006da5
 8006ce4:	08006da5 	.word	0x08006da5
 8006ce8:	08006da5 	.word	0x08006da5
 8006cec:	08006da5 	.word	0x08006da5
 8006cf0:	08006d7d 	.word	0x08006d7d
 8006cf4:	08006da5 	.word	0x08006da5
 8006cf8:	08006da5 	.word	0x08006da5
 8006cfc:	08006da5 	.word	0x08006da5
 8006d00:	08006da5 	.word	0x08006da5
 8006d04:	08006da5 	.word	0x08006da5
 8006d08:	08006da5 	.word	0x08006da5
 8006d0c:	08006da5 	.word	0x08006da5
 8006d10:	08006d85 	.word	0x08006d85
 8006d14:	08006da5 	.word	0x08006da5
 8006d18:	08006da5 	.word	0x08006da5
 8006d1c:	08006da5 	.word	0x08006da5
 8006d20:	08006da5 	.word	0x08006da5
 8006d24:	08006da5 	.word	0x08006da5
 8006d28:	08006da5 	.word	0x08006da5
 8006d2c:	08006da5 	.word	0x08006da5
 8006d30:	08006d8d 	.word	0x08006d8d
 8006d34:	08006da5 	.word	0x08006da5
 8006d38:	08006da5 	.word	0x08006da5
 8006d3c:	08006da5 	.word	0x08006da5
 8006d40:	08006da5 	.word	0x08006da5
 8006d44:	08006da5 	.word	0x08006da5
 8006d48:	08006da5 	.word	0x08006da5
 8006d4c:	08006da5 	.word	0x08006da5
 8006d50:	08006d95 	.word	0x08006d95
 8006d54:	08006da5 	.word	0x08006da5
 8006d58:	08006da5 	.word	0x08006da5
 8006d5c:	08006da5 	.word	0x08006da5
 8006d60:	08006da5 	.word	0x08006da5
 8006d64:	08006da5 	.word	0x08006da5
 8006d68:	08006da5 	.word	0x08006da5
 8006d6c:	08006da5 	.word	0x08006da5
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	2301      	movs	r3, #1
 8006d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d7a:	e222      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006d7c:	2304      	movs	r3, #4
 8006d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d82:	e21e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006d84:	2308      	movs	r3, #8
 8006d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d8a:	e21a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006d8c:	2310      	movs	r3, #16
 8006d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d92:	e216      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006d94:	2320      	movs	r3, #32
 8006d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d9a:	e212      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006d9c:	2340      	movs	r3, #64	@ 0x40
 8006d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006da2:	e20e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006da4:	2380      	movs	r3, #128	@ 0x80
 8006da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006daa:	e20a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a69      	ldr	r2, [pc, #420]	@ (8006f58 <UART_SetConfig+0x33c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d130      	bne.n	8006e18 <UART_SetConfig+0x1fc>
 8006db6:	4b67      	ldr	r3, [pc, #412]	@ (8006f54 <UART_SetConfig+0x338>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d826      	bhi.n	8006e10 <UART_SetConfig+0x1f4>
 8006dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc8 <UART_SetConfig+0x1ac>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006de1 	.word	0x08006de1
 8006dcc:	08006de9 	.word	0x08006de9
 8006dd0:	08006df1 	.word	0x08006df1
 8006dd4:	08006df9 	.word	0x08006df9
 8006dd8:	08006e01 	.word	0x08006e01
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e1ec      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e1e8      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e1e4      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e1e0      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e00:	2320      	movs	r3, #32
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e1dc      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e1d8      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e1d4      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a4f      	ldr	r2, [pc, #316]	@ (8006f5c <UART_SetConfig+0x340>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d130      	bne.n	8006e84 <UART_SetConfig+0x268>
 8006e22:	4b4c      	ldr	r3, [pc, #304]	@ (8006f54 <UART_SetConfig+0x338>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d826      	bhi.n	8006e7c <UART_SetConfig+0x260>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x218>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e1b6      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e1b2      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e1ae      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e1aa      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e1a6      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e74:	2340      	movs	r3, #64	@ 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e1a2      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e19e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a35      	ldr	r2, [pc, #212]	@ (8006f60 <UART_SetConfig+0x344>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d130      	bne.n	8006ef0 <UART_SetConfig+0x2d4>
 8006e8e:	4b31      	ldr	r3, [pc, #196]	@ (8006f54 <UART_SetConfig+0x338>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d826      	bhi.n	8006ee8 <UART_SetConfig+0x2cc>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x284>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e180      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e17c      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e178      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e174      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e170      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ee0:	2340      	movs	r3, #64	@ 0x40
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e16c      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e168      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8006f64 <UART_SetConfig+0x348>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d142      	bne.n	8006f80 <UART_SetConfig+0x364>
 8006efa:	4b16      	ldr	r3, [pc, #88]	@ (8006f54 <UART_SetConfig+0x338>)
 8006efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d838      	bhi.n	8006f78 <UART_SetConfig+0x35c>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x2f0>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f69 	.word	0x08006f69
 8006f20:	08006f71 	.word	0x08006f71
 8006f24:	2300      	movs	r3, #0
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e14a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e146      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e142      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e13e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f44:	cfff69f3 	.word	0xcfff69f3
 8006f48:	58000c00 	.word	0x58000c00
 8006f4c:	11fff4ff 	.word	0x11fff4ff
 8006f50:	40011000 	.word	0x40011000
 8006f54:	58024400 	.word	0x58024400
 8006f58:	40004400 	.word	0x40004400
 8006f5c:	40004800 	.word	0x40004800
 8006f60:	40004c00 	.word	0x40004c00
 8006f64:	40005000 	.word	0x40005000
 8006f68:	2320      	movs	r3, #32
 8006f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f6e:	e128      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f70:	2340      	movs	r3, #64	@ 0x40
 8006f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f76:	e124      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f78:	2380      	movs	r3, #128	@ 0x80
 8006f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f7e:	e120      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4acb      	ldr	r2, [pc, #812]	@ (80072b4 <UART_SetConfig+0x698>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d176      	bne.n	8007078 <UART_SetConfig+0x45c>
 8006f8a:	4bcb      	ldr	r3, [pc, #812]	@ (80072b8 <UART_SetConfig+0x69c>)
 8006f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f92:	2b28      	cmp	r3, #40	@ 0x28
 8006f94:	d86c      	bhi.n	8007070 <UART_SetConfig+0x454>
 8006f96:	a201      	add	r2, pc, #4	@ (adr r2, 8006f9c <UART_SetConfig+0x380>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08007041 	.word	0x08007041
 8006fa0:	08007071 	.word	0x08007071
 8006fa4:	08007071 	.word	0x08007071
 8006fa8:	08007071 	.word	0x08007071
 8006fac:	08007071 	.word	0x08007071
 8006fb0:	08007071 	.word	0x08007071
 8006fb4:	08007071 	.word	0x08007071
 8006fb8:	08007071 	.word	0x08007071
 8006fbc:	08007049 	.word	0x08007049
 8006fc0:	08007071 	.word	0x08007071
 8006fc4:	08007071 	.word	0x08007071
 8006fc8:	08007071 	.word	0x08007071
 8006fcc:	08007071 	.word	0x08007071
 8006fd0:	08007071 	.word	0x08007071
 8006fd4:	08007071 	.word	0x08007071
 8006fd8:	08007071 	.word	0x08007071
 8006fdc:	08007051 	.word	0x08007051
 8006fe0:	08007071 	.word	0x08007071
 8006fe4:	08007071 	.word	0x08007071
 8006fe8:	08007071 	.word	0x08007071
 8006fec:	08007071 	.word	0x08007071
 8006ff0:	08007071 	.word	0x08007071
 8006ff4:	08007071 	.word	0x08007071
 8006ff8:	08007071 	.word	0x08007071
 8006ffc:	08007059 	.word	0x08007059
 8007000:	08007071 	.word	0x08007071
 8007004:	08007071 	.word	0x08007071
 8007008:	08007071 	.word	0x08007071
 800700c:	08007071 	.word	0x08007071
 8007010:	08007071 	.word	0x08007071
 8007014:	08007071 	.word	0x08007071
 8007018:	08007071 	.word	0x08007071
 800701c:	08007061 	.word	0x08007061
 8007020:	08007071 	.word	0x08007071
 8007024:	08007071 	.word	0x08007071
 8007028:	08007071 	.word	0x08007071
 800702c:	08007071 	.word	0x08007071
 8007030:	08007071 	.word	0x08007071
 8007034:	08007071 	.word	0x08007071
 8007038:	08007071 	.word	0x08007071
 800703c:	08007069 	.word	0x08007069
 8007040:	2301      	movs	r3, #1
 8007042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007046:	e0bc      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800704e:	e0b8      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007056:	e0b4      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800705e:	e0b0      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007060:	2320      	movs	r3, #32
 8007062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007066:	e0ac      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007068:	2340      	movs	r3, #64	@ 0x40
 800706a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800706e:	e0a8      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007070:	2380      	movs	r3, #128	@ 0x80
 8007072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007076:	e0a4      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a8f      	ldr	r2, [pc, #572]	@ (80072bc <UART_SetConfig+0x6a0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d130      	bne.n	80070e4 <UART_SetConfig+0x4c8>
 8007082:	4b8d      	ldr	r3, [pc, #564]	@ (80072b8 <UART_SetConfig+0x69c>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	2b05      	cmp	r3, #5
 800708c:	d826      	bhi.n	80070dc <UART_SetConfig+0x4c0>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <UART_SetConfig+0x478>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070bd 	.word	0x080070bd
 80070a0:	080070c5 	.word	0x080070c5
 80070a4:	080070cd 	.word	0x080070cd
 80070a8:	080070d5 	.word	0x080070d5
 80070ac:	2300      	movs	r3, #0
 80070ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070b2:	e086      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ba:	e082      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070c2:	e07e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070ca:	e07a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070cc:	2320      	movs	r3, #32
 80070ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070d2:	e076      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070d4:	2340      	movs	r3, #64	@ 0x40
 80070d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070da:	e072      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070dc:	2380      	movs	r3, #128	@ 0x80
 80070de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80070e2:	e06e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a75      	ldr	r2, [pc, #468]	@ (80072c0 <UART_SetConfig+0x6a4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d130      	bne.n	8007150 <UART_SetConfig+0x534>
 80070ee:	4b72      	ldr	r3, [pc, #456]	@ (80072b8 <UART_SetConfig+0x69c>)
 80070f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	2b05      	cmp	r3, #5
 80070f8:	d826      	bhi.n	8007148 <UART_SetConfig+0x52c>
 80070fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007100 <UART_SetConfig+0x4e4>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007119 	.word	0x08007119
 8007104:	08007121 	.word	0x08007121
 8007108:	08007129 	.word	0x08007129
 800710c:	08007131 	.word	0x08007131
 8007110:	08007139 	.word	0x08007139
 8007114:	08007141 	.word	0x08007141
 8007118:	2300      	movs	r3, #0
 800711a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800711e:	e050      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007120:	2304      	movs	r3, #4
 8007122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007126:	e04c      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007128:	2308      	movs	r3, #8
 800712a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800712e:	e048      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007130:	2310      	movs	r3, #16
 8007132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007136:	e044      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007138:	2320      	movs	r3, #32
 800713a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800713e:	e040      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007140:	2340      	movs	r3, #64	@ 0x40
 8007142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007146:	e03c      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007148:	2380      	movs	r3, #128	@ 0x80
 800714a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800714e:	e038      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a5b      	ldr	r2, [pc, #364]	@ (80072c4 <UART_SetConfig+0x6a8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d130      	bne.n	80071bc <UART_SetConfig+0x5a0>
 800715a:	4b57      	ldr	r3, [pc, #348]	@ (80072b8 <UART_SetConfig+0x69c>)
 800715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b05      	cmp	r3, #5
 8007164:	d826      	bhi.n	80071b4 <UART_SetConfig+0x598>
 8007166:	a201      	add	r2, pc, #4	@ (adr r2, 800716c <UART_SetConfig+0x550>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	08007185 	.word	0x08007185
 8007170:	0800718d 	.word	0x0800718d
 8007174:	08007195 	.word	0x08007195
 8007178:	0800719d 	.word	0x0800719d
 800717c:	080071a5 	.word	0x080071a5
 8007180:	080071ad 	.word	0x080071ad
 8007184:	2302      	movs	r3, #2
 8007186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800718a:	e01a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 800718c:	2304      	movs	r3, #4
 800718e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007192:	e016      	b.n	80071c2 <UART_SetConfig+0x5a6>
 8007194:	2308      	movs	r3, #8
 8007196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800719a:	e012      	b.n	80071c2 <UART_SetConfig+0x5a6>
 800719c:	2310      	movs	r3, #16
 800719e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071a2:	e00e      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80071a4:	2320      	movs	r3, #32
 80071a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071aa:	e00a      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80071ac:	2340      	movs	r3, #64	@ 0x40
 80071ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071b2:	e006      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80071b4:	2380      	movs	r3, #128	@ 0x80
 80071b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80071ba:	e002      	b.n	80071c2 <UART_SetConfig+0x5a6>
 80071bc:	2380      	movs	r3, #128	@ 0x80
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a3f      	ldr	r2, [pc, #252]	@ (80072c4 <UART_SetConfig+0x6a8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	f040 80f8 	bne.w	80073be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	dc46      	bgt.n	8007264 <UART_SetConfig+0x648>
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	f2c0 8082 	blt.w	80072e0 <UART_SetConfig+0x6c4>
 80071dc:	3b02      	subs	r3, #2
 80071de:	2b1e      	cmp	r3, #30
 80071e0:	d87e      	bhi.n	80072e0 <UART_SetConfig+0x6c4>
 80071e2:	a201      	add	r2, pc, #4	@ (adr r2, 80071e8 <UART_SetConfig+0x5cc>)
 80071e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e8:	0800726b 	.word	0x0800726b
 80071ec:	080072e1 	.word	0x080072e1
 80071f0:	08007273 	.word	0x08007273
 80071f4:	080072e1 	.word	0x080072e1
 80071f8:	080072e1 	.word	0x080072e1
 80071fc:	080072e1 	.word	0x080072e1
 8007200:	08007283 	.word	0x08007283
 8007204:	080072e1 	.word	0x080072e1
 8007208:	080072e1 	.word	0x080072e1
 800720c:	080072e1 	.word	0x080072e1
 8007210:	080072e1 	.word	0x080072e1
 8007214:	080072e1 	.word	0x080072e1
 8007218:	080072e1 	.word	0x080072e1
 800721c:	080072e1 	.word	0x080072e1
 8007220:	08007293 	.word	0x08007293
 8007224:	080072e1 	.word	0x080072e1
 8007228:	080072e1 	.word	0x080072e1
 800722c:	080072e1 	.word	0x080072e1
 8007230:	080072e1 	.word	0x080072e1
 8007234:	080072e1 	.word	0x080072e1
 8007238:	080072e1 	.word	0x080072e1
 800723c:	080072e1 	.word	0x080072e1
 8007240:	080072e1 	.word	0x080072e1
 8007244:	080072e1 	.word	0x080072e1
 8007248:	080072e1 	.word	0x080072e1
 800724c:	080072e1 	.word	0x080072e1
 8007250:	080072e1 	.word	0x080072e1
 8007254:	080072e1 	.word	0x080072e1
 8007258:	080072e1 	.word	0x080072e1
 800725c:	080072e1 	.word	0x080072e1
 8007260:	080072d3 	.word	0x080072d3
 8007264:	2b40      	cmp	r3, #64	@ 0x40
 8007266:	d037      	beq.n	80072d8 <UART_SetConfig+0x6bc>
 8007268:	e03a      	b.n	80072e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800726a:	f7fe fd09 	bl	8005c80 <HAL_RCCEx_GetD3PCLK1Freq>
 800726e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007270:	e03c      	b.n	80072ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe fd18 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007280:	e034      	b.n	80072ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007282:	f107 0318 	add.w	r3, r7, #24
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fe64 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007290:	e02c      	b.n	80072ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007292:	4b09      	ldr	r3, [pc, #36]	@ (80072b8 <UART_SetConfig+0x69c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0320 	and.w	r3, r3, #32
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800729e:	4b06      	ldr	r3, [pc, #24]	@ (80072b8 <UART_SetConfig+0x69c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	08db      	lsrs	r3, r3, #3
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	4a07      	ldr	r2, [pc, #28]	@ (80072c8 <UART_SetConfig+0x6ac>)
 80072aa:	fa22 f303 	lsr.w	r3, r2, r3
 80072ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072b0:	e01c      	b.n	80072ec <UART_SetConfig+0x6d0>
 80072b2:	bf00      	nop
 80072b4:	40011400 	.word	0x40011400
 80072b8:	58024400 	.word	0x58024400
 80072bc:	40007800 	.word	0x40007800
 80072c0:	40007c00 	.word	0x40007c00
 80072c4:	58000c00 	.word	0x58000c00
 80072c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80072cc:	4b9d      	ldr	r3, [pc, #628]	@ (8007544 <UART_SetConfig+0x928>)
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d0:	e00c      	b.n	80072ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072d2:	4b9d      	ldr	r3, [pc, #628]	@ (8007548 <UART_SetConfig+0x92c>)
 80072d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072d6:	e009      	b.n	80072ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80072de:	e005      	b.n	80072ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80072ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f000 81de 	beq.w	80076b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f8:	4a94      	ldr	r2, [pc, #592]	@ (800754c <UART_SetConfig+0x930>)
 80072fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072fe:	461a      	mov	r2, r3
 8007300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007302:	fbb3 f3f2 	udiv	r3, r3, r2
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	4613      	mov	r3, r2
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	4413      	add	r3, r2
 8007312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007314:	429a      	cmp	r2, r3
 8007316:	d305      	bcc.n	8007324 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800731e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800732a:	e1c1      	b.n	80076b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800732c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800732e:	2200      	movs	r2, #0
 8007330:	60bb      	str	r3, [r7, #8]
 8007332:	60fa      	str	r2, [r7, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	4a84      	ldr	r2, [pc, #528]	@ (800754c <UART_SetConfig+0x930>)
 800733a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800733e:	b29b      	uxth	r3, r3
 8007340:	2200      	movs	r2, #0
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	e9d7 2300 	ldrd	r2, r3, [r7]
 800734a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800734e:	f7f9 f81f 	bl	8000390 <__aeabi_uldivmod>
 8007352:	4602      	mov	r2, r0
 8007354:	460b      	mov	r3, r1
 8007356:	4610      	mov	r0, r2
 8007358:	4619      	mov	r1, r3
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	020b      	lsls	r3, r1, #8
 8007364:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007368:	0202      	lsls	r2, r0, #8
 800736a:	6979      	ldr	r1, [r7, #20]
 800736c:	6849      	ldr	r1, [r1, #4]
 800736e:	0849      	lsrs	r1, r1, #1
 8007370:	2000      	movs	r0, #0
 8007372:	460c      	mov	r4, r1
 8007374:	4605      	mov	r5, r0
 8007376:	eb12 0804 	adds.w	r8, r2, r4
 800737a:	eb43 0905 	adc.w	r9, r3, r5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	469a      	mov	sl, r3
 8007386:	4693      	mov	fp, r2
 8007388:	4652      	mov	r2, sl
 800738a:	465b      	mov	r3, fp
 800738c:	4640      	mov	r0, r8
 800738e:	4649      	mov	r1, r9
 8007390:	f7f8 fffe 	bl	8000390 <__aeabi_uldivmod>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4613      	mov	r3, r2
 800739a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800739c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800739e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073a2:	d308      	bcc.n	80073b6 <UART_SetConfig+0x79a>
 80073a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80073aa:	d204      	bcs.n	80073b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073b2:	60da      	str	r2, [r3, #12]
 80073b4:	e17c      	b.n	80076b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80073bc:	e178      	b.n	80076b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c6:	f040 80c5 	bne.w	8007554 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80073ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	dc48      	bgt.n	8007464 <UART_SetConfig+0x848>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	db7b      	blt.n	80074ce <UART_SetConfig+0x8b2>
 80073d6:	2b20      	cmp	r3, #32
 80073d8:	d879      	bhi.n	80074ce <UART_SetConfig+0x8b2>
 80073da:	a201      	add	r2, pc, #4	@ (adr r2, 80073e0 <UART_SetConfig+0x7c4>)
 80073dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e0:	0800746b 	.word	0x0800746b
 80073e4:	08007473 	.word	0x08007473
 80073e8:	080074cf 	.word	0x080074cf
 80073ec:	080074cf 	.word	0x080074cf
 80073f0:	0800747b 	.word	0x0800747b
 80073f4:	080074cf 	.word	0x080074cf
 80073f8:	080074cf 	.word	0x080074cf
 80073fc:	080074cf 	.word	0x080074cf
 8007400:	0800748b 	.word	0x0800748b
 8007404:	080074cf 	.word	0x080074cf
 8007408:	080074cf 	.word	0x080074cf
 800740c:	080074cf 	.word	0x080074cf
 8007410:	080074cf 	.word	0x080074cf
 8007414:	080074cf 	.word	0x080074cf
 8007418:	080074cf 	.word	0x080074cf
 800741c:	080074cf 	.word	0x080074cf
 8007420:	0800749b 	.word	0x0800749b
 8007424:	080074cf 	.word	0x080074cf
 8007428:	080074cf 	.word	0x080074cf
 800742c:	080074cf 	.word	0x080074cf
 8007430:	080074cf 	.word	0x080074cf
 8007434:	080074cf 	.word	0x080074cf
 8007438:	080074cf 	.word	0x080074cf
 800743c:	080074cf 	.word	0x080074cf
 8007440:	080074cf 	.word	0x080074cf
 8007444:	080074cf 	.word	0x080074cf
 8007448:	080074cf 	.word	0x080074cf
 800744c:	080074cf 	.word	0x080074cf
 8007450:	080074cf 	.word	0x080074cf
 8007454:	080074cf 	.word	0x080074cf
 8007458:	080074cf 	.word	0x080074cf
 800745c:	080074cf 	.word	0x080074cf
 8007460:	080074c1 	.word	0x080074c1
 8007464:	2b40      	cmp	r3, #64	@ 0x40
 8007466:	d02e      	beq.n	80074c6 <UART_SetConfig+0x8aa>
 8007468:	e031      	b.n	80074ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800746a:	f7fd f991 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800746e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007470:	e033      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007472:	f7fd f9a3 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8007476:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007478:	e02f      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800747a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe fc14 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007488:	e027      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800748a:	f107 0318 	add.w	r3, r7, #24
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fd60 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007498:	e01f      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800749a:	4b2d      	ldr	r3, [pc, #180]	@ (8007550 <UART_SetConfig+0x934>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007550 <UART_SetConfig+0x934>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	08db      	lsrs	r3, r3, #3
 80074ac:	f003 0303 	and.w	r3, r3, #3
 80074b0:	4a24      	ldr	r2, [pc, #144]	@ (8007544 <UART_SetConfig+0x928>)
 80074b2:	fa22 f303 	lsr.w	r3, r2, r3
 80074b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074b8:	e00f      	b.n	80074da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074ba:	4b22      	ldr	r3, [pc, #136]	@ (8007544 <UART_SetConfig+0x928>)
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074be:	e00c      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074c0:	4b21      	ldr	r3, [pc, #132]	@ (8007548 <UART_SetConfig+0x92c>)
 80074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074c4:	e009      	b.n	80074da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80074cc:	e005      	b.n	80074da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80074d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80e7 	beq.w	80076b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	4a19      	ldr	r2, [pc, #100]	@ (800754c <UART_SetConfig+0x930>)
 80074e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ec:	461a      	mov	r2, r3
 80074ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074f4:	005a      	lsls	r2, r3, #1
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	085b      	lsrs	r3, r3, #1
 80074fc:	441a      	add	r2, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	fbb2 f3f3 	udiv	r3, r2, r3
 8007506:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800750a:	2b0f      	cmp	r3, #15
 800750c:	d916      	bls.n	800753c <UART_SetConfig+0x920>
 800750e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d212      	bcs.n	800753c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007518:	b29b      	uxth	r3, r3
 800751a:	f023 030f 	bic.w	r3, r3, #15
 800751e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007522:	085b      	lsrs	r3, r3, #1
 8007524:	b29b      	uxth	r3, r3
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	b29a      	uxth	r2, r3
 800752c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800752e:	4313      	orrs	r3, r2
 8007530:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e0b9      	b.n	80076b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007542:	e0b5      	b.n	80076b0 <UART_SetConfig+0xa94>
 8007544:	03d09000 	.word	0x03d09000
 8007548:	003d0900 	.word	0x003d0900
 800754c:	0800bca8 	.word	0x0800bca8
 8007550:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007554:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007558:	2b20      	cmp	r3, #32
 800755a:	dc49      	bgt.n	80075f0 <UART_SetConfig+0x9d4>
 800755c:	2b00      	cmp	r3, #0
 800755e:	db7c      	blt.n	800765a <UART_SetConfig+0xa3e>
 8007560:	2b20      	cmp	r3, #32
 8007562:	d87a      	bhi.n	800765a <UART_SetConfig+0xa3e>
 8007564:	a201      	add	r2, pc, #4	@ (adr r2, 800756c <UART_SetConfig+0x950>)
 8007566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756a:	bf00      	nop
 800756c:	080075f7 	.word	0x080075f7
 8007570:	080075ff 	.word	0x080075ff
 8007574:	0800765b 	.word	0x0800765b
 8007578:	0800765b 	.word	0x0800765b
 800757c:	08007607 	.word	0x08007607
 8007580:	0800765b 	.word	0x0800765b
 8007584:	0800765b 	.word	0x0800765b
 8007588:	0800765b 	.word	0x0800765b
 800758c:	08007617 	.word	0x08007617
 8007590:	0800765b 	.word	0x0800765b
 8007594:	0800765b 	.word	0x0800765b
 8007598:	0800765b 	.word	0x0800765b
 800759c:	0800765b 	.word	0x0800765b
 80075a0:	0800765b 	.word	0x0800765b
 80075a4:	0800765b 	.word	0x0800765b
 80075a8:	0800765b 	.word	0x0800765b
 80075ac:	08007627 	.word	0x08007627
 80075b0:	0800765b 	.word	0x0800765b
 80075b4:	0800765b 	.word	0x0800765b
 80075b8:	0800765b 	.word	0x0800765b
 80075bc:	0800765b 	.word	0x0800765b
 80075c0:	0800765b 	.word	0x0800765b
 80075c4:	0800765b 	.word	0x0800765b
 80075c8:	0800765b 	.word	0x0800765b
 80075cc:	0800765b 	.word	0x0800765b
 80075d0:	0800765b 	.word	0x0800765b
 80075d4:	0800765b 	.word	0x0800765b
 80075d8:	0800765b 	.word	0x0800765b
 80075dc:	0800765b 	.word	0x0800765b
 80075e0:	0800765b 	.word	0x0800765b
 80075e4:	0800765b 	.word	0x0800765b
 80075e8:	0800765b 	.word	0x0800765b
 80075ec:	0800764d 	.word	0x0800764d
 80075f0:	2b40      	cmp	r3, #64	@ 0x40
 80075f2:	d02e      	beq.n	8007652 <UART_SetConfig+0xa36>
 80075f4:	e031      	b.n	800765a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f6:	f7fd f8cb 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 80075fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80075fc:	e033      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075fe:	f7fd f8dd 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8007602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007604:	e02f      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fb4e 	bl	8005cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007614:	e027      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007616:	f107 0318 	add.w	r3, r7, #24
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe fc9a 	bl	8005f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007624:	e01f      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007626:	4b2d      	ldr	r3, [pc, #180]	@ (80076dc <UART_SetConfig+0xac0>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b00      	cmp	r3, #0
 8007630:	d009      	beq.n	8007646 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007632:	4b2a      	ldr	r3, [pc, #168]	@ (80076dc <UART_SetConfig+0xac0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	08db      	lsrs	r3, r3, #3
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	4a28      	ldr	r2, [pc, #160]	@ (80076e0 <UART_SetConfig+0xac4>)
 800763e:	fa22 f303 	lsr.w	r3, r2, r3
 8007642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007644:	e00f      	b.n	8007666 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007646:	4b26      	ldr	r3, [pc, #152]	@ (80076e0 <UART_SetConfig+0xac4>)
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800764a:	e00c      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800764c:	4b25      	ldr	r3, [pc, #148]	@ (80076e4 <UART_SetConfig+0xac8>)
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007650:	e009      	b.n	8007666 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007658:	e005      	b.n	8007666 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007664:	bf00      	nop
    }

    if (pclk != 0U)
 8007666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007668:	2b00      	cmp	r3, #0
 800766a:	d021      	beq.n	80076b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007670:	4a1d      	ldr	r2, [pc, #116]	@ (80076e8 <UART_SetConfig+0xacc>)
 8007672:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007676:	461a      	mov	r2, r3
 8007678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800767a:	fbb3 f2f2 	udiv	r2, r3, r2
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	441a      	add	r2, r3
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	fbb2 f3f3 	udiv	r3, r2, r3
 800768e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007692:	2b0f      	cmp	r3, #15
 8007694:	d909      	bls.n	80076aa <UART_SetConfig+0xa8e>
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800769c:	d205      	bcs.n	80076aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800769e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	e002      	b.n	80076b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	2200      	movs	r2, #0
 80076c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80076cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3748      	adds	r7, #72	@ 0x48
 80076d4:	46bd      	mov	sp, r7
 80076d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076da:	bf00      	nop
 80076dc:	58024400 	.word	0x58024400
 80076e0:	03d09000 	.word	0x03d09000
 80076e4:	003d0900 	.word	0x003d0900
 80076e8:	0800bca8 	.word	0x0800bca8

080076ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076f8:	f003 0308 	and.w	r3, r3, #8
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00a      	beq.n	8007716 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00a      	beq.n	800775a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	430a      	orrs	r2, r1
 8007758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00a      	beq.n	800777c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007780:	f003 0310 	and.w	r3, r3, #16
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00a      	beq.n	800779e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01a      	beq.n	8007802 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077ea:	d10a      	bne.n	8007802 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	430a      	orrs	r2, r1
 8007800:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	430a      	orrs	r2, r1
 8007822:	605a      	str	r2, [r3, #4]
  }
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b098      	sub	sp, #96	@ 0x60
 8007834:	af02      	add	r7, sp, #8
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007840:	f7fa fa54 	bl	8001cec <HAL_GetTick>
 8007844:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b08      	cmp	r3, #8
 8007852:	d12f      	bne.n	80078b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007854:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800785c:	2200      	movs	r2, #0
 800785e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f88e 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d022      	beq.n	80078b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800787c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007882:	653b      	str	r3, [r7, #80]	@ 0x50
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	461a      	mov	r2, r3
 800788a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800788c:	647b      	str	r3, [r7, #68]	@ 0x44
 800788e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007892:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800789a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e6      	bne.n	800786e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e063      	b.n	800797c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0304 	and.w	r3, r3, #4
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d149      	bne.n	8007956 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80078c6:	9300      	str	r3, [sp, #0]
 80078c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ca:	2200      	movs	r2, #0
 80078cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f857 	bl	8007984 <UART_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d03c      	beq.n	8007956 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	623b      	str	r3, [r7, #32]
   return(result);
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80078fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e6      	bne.n	80078dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	60fb      	str	r3, [r7, #12]
   return(result);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f023 0301 	bic.w	r3, r3, #1
 8007924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3308      	adds	r3, #8
 800792c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800792e:	61fa      	str	r2, [r7, #28]
 8007930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007932:	69b9      	ldr	r1, [r7, #24]
 8007934:	69fa      	ldr	r2, [r7, #28]
 8007936:	e841 2300 	strex	r3, r2, [r1]
 800793a:	617b      	str	r3, [r7, #20]
   return(result);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d1e5      	bne.n	800790e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2220      	movs	r2, #32
 8007946:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e012      	b.n	800797c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2220      	movs	r2, #32
 800795a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2220      	movs	r2, #32
 8007962:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3758      	adds	r7, #88	@ 0x58
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4613      	mov	r3, r2
 8007992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007994:	e04f      	b.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d04b      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800799e:	f7fa f9a5 	bl	8001cec <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d302      	bcc.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d101      	bne.n	80079b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e04e      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d037      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b80      	cmp	r3, #128	@ 0x80
 80079ca:	d034      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b40      	cmp	r3, #64	@ 0x40
 80079d0:	d031      	beq.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	f003 0308 	and.w	r3, r3, #8
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d110      	bne.n	8007a02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2208      	movs	r2, #8
 80079e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f839 	bl	8007a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2208      	movs	r2, #8
 80079f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e029      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a10:	d111      	bne.n	8007a36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 f81f 	bl	8007a60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e00f      	b.n	8007a56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	69da      	ldr	r2, [r3, #28]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	bf0c      	ite	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	2300      	movne	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	79fb      	ldrb	r3, [r7, #7]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d0a0      	beq.n	8007996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
	...

08007a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b095      	sub	sp, #84	@ 0x54
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a86:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a88:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e6      	bne.n	8007a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	4b1e      	ldr	r3, [pc, #120]	@ (8007b28 <UART_EndRxTransfer+0xc8>)
 8007aae:	4013      	ands	r3, r2
 8007ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ac0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e5      	bne.n	8007a9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d118      	bne.n	8007b08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f023 0310 	bic.w	r3, r3, #16
 8007aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6979      	ldr	r1, [r7, #20]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	613b      	str	r3, [r7, #16]
   return(result);
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007b1c:	bf00      	nop
 8007b1e:	3754      	adds	r7, #84	@ 0x54
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	effffffe 	.word	0xeffffffe

08007b2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_UARTEx_DisableFifoMode+0x16>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e027      	b.n	8007b92 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2201      	movs	r2, #1
 8007b46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2224      	movs	r2, #36	@ 0x24
 8007b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0201 	bic.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b084      	sub	sp, #16
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e02d      	b.n	8007c12 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2224      	movs	r2, #36	@ 0x24
 8007bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0201 	bic.w	r2, r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f850 	bl	8007c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007c2e:	2302      	movs	r3, #2
 8007c30:	e02d      	b.n	8007c8e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2201      	movs	r2, #1
 8007c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2224      	movs	r2, #36	@ 0x24
 8007c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f022 0201 	bic.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f812 	bl	8007c98 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d108      	bne.n	8007cba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cb8:	e031      	b.n	8007d1e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cba:	2310      	movs	r3, #16
 8007cbc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cbe:	2310      	movs	r3, #16
 8007cc0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	0e5b      	lsrs	r3, r3, #25
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0307 	and.w	r3, r3, #7
 8007cd0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	0f5b      	lsrs	r3, r3, #29
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ce2:	7bbb      	ldrb	r3, [r7, #14]
 8007ce4:	7b3a      	ldrb	r2, [r7, #12]
 8007ce6:	4911      	ldr	r1, [pc, #68]	@ (8007d2c <UARTEx_SetNbDataToProcess+0x94>)
 8007ce8:	5c8a      	ldrb	r2, [r1, r2]
 8007cea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cee:	7b3a      	ldrb	r2, [r7, #12]
 8007cf0:	490f      	ldr	r1, [pc, #60]	@ (8007d30 <UARTEx_SetNbDataToProcess+0x98>)
 8007cf2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cf4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cf8:	b29a      	uxth	r2, r3
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d00:	7bfb      	ldrb	r3, [r7, #15]
 8007d02:	7b7a      	ldrb	r2, [r7, #13]
 8007d04:	4909      	ldr	r1, [pc, #36]	@ (8007d2c <UARTEx_SetNbDataToProcess+0x94>)
 8007d06:	5c8a      	ldrb	r2, [r1, r2]
 8007d08:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d0c:	7b7a      	ldrb	r2, [r7, #13]
 8007d0e:	4908      	ldr	r1, [pc, #32]	@ (8007d30 <UARTEx_SetNbDataToProcess+0x98>)
 8007d10:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d12:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007d1e:	bf00      	nop
 8007d20:	3714      	adds	r7, #20
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	0800bcc0 	.word	0x0800bcc0
 8007d30:	0800bcc8 	.word	0x0800bcc8

08007d34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d34:	b084      	sub	sp, #16
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	f107 001c 	add.w	r0, r7, #28
 8007d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d46:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d121      	bne.n	8007d92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	68da      	ldr	r2, [r3, #12]
 8007d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8007e10 <USB_CoreInit+0xdc>)
 8007d60:	4013      	ands	r3, r2
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 faaa 	bl	80082e0 <USB_CoreReset>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	e01b      	b.n	8007dca <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa9e 	bl	80082e0 <USB_CoreReset>
 8007da4:	4603      	mov	r3, r0
 8007da6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007da8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d106      	bne.n	8007dbe <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dbc:	e005      	b.n	8007dca <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dca:	7fbb      	ldrb	r3, [r7, #30]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d116      	bne.n	8007dfe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007dde:	4b0d      	ldr	r3, [pc, #52]	@ (8007e14 <USB_CoreInit+0xe0>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f043 0206 	orr.w	r2, r3, #6
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e0a:	b004      	add	sp, #16
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	ffbdffbf 	.word	0xffbdffbf
 8007e14:	03ee0000 	.word	0x03ee0000

08007e18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f023 0201 	bic.w	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007e56:	78fb      	ldrb	r3, [r7, #3]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d115      	bne.n	8007e88 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e68:	200a      	movs	r0, #10
 8007e6a:	f7f9 ff4b 	bl	8001d04 <HAL_Delay>
      ms += 10U;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	330a      	adds	r3, #10
 8007e72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fa25 	bl	80082c4 <USB_GetMode>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d01e      	beq.n	8007ebe <USB_SetCurrentMode+0x84>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e84:	d9f0      	bls.n	8007e68 <USB_SetCurrentMode+0x2e>
 8007e86:	e01a      	b.n	8007ebe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d115      	bne.n	8007eba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e9a:	200a      	movs	r0, #10
 8007e9c:	f7f9 ff32 	bl	8001d04 <HAL_Delay>
      ms += 10U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	330a      	adds	r3, #10
 8007ea4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 fa0c 	bl	80082c4 <USB_GetMode>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d005      	beq.n	8007ebe <USB_SetCurrentMode+0x84>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007eb6:	d9f0      	bls.n	8007e9a <USB_SetCurrentMode+0x60>
 8007eb8:	e001      	b.n	8007ebe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e005      	b.n	8007eca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2bc8      	cmp	r3, #200	@ 0xc8
 8007ec2:	d101      	bne.n	8007ec8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	e000      	b.n	8007eca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007eee:	2300      	movs	r3, #0
 8007ef0:	613b      	str	r3, [r7, #16]
 8007ef2:	e009      	b.n	8007f08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	3340      	adds	r3, #64	@ 0x40
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	3301      	adds	r3, #1
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	2b0e      	cmp	r3, #14
 8007f0c:	d9f2      	bls.n	8007ef4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007f0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d11c      	bne.n	8007f50 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f24:	f043 0302 	orr.w	r3, r3, #2
 8007f28:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f2e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	601a      	str	r2, [r3, #0]
 8007f4e:	e005      	b.n	8007f5c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f62:	461a      	mov	r2, r3
 8007f64:	2300      	movs	r3, #0
 8007f66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d10d      	bne.n	8007f8c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f968 	bl	8008250 <USB_SetDevSpeed>
 8007f80:	e008      	b.n	8007f94 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f82:	2101      	movs	r1, #1
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f963 	bl	8008250 <USB_SetDevSpeed>
 8007f8a:	e003      	b.n	8007f94 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f8c:	2103      	movs	r1, #3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f95e 	bl	8008250 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f94:	2110      	movs	r1, #16
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 f8fa 	bl	8008190 <USB_FlushTxFifo>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f924 	bl	80081f4 <USB_FlushRxFifo>
 8007fac:	4603      	mov	r3, r0
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fda:	2300      	movs	r3, #0
 8007fdc:	613b      	str	r3, [r7, #16]
 8007fde:	e043      	b.n	8008068 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	015a      	lsls	r2, r3, #5
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ff6:	d118      	bne.n	800802a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10a      	bne.n	8008014 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800800a:	461a      	mov	r2, r3
 800800c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	e013      	b.n	800803c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008020:	461a      	mov	r2, r3
 8008022:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e008      	b.n	800803c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008036:	461a      	mov	r2, r3
 8008038:	2300      	movs	r3, #0
 800803a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008048:	461a      	mov	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	015a      	lsls	r2, r3, #5
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	4413      	add	r3, r2
 8008056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805a:	461a      	mov	r2, r3
 800805c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3301      	adds	r3, #1
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800806c:	461a      	mov	r2, r3
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	4293      	cmp	r3, r2
 8008072:	d3b5      	bcc.n	8007fe0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008074:	2300      	movs	r3, #0
 8008076:	613b      	str	r3, [r7, #16]
 8008078:	e043      	b.n	8008102 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	015a      	lsls	r2, r3, #5
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	4413      	add	r3, r2
 8008082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800808c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008090:	d118      	bne.n	80080c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10a      	bne.n	80080ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a4:	461a      	mov	r2, r3
 80080a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e013      	b.n	80080d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ba:	461a      	mov	r2, r3
 80080bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80080c0:	6013      	str	r3, [r2, #0]
 80080c2:	e008      	b.n	80080d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d0:	461a      	mov	r2, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080e2:	461a      	mov	r2, r3
 80080e4:	2300      	movs	r3, #0
 80080e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f4:	461a      	mov	r2, r3
 80080f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	3301      	adds	r3, #1
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008106:	461a      	mov	r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	4293      	cmp	r3, r2
 800810c:	d3b5      	bcc.n	800807a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800811c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008120:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800812e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008130:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	699b      	ldr	r3, [r3, #24]
 800813c:	f043 0210 	orr.w	r2, r3, #16
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699a      	ldr	r2, [r3, #24]
 8008148:	4b0f      	ldr	r3, [pc, #60]	@ (8008188 <USB_DevInit+0x2b4>)
 800814a:	4313      	orrs	r3, r2
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008150:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008154:	2b00      	cmp	r3, #0
 8008156:	d005      	beq.n	8008164 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	699b      	ldr	r3, [r3, #24]
 800815c:	f043 0208 	orr.w	r2, r3, #8
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008164:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008168:	2b01      	cmp	r3, #1
 800816a:	d105      	bne.n	8008178 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	4b06      	ldr	r3, [pc, #24]	@ (800818c <USB_DevInit+0x2b8>)
 8008172:	4313      	orrs	r3, r2
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008184:	b004      	add	sp, #16
 8008186:	4770      	bx	lr
 8008188:	803c3800 	.word	0x803c3800
 800818c:	40000004 	.word	0x40000004

08008190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	3301      	adds	r3, #1
 80081a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081aa:	d901      	bls.n	80081b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e01b      	b.n	80081e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	daf2      	bge.n	800819e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	019b      	lsls	r3, r3, #6
 80081c0:	f043 0220 	orr.w	r2, r3, #32
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	3301      	adds	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081d4:	d901      	bls.n	80081da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e006      	b.n	80081e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	f003 0320 	and.w	r3, r3, #32
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d0f0      	beq.n	80081c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b085      	sub	sp, #20
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3301      	adds	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800820c:	d901      	bls.n	8008212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e018      	b.n	8008244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	2b00      	cmp	r3, #0
 8008218:	daf2      	bge.n	8008200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2210      	movs	r2, #16
 8008222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008230:	d901      	bls.n	8008236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e006      	b.n	8008244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	f003 0310 	and.w	r3, r3, #16
 800823e:	2b10      	cmp	r3, #16
 8008240:	d0f0      	beq.n	8008224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	68f9      	ldr	r1, [r7, #12]
 800826c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008270:	4313      	orrs	r3, r2
 8008272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008282:	b480      	push	{r7}
 8008284:	b085      	sub	sp, #20
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68fa      	ldr	r2, [r7, #12]
 8008298:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800829c:	f023 0303 	bic.w	r3, r3, #3
 80082a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082b0:	f043 0302 	orr.w	r3, r3, #2
 80082b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3714      	adds	r7, #20
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	f003 0301 	and.w	r3, r3, #1
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80082e8:	2300      	movs	r3, #0
 80082ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3301      	adds	r3, #1
 80082f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082f8:	d901      	bls.n	80082fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	e01b      	b.n	8008336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	2b00      	cmp	r3, #0
 8008304:	daf2      	bge.n	80082ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	f043 0201 	orr.w	r2, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3301      	adds	r3, #1
 800831a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008322:	d901      	bls.n	8008328 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f003 0301 	and.w	r3, r3, #1
 8008330:	2b01      	cmp	r3, #1
 8008332:	d0f0      	beq.n	8008316 <USB_CoreReset+0x36>

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3714      	adds	r7, #20
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008342:	b480      	push	{r7}
 8008344:	b085      	sub	sp, #20
 8008346:	af00      	add	r7, sp, #0
 8008348:	4603      	mov	r3, r0
 800834a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008350:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008354:	2b84      	cmp	r3, #132	@ 0x84
 8008356:	d005      	beq.n	8008364 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008358:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4413      	add	r3, r2
 8008360:	3303      	adds	r3, #3
 8008362:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008364:	68fb      	ldr	r3, [r7, #12]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008378:	f3ef 8305 	mrs	r3, IPSR
 800837c:	607b      	str	r3, [r7, #4]
  return(result);
 800837e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008380:	2b00      	cmp	r3, #0
 8008382:	bf14      	ite	ne
 8008384:	2301      	movne	r3, #1
 8008386:	2300      	moveq	r3, #0
 8008388:	b2db      	uxtb	r3, r3
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800839a:	f001 f9a5 	bl	80096e8 <vTaskStartScheduler>
  
  return osOK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80083a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a6:	b089      	sub	sp, #36	@ 0x24
 80083a8:	af04      	add	r7, sp, #16
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d020      	beq.n	80083f8 <osThreadCreate+0x54>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d01c      	beq.n	80083f8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685c      	ldr	r4, [r3, #4]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691e      	ldr	r6, [r3, #16]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff ffb6 	bl	8008342 <makeFreeRtosPriority>
 80083d6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083e0:	9202      	str	r2, [sp, #8]
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	9100      	str	r1, [sp, #0]
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	4632      	mov	r2, r6
 80083ea:	4629      	mov	r1, r5
 80083ec:	4620      	mov	r0, r4
 80083ee:	f000 ff95 	bl	800931c <xTaskCreateStatic>
 80083f2:	4603      	mov	r3, r0
 80083f4:	60fb      	str	r3, [r7, #12]
 80083f6:	e01c      	b.n	8008432 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685c      	ldr	r4, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008404:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800840c:	4618      	mov	r0, r3
 800840e:	f7ff ff98 	bl	8008342 <makeFreeRtosPriority>
 8008412:	4602      	mov	r2, r0
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	9200      	str	r2, [sp, #0]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	4632      	mov	r2, r6
 8008420:	4629      	mov	r1, r5
 8008422:	4620      	mov	r0, r4
 8008424:	f000 ffda 	bl	80093dc <xTaskCreate>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d001      	beq.n	8008432 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	e000      	b.n	8008434 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008432:	68fb      	ldr	r3, [r7, #12]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800843c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <osDelay+0x16>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	e000      	b.n	8008454 <osDelay+0x18>
 8008452:	2301      	movs	r3, #1
 8008454:	4618      	mov	r0, r3
 8008456:	f001 f911 	bl	800967c <vTaskDelay>
  
  return osOK;
 800845a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d007      	beq.n	8008484 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	4619      	mov	r1, r3
 800847a:	2001      	movs	r0, #1
 800847c:	f000 fae7 	bl	8008a4e <xQueueCreateMutexStatic>
 8008480:	4603      	mov	r3, r0
 8008482:	e003      	b.n	800848c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008484:	2001      	movs	r0, #1
 8008486:	f000 faca 	bl	8008a1e <xQueueCreateMutex>
 800848a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800848c:	4618      	mov	r0, r3
 800848e:	3708      	adds	r7, #8
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800849e:	2300      	movs	r3, #0
 80084a0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <osMutexWait+0x18>
    return osErrorParameter;
 80084a8:	2380      	movs	r3, #128	@ 0x80
 80084aa:	e03a      	b.n	8008522 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d103      	bne.n	80084c0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80084b8:	f04f 33ff 	mov.w	r3, #4294967295
 80084bc:	60fb      	str	r3, [r7, #12]
 80084be:	e009      	b.n	80084d4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d006      	beq.n	80084d4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <osMutexWait+0x40>
      ticks = 1;
 80084d0:	2301      	movs	r3, #1
 80084d2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80084d4:	f7ff ff4d 	bl	8008372 <inHandlerMode>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d017      	beq.n	800850e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	461a      	mov	r2, r3
 80084e4:	2100      	movs	r1, #0
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fd6e 	bl	8008fc8 <xQueueReceiveFromISR>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d001      	beq.n	80084f6 <osMutexWait+0x62>
      return osErrorOS;
 80084f2:	23ff      	movs	r3, #255	@ 0xff
 80084f4:	e015      	b.n	8008522 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d011      	beq.n	8008520 <osMutexWait+0x8c>
 80084fc:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <osMutexWait+0x98>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	e008      	b.n	8008520 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800850e:	68f9      	ldr	r1, [r7, #12]
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fc49 	bl	8008da8 <xQueueSemaphoreTake>
 8008516:	4603      	mov	r3, r0
 8008518:	2b01      	cmp	r3, #1
 800851a:	d001      	beq.n	8008520 <osMutexWait+0x8c>
    return osErrorOS;
 800851c:	23ff      	movs	r3, #255	@ 0xff
 800851e:	e000      	b.n	8008522 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008538:	2300      	movs	r3, #0
 800853a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800853c:	2300      	movs	r3, #0
 800853e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008540:	f7ff ff17 	bl	8008372 <inHandlerMode>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d016      	beq.n	8008578 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fb99 	bl	8008c88 <xQueueGiveFromISR>
 8008556:	4603      	mov	r3, r0
 8008558:	2b01      	cmp	r3, #1
 800855a:	d001      	beq.n	8008560 <osMutexRelease+0x30>
      return osErrorOS;
 800855c:	23ff      	movs	r3, #255	@ 0xff
 800855e:	e017      	b.n	8008590 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d013      	beq.n	800858e <osMutexRelease+0x5e>
 8008566:	4b0c      	ldr	r3, [pc, #48]	@ (8008598 <osMutexRelease+0x68>)
 8008568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800856c:	601a      	str	r2, [r3, #0]
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	e00a      	b.n	800858e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008578:	2300      	movs	r3, #0
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa80 	bl	8008a84 <xQueueGenericSend>
 8008584:	4603      	mov	r3, r0
 8008586:	2b01      	cmp	r3, #1
 8008588:	d001      	beq.n	800858e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800858a:	23ff      	movs	r3, #255	@ 0xff
 800858c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800858e:	68fb      	ldr	r3, [r7, #12]
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af02      	add	r7, sp, #8
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00f      	beq.n	80085ce <osSemaphoreCreate+0x32>
    if (count == 1) {
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d10a      	bne.n	80085ca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	2203      	movs	r2, #3
 80085ba:	9200      	str	r2, [sp, #0]
 80085bc:	2200      	movs	r2, #0
 80085be:	2100      	movs	r1, #0
 80085c0:	2001      	movs	r0, #1
 80085c2:	f000 f93b 	bl	800883c <xQueueGenericCreateStatic>
 80085c6:	4603      	mov	r3, r0
 80085c8:	e016      	b.n	80085f8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	e014      	b.n	80085f8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d110      	bne.n	80085f6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80085d4:	2203      	movs	r2, #3
 80085d6:	2100      	movs	r1, #0
 80085d8:	2001      	movs	r0, #1
 80085da:	f000 f9ac 	bl	8008936 <xQueueGenericCreate>
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <osSemaphoreCreate+0x56>
 80085e6:	2300      	movs	r3, #0
 80085e8:	2200      	movs	r2, #0
 80085ea:	2100      	movs	r1, #0
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 fa49 	bl	8008a84 <xQueueGenericSend>
      return sema;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	e000      	b.n	80085f8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80085f6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3710      	adds	r7, #16
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008600:	b480      	push	{r7}
 8008602:	b083      	sub	sp, #12
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f103 0208 	add.w	r2, r3, #8
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f103 0208 	add.w	r2, r3, #8
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f103 0208 	add.w	r2, r3, #8
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800865a:	b480      	push	{r7}
 800865c:	b085      	sub	sp, #20
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
 8008662:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	683a      	ldr	r2, [r7, #0]
 800867e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	601a      	str	r2, [r3, #0]
}
 8008696:	bf00      	nop
 8008698:	3714      	adds	r7, #20
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80086a2:	b480      	push	{r7}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b8:	d103      	bne.n	80086c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e00c      	b.n	80086dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3308      	adds	r3, #8
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e002      	b.n	80086d0 <vListInsert+0x2e>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d2f6      	bcs.n	80086ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	683a      	ldr	r2, [r7, #0]
 80086f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	601a      	str	r2, [r3, #0]
}
 8008708:	bf00      	nop
 800870a:	3714      	adds	r7, #20
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	691b      	ldr	r3, [r3, #16]
 8008720:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	6892      	ldr	r2, [r2, #8]
 800872a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	6852      	ldr	r2, [r2, #4]
 8008734:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	429a      	cmp	r2, r3
 800873e:	d103      	bne.n	8008748 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	1e5a      	subs	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10b      	bne.n	8008794 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008794:	f001 ff20 	bl	800a5d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a0:	68f9      	ldr	r1, [r7, #12]
 80087a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087a4:	fb01 f303 	mul.w	r3, r1, r3
 80087a8:	441a      	add	r2, r3
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c4:	3b01      	subs	r3, #1
 80087c6:	68f9      	ldr	r1, [r7, #12]
 80087c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80087ca:	fb01 f303 	mul.w	r3, r1, r3
 80087ce:	441a      	add	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	22ff      	movs	r2, #255	@ 0xff
 80087d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	22ff      	movs	r2, #255	@ 0xff
 80087e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d114      	bne.n	8008814 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01a      	beq.n	8008828 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3310      	adds	r3, #16
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 f9d0 	bl	8009b9c <xTaskRemoveFromEventList>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d012      	beq.n	8008828 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008802:	4b0d      	ldr	r3, [pc, #52]	@ (8008838 <xQueueGenericReset+0xd0>)
 8008804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	f3bf 8f6f 	isb	sy
 8008812:	e009      	b.n	8008828 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	3310      	adds	r3, #16
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff fef1 	bl	8008600 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3324      	adds	r3, #36	@ 0x24
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff feec 	bl	8008600 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008828:	f001 ff08 	bl	800a63c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800882c:	2301      	movs	r3, #1
}
 800882e:	4618      	mov	r0, r3
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	e000ed04 	.word	0xe000ed04

0800883c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08e      	sub	sp, #56	@ 0x38
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10b      	bne.n	8008868 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d10b      	bne.n	8008886 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d002      	beq.n	8008892 <xQueueGenericCreateStatic+0x56>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <xQueueGenericCreateStatic+0x5a>
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <xQueueGenericCreateStatic+0x5c>
 8008896:	2300      	movs	r3, #0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800889c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	623b      	str	r3, [r7, #32]
}
 80088ae:	bf00      	nop
 80088b0:	bf00      	nop
 80088b2:	e7fd      	b.n	80088b0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d102      	bne.n	80088c0 <xQueueGenericCreateStatic+0x84>
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d101      	bne.n	80088c4 <xQueueGenericCreateStatic+0x88>
 80088c0:	2301      	movs	r3, #1
 80088c2:	e000      	b.n	80088c6 <xQueueGenericCreateStatic+0x8a>
 80088c4:	2300      	movs	r3, #0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10b      	bne.n	80088e2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	61fb      	str	r3, [r7, #28]
}
 80088dc:	bf00      	nop
 80088de:	bf00      	nop
 80088e0:	e7fd      	b.n	80088de <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088e2:	2348      	movs	r3, #72	@ 0x48
 80088e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	2b48      	cmp	r3, #72	@ 0x48
 80088ea:	d00b      	beq.n	8008904 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	61bb      	str	r3, [r7, #24]
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	e7fd      	b.n	8008900 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008904:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800890a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00d      	beq.n	800892c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008918:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800891c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800891e:	9300      	str	r3, [sp, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f000 f840 	bl	80089ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800892c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800892e:	4618      	mov	r0, r3
 8008930:	3730      	adds	r7, #48	@ 0x30
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008936:	b580      	push	{r7, lr}
 8008938:	b08a      	sub	sp, #40	@ 0x28
 800893a:	af02      	add	r7, sp, #8
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	60b9      	str	r1, [r7, #8]
 8008940:	4613      	mov	r3, r2
 8008942:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <xQueueGenericCreate+0x2c>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	613b      	str	r3, [r7, #16]
}
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	fb02 f303 	mul.w	r3, r2, r3
 800896a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	3348      	adds	r3, #72	@ 0x48
 8008970:	4618      	mov	r0, r3
 8008972:	f001 ff53 	bl	800a81c <pvPortMalloc>
 8008976:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d011      	beq.n	80089a2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	3348      	adds	r3, #72	@ 0x48
 8008986:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	68b9      	ldr	r1, [r7, #8]
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f805 	bl	80089ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80089a2:	69bb      	ldr	r3, [r7, #24]
	}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3720      	adds	r7, #32
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
 80089b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d103      	bne.n	80089c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	e002      	b.n	80089ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	68ba      	ldr	r2, [r7, #8]
 80089d8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089da:	2101      	movs	r1, #1
 80089dc:	69b8      	ldr	r0, [r7, #24]
 80089de:	f7ff fec3 	bl	8008768 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b082      	sub	sp, #8
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d00e      	beq.n	8008a16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	2100      	movs	r1, #0
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 f837 	bl	8008a84 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b086      	sub	sp, #24
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	4603      	mov	r3, r0
 8008a26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	461a      	mov	r2, r3
 8008a34:	6939      	ldr	r1, [r7, #16]
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7ff ff7d 	bl	8008936 <xQueueGenericCreate>
 8008a3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff ffd3 	bl	80089ea <prvInitialiseMutex>

		return xNewQueue;
 8008a44:	68fb      	ldr	r3, [r7, #12]
	}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b088      	sub	sp, #32
 8008a52:	af02      	add	r7, sp, #8
 8008a54:	4603      	mov	r3, r0
 8008a56:	6039      	str	r1, [r7, #0]
 8008a58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008a62:	79fb      	ldrb	r3, [r7, #7]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	6939      	ldr	r1, [r7, #16]
 8008a6c:	6978      	ldr	r0, [r7, #20]
 8008a6e:	f7ff fee5 	bl	800883c <xQueueGenericCreateStatic>
 8008a72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff ffb8 	bl	80089ea <prvInitialiseMutex>

		return xNewQueue;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08e      	sub	sp, #56	@ 0x38
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a92:	2300      	movs	r3, #0
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10b      	bne.n	8008ab8 <xQueueGenericSend+0x34>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008ab2:	bf00      	nop
 8008ab4:	bf00      	nop
 8008ab6:	e7fd      	b.n	8008ab4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d103      	bne.n	8008ac6 <xQueueGenericSend+0x42>
 8008abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xQueueGenericSend+0x46>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueGenericSend+0x48>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <xQueueGenericSend+0x64>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d103      	bne.n	8008af6 <xQueueGenericSend+0x72>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d101      	bne.n	8008afa <xQueueGenericSend+0x76>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <xQueueGenericSend+0x78>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10b      	bne.n	8008b18 <xQueueGenericSend+0x94>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	623b      	str	r3, [r7, #32]
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	e7fd      	b.n	8008b14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b18:	f001 fa06 	bl	8009f28 <xTaskGetSchedulerState>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <xQueueGenericSend+0xa4>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <xQueueGenericSend+0xa8>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <xQueueGenericSend+0xaa>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10b      	bne.n	8008b4a <xQueueGenericSend+0xc6>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	61fb      	str	r3, [r7, #28]
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	e7fd      	b.n	8008b46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b4a:	f001 fd45 	bl	800a5d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d302      	bcc.n	8008b60 <xQueueGenericSend+0xdc>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d129      	bne.n	8008bb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	68b9      	ldr	r1, [r7, #8]
 8008b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008b66:	f000 fac9 	bl	80090fc <prvCopyDataToQueue>
 8008b6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d010      	beq.n	8008b96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b76:	3324      	adds	r3, #36	@ 0x24
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f001 f80f 	bl	8009b9c <xTaskRemoveFromEventList>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d013      	beq.n	8008bac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b84:	4b3f      	ldr	r3, [pc, #252]	@ (8008c84 <xQueueGenericSend+0x200>)
 8008b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8a:	601a      	str	r2, [r3, #0]
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	e00a      	b.n	8008bac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d007      	beq.n	8008bac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b9c:	4b39      	ldr	r3, [pc, #228]	@ (8008c84 <xQueueGenericSend+0x200>)
 8008b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bac:	f001 fd46 	bl	800a63c <vPortExitCritical>
				return pdPASS;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e063      	b.n	8008c7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d103      	bne.n	8008bc2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bba:	f001 fd3f 	bl	800a63c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	e05c      	b.n	8008c7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d106      	bne.n	8008bd6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008bc8:	f107 0314 	add.w	r3, r7, #20
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f849 	bl	8009c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bd6:	f001 fd31 	bl	800a63c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bda:	f000 fdef 	bl	80097bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bde:	f001 fcfb 	bl	800a5d8 <vPortEnterCritical>
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008be8:	b25b      	sxtb	r3, r3
 8008bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bee:	d103      	bne.n	8008bf8 <xQueueGenericSend+0x174>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bfe:	b25b      	sxtb	r3, r3
 8008c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c04:	d103      	bne.n	8008c0e <xQueueGenericSend+0x18a>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c0e:	f001 fd15 	bl	800a63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c12:	1d3a      	adds	r2, r7, #4
 8008c14:	f107 0314 	add.w	r3, r7, #20
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f001 f838 	bl	8009c90 <xTaskCheckForTimeOut>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d124      	bne.n	8008c70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c28:	f000 fb60 	bl	80092ec <prvIsQueueFull>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d018      	beq.n	8008c64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c34:	3310      	adds	r3, #16
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	4611      	mov	r1, r2
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f000 ff88 	bl	8009b50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c42:	f000 faeb 	bl	800921c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c46:	f000 fdc7 	bl	80097d8 <xTaskResumeAll>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	f47f af7c 	bne.w	8008b4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c52:	4b0c      	ldr	r3, [pc, #48]	@ (8008c84 <xQueueGenericSend+0x200>)
 8008c54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	e772      	b.n	8008b4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c66:	f000 fad9 	bl	800921c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c6a:	f000 fdb5 	bl	80097d8 <xTaskResumeAll>
 8008c6e:	e76c      	b.n	8008b4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c72:	f000 fad3 	bl	800921c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c76:	f000 fdaf 	bl	80097d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3738      	adds	r7, #56	@ 0x38
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	e000ed04 	.word	0xe000ed04

08008c88 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08e      	sub	sp, #56	@ 0x38
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca0:	f383 8811 	msr	BASEPRI, r3
 8008ca4:	f3bf 8f6f 	isb	sy
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	623b      	str	r3, [r7, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	bf00      	nop
 8008cb2:	e7fd      	b.n	8008cb0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	61fb      	str	r3, [r7, #28]
}
 8008cce:	bf00      	nop
 8008cd0:	bf00      	nop
 8008cd2:	e7fd      	b.n	8008cd0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d103      	bne.n	8008ce4 <xQueueGiveFromISR+0x5c>
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <xQueueGiveFromISR+0x60>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e000      	b.n	8008cea <xQueueGiveFromISR+0x62>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	61bb      	str	r3, [r7, #24]
}
 8008d00:	bf00      	nop
 8008d02:	bf00      	nop
 8008d04:	e7fd      	b.n	8008d02 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d06:	f001 fd47 	bl	800a798 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d0a:	f3ef 8211 	mrs	r2, BASEPRI
 8008d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d12:	f383 8811 	msr	BASEPRI, r3
 8008d16:	f3bf 8f6f 	isb	sy
 8008d1a:	f3bf 8f4f 	dsb	sy
 8008d1e:	617a      	str	r2, [r7, #20]
 8008d20:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d22:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d22b      	bcs.n	8008d8e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d42:	1c5a      	adds	r2, r3, #1
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d112      	bne.n	8008d78 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d016      	beq.n	8008d88 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	3324      	adds	r3, #36	@ 0x24
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f000 ff1c 	bl	8009b9c <xTaskRemoveFromEventList>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00e      	beq.n	8008d88 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00b      	beq.n	8008d88 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	2201      	movs	r2, #1
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	e007      	b.n	8008d88 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	b25a      	sxtb	r2, r3
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d8c:	e001      	b.n	8008d92 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d94:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008d9c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3738      	adds	r7, #56	@ 0x38
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08e      	sub	sp, #56	@ 0x38
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008db2:	2300      	movs	r3, #0
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10b      	bne.n	8008ddc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	623b      	str	r3, [r7, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	bf00      	nop
 8008dda:	e7fd      	b.n	8008dd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00b      	beq.n	8008dfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	61fb      	str	r3, [r7, #28]
}
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
 8008dfa:	e7fd      	b.n	8008df8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dfc:	f001 f894 	bl	8009f28 <xTaskGetSchedulerState>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d102      	bne.n	8008e0c <xQueueSemaphoreTake+0x64>
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <xQueueSemaphoreTake+0x68>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e000      	b.n	8008e12 <xQueueSemaphoreTake+0x6a>
 8008e10:	2300      	movs	r3, #0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	61bb      	str	r3, [r7, #24]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e2e:	f001 fbd3 	bl	800a5d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d024      	beq.n	8008e88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e40:	1e5a      	subs	r2, r3, #1
 8008e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d104      	bne.n	8008e58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008e4e:	f001 fa17 	bl	800a280 <pvTaskIncrementMutexHeldCount>
 8008e52:	4602      	mov	r2, r0
 8008e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00f      	beq.n	8008e80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	3310      	adds	r3, #16
 8008e64:	4618      	mov	r0, r3
 8008e66:	f000 fe99 	bl	8009b9c <xTaskRemoveFromEventList>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d007      	beq.n	8008e80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e70:	4b54      	ldr	r3, [pc, #336]	@ (8008fc4 <xQueueSemaphoreTake+0x21c>)
 8008e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e80:	f001 fbdc 	bl	800a63c <vPortExitCritical>
				return pdPASS;
 8008e84:	2301      	movs	r3, #1
 8008e86:	e098      	b.n	8008fba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d112      	bne.n	8008eb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d00b      	beq.n	8008eac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	617b      	str	r3, [r7, #20]
}
 8008ea6:	bf00      	nop
 8008ea8:	bf00      	nop
 8008eaa:	e7fd      	b.n	8008ea8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008eac:	f001 fbc6 	bl	800a63c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e082      	b.n	8008fba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d106      	bne.n	8008ec8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eba:	f107 030c 	add.w	r3, r7, #12
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f000 fed0 	bl	8009c64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ec8:	f001 fbb8 	bl	800a63c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ecc:	f000 fc76 	bl	80097bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ed0:	f001 fb82 	bl	800a5d8 <vPortEnterCritical>
 8008ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008eda:	b25b      	sxtb	r3, r3
 8008edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ee0:	d103      	bne.n	8008eea <xQueueSemaphoreTake+0x142>
 8008ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008ef0:	b25b      	sxtb	r3, r3
 8008ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef6:	d103      	bne.n	8008f00 <xQueueSemaphoreTake+0x158>
 8008ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f00:	f001 fb9c 	bl	800a63c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f04:	463a      	mov	r2, r7
 8008f06:	f107 030c 	add.w	r3, r7, #12
 8008f0a:	4611      	mov	r1, r2
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 febf 	bl	8009c90 <xTaskCheckForTimeOut>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d132      	bne.n	8008f7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f1a:	f000 f9d1 	bl	80092c0 <prvIsQueueEmpty>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d026      	beq.n	8008f72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d109      	bne.n	8008f40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008f2c:	f001 fb54 	bl	800a5d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 f815 	bl	8009f64 <xTaskPriorityInherit>
 8008f3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008f3c:	f001 fb7e 	bl	800a63c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f42:	3324      	adds	r3, #36	@ 0x24
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	4611      	mov	r1, r2
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fe01 	bl	8009b50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f50:	f000 f964 	bl	800921c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f54:	f000 fc40 	bl	80097d8 <xTaskResumeAll>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f47f af67 	bne.w	8008e2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008f60:	4b18      	ldr	r3, [pc, #96]	@ (8008fc4 <xQueueSemaphoreTake+0x21c>)
 8008f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f66:	601a      	str	r2, [r3, #0]
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	e75d      	b.n	8008e2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f74:	f000 f952 	bl	800921c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f78:	f000 fc2e 	bl	80097d8 <xTaskResumeAll>
 8008f7c:	e757      	b.n	8008e2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f80:	f000 f94c 	bl	800921c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f84:	f000 fc28 	bl	80097d8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008f8a:	f000 f999 	bl	80092c0 <prvIsQueueEmpty>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f43f af4c 	beq.w	8008e2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00d      	beq.n	8008fb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008f9c:	f001 fb1c 	bl	800a5d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008fa2:	f000 f893 	bl	80090cc <prvGetDisinheritPriorityAfterTimeout>
 8008fa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f001 f8d6 	bl	800a160 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008fb4:	f001 fb42 	bl	800a63c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3738      	adds	r7, #56	@ 0x38
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed04 	.word	0xe000ed04

08008fc8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08e      	sub	sp, #56	@ 0x38
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10b      	bne.n	8008ff6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	623b      	str	r3, [r7, #32]
}
 8008ff0:	bf00      	nop
 8008ff2:	bf00      	nop
 8008ff4:	e7fd      	b.n	8008ff2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <xQueueReceiveFromISR+0x3c>
 8008ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <xQueueReceiveFromISR+0x40>
 8009004:	2301      	movs	r3, #1
 8009006:	e000      	b.n	800900a <xQueueReceiveFromISR+0x42>
 8009008:	2300      	movs	r3, #0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	61fb      	str	r3, [r7, #28]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009026:	f001 fbb7 	bl	800a798 <vPortValidateInterruptPriority>
	__asm volatile
 800902a:	f3ef 8211 	mrs	r2, BASEPRI
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	61ba      	str	r2, [r7, #24]
 8009040:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009042:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	2b00      	cmp	r3, #0
 8009050:	d02f      	beq.n	80090b2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009054:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009060:	f000 f8b6 	bl	80091d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	1e5a      	subs	r2, r3, #1
 8009068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800906a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800906c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d112      	bne.n	800909c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d016      	beq.n	80090ac <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800907e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009080:	3310      	adds	r3, #16
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fd8a 	bl	8009b9c <xTaskRemoveFromEventList>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00e      	beq.n	80090ac <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2201      	movs	r2, #1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	e007      	b.n	80090ac <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800909c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80090a0:	3301      	adds	r3, #1
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	b25a      	sxtb	r2, r3
 80090a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80090ac:	2301      	movs	r3, #1
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b0:	e001      	b.n	80090b6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f383 8811 	msr	BASEPRI, r3
}
 80090c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3738      	adds	r7, #56	@ 0x38
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d006      	beq.n	80090ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f1c3 0307 	rsb	r3, r3, #7
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	e001      	b.n	80090ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090ee:	68fb      	ldr	r3, [r7, #12]
	}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009108:	2300      	movs	r3, #0
 800910a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009110:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d10d      	bne.n	8009136 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d14d      	bne.n	80091be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	4618      	mov	r0, r3
 8009128:	f000 ff92 	bl	800a050 <xTaskPriorityDisinherit>
 800912c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	e043      	b.n	80091be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d119      	bne.n	8009170 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	6858      	ldr	r0, [r3, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009144:	461a      	mov	r2, r3
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	f002 f93e 	bl	800b3c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009154:	441a      	add	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	429a      	cmp	r2, r3
 8009164:	d32b      	bcc.n	80091be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681a      	ldr	r2, [r3, #0]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	605a      	str	r2, [r3, #4]
 800916e:	e026      	b.n	80091be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68d8      	ldr	r0, [r3, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009178:	461a      	mov	r2, r3
 800917a:	68b9      	ldr	r1, [r7, #8]
 800917c:	f002 f924 	bl	800b3c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009188:	425b      	negs	r3, r3
 800918a:	441a      	add	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68da      	ldr	r2, [r3, #12]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d207      	bcs.n	80091ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a4:	425b      	negs	r3, r3
 80091a6:	441a      	add	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d105      	bne.n	80091be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80091c6:	697b      	ldr	r3, [r7, #20]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ea:	441a      	add	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68da      	ldr	r2, [r3, #12]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d303      	bcc.n	8009204 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	68d9      	ldr	r1, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800920c:	461a      	mov	r2, r3
 800920e:	6838      	ldr	r0, [r7, #0]
 8009210:	f002 f8da 	bl	800b3c8 <memcpy>
	}
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009224:	f001 f9d8 	bl	800a5d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800922e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009230:	e011      	b.n	8009256 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009236:	2b00      	cmp	r3, #0
 8009238:	d012      	beq.n	8009260 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	3324      	adds	r3, #36	@ 0x24
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fcac 	bl	8009b9c <xTaskRemoveFromEventList>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d001      	beq.n	800924e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800924a:	f000 fd85 	bl	8009d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	3b01      	subs	r3, #1
 8009252:	b2db      	uxtb	r3, r3
 8009254:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dce9      	bgt.n	8009232 <prvUnlockQueue+0x16>
 800925e:	e000      	b.n	8009262 <prvUnlockQueue+0x46>
					break;
 8009260:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	22ff      	movs	r2, #255	@ 0xff
 8009266:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800926a:	f001 f9e7 	bl	800a63c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800926e:	f001 f9b3 	bl	800a5d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009278:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800927a:	e011      	b.n	80092a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d012      	beq.n	80092aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3310      	adds	r3, #16
 8009288:	4618      	mov	r0, r3
 800928a:	f000 fc87 	bl	8009b9c <xTaskRemoveFromEventList>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009294:	f000 fd60 	bl	8009d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009298:	7bbb      	ldrb	r3, [r7, #14]
 800929a:	3b01      	subs	r3, #1
 800929c:	b2db      	uxtb	r3, r3
 800929e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	dce9      	bgt.n	800927c <prvUnlockQueue+0x60>
 80092a8:	e000      	b.n	80092ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	22ff      	movs	r2, #255	@ 0xff
 80092b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80092b4:	f001 f9c2 	bl	800a63c <vPortExitCritical>
}
 80092b8:	bf00      	nop
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c8:	f001 f986 	bl	800a5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092d4:	2301      	movs	r3, #1
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e001      	b.n	80092de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092de:	f001 f9ad 	bl	800a63c <vPortExitCritical>

	return xReturn;
 80092e2:	68fb      	ldr	r3, [r7, #12]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092f4:	f001 f970 	bl	800a5d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009300:	429a      	cmp	r2, r3
 8009302:	d102      	bne.n	800930a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009304:	2301      	movs	r3, #1
 8009306:	60fb      	str	r3, [r7, #12]
 8009308:	e001      	b.n	800930e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800930e:	f001 f995 	bl	800a63c <vPortExitCritical>

	return xReturn;
 8009312:	68fb      	ldr	r3, [r7, #12]
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b08e      	sub	sp, #56	@ 0x38
 8009320:	af04      	add	r7, sp, #16
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	60b9      	str	r1, [r7, #8]
 8009326:	607a      	str	r2, [r7, #4]
 8009328:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800932a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10b      	bne.n	8009348 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	623b      	str	r3, [r7, #32]
}
 8009342:	bf00      	nop
 8009344:	bf00      	nop
 8009346:	e7fd      	b.n	8009344 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	d10b      	bne.n	8009366 <xTaskCreateStatic+0x4a>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	61fb      	str	r3, [r7, #28]
}
 8009360:	bf00      	nop
 8009362:	bf00      	nop
 8009364:	e7fd      	b.n	8009362 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009366:	23a0      	movs	r3, #160	@ 0xa0
 8009368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	2ba0      	cmp	r3, #160	@ 0xa0
 800936e:	d00b      	beq.n	8009388 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	61bb      	str	r3, [r7, #24]
}
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009388:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800938a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01e      	beq.n	80093ce <xTaskCreateStatic+0xb2>
 8009390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01b      	beq.n	80093ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800939e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80093a8:	2300      	movs	r3, #0
 80093aa:	9303      	str	r3, [sp, #12]
 80093ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ae:	9302      	str	r3, [sp, #8]
 80093b0:	f107 0314 	add.w	r3, r7, #20
 80093b4:	9301      	str	r3, [sp, #4]
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	9300      	str	r3, [sp, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	68b9      	ldr	r1, [r7, #8]
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f851 	bl	8009468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80093c8:	f000 f8ee 	bl	80095a8 <prvAddNewTaskToReadyList>
 80093cc:	e001      	b.n	80093d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80093d2:	697b      	ldr	r3, [r7, #20]
	}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3728      	adds	r7, #40	@ 0x28
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08c      	sub	sp, #48	@ 0x30
 80093e0:	af04      	add	r7, sp, #16
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	603b      	str	r3, [r7, #0]
 80093e8:	4613      	mov	r3, r2
 80093ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80093ec:	88fb      	ldrh	r3, [r7, #6]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4618      	mov	r0, r3
 80093f2:	f001 fa13 	bl	800a81c <pvPortMalloc>
 80093f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00e      	beq.n	800941c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80093fe:	20a0      	movs	r0, #160	@ 0xa0
 8009400:	f001 fa0c 	bl	800a81c <pvPortMalloc>
 8009404:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	631a      	str	r2, [r3, #48]	@ 0x30
 8009412:	e005      	b.n	8009420 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009414:	6978      	ldr	r0, [r7, #20]
 8009416:	f001 facf 	bl	800a9b8 <vPortFree>
 800941a:	e001      	b.n	8009420 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800941c:	2300      	movs	r3, #0
 800941e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009420:	69fb      	ldr	r3, [r7, #28]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d017      	beq.n	8009456 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009426:	69fb      	ldr	r3, [r7, #28]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800942e:	88fa      	ldrh	r2, [r7, #6]
 8009430:	2300      	movs	r3, #0
 8009432:	9303      	str	r3, [sp, #12]
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	9302      	str	r3, [sp, #8]
 8009438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943a:	9301      	str	r3, [sp, #4]
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68b9      	ldr	r1, [r7, #8]
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 f80f 	bl	8009468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800944a:	69f8      	ldr	r0, [r7, #28]
 800944c:	f000 f8ac 	bl	80095a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009450:	2301      	movs	r3, #1
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e002      	b.n	800945c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009456:	f04f 33ff 	mov.w	r3, #4294967295
 800945a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800945c:	69bb      	ldr	r3, [r7, #24]
	}
 800945e:	4618      	mov	r0, r3
 8009460:	3720      	adds	r7, #32
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
	...

08009468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
 8009474:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800947a:	6879      	ldr	r1, [r7, #4]
 800947c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8009480:	440b      	add	r3, r1
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	f023 0307 	bic.w	r3, r3, #7
 800948e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	f003 0307 	and.w	r3, r3, #7
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00b      	beq.n	80094b2 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	617b      	str	r3, [r7, #20]
}
 80094ac:	bf00      	nop
 80094ae:	bf00      	nop
 80094b0:	e7fd      	b.n	80094ae <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d01f      	beq.n	80094f8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094b8:	2300      	movs	r3, #0
 80094ba:	61fb      	str	r3, [r7, #28]
 80094bc:	e012      	b.n	80094e4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	4413      	add	r3, r2
 80094c4:	7819      	ldrb	r1, [r3, #0]
 80094c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	4413      	add	r3, r2
 80094cc:	3334      	adds	r3, #52	@ 0x34
 80094ce:	460a      	mov	r2, r1
 80094d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	4413      	add	r3, r2
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d006      	beq.n	80094ec <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	3301      	adds	r3, #1
 80094e2:	61fb      	str	r3, [r7, #28]
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	2b0f      	cmp	r3, #15
 80094e8:	d9e9      	bls.n	80094be <prvInitialiseNewTask+0x56>
 80094ea:	e000      	b.n	80094ee <prvInitialiseNewTask+0x86>
			{
				break;
 80094ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80094ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f0:	2200      	movs	r2, #0
 80094f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80094f6:	e003      	b.n	8009500 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80094f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009502:	2b06      	cmp	r3, #6
 8009504:	d901      	bls.n	800950a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009506:	2306      	movs	r3, #6
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800950e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009514:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009518:	2200      	movs	r2, #0
 800951a:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800951c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800951e:	3304      	adds	r3, #4
 8009520:	4618      	mov	r0, r3
 8009522:	f7ff f88d 	bl	8008640 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	3318      	adds	r3, #24
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff f888 	bl	8008640 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009534:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009538:	f1c3 0207 	rsb	r2, r3, #7
 800953c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800953e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009544:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009548:	2200      	movs	r2, #0
 800954a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800954e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009558:	334c      	adds	r3, #76	@ 0x4c
 800955a:	224c      	movs	r2, #76	@ 0x4c
 800955c:	2100      	movs	r1, #0
 800955e:	4618      	mov	r0, r3
 8009560:	f001 fe54 	bl	800b20c <memset>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	4a0d      	ldr	r2, [pc, #52]	@ (800959c <prvInitialiseNewTask+0x134>)
 8009568:	651a      	str	r2, [r3, #80]	@ 0x50
 800956a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800956c:	4a0c      	ldr	r2, [pc, #48]	@ (80095a0 <prvInitialiseNewTask+0x138>)
 800956e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	4a0c      	ldr	r2, [pc, #48]	@ (80095a4 <prvInitialiseNewTask+0x13c>)
 8009574:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	68f9      	ldr	r1, [r7, #12]
 800957a:	69b8      	ldr	r0, [r7, #24]
 800957c:	f000 fefa 	bl	800a374 <pxPortInitialiseStack>
 8009580:	4602      	mov	r2, r0
 8009582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009584:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800958c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800958e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009592:	bf00      	nop
 8009594:	3720      	adds	r7, #32
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	240048f0 	.word	0x240048f0
 80095a0:	24004958 	.word	0x24004958
 80095a4:	240049c0 	.word	0x240049c0

080095a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80095b0:	f001 f812 	bl	800a5d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80095b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009660 <prvAddNewTaskToReadyList+0xb8>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	4a29      	ldr	r2, [pc, #164]	@ (8009660 <prvAddNewTaskToReadyList+0xb8>)
 80095bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80095be:	4b29      	ldr	r3, [pc, #164]	@ (8009664 <prvAddNewTaskToReadyList+0xbc>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80095c6:	4a27      	ldr	r2, [pc, #156]	@ (8009664 <prvAddNewTaskToReadyList+0xbc>)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80095cc:	4b24      	ldr	r3, [pc, #144]	@ (8009660 <prvAddNewTaskToReadyList+0xb8>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d110      	bne.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80095d4:	f000 fbe4 	bl	8009da0 <prvInitialiseTaskLists>
 80095d8:	e00d      	b.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80095da:	4b23      	ldr	r3, [pc, #140]	@ (8009668 <prvAddNewTaskToReadyList+0xc0>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d109      	bne.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80095e2:	4b20      	ldr	r3, [pc, #128]	@ (8009664 <prvAddNewTaskToReadyList+0xbc>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d802      	bhi.n	80095f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80095f0:	4a1c      	ldr	r2, [pc, #112]	@ (8009664 <prvAddNewTaskToReadyList+0xbc>)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80095f6:	4b1d      	ldr	r3, [pc, #116]	@ (800966c <prvAddNewTaskToReadyList+0xc4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3301      	adds	r3, #1
 80095fc:	4a1b      	ldr	r2, [pc, #108]	@ (800966c <prvAddNewTaskToReadyList+0xc4>)
 80095fe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	2201      	movs	r2, #1
 8009606:	409a      	lsls	r2, r3
 8009608:	4b19      	ldr	r3, [pc, #100]	@ (8009670 <prvAddNewTaskToReadyList+0xc8>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4313      	orrs	r3, r2
 800960e:	4a18      	ldr	r2, [pc, #96]	@ (8009670 <prvAddNewTaskToReadyList+0xc8>)
 8009610:	6013      	str	r3, [r2, #0]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009616:	4613      	mov	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	4a15      	ldr	r2, [pc, #84]	@ (8009674 <prvAddNewTaskToReadyList+0xcc>)
 8009620:	441a      	add	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	3304      	adds	r3, #4
 8009626:	4619      	mov	r1, r3
 8009628:	4610      	mov	r0, r2
 800962a:	f7ff f816 	bl	800865a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800962e:	f001 f805 	bl	800a63c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009632:	4b0d      	ldr	r3, [pc, #52]	@ (8009668 <prvAddNewTaskToReadyList+0xc0>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00e      	beq.n	8009658 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800963a:	4b0a      	ldr	r3, [pc, #40]	@ (8009664 <prvAddNewTaskToReadyList+0xbc>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	429a      	cmp	r2, r3
 8009646:	d207      	bcs.n	8009658 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009648:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <prvAddNewTaskToReadyList+0xd0>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	24000c90 	.word	0x24000c90
 8009664:	24000b90 	.word	0x24000b90
 8009668:	24000c9c 	.word	0x24000c9c
 800966c:	24000cac 	.word	0x24000cac
 8009670:	24000c98 	.word	0x24000c98
 8009674:	24000b94 	.word	0x24000b94
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d018      	beq.n	80096c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800968e:	4b14      	ldr	r3, [pc, #80]	@ (80096e0 <vTaskDelay+0x64>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00b      	beq.n	80096ae <vTaskDelay+0x32>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	60bb      	str	r3, [r7, #8]
}
 80096a8:	bf00      	nop
 80096aa:	bf00      	nop
 80096ac:	e7fd      	b.n	80096aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80096ae:	f000 f885 	bl	80097bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80096b2:	2100      	movs	r1, #0
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f000 fdf7 	bl	800a2a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80096ba:	f000 f88d 	bl	80097d8 <xTaskResumeAll>
 80096be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d107      	bne.n	80096d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80096c6:	4b07      	ldr	r3, [pc, #28]	@ (80096e4 <vTaskDelay+0x68>)
 80096c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	24000cb8 	.word	0x24000cb8
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b08a      	sub	sp, #40	@ 0x28
 80096ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096f2:	2300      	movs	r3, #0
 80096f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096f6:	463a      	mov	r2, r7
 80096f8:	1d39      	adds	r1, r7, #4
 80096fa:	f107 0308 	add.w	r3, r7, #8
 80096fe:	4618      	mov	r0, r3
 8009700:	f7f7 fc38 	bl	8000f74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009704:	6839      	ldr	r1, [r7, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68ba      	ldr	r2, [r7, #8]
 800970a:	9202      	str	r2, [sp, #8]
 800970c:	9301      	str	r3, [sp, #4]
 800970e:	2300      	movs	r3, #0
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	2300      	movs	r3, #0
 8009714:	460a      	mov	r2, r1
 8009716:	4921      	ldr	r1, [pc, #132]	@ (800979c <vTaskStartScheduler+0xb4>)
 8009718:	4821      	ldr	r0, [pc, #132]	@ (80097a0 <vTaskStartScheduler+0xb8>)
 800971a:	f7ff fdff 	bl	800931c <xTaskCreateStatic>
 800971e:	4603      	mov	r3, r0
 8009720:	4a20      	ldr	r2, [pc, #128]	@ (80097a4 <vTaskStartScheduler+0xbc>)
 8009722:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009724:	4b1f      	ldr	r3, [pc, #124]	@ (80097a4 <vTaskStartScheduler+0xbc>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800972c:	2301      	movs	r3, #1
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e001      	b.n	8009736 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d11b      	bne.n	8009774 <vTaskStartScheduler+0x8c>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	613b      	str	r3, [r7, #16]
}
 800974e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009750:	4b15      	ldr	r3, [pc, #84]	@ (80097a8 <vTaskStartScheduler+0xc0>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	334c      	adds	r3, #76	@ 0x4c
 8009756:	4a15      	ldr	r2, [pc, #84]	@ (80097ac <vTaskStartScheduler+0xc4>)
 8009758:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800975a:	4b15      	ldr	r3, [pc, #84]	@ (80097b0 <vTaskStartScheduler+0xc8>)
 800975c:	f04f 32ff 	mov.w	r2, #4294967295
 8009760:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009762:	4b14      	ldr	r3, [pc, #80]	@ (80097b4 <vTaskStartScheduler+0xcc>)
 8009764:	2201      	movs	r2, #1
 8009766:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009768:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <vTaskStartScheduler+0xd0>)
 800976a:	2200      	movs	r2, #0
 800976c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800976e:	f000 fe8f 	bl	800a490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009772:	e00f      	b.n	8009794 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d10b      	bne.n	8009794 <vTaskStartScheduler+0xac>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	60fb      	str	r3, [r7, #12]
}
 800978e:	bf00      	nop
 8009790:	bf00      	nop
 8009792:	e7fd      	b.n	8009790 <vTaskStartScheduler+0xa8>
}
 8009794:	bf00      	nop
 8009796:	3718      	adds	r7, #24
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}
 800979c:	0800bc80 	.word	0x0800bc80
 80097a0:	08009d71 	.word	0x08009d71
 80097a4:	24000cb4 	.word	0x24000cb4
 80097a8:	24000b90 	.word	0x24000b90
 80097ac:	240000a4 	.word	0x240000a4
 80097b0:	24000cb0 	.word	0x24000cb0
 80097b4:	24000c9c 	.word	0x24000c9c
 80097b8:	24000c94 	.word	0x24000c94

080097bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80097c0:	4b04      	ldr	r3, [pc, #16]	@ (80097d4 <vTaskSuspendAll+0x18>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3301      	adds	r3, #1
 80097c6:	4a03      	ldr	r2, [pc, #12]	@ (80097d4 <vTaskSuspendAll+0x18>)
 80097c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80097ca:	bf00      	nop
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr
 80097d4:	24000cb8 	.word	0x24000cb8

080097d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097de:	2300      	movs	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097e6:	4b42      	ldr	r3, [pc, #264]	@ (80098f0 <xTaskResumeAll+0x118>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10b      	bne.n	8009806 <xTaskResumeAll+0x2e>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	603b      	str	r3, [r7, #0]
}
 8009800:	bf00      	nop
 8009802:	bf00      	nop
 8009804:	e7fd      	b.n	8009802 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009806:	f000 fee7 	bl	800a5d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800980a:	4b39      	ldr	r3, [pc, #228]	@ (80098f0 <xTaskResumeAll+0x118>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	3b01      	subs	r3, #1
 8009810:	4a37      	ldr	r2, [pc, #220]	@ (80098f0 <xTaskResumeAll+0x118>)
 8009812:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009814:	4b36      	ldr	r3, [pc, #216]	@ (80098f0 <xTaskResumeAll+0x118>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d161      	bne.n	80098e0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800981c:	4b35      	ldr	r3, [pc, #212]	@ (80098f4 <xTaskResumeAll+0x11c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d05d      	beq.n	80098e0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009824:	e02e      	b.n	8009884 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009826:	4b34      	ldr	r3, [pc, #208]	@ (80098f8 <xTaskResumeAll+0x120>)
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	3318      	adds	r3, #24
 8009832:	4618      	mov	r0, r3
 8009834:	f7fe ff6e 	bl	8008714 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3304      	adds	r3, #4
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe ff69 	bl	8008714 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009846:	2201      	movs	r2, #1
 8009848:	409a      	lsls	r2, r3
 800984a:	4b2c      	ldr	r3, [pc, #176]	@ (80098fc <xTaskResumeAll+0x124>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4313      	orrs	r3, r2
 8009850:	4a2a      	ldr	r2, [pc, #168]	@ (80098fc <xTaskResumeAll+0x124>)
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	009b      	lsls	r3, r3, #2
 8009860:	4a27      	ldr	r2, [pc, #156]	@ (8009900 <xTaskResumeAll+0x128>)
 8009862:	441a      	add	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	3304      	adds	r3, #4
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fe fef5 	bl	800865a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009874:	4b23      	ldr	r3, [pc, #140]	@ (8009904 <xTaskResumeAll+0x12c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987a:	429a      	cmp	r2, r3
 800987c:	d302      	bcc.n	8009884 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800987e:	4b22      	ldr	r3, [pc, #136]	@ (8009908 <xTaskResumeAll+0x130>)
 8009880:	2201      	movs	r2, #1
 8009882:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009884:	4b1c      	ldr	r3, [pc, #112]	@ (80098f8 <xTaskResumeAll+0x120>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1cc      	bne.n	8009826 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009892:	f000 fb29 	bl	8009ee8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009896:	4b1d      	ldr	r3, [pc, #116]	@ (800990c <xTaskResumeAll+0x134>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098a2:	f000 f837 	bl	8009914 <xTaskIncrementTick>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098ac:	4b16      	ldr	r3, [pc, #88]	@ (8009908 <xTaskResumeAll+0x130>)
 80098ae:	2201      	movs	r2, #1
 80098b0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3b01      	subs	r3, #1
 80098b6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1f1      	bne.n	80098a2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80098be:	4b13      	ldr	r3, [pc, #76]	@ (800990c <xTaskResumeAll+0x134>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098c4:	4b10      	ldr	r3, [pc, #64]	@ (8009908 <xTaskResumeAll+0x130>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d009      	beq.n	80098e0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098cc:	2301      	movs	r3, #1
 80098ce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098d0:	4b0f      	ldr	r3, [pc, #60]	@ (8009910 <xTaskResumeAll+0x138>)
 80098d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098d6:	601a      	str	r2, [r3, #0]
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098e0:	f000 feac 	bl	800a63c <vPortExitCritical>

	return xAlreadyYielded;
 80098e4:	68bb      	ldr	r3, [r7, #8]
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop
 80098f0:	24000cb8 	.word	0x24000cb8
 80098f4:	24000c90 	.word	0x24000c90
 80098f8:	24000c50 	.word	0x24000c50
 80098fc:	24000c98 	.word	0x24000c98
 8009900:	24000b94 	.word	0x24000b94
 8009904:	24000b90 	.word	0x24000b90
 8009908:	24000ca4 	.word	0x24000ca4
 800990c:	24000ca0 	.word	0x24000ca0
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b086      	sub	sp, #24
 8009918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800991a:	2300      	movs	r3, #0
 800991c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800991e:	4b4f      	ldr	r3, [pc, #316]	@ (8009a5c <xTaskIncrementTick+0x148>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 808f 	bne.w	8009a46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009928:	4b4d      	ldr	r3, [pc, #308]	@ (8009a60 <xTaskIncrementTick+0x14c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	3301      	adds	r3, #1
 800992e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009930:	4a4b      	ldr	r2, [pc, #300]	@ (8009a60 <xTaskIncrementTick+0x14c>)
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d121      	bne.n	8009980 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800993c:	4b49      	ldr	r3, [pc, #292]	@ (8009a64 <xTaskIncrementTick+0x150>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00b      	beq.n	800995e <xTaskIncrementTick+0x4a>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	603b      	str	r3, [r7, #0]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xTaskIncrementTick+0x46>
 800995e:	4b41      	ldr	r3, [pc, #260]	@ (8009a64 <xTaskIncrementTick+0x150>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60fb      	str	r3, [r7, #12]
 8009964:	4b40      	ldr	r3, [pc, #256]	@ (8009a68 <xTaskIncrementTick+0x154>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a3e      	ldr	r2, [pc, #248]	@ (8009a64 <xTaskIncrementTick+0x150>)
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	4a3e      	ldr	r2, [pc, #248]	@ (8009a68 <xTaskIncrementTick+0x154>)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4b3e      	ldr	r3, [pc, #248]	@ (8009a6c <xTaskIncrementTick+0x158>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3301      	adds	r3, #1
 8009978:	4a3c      	ldr	r2, [pc, #240]	@ (8009a6c <xTaskIncrementTick+0x158>)
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	f000 fab4 	bl	8009ee8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009980:	4b3b      	ldr	r3, [pc, #236]	@ (8009a70 <xTaskIncrementTick+0x15c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	693a      	ldr	r2, [r7, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d348      	bcc.n	8009a1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800998a:	4b36      	ldr	r3, [pc, #216]	@ (8009a64 <xTaskIncrementTick+0x150>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009994:	4b36      	ldr	r3, [pc, #216]	@ (8009a70 <xTaskIncrementTick+0x15c>)
 8009996:	f04f 32ff 	mov.w	r2, #4294967295
 800999a:	601a      	str	r2, [r3, #0]
					break;
 800999c:	e03e      	b.n	8009a1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800999e:	4b31      	ldr	r3, [pc, #196]	@ (8009a64 <xTaskIncrementTick+0x150>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68db      	ldr	r3, [r3, #12]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099ae:	693a      	ldr	r2, [r7, #16]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d203      	bcs.n	80099be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099b6:	4a2e      	ldr	r2, [pc, #184]	@ (8009a70 <xTaskIncrementTick+0x15c>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80099bc:	e02e      	b.n	8009a1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7fe fea6 	bl	8008714 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d004      	beq.n	80099da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	3318      	adds	r3, #24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7fe fe9d 	bl	8008714 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099de:	2201      	movs	r2, #1
 80099e0:	409a      	lsls	r2, r3
 80099e2:	4b24      	ldr	r3, [pc, #144]	@ (8009a74 <xTaskIncrementTick+0x160>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	4a22      	ldr	r2, [pc, #136]	@ (8009a74 <xTaskIncrementTick+0x160>)
 80099ea:	6013      	str	r3, [r2, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f0:	4613      	mov	r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4a1f      	ldr	r2, [pc, #124]	@ (8009a78 <xTaskIncrementTick+0x164>)
 80099fa:	441a      	add	r2, r3
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	3304      	adds	r3, #4
 8009a00:	4619      	mov	r1, r3
 8009a02:	4610      	mov	r0, r2
 8009a04:	f7fe fe29 	bl	800865a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8009a7c <xTaskIncrementTick+0x168>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d3b9      	bcc.n	800998a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009a16:	2301      	movs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a1a:	e7b6      	b.n	800998a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a1c:	4b17      	ldr	r3, [pc, #92]	@ (8009a7c <xTaskIncrementTick+0x168>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a22:	4915      	ldr	r1, [pc, #84]	@ (8009a78 <xTaskIncrementTick+0x164>)
 8009a24:	4613      	mov	r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	440b      	add	r3, r1
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d901      	bls.n	8009a38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009a38:	4b11      	ldr	r3, [pc, #68]	@ (8009a80 <xTaskIncrementTick+0x16c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]
 8009a44:	e004      	b.n	8009a50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009a46:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <xTaskIncrementTick+0x170>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8009a84 <xTaskIncrementTick+0x170>)
 8009a4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009a50:	697b      	ldr	r3, [r7, #20]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	24000cb8 	.word	0x24000cb8
 8009a60:	24000c94 	.word	0x24000c94
 8009a64:	24000c48 	.word	0x24000c48
 8009a68:	24000c4c 	.word	0x24000c4c
 8009a6c:	24000ca8 	.word	0x24000ca8
 8009a70:	24000cb0 	.word	0x24000cb0
 8009a74:	24000c98 	.word	0x24000c98
 8009a78:	24000b94 	.word	0x24000b94
 8009a7c:	24000b90 	.word	0x24000b90
 8009a80:	24000ca4 	.word	0x24000ca4
 8009a84:	24000ca0 	.word	0x24000ca0

08009a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a8e:	4b2a      	ldr	r3, [pc, #168]	@ (8009b38 <vTaskSwitchContext+0xb0>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d003      	beq.n	8009a9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a96:	4b29      	ldr	r3, [pc, #164]	@ (8009b3c <vTaskSwitchContext+0xb4>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a9c:	e045      	b.n	8009b2a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8009a9e:	4b27      	ldr	r3, [pc, #156]	@ (8009b3c <vTaskSwitchContext+0xb4>)
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aa4:	4b26      	ldr	r3, [pc, #152]	@ (8009b40 <vTaskSwitchContext+0xb8>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	fab3 f383 	clz	r3, r3
 8009ab0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009ab2:	7afb      	ldrb	r3, [r7, #11]
 8009ab4:	f1c3 031f 	rsb	r3, r3, #31
 8009ab8:	617b      	str	r3, [r7, #20]
 8009aba:	4922      	ldr	r1, [pc, #136]	@ (8009b44 <vTaskSwitchContext+0xbc>)
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	440b      	add	r3, r1
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10b      	bne.n	8009ae6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
}
 8009ae0:	bf00      	nop
 8009ae2:	bf00      	nop
 8009ae4:	e7fd      	b.n	8009ae2 <vTaskSwitchContext+0x5a>
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4a14      	ldr	r2, [pc, #80]	@ (8009b44 <vTaskSwitchContext+0xbc>)
 8009af2:	4413      	add	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	605a      	str	r2, [r3, #4]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	3308      	adds	r3, #8
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d104      	bne.n	8009b16 <vTaskSwitchContext+0x8e>
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	685a      	ldr	r2, [r3, #4]
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009b48 <vTaskSwitchContext+0xc0>)
 8009b1e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b20:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <vTaskSwitchContext+0xc0>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	334c      	adds	r3, #76	@ 0x4c
 8009b26:	4a09      	ldr	r2, [pc, #36]	@ (8009b4c <vTaskSwitchContext+0xc4>)
 8009b28:	6013      	str	r3, [r2, #0]
}
 8009b2a:	bf00      	nop
 8009b2c:	371c      	adds	r7, #28
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	24000cb8 	.word	0x24000cb8
 8009b3c:	24000ca4 	.word	0x24000ca4
 8009b40:	24000c98 	.word	0x24000c98
 8009b44:	24000b94 	.word	0x24000b94
 8009b48:	24000b90 	.word	0x24000b90
 8009b4c:	240000a4 	.word	0x240000a4

08009b50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
 8009b58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10b      	bne.n	8009b78 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b64:	f383 8811 	msr	BASEPRI, r3
 8009b68:	f3bf 8f6f 	isb	sy
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	60fb      	str	r3, [r7, #12]
}
 8009b72:	bf00      	nop
 8009b74:	bf00      	nop
 8009b76:	e7fd      	b.n	8009b74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b78:	4b07      	ldr	r3, [pc, #28]	@ (8009b98 <vTaskPlaceOnEventList+0x48>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	3318      	adds	r3, #24
 8009b7e:	4619      	mov	r1, r3
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f7fe fd8e 	bl	80086a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b86:	2101      	movs	r1, #1
 8009b88:	6838      	ldr	r0, [r7, #0]
 8009b8a:	f000 fb8d 	bl	800a2a8 <prvAddCurrentTaskToDelayedList>
}
 8009b8e:	bf00      	nop
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	24000b90 	.word	0x24000b90

08009b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10b      	bne.n	8009bca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bb6:	f383 8811 	msr	BASEPRI, r3
 8009bba:	f3bf 8f6f 	isb	sy
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	60fb      	str	r3, [r7, #12]
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop
 8009bc8:	e7fd      	b.n	8009bc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	3318      	adds	r3, #24
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe fda0 	bl	8008714 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c4c <xTaskRemoveFromEventList+0xb0>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d11c      	bne.n	8009c16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bdc:	693b      	ldr	r3, [r7, #16]
 8009bde:	3304      	adds	r3, #4
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fe fd97 	bl	8008714 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bea:	2201      	movs	r2, #1
 8009bec:	409a      	lsls	r2, r3
 8009bee:	4b18      	ldr	r3, [pc, #96]	@ (8009c50 <xTaskRemoveFromEventList+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	4a16      	ldr	r2, [pc, #88]	@ (8009c50 <xTaskRemoveFromEventList+0xb4>)
 8009bf6:	6013      	str	r3, [r2, #0]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	4413      	add	r3, r2
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	4a13      	ldr	r2, [pc, #76]	@ (8009c54 <xTaskRemoveFromEventList+0xb8>)
 8009c06:	441a      	add	r2, r3
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	4619      	mov	r1, r3
 8009c0e:	4610      	mov	r0, r2
 8009c10:	f7fe fd23 	bl	800865a <vListInsertEnd>
 8009c14:	e005      	b.n	8009c22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	3318      	adds	r3, #24
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	480e      	ldr	r0, [pc, #56]	@ (8009c58 <xTaskRemoveFromEventList+0xbc>)
 8009c1e:	f7fe fd1c 	bl	800865a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c26:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <xTaskRemoveFromEventList+0xc0>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d905      	bls.n	8009c3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c34:	4b0a      	ldr	r3, [pc, #40]	@ (8009c60 <xTaskRemoveFromEventList+0xc4>)
 8009c36:	2201      	movs	r2, #1
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e001      	b.n	8009c40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c40:	697b      	ldr	r3, [r7, #20]
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3718      	adds	r7, #24
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	24000cb8 	.word	0x24000cb8
 8009c50:	24000c98 	.word	0x24000c98
 8009c54:	24000b94 	.word	0x24000b94
 8009c58:	24000c50 	.word	0x24000c50
 8009c5c:	24000b90 	.word	0x24000b90
 8009c60:	24000ca4 	.word	0x24000ca4

08009c64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c6c:	4b06      	ldr	r3, [pc, #24]	@ (8009c88 <vTaskInternalSetTimeOutState+0x24>)
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c74:	4b05      	ldr	r3, [pc, #20]	@ (8009c8c <vTaskInternalSetTimeOutState+0x28>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	605a      	str	r2, [r3, #4]
}
 8009c7c:	bf00      	nop
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr
 8009c88:	24000ca8 	.word	0x24000ca8
 8009c8c:	24000c94 	.word	0x24000c94

08009c90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b088      	sub	sp, #32
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10b      	bne.n	8009cb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	613b      	str	r3, [r7, #16]
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60fb      	str	r3, [r7, #12]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cd6:	f000 fc7f 	bl	800a5d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cda:	4b1d      	ldr	r3, [pc, #116]	@ (8009d50 <xTaskCheckForTimeOut+0xc0>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cf2:	d102      	bne.n	8009cfa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	61fb      	str	r3, [r7, #28]
 8009cf8:	e023      	b.n	8009d42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b15      	ldr	r3, [pc, #84]	@ (8009d54 <xTaskCheckForTimeOut+0xc4>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d007      	beq.n	8009d16 <xTaskCheckForTimeOut+0x86>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009d10:	2301      	movs	r3, #1
 8009d12:	61fb      	str	r3, [r7, #28]
 8009d14:	e015      	b.n	8009d42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d20b      	bcs.n	8009d38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	1ad2      	subs	r2, r2, r3
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff ff99 	bl	8009c64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d32:	2300      	movs	r3, #0
 8009d34:	61fb      	str	r3, [r7, #28]
 8009d36:	e004      	b.n	8009d42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d42:	f000 fc7b 	bl	800a63c <vPortExitCritical>

	return xReturn;
 8009d46:	69fb      	ldr	r3, [r7, #28]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3720      	adds	r7, #32
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	24000c94 	.word	0x24000c94
 8009d54:	24000ca8 	.word	0x24000ca8

08009d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d5c:	4b03      	ldr	r3, [pc, #12]	@ (8009d6c <vTaskMissedYield+0x14>)
 8009d5e:	2201      	movs	r2, #1
 8009d60:	601a      	str	r2, [r3, #0]
}
 8009d62:	bf00      	nop
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr
 8009d6c:	24000ca4 	.word	0x24000ca4

08009d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d78:	f000 f852 	bl	8009e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d7c:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <prvIdleTask+0x28>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d9f9      	bls.n	8009d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d84:	4b05      	ldr	r3, [pc, #20]	@ (8009d9c <prvIdleTask+0x2c>)
 8009d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	f3bf 8f4f 	dsb	sy
 8009d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d94:	e7f0      	b.n	8009d78 <prvIdleTask+0x8>
 8009d96:	bf00      	nop
 8009d98:	24000b94 	.word	0x24000b94
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009da6:	2300      	movs	r3, #0
 8009da8:	607b      	str	r3, [r7, #4]
 8009daa:	e00c      	b.n	8009dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4613      	mov	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	4413      	add	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4a12      	ldr	r2, [pc, #72]	@ (8009e00 <prvInitialiseTaskLists+0x60>)
 8009db8:	4413      	add	r3, r2
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fc20 	bl	8008600 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	607b      	str	r3, [r7, #4]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b06      	cmp	r3, #6
 8009dca:	d9ef      	bls.n	8009dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dcc:	480d      	ldr	r0, [pc, #52]	@ (8009e04 <prvInitialiseTaskLists+0x64>)
 8009dce:	f7fe fc17 	bl	8008600 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009dd2:	480d      	ldr	r0, [pc, #52]	@ (8009e08 <prvInitialiseTaskLists+0x68>)
 8009dd4:	f7fe fc14 	bl	8008600 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009dd8:	480c      	ldr	r0, [pc, #48]	@ (8009e0c <prvInitialiseTaskLists+0x6c>)
 8009dda:	f7fe fc11 	bl	8008600 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dde:	480c      	ldr	r0, [pc, #48]	@ (8009e10 <prvInitialiseTaskLists+0x70>)
 8009de0:	f7fe fc0e 	bl	8008600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009de4:	480b      	ldr	r0, [pc, #44]	@ (8009e14 <prvInitialiseTaskLists+0x74>)
 8009de6:	f7fe fc0b 	bl	8008600 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dea:	4b0b      	ldr	r3, [pc, #44]	@ (8009e18 <prvInitialiseTaskLists+0x78>)
 8009dec:	4a05      	ldr	r2, [pc, #20]	@ (8009e04 <prvInitialiseTaskLists+0x64>)
 8009dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009df0:	4b0a      	ldr	r3, [pc, #40]	@ (8009e1c <prvInitialiseTaskLists+0x7c>)
 8009df2:	4a05      	ldr	r2, [pc, #20]	@ (8009e08 <prvInitialiseTaskLists+0x68>)
 8009df4:	601a      	str	r2, [r3, #0]
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	24000b94 	.word	0x24000b94
 8009e04:	24000c20 	.word	0x24000c20
 8009e08:	24000c34 	.word	0x24000c34
 8009e0c:	24000c50 	.word	0x24000c50
 8009e10:	24000c64 	.word	0x24000c64
 8009e14:	24000c7c 	.word	0x24000c7c
 8009e18:	24000c48 	.word	0x24000c48
 8009e1c:	24000c4c 	.word	0x24000c4c

08009e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e26:	e019      	b.n	8009e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e28:	f000 fbd6 	bl	800a5d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e2c:	4b10      	ldr	r3, [pc, #64]	@ (8009e70 <prvCheckTasksWaitingTermination+0x50>)
 8009e2e:	68db      	ldr	r3, [r3, #12]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	3304      	adds	r3, #4
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f7fe fc6b 	bl	8008714 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e74 <prvCheckTasksWaitingTermination+0x54>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4a0b      	ldr	r2, [pc, #44]	@ (8009e74 <prvCheckTasksWaitingTermination+0x54>)
 8009e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e48:	4b0b      	ldr	r3, [pc, #44]	@ (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e52:	f000 fbf3 	bl	800a63c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 f810 	bl	8009e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e5c:	4b06      	ldr	r3, [pc, #24]	@ (8009e78 <prvCheckTasksWaitingTermination+0x58>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e1      	bne.n	8009e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	3708      	adds	r7, #8
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	24000c64 	.word	0x24000c64
 8009e74:	24000c90 	.word	0x24000c90
 8009e78:	24000c78 	.word	0x24000c78

08009e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	334c      	adds	r3, #76	@ 0x4c
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f001 f9f7 	bl	800b27c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d108      	bne.n	8009eaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f000 fd8b 	bl	800a9b8 <vPortFree>
				vPortFree( pxTCB );
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 fd88 	bl	800a9b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009ea8:	e019      	b.n	8009ede <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d103      	bne.n	8009ebc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd7f 	bl	800a9b8 <vPortFree>
	}
 8009eba:	e010      	b.n	8009ede <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d00b      	beq.n	8009ede <prvDeleteTCB+0x62>
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	bf00      	nop
 8009edc:	e7fd      	b.n	8009eda <prvDeleteTCB+0x5e>
	}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009eee:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009efa:	f04f 32ff 	mov.w	r2, #4294967295
 8009efe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009f00:	e008      	b.n	8009f14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f02:	4b07      	ldr	r3, [pc, #28]	@ (8009f20 <prvResetNextTaskUnblockTime+0x38>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a04      	ldr	r2, [pc, #16]	@ (8009f24 <prvResetNextTaskUnblockTime+0x3c>)
 8009f12:	6013      	str	r3, [r2, #0]
}
 8009f14:	bf00      	nop
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr
 8009f20:	24000c48 	.word	0x24000c48
 8009f24:	24000cb0 	.word	0x24000cb0

08009f28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8009f5c <xTaskGetSchedulerState+0x34>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d102      	bne.n	8009f3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f36:	2301      	movs	r3, #1
 8009f38:	607b      	str	r3, [r7, #4]
 8009f3a:	e008      	b.n	8009f4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f3c:	4b08      	ldr	r3, [pc, #32]	@ (8009f60 <xTaskGetSchedulerState+0x38>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f44:	2302      	movs	r3, #2
 8009f46:	607b      	str	r3, [r7, #4]
 8009f48:	e001      	b.n	8009f4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f4e:	687b      	ldr	r3, [r7, #4]
	}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	24000c9c 	.word	0x24000c9c
 8009f60:	24000cb8 	.word	0x24000cb8

08009f64 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009f70:	2300      	movs	r3, #0
 8009f72:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d05e      	beq.n	800a038 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f7e:	4b31      	ldr	r3, [pc, #196]	@ (800a044 <xTaskPriorityInherit+0xe0>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d24e      	bcs.n	800a026 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	db06      	blt.n	8009f9e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	4b2c      	ldr	r3, [pc, #176]	@ (800a044 <xTaskPriorityInherit+0xe0>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	f1c3 0207 	rsb	r2, r3, #7
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009f9e:	68bb      	ldr	r3, [r7, #8]
 8009fa0:	6959      	ldr	r1, [r3, #20]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4a26      	ldr	r2, [pc, #152]	@ (800a048 <xTaskPriorityInherit+0xe4>)
 8009fb0:	4413      	add	r3, r2
 8009fb2:	4299      	cmp	r1, r3
 8009fb4:	d12f      	bne.n	800a016 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	3304      	adds	r3, #4
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fbaa 	bl	8008714 <uxListRemove>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	2201      	movs	r2, #1
 8009fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009fd0:	43da      	mvns	r2, r3
 8009fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800a04c <xTaskPriorityInherit+0xe8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <xTaskPriorityInherit+0xe8>)
 8009fda:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009fdc:	4b19      	ldr	r3, [pc, #100]	@ (800a044 <xTaskPriorityInherit+0xe0>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	2201      	movs	r2, #1
 8009fec:	409a      	lsls	r2, r3
 8009fee:	4b17      	ldr	r3, [pc, #92]	@ (800a04c <xTaskPriorityInherit+0xe8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	4a15      	ldr	r2, [pc, #84]	@ (800a04c <xTaskPriorityInherit+0xe8>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4a10      	ldr	r2, [pc, #64]	@ (800a048 <xTaskPriorityInherit+0xe4>)
 800a006:	441a      	add	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	3304      	adds	r3, #4
 800a00c:	4619      	mov	r1, r3
 800a00e:	4610      	mov	r0, r2
 800a010:	f7fe fb23 	bl	800865a <vListInsertEnd>
 800a014:	e004      	b.n	800a020 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a016:	4b0b      	ldr	r3, [pc, #44]	@ (800a044 <xTaskPriorityInherit+0xe0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a020:	2301      	movs	r3, #1
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e008      	b.n	800a038 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a02a:	4b06      	ldr	r3, [pc, #24]	@ (800a044 <xTaskPriorityInherit+0xe0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d201      	bcs.n	800a038 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a038:	68fb      	ldr	r3, [r7, #12]
	}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	24000b90 	.word	0x24000b90
 800a048:	24000b94 	.word	0x24000b94
 800a04c:	24000c98 	.word	0x24000c98

0800a050 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a05c:	2300      	movs	r3, #0
 800a05e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d070      	beq.n	800a148 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a066:	4b3b      	ldr	r3, [pc, #236]	@ (800a154 <xTaskPriorityDisinherit+0x104>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d00b      	beq.n	800a088 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	60fb      	str	r3, [r7, #12]
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	e7fd      	b.n	800a084 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10b      	bne.n	800a0a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60bb      	str	r3, [r7, #8]
}
 800a0a2:	bf00      	nop
 800a0a4:	bf00      	nop
 800a0a6:	e7fd      	b.n	800a0a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0ac:	1e5a      	subs	r2, r3, #1
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d044      	beq.n	800a148 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d140      	bne.n	800a148 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe fb22 	bl	8008714 <uxListRemove>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d115      	bne.n	800a102 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0da:	491f      	ldr	r1, [pc, #124]	@ (800a158 <xTaskPriorityDisinherit+0x108>)
 800a0dc:	4613      	mov	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	440b      	add	r3, r1
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d10a      	bne.n	800a102 <xTaskPriorityDisinherit+0xb2>
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	4b18      	ldr	r3, [pc, #96]	@ (800a15c <xTaskPriorityDisinherit+0x10c>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	4a17      	ldr	r2, [pc, #92]	@ (800a15c <xTaskPriorityDisinherit+0x10c>)
 800a100:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a10e:	f1c3 0207 	rsb	r2, r3, #7
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a11a:	2201      	movs	r2, #1
 800a11c:	409a      	lsls	r2, r3
 800a11e:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <xTaskPriorityDisinherit+0x10c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4313      	orrs	r3, r2
 800a124:	4a0d      	ldr	r2, [pc, #52]	@ (800a15c <xTaskPriorityDisinherit+0x10c>)
 800a126:	6013      	str	r3, [r2, #0]
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a12c:	4613      	mov	r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4a08      	ldr	r2, [pc, #32]	@ (800a158 <xTaskPriorityDisinherit+0x108>)
 800a136:	441a      	add	r2, r3
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f7fe fa8b 	bl	800865a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a144:	2301      	movs	r3, #1
 800a146:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a148:	697b      	ldr	r3, [r7, #20]
	}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3718      	adds	r7, #24
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	24000b90 	.word	0x24000b90
 800a158:	24000b94 	.word	0x24000b94
 800a15c:	24000c98 	.word	0x24000c98

0800a160 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a16e:	2301      	movs	r3, #1
 800a170:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d079      	beq.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10b      	bne.n	800a198 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	60fb      	str	r3, [r7, #12]
}
 800a192:	bf00      	nop
 800a194:	bf00      	nop
 800a196:	e7fd      	b.n	800a194 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d902      	bls.n	800a1a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e002      	b.n	800a1ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1b2:	69fa      	ldr	r2, [r7, #28]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d059      	beq.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d154      	bne.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a1c2:	4b2c      	ldr	r3, [pc, #176]	@ (800a274 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d10b      	bne.n	800a1e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	60bb      	str	r3, [r7, #8]
}
 800a1de:	bf00      	nop
 800a1e0:	bf00      	nop
 800a1e2:	e7fd      	b.n	800a1e0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	69fa      	ldr	r2, [r7, #28]
 800a1ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	db04      	blt.n	800a202 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f1c3 0207 	rsb	r2, r3, #7
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	6959      	ldr	r1, [r3, #20]
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	4613      	mov	r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	009b      	lsls	r3, r3, #2
 800a210:	4a19      	ldr	r2, [pc, #100]	@ (800a278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a212:	4413      	add	r3, r2
 800a214:	4299      	cmp	r1, r3
 800a216:	d129      	bne.n	800a26c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe fa79 	bl	8008714 <uxListRemove>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a22c:	2201      	movs	r2, #1
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	43da      	mvns	r2, r3
 800a234:	4b11      	ldr	r3, [pc, #68]	@ (800a27c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4013      	ands	r3, r2
 800a23a:	4a10      	ldr	r2, [pc, #64]	@ (800a27c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a23c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a242:	2201      	movs	r2, #1
 800a244:	409a      	lsls	r2, r3
 800a246:	4b0d      	ldr	r3, [pc, #52]	@ (800a27c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	4a0b      	ldr	r2, [pc, #44]	@ (800a27c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a254:	4613      	mov	r3, r2
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4a06      	ldr	r2, [pc, #24]	@ (800a278 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800a25e:	441a      	add	r2, r3
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	3304      	adds	r3, #4
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	f7fe f9f7 	bl	800865a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a26c:	bf00      	nop
 800a26e:	3720      	adds	r7, #32
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	24000b90 	.word	0x24000b90
 800a278:	24000b94 	.word	0x24000b94
 800a27c:	24000c98 	.word	0x24000c98

0800a280 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a284:	4b07      	ldr	r3, [pc, #28]	@ (800a2a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d004      	beq.n	800a296 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a28c:	4b05      	ldr	r3, [pc, #20]	@ (800a2a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a292:	3201      	adds	r2, #1
 800a294:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800a296:	4b03      	ldr	r3, [pc, #12]	@ (800a2a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800a298:	681b      	ldr	r3, [r3, #0]
	}
 800a29a:	4618      	mov	r0, r3
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr
 800a2a4:	24000b90 	.word	0x24000b90

0800a2a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
 800a2b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a2b2:	4b29      	ldr	r3, [pc, #164]	@ (800a358 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2b8:	4b28      	ldr	r3, [pc, #160]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe fa28 	bl	8008714 <uxListRemove>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10b      	bne.n	800a2e2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a2ca:	4b24      	ldr	r3, [pc, #144]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	43da      	mvns	r2, r3
 800a2d8:	4b21      	ldr	r3, [pc, #132]	@ (800a360 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	4a20      	ldr	r2, [pc, #128]	@ (800a360 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a2e0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e8:	d10a      	bne.n	800a300 <prvAddCurrentTaskToDelayedList+0x58>
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d007      	beq.n	800a300 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3304      	adds	r3, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	481a      	ldr	r0, [pc, #104]	@ (800a364 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a2fa:	f7fe f9ae 	bl	800865a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a2fe:	e026      	b.n	800a34e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4413      	add	r3, r2
 800a306:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a308:	4b14      	ldr	r3, [pc, #80]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	429a      	cmp	r2, r3
 800a316:	d209      	bcs.n	800a32c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a318:	4b13      	ldr	r3, [pc, #76]	@ (800a368 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	4b0f      	ldr	r3, [pc, #60]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3304      	adds	r3, #4
 800a322:	4619      	mov	r1, r3
 800a324:	4610      	mov	r0, r2
 800a326:	f7fe f9bc 	bl	80086a2 <vListInsert>
}
 800a32a:	e010      	b.n	800a34e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a32c:	4b0f      	ldr	r3, [pc, #60]	@ (800a36c <prvAddCurrentTaskToDelayedList+0xc4>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	4b0a      	ldr	r3, [pc, #40]	@ (800a35c <prvAddCurrentTaskToDelayedList+0xb4>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3304      	adds	r3, #4
 800a336:	4619      	mov	r1, r3
 800a338:	4610      	mov	r0, r2
 800a33a:	f7fe f9b2 	bl	80086a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a33e:	4b0c      	ldr	r3, [pc, #48]	@ (800a370 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	429a      	cmp	r2, r3
 800a346:	d202      	bcs.n	800a34e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a348:	4a09      	ldr	r2, [pc, #36]	@ (800a370 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	6013      	str	r3, [r2, #0]
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	24000c94 	.word	0x24000c94
 800a35c:	24000b90 	.word	0x24000b90
 800a360:	24000c98 	.word	0x24000c98
 800a364:	24000c7c 	.word	0x24000c7c
 800a368:	24000c4c 	.word	0x24000c4c
 800a36c:	24000c48 	.word	0x24000c48
 800a370:	24000cb0 	.word	0x24000cb0

0800a374 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a374:	b480      	push	{r7}
 800a376:	b085      	sub	sp, #20
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3b04      	subs	r3, #4
 800a384:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a38c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	3b04      	subs	r3, #4
 800a392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	f023 0201 	bic.w	r2, r3, #1
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3b04      	subs	r3, #4
 800a3a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a3a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a3d8 <pxPortInitialiseStack+0x64>)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	3b14      	subs	r3, #20
 800a3ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3b04      	subs	r3, #4
 800a3ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f06f 0202 	mvn.w	r2, #2
 800a3c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3b20      	subs	r3, #32
 800a3c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr
 800a3d8:	0800a3dd 	.word	0x0800a3dd

0800a3dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a3e6:	4b13      	ldr	r3, [pc, #76]	@ (800a434 <prvTaskExitError+0x58>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ee:	d00b      	beq.n	800a408 <prvTaskExitError+0x2c>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	60fb      	str	r3, [r7, #12]
}
 800a402:	bf00      	nop
 800a404:	bf00      	nop
 800a406:	e7fd      	b.n	800a404 <prvTaskExitError+0x28>
	__asm volatile
 800a408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a40c:	f383 8811 	msr	BASEPRI, r3
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	60bb      	str	r3, [r7, #8]
}
 800a41a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a41c:	bf00      	nop
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d0fc      	beq.n	800a41e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	240000a0 	.word	0x240000a0
	...

0800a440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a440:	4b07      	ldr	r3, [pc, #28]	@ (800a460 <pxCurrentTCBConst2>)
 800a442:	6819      	ldr	r1, [r3, #0]
 800a444:	6808      	ldr	r0, [r1, #0]
 800a446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44a:	f380 8809 	msr	PSP, r0
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f04f 0000 	mov.w	r0, #0
 800a456:	f380 8811 	msr	BASEPRI, r0
 800a45a:	4770      	bx	lr
 800a45c:	f3af 8000 	nop.w

0800a460 <pxCurrentTCBConst2>:
 800a460:	24000b90 	.word	0x24000b90
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a464:	bf00      	nop
 800a466:	bf00      	nop

0800a468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a468:	4808      	ldr	r0, [pc, #32]	@ (800a48c <prvPortStartFirstTask+0x24>)
 800a46a:	6800      	ldr	r0, [r0, #0]
 800a46c:	6800      	ldr	r0, [r0, #0]
 800a46e:	f380 8808 	msr	MSP, r0
 800a472:	f04f 0000 	mov.w	r0, #0
 800a476:	f380 8814 	msr	CONTROL, r0
 800a47a:	b662      	cpsie	i
 800a47c:	b661      	cpsie	f
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	df00      	svc	0
 800a488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a48a:	bf00      	nop
 800a48c:	e000ed08 	.word	0xe000ed08

0800a490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a496:	4b47      	ldr	r3, [pc, #284]	@ (800a5b4 <xPortStartScheduler+0x124>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a47      	ldr	r2, [pc, #284]	@ (800a5b8 <xPortStartScheduler+0x128>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d10b      	bne.n	800a4b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	613b      	str	r3, [r7, #16]
}
 800a4b2:	bf00      	nop
 800a4b4:	bf00      	nop
 800a4b6:	e7fd      	b.n	800a4b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a4b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a5b4 <xPortStartScheduler+0x124>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a5bc <xPortStartScheduler+0x12c>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d10b      	bne.n	800a4da <xPortStartScheduler+0x4a>
	__asm volatile
 800a4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4c6:	f383 8811 	msr	BASEPRI, r3
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	f3bf 8f4f 	dsb	sy
 800a4d2:	60fb      	str	r3, [r7, #12]
}
 800a4d4:	bf00      	nop
 800a4d6:	bf00      	nop
 800a4d8:	e7fd      	b.n	800a4d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a4da:	4b39      	ldr	r3, [pc, #228]	@ (800a5c0 <xPortStartScheduler+0x130>)
 800a4dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a4e6:	697b      	ldr	r3, [r7, #20]
 800a4e8:	22ff      	movs	r2, #255	@ 0xff
 800a4ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	b2db      	uxtb	r3, r3
 800a4f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4b31      	ldr	r3, [pc, #196]	@ (800a5c4 <xPortStartScheduler+0x134>)
 800a500:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a502:	4b31      	ldr	r3, [pc, #196]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a504:	2207      	movs	r2, #7
 800a506:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a508:	e009      	b.n	800a51e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a50a:	4b2f      	ldr	r3, [pc, #188]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3b01      	subs	r3, #1
 800a510:	4a2d      	ldr	r2, [pc, #180]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a512:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a514:	78fb      	ldrb	r3, [r7, #3]
 800a516:	b2db      	uxtb	r3, r3
 800a518:	005b      	lsls	r3, r3, #1
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a51e:	78fb      	ldrb	r3, [r7, #3]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a526:	2b80      	cmp	r3, #128	@ 0x80
 800a528:	d0ef      	beq.n	800a50a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a52a:	4b27      	ldr	r3, [pc, #156]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f1c3 0307 	rsb	r3, r3, #7
 800a532:	2b04      	cmp	r3, #4
 800a534:	d00b      	beq.n	800a54e <xPortStartScheduler+0xbe>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	60bb      	str	r3, [r7, #8]
}
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
 800a54c:	e7fd      	b.n	800a54a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a54e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	4a1c      	ldr	r2, [pc, #112]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a556:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a558:	4b1b      	ldr	r3, [pc, #108]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a560:	4a19      	ldr	r2, [pc, #100]	@ (800a5c8 <xPortStartScheduler+0x138>)
 800a562:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	b2da      	uxtb	r2, r3
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a56c:	4b17      	ldr	r3, [pc, #92]	@ (800a5cc <xPortStartScheduler+0x13c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a16      	ldr	r2, [pc, #88]	@ (800a5cc <xPortStartScheduler+0x13c>)
 800a572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a576:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a578:	4b14      	ldr	r3, [pc, #80]	@ (800a5cc <xPortStartScheduler+0x13c>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a13      	ldr	r2, [pc, #76]	@ (800a5cc <xPortStartScheduler+0x13c>)
 800a57e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a582:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a584:	f000 f8da 	bl	800a73c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a588:	4b11      	ldr	r3, [pc, #68]	@ (800a5d0 <xPortStartScheduler+0x140>)
 800a58a:	2200      	movs	r2, #0
 800a58c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a58e:	f000 f8f9 	bl	800a784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a592:	4b10      	ldr	r3, [pc, #64]	@ (800a5d4 <xPortStartScheduler+0x144>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a0f      	ldr	r2, [pc, #60]	@ (800a5d4 <xPortStartScheduler+0x144>)
 800a598:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a59c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a59e:	f7ff ff63 	bl	800a468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a5a2:	f7ff fa71 	bl	8009a88 <vTaskSwitchContext>
	prvTaskExitError();
 800a5a6:	f7ff ff19 	bl	800a3dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a5aa:	2300      	movs	r3, #0
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3718      	adds	r7, #24
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	e000ed00 	.word	0xe000ed00
 800a5b8:	410fc271 	.word	0x410fc271
 800a5bc:	410fc270 	.word	0x410fc270
 800a5c0:	e000e400 	.word	0xe000e400
 800a5c4:	24000cbc 	.word	0x24000cbc
 800a5c8:	24000cc0 	.word	0x24000cc0
 800a5cc:	e000ed20 	.word	0xe000ed20
 800a5d0:	240000a0 	.word	0x240000a0
 800a5d4:	e000ef34 	.word	0xe000ef34

0800a5d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	f383 8811 	msr	BASEPRI, r3
 800a5e6:	f3bf 8f6f 	isb	sy
 800a5ea:	f3bf 8f4f 	dsb	sy
 800a5ee:	607b      	str	r3, [r7, #4]
}
 800a5f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a5f2:	4b10      	ldr	r3, [pc, #64]	@ (800a634 <vPortEnterCritical+0x5c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3301      	adds	r3, #1
 800a5f8:	4a0e      	ldr	r2, [pc, #56]	@ (800a634 <vPortEnterCritical+0x5c>)
 800a5fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a5fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a634 <vPortEnterCritical+0x5c>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b01      	cmp	r3, #1
 800a602:	d110      	bne.n	800a626 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a604:	4b0c      	ldr	r3, [pc, #48]	@ (800a638 <vPortEnterCritical+0x60>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <vPortEnterCritical+0x4e>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	603b      	str	r3, [r7, #0]
}
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	e7fd      	b.n	800a622 <vPortEnterCritical+0x4a>
	}
}
 800a626:	bf00      	nop
 800a628:	370c      	adds	r7, #12
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	240000a0 	.word	0x240000a0
 800a638:	e000ed04 	.word	0xe000ed04

0800a63c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a642:	4b12      	ldr	r3, [pc, #72]	@ (800a68c <vPortExitCritical+0x50>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10b      	bne.n	800a662 <vPortExitCritical+0x26>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64e:	f383 8811 	msr	BASEPRI, r3
 800a652:	f3bf 8f6f 	isb	sy
 800a656:	f3bf 8f4f 	dsb	sy
 800a65a:	607b      	str	r3, [r7, #4]
}
 800a65c:	bf00      	nop
 800a65e:	bf00      	nop
 800a660:	e7fd      	b.n	800a65e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a662:	4b0a      	ldr	r3, [pc, #40]	@ (800a68c <vPortExitCritical+0x50>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3b01      	subs	r3, #1
 800a668:	4a08      	ldr	r2, [pc, #32]	@ (800a68c <vPortExitCritical+0x50>)
 800a66a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a66c:	4b07      	ldr	r3, [pc, #28]	@ (800a68c <vPortExitCritical+0x50>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d105      	bne.n	800a680 <vPortExitCritical+0x44>
 800a674:	2300      	movs	r3, #0
 800a676:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	f383 8811 	msr	BASEPRI, r3
}
 800a67e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr
 800a68c:	240000a0 	.word	0x240000a0

0800a690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a690:	f3ef 8009 	mrs	r0, PSP
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	4b15      	ldr	r3, [pc, #84]	@ (800a6f0 <pxCurrentTCBConst>)
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	f01e 0f10 	tst.w	lr, #16
 800a6a0:	bf08      	it	eq
 800a6a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a6a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6aa:	6010      	str	r0, [r2, #0]
 800a6ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a6b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a6b4:	f380 8811 	msr	BASEPRI, r0
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	f3bf 8f6f 	isb	sy
 800a6c0:	f7ff f9e2 	bl	8009a88 <vTaskSwitchContext>
 800a6c4:	f04f 0000 	mov.w	r0, #0
 800a6c8:	f380 8811 	msr	BASEPRI, r0
 800a6cc:	bc09      	pop	{r0, r3}
 800a6ce:	6819      	ldr	r1, [r3, #0]
 800a6d0:	6808      	ldr	r0, [r1, #0]
 800a6d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d6:	f01e 0f10 	tst.w	lr, #16
 800a6da:	bf08      	it	eq
 800a6dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a6e0:	f380 8809 	msr	PSP, r0
 800a6e4:	f3bf 8f6f 	isb	sy
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	f3af 8000 	nop.w

0800a6f0 <pxCurrentTCBConst>:
 800a6f0:	24000b90 	.word	0x24000b90
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop

0800a6f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a702:	f383 8811 	msr	BASEPRI, r3
 800a706:	f3bf 8f6f 	isb	sy
 800a70a:	f3bf 8f4f 	dsb	sy
 800a70e:	607b      	str	r3, [r7, #4]
}
 800a710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a712:	f7ff f8ff 	bl	8009914 <xTaskIncrementTick>
 800a716:	4603      	mov	r3, r0
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a71c:	4b06      	ldr	r3, [pc, #24]	@ (800a738 <SysTick_Handler+0x40>)
 800a71e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a722:	601a      	str	r2, [r3, #0]
 800a724:	2300      	movs	r3, #0
 800a726:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f383 8811 	msr	BASEPRI, r3
}
 800a72e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	e000ed04 	.word	0xe000ed04

0800a73c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a740:	4b0b      	ldr	r3, [pc, #44]	@ (800a770 <vPortSetupTimerInterrupt+0x34>)
 800a742:	2200      	movs	r2, #0
 800a744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a746:	4b0b      	ldr	r3, [pc, #44]	@ (800a774 <vPortSetupTimerInterrupt+0x38>)
 800a748:	2200      	movs	r2, #0
 800a74a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a74c:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <vPortSetupTimerInterrupt+0x3c>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0a      	ldr	r2, [pc, #40]	@ (800a77c <vPortSetupTimerInterrupt+0x40>)
 800a752:	fba2 2303 	umull	r2, r3, r2, r3
 800a756:	099b      	lsrs	r3, r3, #6
 800a758:	4a09      	ldr	r2, [pc, #36]	@ (800a780 <vPortSetupTimerInterrupt+0x44>)
 800a75a:	3b01      	subs	r3, #1
 800a75c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a75e:	4b04      	ldr	r3, [pc, #16]	@ (800a770 <vPortSetupTimerInterrupt+0x34>)
 800a760:	2207      	movs	r2, #7
 800a762:	601a      	str	r2, [r3, #0]
}
 800a764:	bf00      	nop
 800a766:	46bd      	mov	sp, r7
 800a768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76c:	4770      	bx	lr
 800a76e:	bf00      	nop
 800a770:	e000e010 	.word	0xe000e010
 800a774:	e000e018 	.word	0xe000e018
 800a778:	24000090 	.word	0x24000090
 800a77c:	10624dd3 	.word	0x10624dd3
 800a780:	e000e014 	.word	0xe000e014

0800a784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a784:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a794 <vPortEnableVFP+0x10>
 800a788:	6801      	ldr	r1, [r0, #0]
 800a78a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a78e:	6001      	str	r1, [r0, #0]
 800a790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a792:	bf00      	nop
 800a794:	e000ed88 	.word	0xe000ed88

0800a798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a79e:	f3ef 8305 	mrs	r3, IPSR
 800a7a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	2b0f      	cmp	r3, #15
 800a7a8:	d915      	bls.n	800a7d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a7aa:	4a18      	ldr	r2, [pc, #96]	@ (800a80c <vPortValidateInterruptPriority+0x74>)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a7b4:	4b16      	ldr	r3, [pc, #88]	@ (800a810 <vPortValidateInterruptPriority+0x78>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	7afa      	ldrb	r2, [r7, #11]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d20b      	bcs.n	800a7d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
}
 800a7d0:	bf00      	nop
 800a7d2:	bf00      	nop
 800a7d4:	e7fd      	b.n	800a7d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a7d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a814 <vPortValidateInterruptPriority+0x7c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a7de:	4b0e      	ldr	r3, [pc, #56]	@ (800a818 <vPortValidateInterruptPriority+0x80>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	429a      	cmp	r2, r3
 800a7e4:	d90b      	bls.n	800a7fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	603b      	str	r3, [r7, #0]
}
 800a7f8:	bf00      	nop
 800a7fa:	bf00      	nop
 800a7fc:	e7fd      	b.n	800a7fa <vPortValidateInterruptPriority+0x62>
	}
 800a7fe:	bf00      	nop
 800a800:	3714      	adds	r7, #20
 800a802:	46bd      	mov	sp, r7
 800a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	e000e3f0 	.word	0xe000e3f0
 800a810:	24000cbc 	.word	0x24000cbc
 800a814:	e000ed0c 	.word	0xe000ed0c
 800a818:	24000cc0 	.word	0x24000cc0

0800a81c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b08a      	sub	sp, #40	@ 0x28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a824:	2300      	movs	r3, #0
 800a826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a828:	f7fe ffc8 	bl	80097bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a82c:	4b5c      	ldr	r3, [pc, #368]	@ (800a9a0 <pvPortMalloc+0x184>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a834:	f000 f924 	bl	800aa80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a838:	4b5a      	ldr	r3, [pc, #360]	@ (800a9a4 <pvPortMalloc+0x188>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4013      	ands	r3, r2
 800a840:	2b00      	cmp	r3, #0
 800a842:	f040 8095 	bne.w	800a970 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d01e      	beq.n	800a88a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a84c:	2208      	movs	r2, #8
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4413      	add	r3, r2
 800a852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d015      	beq.n	800a88a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f023 0307 	bic.w	r3, r3, #7
 800a864:	3308      	adds	r3, #8
 800a866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f003 0307 	and.w	r3, r3, #7
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <pvPortMalloc+0x6e>
	__asm volatile
 800a872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a876:	f383 8811 	msr	BASEPRI, r3
 800a87a:	f3bf 8f6f 	isb	sy
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	617b      	str	r3, [r7, #20]
}
 800a884:	bf00      	nop
 800a886:	bf00      	nop
 800a888:	e7fd      	b.n	800a886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d06f      	beq.n	800a970 <pvPortMalloc+0x154>
 800a890:	4b45      	ldr	r3, [pc, #276]	@ (800a9a8 <pvPortMalloc+0x18c>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	429a      	cmp	r2, r3
 800a898:	d86a      	bhi.n	800a970 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a89a:	4b44      	ldr	r3, [pc, #272]	@ (800a9ac <pvPortMalloc+0x190>)
 800a89c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a89e:	4b43      	ldr	r3, [pc, #268]	@ (800a9ac <pvPortMalloc+0x190>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8a4:	e004      	b.n	800a8b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d903      	bls.n	800a8c2 <pvPortMalloc+0xa6>
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1f1      	bne.n	800a8a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a8c2:	4b37      	ldr	r3, [pc, #220]	@ (800a9a0 <pvPortMalloc+0x184>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d051      	beq.n	800a970 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a8cc:	6a3b      	ldr	r3, [r7, #32]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2208      	movs	r2, #8
 800a8d2:	4413      	add	r3, r2
 800a8d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e0:	685a      	ldr	r2, [r3, #4]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	1ad2      	subs	r2, r2, r3
 800a8e6:	2308      	movs	r3, #8
 800a8e8:	005b      	lsls	r3, r3, #1
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d920      	bls.n	800a930 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a8ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4413      	add	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00b      	beq.n	800a918 <pvPortMalloc+0xfc>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	613b      	str	r3, [r7, #16]
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	1ad2      	subs	r2, r2, r3
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a92a:	69b8      	ldr	r0, [r7, #24]
 800a92c:	f000 f90a 	bl	800ab44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a930:	4b1d      	ldr	r3, [pc, #116]	@ (800a9a8 <pvPortMalloc+0x18c>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a936:	685b      	ldr	r3, [r3, #4]
 800a938:	1ad3      	subs	r3, r2, r3
 800a93a:	4a1b      	ldr	r2, [pc, #108]	@ (800a9a8 <pvPortMalloc+0x18c>)
 800a93c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a93e:	4b1a      	ldr	r3, [pc, #104]	@ (800a9a8 <pvPortMalloc+0x18c>)
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b1b      	ldr	r3, [pc, #108]	@ (800a9b0 <pvPortMalloc+0x194>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d203      	bcs.n	800a952 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a94a:	4b17      	ldr	r3, [pc, #92]	@ (800a9a8 <pvPortMalloc+0x18c>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a18      	ldr	r2, [pc, #96]	@ (800a9b0 <pvPortMalloc+0x194>)
 800a950:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	685a      	ldr	r2, [r3, #4]
 800a956:	4b13      	ldr	r3, [pc, #76]	@ (800a9a4 <pvPortMalloc+0x188>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	2200      	movs	r2, #0
 800a964:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a966:	4b13      	ldr	r3, [pc, #76]	@ (800a9b4 <pvPortMalloc+0x198>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	3301      	adds	r3, #1
 800a96c:	4a11      	ldr	r2, [pc, #68]	@ (800a9b4 <pvPortMalloc+0x198>)
 800a96e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a970:	f7fe ff32 	bl	80097d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	f003 0307 	and.w	r3, r3, #7
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d00b      	beq.n	800a996 <pvPortMalloc+0x17a>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	60fb      	str	r3, [r7, #12]
}
 800a990:	bf00      	nop
 800a992:	bf00      	nop
 800a994:	e7fd      	b.n	800a992 <pvPortMalloc+0x176>
	return pvReturn;
 800a996:	69fb      	ldr	r3, [r7, #28]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3728      	adds	r7, #40	@ 0x28
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}
 800a9a0:	240048cc 	.word	0x240048cc
 800a9a4:	240048e0 	.word	0x240048e0
 800a9a8:	240048d0 	.word	0x240048d0
 800a9ac:	240048c4 	.word	0x240048c4
 800a9b0:	240048d4 	.word	0x240048d4
 800a9b4:	240048d8 	.word	0x240048d8

0800a9b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d04f      	beq.n	800aa6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a9ca:	2308      	movs	r3, #8
 800a9cc:	425b      	negs	r3, r3
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	685a      	ldr	r2, [r3, #4]
 800a9dc:	4b25      	ldr	r3, [pc, #148]	@ (800aa74 <vPortFree+0xbc>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d10b      	bne.n	800a9fe <vPortFree+0x46>
	__asm volatile
 800a9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ea:	f383 8811 	msr	BASEPRI, r3
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f3bf 8f4f 	dsb	sy
 800a9f6:	60fb      	str	r3, [r7, #12]
}
 800a9f8:	bf00      	nop
 800a9fa:	bf00      	nop
 800a9fc:	e7fd      	b.n	800a9fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d00b      	beq.n	800aa1e <vPortFree+0x66>
	__asm volatile
 800aa06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0a:	f383 8811 	msr	BASEPRI, r3
 800aa0e:	f3bf 8f6f 	isb	sy
 800aa12:	f3bf 8f4f 	dsb	sy
 800aa16:	60bb      	str	r3, [r7, #8]
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	e7fd      	b.n	800aa1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	685a      	ldr	r2, [r3, #4]
 800aa22:	4b14      	ldr	r3, [pc, #80]	@ (800aa74 <vPortFree+0xbc>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4013      	ands	r3, r2
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01e      	beq.n	800aa6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d11a      	bne.n	800aa6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	4b0e      	ldr	r3, [pc, #56]	@ (800aa74 <vPortFree+0xbc>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	43db      	mvns	r3, r3
 800aa3e:	401a      	ands	r2, r3
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aa44:	f7fe feba 	bl	80097bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	@ (800aa78 <vPortFree+0xc0>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4413      	add	r3, r2
 800aa52:	4a09      	ldr	r2, [pc, #36]	@ (800aa78 <vPortFree+0xc0>)
 800aa54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aa56:	6938      	ldr	r0, [r7, #16]
 800aa58:	f000 f874 	bl	800ab44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aa5c:	4b07      	ldr	r3, [pc, #28]	@ (800aa7c <vPortFree+0xc4>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	3301      	adds	r3, #1
 800aa62:	4a06      	ldr	r2, [pc, #24]	@ (800aa7c <vPortFree+0xc4>)
 800aa64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800aa66:	f7fe feb7 	bl	80097d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aa6a:	bf00      	nop
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	240048e0 	.word	0x240048e0
 800aa78:	240048d0 	.word	0x240048d0
 800aa7c:	240048dc 	.word	0x240048dc

0800aa80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aa86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800aa8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aa8c:	4b27      	ldr	r3, [pc, #156]	@ (800ab2c <prvHeapInit+0xac>)
 800aa8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f003 0307 	and.w	r3, r3, #7
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00c      	beq.n	800aab4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3307      	adds	r3, #7
 800aa9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 0307 	bic.w	r3, r3, #7
 800aaa6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	4a1f      	ldr	r2, [pc, #124]	@ (800ab2c <prvHeapInit+0xac>)
 800aab0:	4413      	add	r3, r2
 800aab2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aab8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab30 <prvHeapInit+0xb0>)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aabe:	4b1c      	ldr	r3, [pc, #112]	@ (800ab30 <prvHeapInit+0xb0>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	4413      	add	r3, r2
 800aaca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aacc:	2208      	movs	r2, #8
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f023 0307 	bic.w	r3, r3, #7
 800aada:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4a15      	ldr	r2, [pc, #84]	@ (800ab34 <prvHeapInit+0xb4>)
 800aae0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aae2:	4b14      	ldr	r3, [pc, #80]	@ (800ab34 <prvHeapInit+0xb4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2200      	movs	r2, #0
 800aae8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aaea:	4b12      	ldr	r3, [pc, #72]	@ (800ab34 <prvHeapInit+0xb4>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	1ad2      	subs	r2, r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ab00:	4b0c      	ldr	r3, [pc, #48]	@ (800ab34 <prvHeapInit+0xb4>)
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ab38 <prvHeapInit+0xb8>)
 800ab0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	4a09      	ldr	r2, [pc, #36]	@ (800ab3c <prvHeapInit+0xbc>)
 800ab16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ab18:	4b09      	ldr	r3, [pc, #36]	@ (800ab40 <prvHeapInit+0xc0>)
 800ab1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ab1e:	601a      	str	r2, [r3, #0]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr
 800ab2c:	24000cc4 	.word	0x24000cc4
 800ab30:	240048c4 	.word	0x240048c4
 800ab34:	240048cc 	.word	0x240048cc
 800ab38:	240048d4 	.word	0x240048d4
 800ab3c:	240048d0 	.word	0x240048d0
 800ab40:	240048e0 	.word	0x240048e0

0800ab44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ab4c:	4b28      	ldr	r3, [pc, #160]	@ (800abf0 <prvInsertBlockIntoFreeList+0xac>)
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e002      	b.n	800ab58 <prvInsertBlockIntoFreeList+0x14>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d8f7      	bhi.n	800ab52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d108      	bne.n	800ab86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	685a      	ldr	r2, [r3, #4]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	441a      	add	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	441a      	add	r2, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d118      	bne.n	800abcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	4b15      	ldr	r3, [pc, #84]	@ (800abf4 <prvInsertBlockIntoFreeList+0xb0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d00d      	beq.n	800abc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	685a      	ldr	r2, [r3, #4]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	441a      	add	r2, r3
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	601a      	str	r2, [r3, #0]
 800abc0:	e008      	b.n	800abd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800abc2:	4b0c      	ldr	r3, [pc, #48]	@ (800abf4 <prvInsertBlockIntoFreeList+0xb0>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	e003      	b.n	800abd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	429a      	cmp	r2, r3
 800abda:	d002      	beq.n	800abe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abe2:	bf00      	nop
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr
 800abee:	bf00      	nop
 800abf0:	240048c4 	.word	0x240048c4
 800abf4:	240048cc 	.word	0x240048cc

0800abf8 <_ZdlPvj>:
 800abf8:	f000 b811 	b.w	800ac1e <_ZdlPv>

0800abfc <_Znwj>:
 800abfc:	2801      	cmp	r0, #1
 800abfe:	bf38      	it	cc
 800ac00:	2001      	movcc	r0, #1
 800ac02:	b510      	push	{r4, lr}
 800ac04:	4604      	mov	r4, r0
 800ac06:	4620      	mov	r0, r4
 800ac08:	f000 fa08 	bl	800b01c <malloc>
 800ac0c:	b100      	cbz	r0, 800ac10 <_Znwj+0x14>
 800ac0e:	bd10      	pop	{r4, pc}
 800ac10:	f000 f808 	bl	800ac24 <_ZSt15get_new_handlerv>
 800ac14:	b908      	cbnz	r0, 800ac1a <_Znwj+0x1e>
 800ac16:	f000 f9f9 	bl	800b00c <abort>
 800ac1a:	4780      	blx	r0
 800ac1c:	e7f3      	b.n	800ac06 <_Znwj+0xa>

0800ac1e <_ZdlPv>:
 800ac1e:	f000 ba05 	b.w	800b02c <free>
	...

0800ac24 <_ZSt15get_new_handlerv>:
 800ac24:	4b02      	ldr	r3, [pc, #8]	@ (800ac30 <_ZSt15get_new_handlerv+0xc>)
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	f3bf 8f5b 	dmb	ish
 800ac2c:	4770      	bx	lr
 800ac2e:	bf00      	nop
 800ac30:	240048e4 	.word	0x240048e4

0800ac34 <atan2>:
 800ac34:	f000 b928 	b.w	800ae88 <__ieee754_atan2>

0800ac38 <sqrt>:
 800ac38:	b508      	push	{r3, lr}
 800ac3a:	ed2d 8b04 	vpush	{d8-d9}
 800ac3e:	eeb0 8b40 	vmov.f64	d8, d0
 800ac42:	f000 f91b 	bl	800ae7c <__ieee754_sqrt>
 800ac46:	eeb4 8b48 	vcmp.f64	d8, d8
 800ac4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4e:	d60c      	bvs.n	800ac6a <sqrt+0x32>
 800ac50:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800ac70 <sqrt+0x38>
 800ac54:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5c:	d505      	bpl.n	800ac6a <sqrt+0x32>
 800ac5e:	f000 fb87 	bl	800b370 <__errno>
 800ac62:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800ac66:	2321      	movs	r3, #33	@ 0x21
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	ecbd 8b04 	vpop	{d8-d9}
 800ac6e:	bd08      	pop	{r3, pc}
	...

0800ac78 <atan>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	eeb0 7b40 	vmov.f64	d7, d0
 800ac7e:	ee17 5a90 	vmov	r5, s15
 800ac82:	4b73      	ldr	r3, [pc, #460]	@ (800ae50 <atan+0x1d8>)
 800ac84:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800ac88:	429c      	cmp	r4, r3
 800ac8a:	d913      	bls.n	800acb4 <atan+0x3c>
 800ac8c:	4b71      	ldr	r3, [pc, #452]	@ (800ae54 <atan+0x1dc>)
 800ac8e:	429c      	cmp	r4, r3
 800ac90:	d803      	bhi.n	800ac9a <atan+0x22>
 800ac92:	d107      	bne.n	800aca4 <atan+0x2c>
 800ac94:	ee10 3a10 	vmov	r3, s0
 800ac98:	b123      	cbz	r3, 800aca4 <atan+0x2c>
 800ac9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ac9e:	eeb0 0b47 	vmov.f64	d0, d7
 800aca2:	bd38      	pop	{r3, r4, r5, pc}
 800aca4:	ed9f 7b4e 	vldr	d7, [pc, #312]	@ 800ade0 <atan+0x168>
 800aca8:	ed9f 6b4f 	vldr	d6, [pc, #316]	@ 800ade8 <atan+0x170>
 800acac:	2d00      	cmp	r5, #0
 800acae:	fe36 7b07 	vselgt.f64	d7, d6, d7
 800acb2:	e7f4      	b.n	800ac9e <atan+0x26>
 800acb4:	4b68      	ldr	r3, [pc, #416]	@ (800ae58 <atan+0x1e0>)
 800acb6:	429c      	cmp	r4, r3
 800acb8:	d811      	bhi.n	800acde <atan+0x66>
 800acba:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800acbe:	429c      	cmp	r4, r3
 800acc0:	d80a      	bhi.n	800acd8 <atan+0x60>
 800acc2:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 800acc6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 800adf0 <atan+0x178>
 800acca:	ee30 6b06 	vadd.f64	d6, d0, d6
 800acce:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800acd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd6:	dce2      	bgt.n	800ac9e <atan+0x26>
 800acd8:	f04f 33ff 	mov.w	r3, #4294967295
 800acdc:	e013      	b.n	800ad06 <atan+0x8e>
 800acde:	f000 f8c5 	bl	800ae6c <fabs>
 800ace2:	4b5e      	ldr	r3, [pc, #376]	@ (800ae5c <atan+0x1e4>)
 800ace4:	429c      	cmp	r4, r3
 800ace6:	d84f      	bhi.n	800ad88 <atan+0x110>
 800ace8:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800acec:	429c      	cmp	r4, r3
 800acee:	d841      	bhi.n	800ad74 <atan+0xfc>
 800acf0:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800acf4:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 800acf8:	2300      	movs	r3, #0
 800acfa:	eea0 5b07 	vfma.f64	d5, d0, d7
 800acfe:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ad02:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800ad06:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800adf8 <atan+0x180>
 800ad0a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800ad0e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800ad12:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800ae00 <atan+0x188>
 800ad16:	eea5 3b06 	vfma.f64	d3, d5, d6
 800ad1a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800ae08 <atan+0x190>
 800ad1e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ad22:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800ae10 <atan+0x198>
 800ad26:	eea6 3b05 	vfma.f64	d3, d6, d5
 800ad2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 800ae18 <atan+0x1a0>
 800ad2e:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ad32:	ed9f 3b3b 	vldr	d3, [pc, #236]	@ 800ae20 <atan+0x1a8>
 800ad36:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800ae28 <atan+0x1b0>
 800ad3a:	eea6 3b05 	vfma.f64	d3, d6, d5
 800ad3e:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800ae30 <atan+0x1b8>
 800ad42:	eea5 2b06 	vfma.f64	d2, d5, d6
 800ad46:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800ae38 <atan+0x1c0>
 800ad4a:	eea2 6b05 	vfma.f64	d6, d2, d5
 800ad4e:	ed9f 2b3c 	vldr	d2, [pc, #240]	@ 800ae40 <atan+0x1c8>
 800ad52:	eea6 2b05 	vfma.f64	d2, d6, d5
 800ad56:	ed9f 6b3c 	vldr	d6, [pc, #240]	@ 800ae48 <atan+0x1d0>
 800ad5a:	1c5a      	adds	r2, r3, #1
 800ad5c:	eea2 6b05 	vfma.f64	d6, d2, d5
 800ad60:	ee26 6b05 	vmul.f64	d6, d6, d5
 800ad64:	eea3 6b04 	vfma.f64	d6, d3, d4
 800ad68:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ad6c:	d121      	bne.n	800adb2 <atan+0x13a>
 800ad6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ad72:	e794      	b.n	800ac9e <atan+0x26>
 800ad74:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800ad78:	2301      	movs	r3, #1
 800ad7a:	ee30 5b47 	vsub.f64	d5, d0, d7
 800ad7e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ad82:	ee85 7b00 	vdiv.f64	d7, d5, d0
 800ad86:	e7be      	b.n	800ad06 <atan+0x8e>
 800ad88:	4b35      	ldr	r3, [pc, #212]	@ (800ae60 <atan+0x1e8>)
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d20b      	bcs.n	800ada6 <atan+0x12e>
 800ad8e:	eeb7 7b08 	vmov.f64	d7, #120	@ 0x3fc00000  1.5
 800ad92:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ad96:	ee30 5b47 	vsub.f64	d5, d0, d7
 800ad9a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800ad9e:	2302      	movs	r3, #2
 800ada0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800ada4:	e7af      	b.n	800ad06 <atan+0x8e>
 800ada6:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800adaa:	2303      	movs	r3, #3
 800adac:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800adb0:	e7a9      	b.n	800ad06 <atan+0x8e>
 800adb2:	4a2c      	ldr	r2, [pc, #176]	@ (800ae64 <atan+0x1ec>)
 800adb4:	492c      	ldr	r1, [pc, #176]	@ (800ae68 <atan+0x1f0>)
 800adb6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800adba:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800adbe:	ed93 5b00 	vldr	d5, [r3]
 800adc2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800adc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800adca:	ed92 7b00 	vldr	d7, [r2]
 800adce:	2d00      	cmp	r5, #0
 800add0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800add4:	bfb8      	it	lt
 800add6:	eeb1 7b47 	vneglt.f64	d7, d7
 800adda:	e760      	b.n	800ac9e <atan+0x26>
 800addc:	f3af 8000 	nop.w
 800ade0:	54442d18 	.word	0x54442d18
 800ade4:	bff921fb 	.word	0xbff921fb
 800ade8:	54442d18 	.word	0x54442d18
 800adec:	3ff921fb 	.word	0x3ff921fb
 800adf0:	8800759c 	.word	0x8800759c
 800adf4:	7e37e43c 	.word	0x7e37e43c
 800adf8:	e322da11 	.word	0xe322da11
 800adfc:	3f90ad3a 	.word	0x3f90ad3a
 800ae00:	24760deb 	.word	0x24760deb
 800ae04:	3fa97b4b 	.word	0x3fa97b4b
 800ae08:	a0d03d51 	.word	0xa0d03d51
 800ae0c:	3fb10d66 	.word	0x3fb10d66
 800ae10:	c54c206e 	.word	0xc54c206e
 800ae14:	3fb745cd 	.word	0x3fb745cd
 800ae18:	920083ff 	.word	0x920083ff
 800ae1c:	3fc24924 	.word	0x3fc24924
 800ae20:	5555550d 	.word	0x5555550d
 800ae24:	3fd55555 	.word	0x3fd55555
 800ae28:	52defd9a 	.word	0x52defd9a
 800ae2c:	bfadde2d 	.word	0xbfadde2d
 800ae30:	2c6a6c2f 	.word	0x2c6a6c2f
 800ae34:	bfa2b444 	.word	0xbfa2b444
 800ae38:	af749a6d 	.word	0xaf749a6d
 800ae3c:	bfb3b0f2 	.word	0xbfb3b0f2
 800ae40:	fe231671 	.word	0xfe231671
 800ae44:	bfbc71c6 	.word	0xbfbc71c6
 800ae48:	9998ebc4 	.word	0x9998ebc4
 800ae4c:	bfc99999 	.word	0xbfc99999
 800ae50:	440fffff 	.word	0x440fffff
 800ae54:	7ff00000 	.word	0x7ff00000
 800ae58:	3fdbffff 	.word	0x3fdbffff
 800ae5c:	3ff2ffff 	.word	0x3ff2ffff
 800ae60:	40038000 	.word	0x40038000
 800ae64:	0800bcf0 	.word	0x0800bcf0
 800ae68:	0800bcd0 	.word	0x0800bcd0

0800ae6c <fabs>:
 800ae6c:	ec51 0b10 	vmov	r0, r1, d0
 800ae70:	4602      	mov	r2, r0
 800ae72:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae76:	ec43 2b10 	vmov	d0, r2, r3
 800ae7a:	4770      	bx	lr

0800ae7c <__ieee754_sqrt>:
 800ae7c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800ae80:	4770      	bx	lr
 800ae82:	0000      	movs	r0, r0
 800ae84:	0000      	movs	r0, r0
	...

0800ae88 <__ieee754_atan2>:
 800ae88:	ee11 1a10 	vmov	r1, s2
 800ae8c:	eeb0 7b40 	vmov.f64	d7, d0
 800ae90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae92:	ee11 5a90 	vmov	r5, s3
 800ae96:	424b      	negs	r3, r1
 800ae98:	4f59      	ldr	r7, [pc, #356]	@ (800b000 <__ieee754_atan2+0x178>)
 800ae9a:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ae9e:	430b      	orrs	r3, r1
 800aea0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aea4:	42bb      	cmp	r3, r7
 800aea6:	d80d      	bhi.n	800aec4 <__ieee754_atan2+0x3c>
 800aea8:	ee10 ca10 	vmov	ip, s0
 800aeac:	ee17 6a90 	vmov	r6, s15
 800aeb0:	f1cc 0000 	rsb	r0, ip, #0
 800aeb4:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800aeb8:	ea40 000c 	orr.w	r0, r0, ip
 800aebc:	ea43 70d0 	orr.w	r0, r3, r0, lsr #31
 800aec0:	42b8      	cmp	r0, r7
 800aec2:	d904      	bls.n	800aece <__ieee754_atan2+0x46>
 800aec4:	ee37 7b01 	vadd.f64	d7, d7, d1
 800aec8:	eeb0 0b47 	vmov.f64	d0, d7
 800aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aece:	f105 4040 	add.w	r0, r5, #3221225472	@ 0xc0000000
 800aed2:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800aed6:	4308      	orrs	r0, r1
 800aed8:	d103      	bne.n	800aee2 <__ieee754_atan2+0x5a>
 800aeda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aede:	f7ff becb 	b.w	800ac78 <atan>
 800aee2:	17ac      	asrs	r4, r5, #30
 800aee4:	f004 0402 	and.w	r4, r4, #2
 800aee8:	ea53 0c0c 	orrs.w	ip, r3, ip
 800aeec:	ea44 74d6 	orr.w	r4, r4, r6, lsr #31
 800aef0:	d107      	bne.n	800af02 <__ieee754_atan2+0x7a>
 800aef2:	2c02      	cmp	r4, #2
 800aef4:	d05c      	beq.n	800afb0 <__ieee754_atan2+0x128>
 800aef6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 800afc8 <__ieee754_atan2+0x140>
 800aefa:	2c03      	cmp	r4, #3
 800aefc:	fe06 7b00 	vseleq.f64	d7, d6, d0
 800af00:	e7e2      	b.n	800aec8 <__ieee754_atan2+0x40>
 800af02:	4311      	orrs	r1, r2
 800af04:	d107      	bne.n	800af16 <__ieee754_atan2+0x8e>
 800af06:	ed9f 7b32 	vldr	d7, [pc, #200]	@ 800afd0 <__ieee754_atan2+0x148>
 800af0a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 800afd8 <__ieee754_atan2+0x150>
 800af0e:	2e00      	cmp	r6, #0
 800af10:	fe27 7b06 	vselge.f64	d7, d7, d6
 800af14:	e7d8      	b.n	800aec8 <__ieee754_atan2+0x40>
 800af16:	42ba      	cmp	r2, r7
 800af18:	d10f      	bne.n	800af3a <__ieee754_atan2+0xb2>
 800af1a:	4293      	cmp	r3, r2
 800af1c:	f104 34ff 	add.w	r4, r4, #4294967295
 800af20:	d107      	bne.n	800af32 <__ieee754_atan2+0xaa>
 800af22:	2c02      	cmp	r4, #2
 800af24:	d847      	bhi.n	800afb6 <__ieee754_atan2+0x12e>
 800af26:	4b37      	ldr	r3, [pc, #220]	@ (800b004 <__ieee754_atan2+0x17c>)
 800af28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af2c:	ed93 7b00 	vldr	d7, [r3]
 800af30:	e7ca      	b.n	800aec8 <__ieee754_atan2+0x40>
 800af32:	2c02      	cmp	r4, #2
 800af34:	d842      	bhi.n	800afbc <__ieee754_atan2+0x134>
 800af36:	4b34      	ldr	r3, [pc, #208]	@ (800b008 <__ieee754_atan2+0x180>)
 800af38:	e7f6      	b.n	800af28 <__ieee754_atan2+0xa0>
 800af3a:	42bb      	cmp	r3, r7
 800af3c:	d0e3      	beq.n	800af06 <__ieee754_atan2+0x7e>
 800af3e:	1a9b      	subs	r3, r3, r2
 800af40:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800af44:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af48:	da1a      	bge.n	800af80 <__ieee754_atan2+0xf8>
 800af4a:	2d00      	cmp	r5, #0
 800af4c:	da01      	bge.n	800af52 <__ieee754_atan2+0xca>
 800af4e:	323c      	adds	r2, #60	@ 0x3c
 800af50:	db19      	blt.n	800af86 <__ieee754_atan2+0xfe>
 800af52:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800af56:	f7ff ff89 	bl	800ae6c <fabs>
 800af5a:	f7ff fe8d 	bl	800ac78 <atan>
 800af5e:	eeb0 7b40 	vmov.f64	d7, d0
 800af62:	2c01      	cmp	r4, #1
 800af64:	d012      	beq.n	800af8c <__ieee754_atan2+0x104>
 800af66:	2c02      	cmp	r4, #2
 800af68:	d019      	beq.n	800af9e <__ieee754_atan2+0x116>
 800af6a:	2c00      	cmp	r4, #0
 800af6c:	d0ac      	beq.n	800aec8 <__ieee754_atan2+0x40>
 800af6e:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800afe0 <__ieee754_atan2+0x158>
 800af72:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af76:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 800afe8 <__ieee754_atan2+0x160>
 800af7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800af7e:	e7a3      	b.n	800aec8 <__ieee754_atan2+0x40>
 800af80:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 800afd0 <__ieee754_atan2+0x148>
 800af84:	e7ed      	b.n	800af62 <__ieee754_atan2+0xda>
 800af86:	ed9f 7b1a 	vldr	d7, [pc, #104]	@ 800aff0 <__ieee754_atan2+0x168>
 800af8a:	e7ea      	b.n	800af62 <__ieee754_atan2+0xda>
 800af8c:	ee17 1a90 	vmov	r1, s15
 800af90:	ec53 2b17 	vmov	r2, r3, d7
 800af94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800af98:	ec43 2b17 	vmov	d7, r2, r3
 800af9c:	e794      	b.n	800aec8 <__ieee754_atan2+0x40>
 800af9e:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800afe0 <__ieee754_atan2+0x158>
 800afa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afa6:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 800afe8 <__ieee754_atan2+0x160>
 800afaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800afae:	e78b      	b.n	800aec8 <__ieee754_atan2+0x40>
 800afb0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800afe8 <__ieee754_atan2+0x160>
 800afb4:	e788      	b.n	800aec8 <__ieee754_atan2+0x40>
 800afb6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800aff8 <__ieee754_atan2+0x170>
 800afba:	e785      	b.n	800aec8 <__ieee754_atan2+0x40>
 800afbc:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800aff0 <__ieee754_atan2+0x168>
 800afc0:	e782      	b.n	800aec8 <__ieee754_atan2+0x40>
 800afc2:	bf00      	nop
 800afc4:	f3af 8000 	nop.w
 800afc8:	54442d18 	.word	0x54442d18
 800afcc:	c00921fb 	.word	0xc00921fb
 800afd0:	54442d18 	.word	0x54442d18
 800afd4:	3ff921fb 	.word	0x3ff921fb
 800afd8:	54442d18 	.word	0x54442d18
 800afdc:	bff921fb 	.word	0xbff921fb
 800afe0:	33145c07 	.word	0x33145c07
 800afe4:	3ca1a626 	.word	0x3ca1a626
 800afe8:	54442d18 	.word	0x54442d18
 800afec:	400921fb 	.word	0x400921fb
	...
 800aff8:	54442d18 	.word	0x54442d18
 800affc:	3fe921fb 	.word	0x3fe921fb
 800b000:	7ff00000 	.word	0x7ff00000
 800b004:	0800bd28 	.word	0x0800bd28
 800b008:	0800bd10 	.word	0x0800bd10

0800b00c <abort>:
 800b00c:	b508      	push	{r3, lr}
 800b00e:	2006      	movs	r0, #6
 800b010:	f000 f92c 	bl	800b26c <raise>
 800b014:	2001      	movs	r0, #1
 800b016:	f7f6 fd25 	bl	8001a64 <_exit>
	...

0800b01c <malloc>:
 800b01c:	4b02      	ldr	r3, [pc, #8]	@ (800b028 <malloc+0xc>)
 800b01e:	4601      	mov	r1, r0
 800b020:	6818      	ldr	r0, [r3, #0]
 800b022:	f000 b82d 	b.w	800b080 <_malloc_r>
 800b026:	bf00      	nop
 800b028:	240000a4 	.word	0x240000a4

0800b02c <free>:
 800b02c:	4b02      	ldr	r3, [pc, #8]	@ (800b038 <free+0xc>)
 800b02e:	4601      	mov	r1, r0
 800b030:	6818      	ldr	r0, [r3, #0]
 800b032:	f000 b9d7 	b.w	800b3e4 <_free_r>
 800b036:	bf00      	nop
 800b038:	240000a4 	.word	0x240000a4

0800b03c <sbrk_aligned>:
 800b03c:	b570      	push	{r4, r5, r6, lr}
 800b03e:	4e0f      	ldr	r6, [pc, #60]	@ (800b07c <sbrk_aligned+0x40>)
 800b040:	460c      	mov	r4, r1
 800b042:	6831      	ldr	r1, [r6, #0]
 800b044:	4605      	mov	r5, r0
 800b046:	b911      	cbnz	r1, 800b04e <sbrk_aligned+0x12>
 800b048:	f000 f982 	bl	800b350 <_sbrk_r>
 800b04c:	6030      	str	r0, [r6, #0]
 800b04e:	4621      	mov	r1, r4
 800b050:	4628      	mov	r0, r5
 800b052:	f000 f97d 	bl	800b350 <_sbrk_r>
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	d103      	bne.n	800b062 <sbrk_aligned+0x26>
 800b05a:	f04f 34ff 	mov.w	r4, #4294967295
 800b05e:	4620      	mov	r0, r4
 800b060:	bd70      	pop	{r4, r5, r6, pc}
 800b062:	1cc4      	adds	r4, r0, #3
 800b064:	f024 0403 	bic.w	r4, r4, #3
 800b068:	42a0      	cmp	r0, r4
 800b06a:	d0f8      	beq.n	800b05e <sbrk_aligned+0x22>
 800b06c:	1a21      	subs	r1, r4, r0
 800b06e:	4628      	mov	r0, r5
 800b070:	f000 f96e 	bl	800b350 <_sbrk_r>
 800b074:	3001      	adds	r0, #1
 800b076:	d1f2      	bne.n	800b05e <sbrk_aligned+0x22>
 800b078:	e7ef      	b.n	800b05a <sbrk_aligned+0x1e>
 800b07a:	bf00      	nop
 800b07c:	240048e8 	.word	0x240048e8

0800b080 <_malloc_r>:
 800b080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b084:	1ccd      	adds	r5, r1, #3
 800b086:	f025 0503 	bic.w	r5, r5, #3
 800b08a:	3508      	adds	r5, #8
 800b08c:	2d0c      	cmp	r5, #12
 800b08e:	bf38      	it	cc
 800b090:	250c      	movcc	r5, #12
 800b092:	2d00      	cmp	r5, #0
 800b094:	4606      	mov	r6, r0
 800b096:	db01      	blt.n	800b09c <_malloc_r+0x1c>
 800b098:	42a9      	cmp	r1, r5
 800b09a:	d904      	bls.n	800b0a6 <_malloc_r+0x26>
 800b09c:	230c      	movs	r3, #12
 800b09e:	6033      	str	r3, [r6, #0]
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b17c <_malloc_r+0xfc>
 800b0aa:	f000 f869 	bl	800b180 <__malloc_lock>
 800b0ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b2:	461c      	mov	r4, r3
 800b0b4:	bb44      	cbnz	r4, 800b108 <_malloc_r+0x88>
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f7ff ffbf 	bl	800b03c <sbrk_aligned>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	d158      	bne.n	800b176 <_malloc_r+0xf6>
 800b0c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b0c8:	4627      	mov	r7, r4
 800b0ca:	2f00      	cmp	r7, #0
 800b0cc:	d143      	bne.n	800b156 <_malloc_r+0xd6>
 800b0ce:	2c00      	cmp	r4, #0
 800b0d0:	d04b      	beq.n	800b16a <_malloc_r+0xea>
 800b0d2:	6823      	ldr	r3, [r4, #0]
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	eb04 0903 	add.w	r9, r4, r3
 800b0dc:	f000 f938 	bl	800b350 <_sbrk_r>
 800b0e0:	4581      	cmp	r9, r0
 800b0e2:	d142      	bne.n	800b16a <_malloc_r+0xea>
 800b0e4:	6821      	ldr	r1, [r4, #0]
 800b0e6:	1a6d      	subs	r5, r5, r1
 800b0e8:	4629      	mov	r1, r5
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	f7ff ffa6 	bl	800b03c <sbrk_aligned>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d03a      	beq.n	800b16a <_malloc_r+0xea>
 800b0f4:	6823      	ldr	r3, [r4, #0]
 800b0f6:	442b      	add	r3, r5
 800b0f8:	6023      	str	r3, [r4, #0]
 800b0fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b0fe:	685a      	ldr	r2, [r3, #4]
 800b100:	bb62      	cbnz	r2, 800b15c <_malloc_r+0xdc>
 800b102:	f8c8 7000 	str.w	r7, [r8]
 800b106:	e00f      	b.n	800b128 <_malloc_r+0xa8>
 800b108:	6822      	ldr	r2, [r4, #0]
 800b10a:	1b52      	subs	r2, r2, r5
 800b10c:	d420      	bmi.n	800b150 <_malloc_r+0xd0>
 800b10e:	2a0b      	cmp	r2, #11
 800b110:	d917      	bls.n	800b142 <_malloc_r+0xc2>
 800b112:	1961      	adds	r1, r4, r5
 800b114:	42a3      	cmp	r3, r4
 800b116:	6025      	str	r5, [r4, #0]
 800b118:	bf18      	it	ne
 800b11a:	6059      	strne	r1, [r3, #4]
 800b11c:	6863      	ldr	r3, [r4, #4]
 800b11e:	bf08      	it	eq
 800b120:	f8c8 1000 	streq.w	r1, [r8]
 800b124:	5162      	str	r2, [r4, r5]
 800b126:	604b      	str	r3, [r1, #4]
 800b128:	4630      	mov	r0, r6
 800b12a:	f000 f82f 	bl	800b18c <__malloc_unlock>
 800b12e:	f104 000b 	add.w	r0, r4, #11
 800b132:	1d23      	adds	r3, r4, #4
 800b134:	f020 0007 	bic.w	r0, r0, #7
 800b138:	1ac2      	subs	r2, r0, r3
 800b13a:	bf1c      	itt	ne
 800b13c:	1a1b      	subne	r3, r3, r0
 800b13e:	50a3      	strne	r3, [r4, r2]
 800b140:	e7af      	b.n	800b0a2 <_malloc_r+0x22>
 800b142:	6862      	ldr	r2, [r4, #4]
 800b144:	42a3      	cmp	r3, r4
 800b146:	bf0c      	ite	eq
 800b148:	f8c8 2000 	streq.w	r2, [r8]
 800b14c:	605a      	strne	r2, [r3, #4]
 800b14e:	e7eb      	b.n	800b128 <_malloc_r+0xa8>
 800b150:	4623      	mov	r3, r4
 800b152:	6864      	ldr	r4, [r4, #4]
 800b154:	e7ae      	b.n	800b0b4 <_malloc_r+0x34>
 800b156:	463c      	mov	r4, r7
 800b158:	687f      	ldr	r7, [r7, #4]
 800b15a:	e7b6      	b.n	800b0ca <_malloc_r+0x4a>
 800b15c:	461a      	mov	r2, r3
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	42a3      	cmp	r3, r4
 800b162:	d1fb      	bne.n	800b15c <_malloc_r+0xdc>
 800b164:	2300      	movs	r3, #0
 800b166:	6053      	str	r3, [r2, #4]
 800b168:	e7de      	b.n	800b128 <_malloc_r+0xa8>
 800b16a:	230c      	movs	r3, #12
 800b16c:	6033      	str	r3, [r6, #0]
 800b16e:	4630      	mov	r0, r6
 800b170:	f000 f80c 	bl	800b18c <__malloc_unlock>
 800b174:	e794      	b.n	800b0a0 <_malloc_r+0x20>
 800b176:	6005      	str	r5, [r0, #0]
 800b178:	e7d6      	b.n	800b128 <_malloc_r+0xa8>
 800b17a:	bf00      	nop
 800b17c:	240048ec 	.word	0x240048ec

0800b180 <__malloc_lock>:
 800b180:	4801      	ldr	r0, [pc, #4]	@ (800b188 <__malloc_lock+0x8>)
 800b182:	f000 b91f 	b.w	800b3c4 <__retarget_lock_acquire_recursive>
 800b186:	bf00      	nop
 800b188:	24004a2c 	.word	0x24004a2c

0800b18c <__malloc_unlock>:
 800b18c:	4801      	ldr	r0, [pc, #4]	@ (800b194 <__malloc_unlock+0x8>)
 800b18e:	f000 b91a 	b.w	800b3c6 <__retarget_lock_release_recursive>
 800b192:	bf00      	nop
 800b194:	24004a2c 	.word	0x24004a2c

0800b198 <_vsniprintf_r>:
 800b198:	b530      	push	{r4, r5, lr}
 800b19a:	4614      	mov	r4, r2
 800b19c:	2c00      	cmp	r4, #0
 800b19e:	b09b      	sub	sp, #108	@ 0x6c
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	da05      	bge.n	800b1b2 <_vsniprintf_r+0x1a>
 800b1a6:	238b      	movs	r3, #139	@ 0x8b
 800b1a8:	6003      	str	r3, [r0, #0]
 800b1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ae:	b01b      	add	sp, #108	@ 0x6c
 800b1b0:	bd30      	pop	{r4, r5, pc}
 800b1b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b1ba:	bf14      	ite	ne
 800b1bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b1c0:	4623      	moveq	r3, r4
 800b1c2:	9302      	str	r3, [sp, #8]
 800b1c4:	9305      	str	r3, [sp, #20]
 800b1c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1ca:	9100      	str	r1, [sp, #0]
 800b1cc:	9104      	str	r1, [sp, #16]
 800b1ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b1d2:	4669      	mov	r1, sp
 800b1d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b1d6:	f000 f9ab 	bl	800b530 <_svfiprintf_r>
 800b1da:	1c43      	adds	r3, r0, #1
 800b1dc:	bfbc      	itt	lt
 800b1de:	238b      	movlt	r3, #139	@ 0x8b
 800b1e0:	602b      	strlt	r3, [r5, #0]
 800b1e2:	2c00      	cmp	r4, #0
 800b1e4:	d0e3      	beq.n	800b1ae <_vsniprintf_r+0x16>
 800b1e6:	9b00      	ldr	r3, [sp, #0]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	701a      	strb	r2, [r3, #0]
 800b1ec:	e7df      	b.n	800b1ae <_vsniprintf_r+0x16>
	...

0800b1f0 <vsniprintf>:
 800b1f0:	b507      	push	{r0, r1, r2, lr}
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	460a      	mov	r2, r1
 800b1f8:	4601      	mov	r1, r0
 800b1fa:	4803      	ldr	r0, [pc, #12]	@ (800b208 <vsniprintf+0x18>)
 800b1fc:	6800      	ldr	r0, [r0, #0]
 800b1fe:	f7ff ffcb 	bl	800b198 <_vsniprintf_r>
 800b202:	b003      	add	sp, #12
 800b204:	f85d fb04 	ldr.w	pc, [sp], #4
 800b208:	240000a4 	.word	0x240000a4

0800b20c <memset>:
 800b20c:	4402      	add	r2, r0
 800b20e:	4603      	mov	r3, r0
 800b210:	4293      	cmp	r3, r2
 800b212:	d100      	bne.n	800b216 <memset+0xa>
 800b214:	4770      	bx	lr
 800b216:	f803 1b01 	strb.w	r1, [r3], #1
 800b21a:	e7f9      	b.n	800b210 <memset+0x4>

0800b21c <_raise_r>:
 800b21c:	291f      	cmp	r1, #31
 800b21e:	b538      	push	{r3, r4, r5, lr}
 800b220:	4605      	mov	r5, r0
 800b222:	460c      	mov	r4, r1
 800b224:	d904      	bls.n	800b230 <_raise_r+0x14>
 800b226:	2316      	movs	r3, #22
 800b228:	6003      	str	r3, [r0, #0]
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	bd38      	pop	{r3, r4, r5, pc}
 800b230:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b232:	b112      	cbz	r2, 800b23a <_raise_r+0x1e>
 800b234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b238:	b94b      	cbnz	r3, 800b24e <_raise_r+0x32>
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f886 	bl	800b34c <_getpid_r>
 800b240:	4622      	mov	r2, r4
 800b242:	4601      	mov	r1, r0
 800b244:	4628      	mov	r0, r5
 800b246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b24a:	f000 b86d 	b.w	800b328 <_kill_r>
 800b24e:	2b01      	cmp	r3, #1
 800b250:	d00a      	beq.n	800b268 <_raise_r+0x4c>
 800b252:	1c59      	adds	r1, r3, #1
 800b254:	d103      	bne.n	800b25e <_raise_r+0x42>
 800b256:	2316      	movs	r3, #22
 800b258:	6003      	str	r3, [r0, #0]
 800b25a:	2001      	movs	r0, #1
 800b25c:	e7e7      	b.n	800b22e <_raise_r+0x12>
 800b25e:	2100      	movs	r1, #0
 800b260:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b264:	4620      	mov	r0, r4
 800b266:	4798      	blx	r3
 800b268:	2000      	movs	r0, #0
 800b26a:	e7e0      	b.n	800b22e <_raise_r+0x12>

0800b26c <raise>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	@ (800b278 <raise+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f7ff bfd3 	b.w	800b21c <_raise_r>
 800b276:	bf00      	nop
 800b278:	240000a4 	.word	0x240000a4

0800b27c <_reclaim_reent>:
 800b27c:	4b29      	ldr	r3, [pc, #164]	@ (800b324 <_reclaim_reent+0xa8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4283      	cmp	r3, r0
 800b282:	b570      	push	{r4, r5, r6, lr}
 800b284:	4604      	mov	r4, r0
 800b286:	d04b      	beq.n	800b320 <_reclaim_reent+0xa4>
 800b288:	69c3      	ldr	r3, [r0, #28]
 800b28a:	b1ab      	cbz	r3, 800b2b8 <_reclaim_reent+0x3c>
 800b28c:	68db      	ldr	r3, [r3, #12]
 800b28e:	b16b      	cbz	r3, 800b2ac <_reclaim_reent+0x30>
 800b290:	2500      	movs	r5, #0
 800b292:	69e3      	ldr	r3, [r4, #28]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	5959      	ldr	r1, [r3, r5]
 800b298:	2900      	cmp	r1, #0
 800b29a:	d13b      	bne.n	800b314 <_reclaim_reent+0x98>
 800b29c:	3504      	adds	r5, #4
 800b29e:	2d80      	cmp	r5, #128	@ 0x80
 800b2a0:	d1f7      	bne.n	800b292 <_reclaim_reent+0x16>
 800b2a2:	69e3      	ldr	r3, [r4, #28]
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	68d9      	ldr	r1, [r3, #12]
 800b2a8:	f000 f89c 	bl	800b3e4 <_free_r>
 800b2ac:	69e3      	ldr	r3, [r4, #28]
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	b111      	cbz	r1, 800b2b8 <_reclaim_reent+0x3c>
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f000 f896 	bl	800b3e4 <_free_r>
 800b2b8:	6961      	ldr	r1, [r4, #20]
 800b2ba:	b111      	cbz	r1, 800b2c2 <_reclaim_reent+0x46>
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 f891 	bl	800b3e4 <_free_r>
 800b2c2:	69e1      	ldr	r1, [r4, #28]
 800b2c4:	b111      	cbz	r1, 800b2cc <_reclaim_reent+0x50>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f000 f88c 	bl	800b3e4 <_free_r>
 800b2cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b2ce:	b111      	cbz	r1, 800b2d6 <_reclaim_reent+0x5a>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 f887 	bl	800b3e4 <_free_r>
 800b2d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2d8:	b111      	cbz	r1, 800b2e0 <_reclaim_reent+0x64>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 f882 	bl	800b3e4 <_free_r>
 800b2e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b2e2:	b111      	cbz	r1, 800b2ea <_reclaim_reent+0x6e>
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 f87d 	bl	800b3e4 <_free_r>
 800b2ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b2ec:	b111      	cbz	r1, 800b2f4 <_reclaim_reent+0x78>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f000 f878 	bl	800b3e4 <_free_r>
 800b2f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b2f6:	b111      	cbz	r1, 800b2fe <_reclaim_reent+0x82>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f000 f873 	bl	800b3e4 <_free_r>
 800b2fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b300:	b111      	cbz	r1, 800b308 <_reclaim_reent+0x8c>
 800b302:	4620      	mov	r0, r4
 800b304:	f000 f86e 	bl	800b3e4 <_free_r>
 800b308:	6a23      	ldr	r3, [r4, #32]
 800b30a:	b14b      	cbz	r3, 800b320 <_reclaim_reent+0xa4>
 800b30c:	4620      	mov	r0, r4
 800b30e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b312:	4718      	bx	r3
 800b314:	680e      	ldr	r6, [r1, #0]
 800b316:	4620      	mov	r0, r4
 800b318:	f000 f864 	bl	800b3e4 <_free_r>
 800b31c:	4631      	mov	r1, r6
 800b31e:	e7bb      	b.n	800b298 <_reclaim_reent+0x1c>
 800b320:	bd70      	pop	{r4, r5, r6, pc}
 800b322:	bf00      	nop
 800b324:	240000a4 	.word	0x240000a4

0800b328 <_kill_r>:
 800b328:	b538      	push	{r3, r4, r5, lr}
 800b32a:	4d07      	ldr	r5, [pc, #28]	@ (800b348 <_kill_r+0x20>)
 800b32c:	2300      	movs	r3, #0
 800b32e:	4604      	mov	r4, r0
 800b330:	4608      	mov	r0, r1
 800b332:	4611      	mov	r1, r2
 800b334:	602b      	str	r3, [r5, #0]
 800b336:	f7f6 fb85 	bl	8001a44 <_kill>
 800b33a:	1c43      	adds	r3, r0, #1
 800b33c:	d102      	bne.n	800b344 <_kill_r+0x1c>
 800b33e:	682b      	ldr	r3, [r5, #0]
 800b340:	b103      	cbz	r3, 800b344 <_kill_r+0x1c>
 800b342:	6023      	str	r3, [r4, #0]
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	24004a28 	.word	0x24004a28

0800b34c <_getpid_r>:
 800b34c:	f7f6 bb72 	b.w	8001a34 <_getpid>

0800b350 <_sbrk_r>:
 800b350:	b538      	push	{r3, r4, r5, lr}
 800b352:	4d06      	ldr	r5, [pc, #24]	@ (800b36c <_sbrk_r+0x1c>)
 800b354:	2300      	movs	r3, #0
 800b356:	4604      	mov	r4, r0
 800b358:	4608      	mov	r0, r1
 800b35a:	602b      	str	r3, [r5, #0]
 800b35c:	f7f6 fb8e 	bl	8001a7c <_sbrk>
 800b360:	1c43      	adds	r3, r0, #1
 800b362:	d102      	bne.n	800b36a <_sbrk_r+0x1a>
 800b364:	682b      	ldr	r3, [r5, #0]
 800b366:	b103      	cbz	r3, 800b36a <_sbrk_r+0x1a>
 800b368:	6023      	str	r3, [r4, #0]
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	24004a28 	.word	0x24004a28

0800b370 <__errno>:
 800b370:	4b01      	ldr	r3, [pc, #4]	@ (800b378 <__errno+0x8>)
 800b372:	6818      	ldr	r0, [r3, #0]
 800b374:	4770      	bx	lr
 800b376:	bf00      	nop
 800b378:	240000a4 	.word	0x240000a4

0800b37c <__libc_init_array>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	4d0d      	ldr	r5, [pc, #52]	@ (800b3b4 <__libc_init_array+0x38>)
 800b380:	4c0d      	ldr	r4, [pc, #52]	@ (800b3b8 <__libc_init_array+0x3c>)
 800b382:	1b64      	subs	r4, r4, r5
 800b384:	10a4      	asrs	r4, r4, #2
 800b386:	2600      	movs	r6, #0
 800b388:	42a6      	cmp	r6, r4
 800b38a:	d109      	bne.n	800b3a0 <__libc_init_array+0x24>
 800b38c:	4d0b      	ldr	r5, [pc, #44]	@ (800b3bc <__libc_init_array+0x40>)
 800b38e:	4c0c      	ldr	r4, [pc, #48]	@ (800b3c0 <__libc_init_array+0x44>)
 800b390:	f000 fba8 	bl	800bae4 <_init>
 800b394:	1b64      	subs	r4, r4, r5
 800b396:	10a4      	asrs	r4, r4, #2
 800b398:	2600      	movs	r6, #0
 800b39a:	42a6      	cmp	r6, r4
 800b39c:	d105      	bne.n	800b3aa <__libc_init_array+0x2e>
 800b39e:	bd70      	pop	{r4, r5, r6, pc}
 800b3a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3a4:	4798      	blx	r3
 800b3a6:	3601      	adds	r6, #1
 800b3a8:	e7ee      	b.n	800b388 <__libc_init_array+0xc>
 800b3aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ae:	4798      	blx	r3
 800b3b0:	3601      	adds	r6, #1
 800b3b2:	e7f2      	b.n	800b39a <__libc_init_array+0x1e>
 800b3b4:	0800bd7c 	.word	0x0800bd7c
 800b3b8:	0800bd7c 	.word	0x0800bd7c
 800b3bc:	0800bd7c 	.word	0x0800bd7c
 800b3c0:	0800bd80 	.word	0x0800bd80

0800b3c4 <__retarget_lock_acquire_recursive>:
 800b3c4:	4770      	bx	lr

0800b3c6 <__retarget_lock_release_recursive>:
 800b3c6:	4770      	bx	lr

0800b3c8 <memcpy>:
 800b3c8:	440a      	add	r2, r1
 800b3ca:	4291      	cmp	r1, r2
 800b3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3d0:	d100      	bne.n	800b3d4 <memcpy+0xc>
 800b3d2:	4770      	bx	lr
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3de:	4291      	cmp	r1, r2
 800b3e0:	d1f9      	bne.n	800b3d6 <memcpy+0xe>
 800b3e2:	bd10      	pop	{r4, pc}

0800b3e4 <_free_r>:
 800b3e4:	b538      	push	{r3, r4, r5, lr}
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	d041      	beq.n	800b470 <_free_r+0x8c>
 800b3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3f0:	1f0c      	subs	r4, r1, #4
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	bfb8      	it	lt
 800b3f6:	18e4      	addlt	r4, r4, r3
 800b3f8:	f7ff fec2 	bl	800b180 <__malloc_lock>
 800b3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b474 <_free_r+0x90>)
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	b933      	cbnz	r3, 800b410 <_free_r+0x2c>
 800b402:	6063      	str	r3, [r4, #4]
 800b404:	6014      	str	r4, [r2, #0]
 800b406:	4628      	mov	r0, r5
 800b408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b40c:	f7ff bebe 	b.w	800b18c <__malloc_unlock>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d908      	bls.n	800b426 <_free_r+0x42>
 800b414:	6820      	ldr	r0, [r4, #0]
 800b416:	1821      	adds	r1, r4, r0
 800b418:	428b      	cmp	r3, r1
 800b41a:	bf01      	itttt	eq
 800b41c:	6819      	ldreq	r1, [r3, #0]
 800b41e:	685b      	ldreq	r3, [r3, #4]
 800b420:	1809      	addeq	r1, r1, r0
 800b422:	6021      	streq	r1, [r4, #0]
 800b424:	e7ed      	b.n	800b402 <_free_r+0x1e>
 800b426:	461a      	mov	r2, r3
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	b10b      	cbz	r3, 800b430 <_free_r+0x4c>
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	d9fa      	bls.n	800b426 <_free_r+0x42>
 800b430:	6811      	ldr	r1, [r2, #0]
 800b432:	1850      	adds	r0, r2, r1
 800b434:	42a0      	cmp	r0, r4
 800b436:	d10b      	bne.n	800b450 <_free_r+0x6c>
 800b438:	6820      	ldr	r0, [r4, #0]
 800b43a:	4401      	add	r1, r0
 800b43c:	1850      	adds	r0, r2, r1
 800b43e:	4283      	cmp	r3, r0
 800b440:	6011      	str	r1, [r2, #0]
 800b442:	d1e0      	bne.n	800b406 <_free_r+0x22>
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	6053      	str	r3, [r2, #4]
 800b44a:	4408      	add	r0, r1
 800b44c:	6010      	str	r0, [r2, #0]
 800b44e:	e7da      	b.n	800b406 <_free_r+0x22>
 800b450:	d902      	bls.n	800b458 <_free_r+0x74>
 800b452:	230c      	movs	r3, #12
 800b454:	602b      	str	r3, [r5, #0]
 800b456:	e7d6      	b.n	800b406 <_free_r+0x22>
 800b458:	6820      	ldr	r0, [r4, #0]
 800b45a:	1821      	adds	r1, r4, r0
 800b45c:	428b      	cmp	r3, r1
 800b45e:	bf04      	itt	eq
 800b460:	6819      	ldreq	r1, [r3, #0]
 800b462:	685b      	ldreq	r3, [r3, #4]
 800b464:	6063      	str	r3, [r4, #4]
 800b466:	bf04      	itt	eq
 800b468:	1809      	addeq	r1, r1, r0
 800b46a:	6021      	streq	r1, [r4, #0]
 800b46c:	6054      	str	r4, [r2, #4]
 800b46e:	e7ca      	b.n	800b406 <_free_r+0x22>
 800b470:	bd38      	pop	{r3, r4, r5, pc}
 800b472:	bf00      	nop
 800b474:	240048ec 	.word	0x240048ec

0800b478 <__ssputs_r>:
 800b478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b47c:	688e      	ldr	r6, [r1, #8]
 800b47e:	461f      	mov	r7, r3
 800b480:	42be      	cmp	r6, r7
 800b482:	680b      	ldr	r3, [r1, #0]
 800b484:	4682      	mov	sl, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4690      	mov	r8, r2
 800b48a:	d82d      	bhi.n	800b4e8 <__ssputs_r+0x70>
 800b48c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b490:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b494:	d026      	beq.n	800b4e4 <__ssputs_r+0x6c>
 800b496:	6965      	ldr	r5, [r4, #20]
 800b498:	6909      	ldr	r1, [r1, #16]
 800b49a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b49e:	eba3 0901 	sub.w	r9, r3, r1
 800b4a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4a6:	1c7b      	adds	r3, r7, #1
 800b4a8:	444b      	add	r3, r9
 800b4aa:	106d      	asrs	r5, r5, #1
 800b4ac:	429d      	cmp	r5, r3
 800b4ae:	bf38      	it	cc
 800b4b0:	461d      	movcc	r5, r3
 800b4b2:	0553      	lsls	r3, r2, #21
 800b4b4:	d527      	bpl.n	800b506 <__ssputs_r+0x8e>
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7ff fde2 	bl	800b080 <_malloc_r>
 800b4bc:	4606      	mov	r6, r0
 800b4be:	b360      	cbz	r0, 800b51a <__ssputs_r+0xa2>
 800b4c0:	6921      	ldr	r1, [r4, #16]
 800b4c2:	464a      	mov	r2, r9
 800b4c4:	f7ff ff80 	bl	800b3c8 <memcpy>
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	6126      	str	r6, [r4, #16]
 800b4d6:	6165      	str	r5, [r4, #20]
 800b4d8:	444e      	add	r6, r9
 800b4da:	eba5 0509 	sub.w	r5, r5, r9
 800b4de:	6026      	str	r6, [r4, #0]
 800b4e0:	60a5      	str	r5, [r4, #8]
 800b4e2:	463e      	mov	r6, r7
 800b4e4:	42be      	cmp	r6, r7
 800b4e6:	d900      	bls.n	800b4ea <__ssputs_r+0x72>
 800b4e8:	463e      	mov	r6, r7
 800b4ea:	6820      	ldr	r0, [r4, #0]
 800b4ec:	4632      	mov	r2, r6
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	f000 faa8 	bl	800ba44 <memmove>
 800b4f4:	68a3      	ldr	r3, [r4, #8]
 800b4f6:	1b9b      	subs	r3, r3, r6
 800b4f8:	60a3      	str	r3, [r4, #8]
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	4433      	add	r3, r6
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	2000      	movs	r0, #0
 800b502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b506:	462a      	mov	r2, r5
 800b508:	f000 fab6 	bl	800ba78 <_realloc_r>
 800b50c:	4606      	mov	r6, r0
 800b50e:	2800      	cmp	r0, #0
 800b510:	d1e0      	bne.n	800b4d4 <__ssputs_r+0x5c>
 800b512:	6921      	ldr	r1, [r4, #16]
 800b514:	4650      	mov	r0, sl
 800b516:	f7ff ff65 	bl	800b3e4 <_free_r>
 800b51a:	230c      	movs	r3, #12
 800b51c:	f8ca 3000 	str.w	r3, [sl]
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	e7e9      	b.n	800b502 <__ssputs_r+0x8a>
	...

0800b530 <_svfiprintf_r>:
 800b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b534:	4698      	mov	r8, r3
 800b536:	898b      	ldrh	r3, [r1, #12]
 800b538:	061b      	lsls	r3, r3, #24
 800b53a:	b09d      	sub	sp, #116	@ 0x74
 800b53c:	4607      	mov	r7, r0
 800b53e:	460d      	mov	r5, r1
 800b540:	4614      	mov	r4, r2
 800b542:	d510      	bpl.n	800b566 <_svfiprintf_r+0x36>
 800b544:	690b      	ldr	r3, [r1, #16]
 800b546:	b973      	cbnz	r3, 800b566 <_svfiprintf_r+0x36>
 800b548:	2140      	movs	r1, #64	@ 0x40
 800b54a:	f7ff fd99 	bl	800b080 <_malloc_r>
 800b54e:	6028      	str	r0, [r5, #0]
 800b550:	6128      	str	r0, [r5, #16]
 800b552:	b930      	cbnz	r0, 800b562 <_svfiprintf_r+0x32>
 800b554:	230c      	movs	r3, #12
 800b556:	603b      	str	r3, [r7, #0]
 800b558:	f04f 30ff 	mov.w	r0, #4294967295
 800b55c:	b01d      	add	sp, #116	@ 0x74
 800b55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b562:	2340      	movs	r3, #64	@ 0x40
 800b564:	616b      	str	r3, [r5, #20]
 800b566:	2300      	movs	r3, #0
 800b568:	9309      	str	r3, [sp, #36]	@ 0x24
 800b56a:	2320      	movs	r3, #32
 800b56c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b570:	f8cd 800c 	str.w	r8, [sp, #12]
 800b574:	2330      	movs	r3, #48	@ 0x30
 800b576:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b714 <_svfiprintf_r+0x1e4>
 800b57a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b57e:	f04f 0901 	mov.w	r9, #1
 800b582:	4623      	mov	r3, r4
 800b584:	469a      	mov	sl, r3
 800b586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58a:	b10a      	cbz	r2, 800b590 <_svfiprintf_r+0x60>
 800b58c:	2a25      	cmp	r2, #37	@ 0x25
 800b58e:	d1f9      	bne.n	800b584 <_svfiprintf_r+0x54>
 800b590:	ebba 0b04 	subs.w	fp, sl, r4
 800b594:	d00b      	beq.n	800b5ae <_svfiprintf_r+0x7e>
 800b596:	465b      	mov	r3, fp
 800b598:	4622      	mov	r2, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ff6b 	bl	800b478 <__ssputs_r>
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f000 80a7 	beq.w	800b6f6 <_svfiprintf_r+0x1c6>
 800b5a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5aa:	445a      	add	r2, fp
 800b5ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 809f 	beq.w	800b6f6 <_svfiprintf_r+0x1c6>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c2:	f10a 0a01 	add.w	sl, sl, #1
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	9307      	str	r3, [sp, #28]
 800b5ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5d0:	4654      	mov	r4, sl
 800b5d2:	2205      	movs	r2, #5
 800b5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d8:	484e      	ldr	r0, [pc, #312]	@ (800b714 <_svfiprintf_r+0x1e4>)
 800b5da:	f7f4 fe89 	bl	80002f0 <memchr>
 800b5de:	9a04      	ldr	r2, [sp, #16]
 800b5e0:	b9d8      	cbnz	r0, 800b61a <_svfiprintf_r+0xea>
 800b5e2:	06d0      	lsls	r0, r2, #27
 800b5e4:	bf44      	itt	mi
 800b5e6:	2320      	movmi	r3, #32
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5ec:	0711      	lsls	r1, r2, #28
 800b5ee:	bf44      	itt	mi
 800b5f0:	232b      	movmi	r3, #43	@ 0x2b
 800b5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5fc:	d015      	beq.n	800b62a <_svfiprintf_r+0xfa>
 800b5fe:	9a07      	ldr	r2, [sp, #28]
 800b600:	4654      	mov	r4, sl
 800b602:	2000      	movs	r0, #0
 800b604:	f04f 0c0a 	mov.w	ip, #10
 800b608:	4621      	mov	r1, r4
 800b60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b60e:	3b30      	subs	r3, #48	@ 0x30
 800b610:	2b09      	cmp	r3, #9
 800b612:	d94b      	bls.n	800b6ac <_svfiprintf_r+0x17c>
 800b614:	b1b0      	cbz	r0, 800b644 <_svfiprintf_r+0x114>
 800b616:	9207      	str	r2, [sp, #28]
 800b618:	e014      	b.n	800b644 <_svfiprintf_r+0x114>
 800b61a:	eba0 0308 	sub.w	r3, r0, r8
 800b61e:	fa09 f303 	lsl.w	r3, r9, r3
 800b622:	4313      	orrs	r3, r2
 800b624:	9304      	str	r3, [sp, #16]
 800b626:	46a2      	mov	sl, r4
 800b628:	e7d2      	b.n	800b5d0 <_svfiprintf_r+0xa0>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	1d19      	adds	r1, r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	9103      	str	r1, [sp, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfbb      	ittet	lt
 800b636:	425b      	neglt	r3, r3
 800b638:	f042 0202 	orrlt.w	r2, r2, #2
 800b63c:	9307      	strge	r3, [sp, #28]
 800b63e:	9307      	strlt	r3, [sp, #28]
 800b640:	bfb8      	it	lt
 800b642:	9204      	strlt	r2, [sp, #16]
 800b644:	7823      	ldrb	r3, [r4, #0]
 800b646:	2b2e      	cmp	r3, #46	@ 0x2e
 800b648:	d10a      	bne.n	800b660 <_svfiprintf_r+0x130>
 800b64a:	7863      	ldrb	r3, [r4, #1]
 800b64c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b64e:	d132      	bne.n	800b6b6 <_svfiprintf_r+0x186>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	1d1a      	adds	r2, r3, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	9203      	str	r2, [sp, #12]
 800b658:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b65c:	3402      	adds	r4, #2
 800b65e:	9305      	str	r3, [sp, #20]
 800b660:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b724 <_svfiprintf_r+0x1f4>
 800b664:	7821      	ldrb	r1, [r4, #0]
 800b666:	2203      	movs	r2, #3
 800b668:	4650      	mov	r0, sl
 800b66a:	f7f4 fe41 	bl	80002f0 <memchr>
 800b66e:	b138      	cbz	r0, 800b680 <_svfiprintf_r+0x150>
 800b670:	9b04      	ldr	r3, [sp, #16]
 800b672:	eba0 000a 	sub.w	r0, r0, sl
 800b676:	2240      	movs	r2, #64	@ 0x40
 800b678:	4082      	lsls	r2, r0
 800b67a:	4313      	orrs	r3, r2
 800b67c:	3401      	adds	r4, #1
 800b67e:	9304      	str	r3, [sp, #16]
 800b680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b684:	4824      	ldr	r0, [pc, #144]	@ (800b718 <_svfiprintf_r+0x1e8>)
 800b686:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b68a:	2206      	movs	r2, #6
 800b68c:	f7f4 fe30 	bl	80002f0 <memchr>
 800b690:	2800      	cmp	r0, #0
 800b692:	d036      	beq.n	800b702 <_svfiprintf_r+0x1d2>
 800b694:	4b21      	ldr	r3, [pc, #132]	@ (800b71c <_svfiprintf_r+0x1ec>)
 800b696:	bb1b      	cbnz	r3, 800b6e0 <_svfiprintf_r+0x1b0>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	3307      	adds	r3, #7
 800b69c:	f023 0307 	bic.w	r3, r3, #7
 800b6a0:	3308      	adds	r3, #8
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6a6:	4433      	add	r3, r6
 800b6a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6aa:	e76a      	b.n	800b582 <_svfiprintf_r+0x52>
 800b6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6b0:	460c      	mov	r4, r1
 800b6b2:	2001      	movs	r0, #1
 800b6b4:	e7a8      	b.n	800b608 <_svfiprintf_r+0xd8>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	3401      	adds	r4, #1
 800b6ba:	9305      	str	r3, [sp, #20]
 800b6bc:	4619      	mov	r1, r3
 800b6be:	f04f 0c0a 	mov.w	ip, #10
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6c8:	3a30      	subs	r2, #48	@ 0x30
 800b6ca:	2a09      	cmp	r2, #9
 800b6cc:	d903      	bls.n	800b6d6 <_svfiprintf_r+0x1a6>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0c6      	beq.n	800b660 <_svfiprintf_r+0x130>
 800b6d2:	9105      	str	r1, [sp, #20]
 800b6d4:	e7c4      	b.n	800b660 <_svfiprintf_r+0x130>
 800b6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6da:	4604      	mov	r4, r0
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e7f0      	b.n	800b6c2 <_svfiprintf_r+0x192>
 800b6e0:	ab03      	add	r3, sp, #12
 800b6e2:	9300      	str	r3, [sp, #0]
 800b6e4:	462a      	mov	r2, r5
 800b6e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b720 <_svfiprintf_r+0x1f0>)
 800b6e8:	a904      	add	r1, sp, #16
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f3af 8000 	nop.w
 800b6f0:	1c42      	adds	r2, r0, #1
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	d1d6      	bne.n	800b6a4 <_svfiprintf_r+0x174>
 800b6f6:	89ab      	ldrh	r3, [r5, #12]
 800b6f8:	065b      	lsls	r3, r3, #25
 800b6fa:	f53f af2d 	bmi.w	800b558 <_svfiprintf_r+0x28>
 800b6fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b700:	e72c      	b.n	800b55c <_svfiprintf_r+0x2c>
 800b702:	ab03      	add	r3, sp, #12
 800b704:	9300      	str	r3, [sp, #0]
 800b706:	462a      	mov	r2, r5
 800b708:	4b05      	ldr	r3, [pc, #20]	@ (800b720 <_svfiprintf_r+0x1f0>)
 800b70a:	a904      	add	r1, sp, #16
 800b70c:	4638      	mov	r0, r7
 800b70e:	f000 f879 	bl	800b804 <_printf_i>
 800b712:	e7ed      	b.n	800b6f0 <_svfiprintf_r+0x1c0>
 800b714:	0800bd40 	.word	0x0800bd40
 800b718:	0800bd4a 	.word	0x0800bd4a
 800b71c:	00000000 	.word	0x00000000
 800b720:	0800b479 	.word	0x0800b479
 800b724:	0800bd46 	.word	0x0800bd46

0800b728 <_printf_common>:
 800b728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b72c:	4616      	mov	r6, r2
 800b72e:	4698      	mov	r8, r3
 800b730:	688a      	ldr	r2, [r1, #8]
 800b732:	690b      	ldr	r3, [r1, #16]
 800b734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b738:	4293      	cmp	r3, r2
 800b73a:	bfb8      	it	lt
 800b73c:	4613      	movlt	r3, r2
 800b73e:	6033      	str	r3, [r6, #0]
 800b740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b744:	4607      	mov	r7, r0
 800b746:	460c      	mov	r4, r1
 800b748:	b10a      	cbz	r2, 800b74e <_printf_common+0x26>
 800b74a:	3301      	adds	r3, #1
 800b74c:	6033      	str	r3, [r6, #0]
 800b74e:	6823      	ldr	r3, [r4, #0]
 800b750:	0699      	lsls	r1, r3, #26
 800b752:	bf42      	ittt	mi
 800b754:	6833      	ldrmi	r3, [r6, #0]
 800b756:	3302      	addmi	r3, #2
 800b758:	6033      	strmi	r3, [r6, #0]
 800b75a:	6825      	ldr	r5, [r4, #0]
 800b75c:	f015 0506 	ands.w	r5, r5, #6
 800b760:	d106      	bne.n	800b770 <_printf_common+0x48>
 800b762:	f104 0a19 	add.w	sl, r4, #25
 800b766:	68e3      	ldr	r3, [r4, #12]
 800b768:	6832      	ldr	r2, [r6, #0]
 800b76a:	1a9b      	subs	r3, r3, r2
 800b76c:	42ab      	cmp	r3, r5
 800b76e:	dc26      	bgt.n	800b7be <_printf_common+0x96>
 800b770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b774:	6822      	ldr	r2, [r4, #0]
 800b776:	3b00      	subs	r3, #0
 800b778:	bf18      	it	ne
 800b77a:	2301      	movne	r3, #1
 800b77c:	0692      	lsls	r2, r2, #26
 800b77e:	d42b      	bmi.n	800b7d8 <_printf_common+0xb0>
 800b780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b784:	4641      	mov	r1, r8
 800b786:	4638      	mov	r0, r7
 800b788:	47c8      	blx	r9
 800b78a:	3001      	adds	r0, #1
 800b78c:	d01e      	beq.n	800b7cc <_printf_common+0xa4>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	6922      	ldr	r2, [r4, #16]
 800b792:	f003 0306 	and.w	r3, r3, #6
 800b796:	2b04      	cmp	r3, #4
 800b798:	bf02      	ittt	eq
 800b79a:	68e5      	ldreq	r5, [r4, #12]
 800b79c:	6833      	ldreq	r3, [r6, #0]
 800b79e:	1aed      	subeq	r5, r5, r3
 800b7a0:	68a3      	ldr	r3, [r4, #8]
 800b7a2:	bf0c      	ite	eq
 800b7a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7a8:	2500      	movne	r5, #0
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	bfc4      	itt	gt
 800b7ae:	1a9b      	subgt	r3, r3, r2
 800b7b0:	18ed      	addgt	r5, r5, r3
 800b7b2:	2600      	movs	r6, #0
 800b7b4:	341a      	adds	r4, #26
 800b7b6:	42b5      	cmp	r5, r6
 800b7b8:	d11a      	bne.n	800b7f0 <_printf_common+0xc8>
 800b7ba:	2000      	movs	r0, #0
 800b7bc:	e008      	b.n	800b7d0 <_printf_common+0xa8>
 800b7be:	2301      	movs	r3, #1
 800b7c0:	4652      	mov	r2, sl
 800b7c2:	4641      	mov	r1, r8
 800b7c4:	4638      	mov	r0, r7
 800b7c6:	47c8      	blx	r9
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d103      	bne.n	800b7d4 <_printf_common+0xac>
 800b7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d4:	3501      	adds	r5, #1
 800b7d6:	e7c6      	b.n	800b766 <_printf_common+0x3e>
 800b7d8:	18e1      	adds	r1, r4, r3
 800b7da:	1c5a      	adds	r2, r3, #1
 800b7dc:	2030      	movs	r0, #48	@ 0x30
 800b7de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b7e2:	4422      	add	r2, r4
 800b7e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b7e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b7ec:	3302      	adds	r3, #2
 800b7ee:	e7c7      	b.n	800b780 <_printf_common+0x58>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4622      	mov	r2, r4
 800b7f4:	4641      	mov	r1, r8
 800b7f6:	4638      	mov	r0, r7
 800b7f8:	47c8      	blx	r9
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	d0e6      	beq.n	800b7cc <_printf_common+0xa4>
 800b7fe:	3601      	adds	r6, #1
 800b800:	e7d9      	b.n	800b7b6 <_printf_common+0x8e>
	...

0800b804 <_printf_i>:
 800b804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b808:	7e0f      	ldrb	r7, [r1, #24]
 800b80a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b80c:	2f78      	cmp	r7, #120	@ 0x78
 800b80e:	4691      	mov	r9, r2
 800b810:	4680      	mov	r8, r0
 800b812:	460c      	mov	r4, r1
 800b814:	469a      	mov	sl, r3
 800b816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b81a:	d807      	bhi.n	800b82c <_printf_i+0x28>
 800b81c:	2f62      	cmp	r7, #98	@ 0x62
 800b81e:	d80a      	bhi.n	800b836 <_printf_i+0x32>
 800b820:	2f00      	cmp	r7, #0
 800b822:	f000 80d2 	beq.w	800b9ca <_printf_i+0x1c6>
 800b826:	2f58      	cmp	r7, #88	@ 0x58
 800b828:	f000 80b9 	beq.w	800b99e <_printf_i+0x19a>
 800b82c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b834:	e03a      	b.n	800b8ac <_printf_i+0xa8>
 800b836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b83a:	2b15      	cmp	r3, #21
 800b83c:	d8f6      	bhi.n	800b82c <_printf_i+0x28>
 800b83e:	a101      	add	r1, pc, #4	@ (adr r1, 800b844 <_printf_i+0x40>)
 800b840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b844:	0800b89d 	.word	0x0800b89d
 800b848:	0800b8b1 	.word	0x0800b8b1
 800b84c:	0800b82d 	.word	0x0800b82d
 800b850:	0800b82d 	.word	0x0800b82d
 800b854:	0800b82d 	.word	0x0800b82d
 800b858:	0800b82d 	.word	0x0800b82d
 800b85c:	0800b8b1 	.word	0x0800b8b1
 800b860:	0800b82d 	.word	0x0800b82d
 800b864:	0800b82d 	.word	0x0800b82d
 800b868:	0800b82d 	.word	0x0800b82d
 800b86c:	0800b82d 	.word	0x0800b82d
 800b870:	0800b9b1 	.word	0x0800b9b1
 800b874:	0800b8db 	.word	0x0800b8db
 800b878:	0800b96b 	.word	0x0800b96b
 800b87c:	0800b82d 	.word	0x0800b82d
 800b880:	0800b82d 	.word	0x0800b82d
 800b884:	0800b9d3 	.word	0x0800b9d3
 800b888:	0800b82d 	.word	0x0800b82d
 800b88c:	0800b8db 	.word	0x0800b8db
 800b890:	0800b82d 	.word	0x0800b82d
 800b894:	0800b82d 	.word	0x0800b82d
 800b898:	0800b973 	.word	0x0800b973
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	1d1a      	adds	r2, r3, #4
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	6032      	str	r2, [r6, #0]
 800b8a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e09d      	b.n	800b9ec <_printf_i+0x1e8>
 800b8b0:	6833      	ldr	r3, [r6, #0]
 800b8b2:	6820      	ldr	r0, [r4, #0]
 800b8b4:	1d19      	adds	r1, r3, #4
 800b8b6:	6031      	str	r1, [r6, #0]
 800b8b8:	0606      	lsls	r6, r0, #24
 800b8ba:	d501      	bpl.n	800b8c0 <_printf_i+0xbc>
 800b8bc:	681d      	ldr	r5, [r3, #0]
 800b8be:	e003      	b.n	800b8c8 <_printf_i+0xc4>
 800b8c0:	0645      	lsls	r5, r0, #25
 800b8c2:	d5fb      	bpl.n	800b8bc <_printf_i+0xb8>
 800b8c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	da03      	bge.n	800b8d4 <_printf_i+0xd0>
 800b8cc:	232d      	movs	r3, #45	@ 0x2d
 800b8ce:	426d      	negs	r5, r5
 800b8d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d4:	4859      	ldr	r0, [pc, #356]	@ (800ba3c <_printf_i+0x238>)
 800b8d6:	230a      	movs	r3, #10
 800b8d8:	e011      	b.n	800b8fe <_printf_i+0xfa>
 800b8da:	6821      	ldr	r1, [r4, #0]
 800b8dc:	6833      	ldr	r3, [r6, #0]
 800b8de:	0608      	lsls	r0, r1, #24
 800b8e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b8e4:	d402      	bmi.n	800b8ec <_printf_i+0xe8>
 800b8e6:	0649      	lsls	r1, r1, #25
 800b8e8:	bf48      	it	mi
 800b8ea:	b2ad      	uxthmi	r5, r5
 800b8ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800b8ee:	4853      	ldr	r0, [pc, #332]	@ (800ba3c <_printf_i+0x238>)
 800b8f0:	6033      	str	r3, [r6, #0]
 800b8f2:	bf14      	ite	ne
 800b8f4:	230a      	movne	r3, #10
 800b8f6:	2308      	moveq	r3, #8
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b8fe:	6866      	ldr	r6, [r4, #4]
 800b900:	60a6      	str	r6, [r4, #8]
 800b902:	2e00      	cmp	r6, #0
 800b904:	bfa2      	ittt	ge
 800b906:	6821      	ldrge	r1, [r4, #0]
 800b908:	f021 0104 	bicge.w	r1, r1, #4
 800b90c:	6021      	strge	r1, [r4, #0]
 800b90e:	b90d      	cbnz	r5, 800b914 <_printf_i+0x110>
 800b910:	2e00      	cmp	r6, #0
 800b912:	d04b      	beq.n	800b9ac <_printf_i+0x1a8>
 800b914:	4616      	mov	r6, r2
 800b916:	fbb5 f1f3 	udiv	r1, r5, r3
 800b91a:	fb03 5711 	mls	r7, r3, r1, r5
 800b91e:	5dc7      	ldrb	r7, [r0, r7]
 800b920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b924:	462f      	mov	r7, r5
 800b926:	42bb      	cmp	r3, r7
 800b928:	460d      	mov	r5, r1
 800b92a:	d9f4      	bls.n	800b916 <_printf_i+0x112>
 800b92c:	2b08      	cmp	r3, #8
 800b92e:	d10b      	bne.n	800b948 <_printf_i+0x144>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	07df      	lsls	r7, r3, #31
 800b934:	d508      	bpl.n	800b948 <_printf_i+0x144>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	6861      	ldr	r1, [r4, #4]
 800b93a:	4299      	cmp	r1, r3
 800b93c:	bfde      	ittt	le
 800b93e:	2330      	movle	r3, #48	@ 0x30
 800b940:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b944:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b948:	1b92      	subs	r2, r2, r6
 800b94a:	6122      	str	r2, [r4, #16]
 800b94c:	f8cd a000 	str.w	sl, [sp]
 800b950:	464b      	mov	r3, r9
 800b952:	aa03      	add	r2, sp, #12
 800b954:	4621      	mov	r1, r4
 800b956:	4640      	mov	r0, r8
 800b958:	f7ff fee6 	bl	800b728 <_printf_common>
 800b95c:	3001      	adds	r0, #1
 800b95e:	d14a      	bne.n	800b9f6 <_printf_i+0x1f2>
 800b960:	f04f 30ff 	mov.w	r0, #4294967295
 800b964:	b004      	add	sp, #16
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	6823      	ldr	r3, [r4, #0]
 800b96c:	f043 0320 	orr.w	r3, r3, #32
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	4833      	ldr	r0, [pc, #204]	@ (800ba40 <_printf_i+0x23c>)
 800b974:	2778      	movs	r7, #120	@ 0x78
 800b976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b97a:	6823      	ldr	r3, [r4, #0]
 800b97c:	6831      	ldr	r1, [r6, #0]
 800b97e:	061f      	lsls	r7, r3, #24
 800b980:	f851 5b04 	ldr.w	r5, [r1], #4
 800b984:	d402      	bmi.n	800b98c <_printf_i+0x188>
 800b986:	065f      	lsls	r7, r3, #25
 800b988:	bf48      	it	mi
 800b98a:	b2ad      	uxthmi	r5, r5
 800b98c:	6031      	str	r1, [r6, #0]
 800b98e:	07d9      	lsls	r1, r3, #31
 800b990:	bf44      	itt	mi
 800b992:	f043 0320 	orrmi.w	r3, r3, #32
 800b996:	6023      	strmi	r3, [r4, #0]
 800b998:	b11d      	cbz	r5, 800b9a2 <_printf_i+0x19e>
 800b99a:	2310      	movs	r3, #16
 800b99c:	e7ac      	b.n	800b8f8 <_printf_i+0xf4>
 800b99e:	4827      	ldr	r0, [pc, #156]	@ (800ba3c <_printf_i+0x238>)
 800b9a0:	e7e9      	b.n	800b976 <_printf_i+0x172>
 800b9a2:	6823      	ldr	r3, [r4, #0]
 800b9a4:	f023 0320 	bic.w	r3, r3, #32
 800b9a8:	6023      	str	r3, [r4, #0]
 800b9aa:	e7f6      	b.n	800b99a <_printf_i+0x196>
 800b9ac:	4616      	mov	r6, r2
 800b9ae:	e7bd      	b.n	800b92c <_printf_i+0x128>
 800b9b0:	6833      	ldr	r3, [r6, #0]
 800b9b2:	6825      	ldr	r5, [r4, #0]
 800b9b4:	6961      	ldr	r1, [r4, #20]
 800b9b6:	1d18      	adds	r0, r3, #4
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	062e      	lsls	r6, r5, #24
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	d501      	bpl.n	800b9c4 <_printf_i+0x1c0>
 800b9c0:	6019      	str	r1, [r3, #0]
 800b9c2:	e002      	b.n	800b9ca <_printf_i+0x1c6>
 800b9c4:	0668      	lsls	r0, r5, #25
 800b9c6:	d5fb      	bpl.n	800b9c0 <_printf_i+0x1bc>
 800b9c8:	8019      	strh	r1, [r3, #0]
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	6123      	str	r3, [r4, #16]
 800b9ce:	4616      	mov	r6, r2
 800b9d0:	e7bc      	b.n	800b94c <_printf_i+0x148>
 800b9d2:	6833      	ldr	r3, [r6, #0]
 800b9d4:	1d1a      	adds	r2, r3, #4
 800b9d6:	6032      	str	r2, [r6, #0]
 800b9d8:	681e      	ldr	r6, [r3, #0]
 800b9da:	6862      	ldr	r2, [r4, #4]
 800b9dc:	2100      	movs	r1, #0
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7f4 fc86 	bl	80002f0 <memchr>
 800b9e4:	b108      	cbz	r0, 800b9ea <_printf_i+0x1e6>
 800b9e6:	1b80      	subs	r0, r0, r6
 800b9e8:	6060      	str	r0, [r4, #4]
 800b9ea:	6863      	ldr	r3, [r4, #4]
 800b9ec:	6123      	str	r3, [r4, #16]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9f4:	e7aa      	b.n	800b94c <_printf_i+0x148>
 800b9f6:	6923      	ldr	r3, [r4, #16]
 800b9f8:	4632      	mov	r2, r6
 800b9fa:	4649      	mov	r1, r9
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	47d0      	blx	sl
 800ba00:	3001      	adds	r0, #1
 800ba02:	d0ad      	beq.n	800b960 <_printf_i+0x15c>
 800ba04:	6823      	ldr	r3, [r4, #0]
 800ba06:	079b      	lsls	r3, r3, #30
 800ba08:	d413      	bmi.n	800ba32 <_printf_i+0x22e>
 800ba0a:	68e0      	ldr	r0, [r4, #12]
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	4298      	cmp	r0, r3
 800ba10:	bfb8      	it	lt
 800ba12:	4618      	movlt	r0, r3
 800ba14:	e7a6      	b.n	800b964 <_printf_i+0x160>
 800ba16:	2301      	movs	r3, #1
 800ba18:	4632      	mov	r2, r6
 800ba1a:	4649      	mov	r1, r9
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	47d0      	blx	sl
 800ba20:	3001      	adds	r0, #1
 800ba22:	d09d      	beq.n	800b960 <_printf_i+0x15c>
 800ba24:	3501      	adds	r5, #1
 800ba26:	68e3      	ldr	r3, [r4, #12]
 800ba28:	9903      	ldr	r1, [sp, #12]
 800ba2a:	1a5b      	subs	r3, r3, r1
 800ba2c:	42ab      	cmp	r3, r5
 800ba2e:	dcf2      	bgt.n	800ba16 <_printf_i+0x212>
 800ba30:	e7eb      	b.n	800ba0a <_printf_i+0x206>
 800ba32:	2500      	movs	r5, #0
 800ba34:	f104 0619 	add.w	r6, r4, #25
 800ba38:	e7f5      	b.n	800ba26 <_printf_i+0x222>
 800ba3a:	bf00      	nop
 800ba3c:	0800bd51 	.word	0x0800bd51
 800ba40:	0800bd62 	.word	0x0800bd62

0800ba44 <memmove>:
 800ba44:	4288      	cmp	r0, r1
 800ba46:	b510      	push	{r4, lr}
 800ba48:	eb01 0402 	add.w	r4, r1, r2
 800ba4c:	d902      	bls.n	800ba54 <memmove+0x10>
 800ba4e:	4284      	cmp	r4, r0
 800ba50:	4623      	mov	r3, r4
 800ba52:	d807      	bhi.n	800ba64 <memmove+0x20>
 800ba54:	1e43      	subs	r3, r0, #1
 800ba56:	42a1      	cmp	r1, r4
 800ba58:	d008      	beq.n	800ba6c <memmove+0x28>
 800ba5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba62:	e7f8      	b.n	800ba56 <memmove+0x12>
 800ba64:	4402      	add	r2, r0
 800ba66:	4601      	mov	r1, r0
 800ba68:	428a      	cmp	r2, r1
 800ba6a:	d100      	bne.n	800ba6e <memmove+0x2a>
 800ba6c:	bd10      	pop	{r4, pc}
 800ba6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba76:	e7f7      	b.n	800ba68 <memmove+0x24>

0800ba78 <_realloc_r>:
 800ba78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba7c:	4680      	mov	r8, r0
 800ba7e:	4615      	mov	r5, r2
 800ba80:	460c      	mov	r4, r1
 800ba82:	b921      	cbnz	r1, 800ba8e <_realloc_r+0x16>
 800ba84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	4611      	mov	r1, r2
 800ba8a:	f7ff baf9 	b.w	800b080 <_malloc_r>
 800ba8e:	b92a      	cbnz	r2, 800ba9c <_realloc_r+0x24>
 800ba90:	f7ff fca8 	bl	800b3e4 <_free_r>
 800ba94:	2400      	movs	r4, #0
 800ba96:	4620      	mov	r0, r4
 800ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9c:	f000 f81a 	bl	800bad4 <_malloc_usable_size_r>
 800baa0:	4285      	cmp	r5, r0
 800baa2:	4606      	mov	r6, r0
 800baa4:	d802      	bhi.n	800baac <_realloc_r+0x34>
 800baa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800baaa:	d8f4      	bhi.n	800ba96 <_realloc_r+0x1e>
 800baac:	4629      	mov	r1, r5
 800baae:	4640      	mov	r0, r8
 800bab0:	f7ff fae6 	bl	800b080 <_malloc_r>
 800bab4:	4607      	mov	r7, r0
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d0ec      	beq.n	800ba94 <_realloc_r+0x1c>
 800baba:	42b5      	cmp	r5, r6
 800babc:	462a      	mov	r2, r5
 800babe:	4621      	mov	r1, r4
 800bac0:	bf28      	it	cs
 800bac2:	4632      	movcs	r2, r6
 800bac4:	f7ff fc80 	bl	800b3c8 <memcpy>
 800bac8:	4621      	mov	r1, r4
 800baca:	4640      	mov	r0, r8
 800bacc:	f7ff fc8a 	bl	800b3e4 <_free_r>
 800bad0:	463c      	mov	r4, r7
 800bad2:	e7e0      	b.n	800ba96 <_realloc_r+0x1e>

0800bad4 <_malloc_usable_size_r>:
 800bad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad8:	1f18      	subs	r0, r3, #4
 800bada:	2b00      	cmp	r3, #0
 800badc:	bfbc      	itt	lt
 800bade:	580b      	ldrlt	r3, [r1, r0]
 800bae0:	18c0      	addlt	r0, r0, r3
 800bae2:	4770      	bx	lr

0800bae4 <_init>:
 800bae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae6:	bf00      	nop
 800bae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baea:	bc08      	pop	{r3}
 800baec:	469e      	mov	lr, r3
 800baee:	4770      	bx	lr

0800baf0 <_fini>:
 800baf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf2:	bf00      	nop
 800baf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf6:	bc08      	pop	{r3}
 800baf8:	469e      	mov	lr, r3
 800bafa:	4770      	bx	lr
