
FlightComputer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009b68  08009b68  0000ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009c60  08009c60  0000ac60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009c68  08009c68  0000ac68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009c6c  08009c6c  0000ac6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08009c70  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  08009cd4  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  08009d34  0000b0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004820  24000124  08009d94  0000b124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004944  08009d94  0000b944  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d2bb  00000000  00000000  0000b152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050e1  00000000  00000000  0003840d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  0003d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015ba  00000000  00000000  0003f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009407  00000000  00000000  000406ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025e61  00000000  00000000  00049ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00178f23  00000000  00000000  0006f922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e8845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db4  00000000  00000000  001e8888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001f063c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009b50 	.word	0x08009b50

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	08009b50 	.word	0x08009b50

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <_ZN3IMU8vIMUtaskEPKv>:
IMU::~IMU() {
	// TODO Auto-generated destructor stub
}

void IMU::vIMUtask(void const* argument)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800068e:	4809      	ldr	r0, [pc, #36]	@ (80006b4 <_ZN3IMU8vIMUtaskEPKv+0x34>)
 8000690:	f001 fe2a 	bl	80022e8 <HAL_GPIO_WritePin>

		osDelay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000698:	f006 fdb8 	bl	800720c <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <_ZN3IMU8vIMUtaskEPKv+0x34>)
 80006a4:	f001 fe20 	bl	80022e8 <HAL_GPIO_WritePin>

		osDelay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006ac:	f006 fdae 	bl	800720c <osDelay>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET);
 80006b0:	bf00      	nop
 80006b2:	e7e9      	b.n	8000688 <_ZN3IMU8vIMUtaskEPKv+0x8>
 80006b4:	58020400 	.word	0x58020400

080006b8 <_Z4LOGuPKcz>:
extern UART_HandleTypeDef huart2;



void LOGu(const char *format, ...)
{
 80006b8:	b40f      	push	{r0, r1, r2, r3}
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b09a      	sub	sp, #104	@ 0x68
 80006be:	af00      	add	r7, sp, #0
    char message[100]; // Mesajı tutacak bir dizi
    va_list args; // Değişken argümanlar için
    va_start(args, format); // Argüman listesini başlat
 80006c0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80006c4:	603b      	str	r3, [r7, #0]

    // Mesajı formatlayın
    vsnprintf(message, sizeof(message), format, args);
 80006c6:	1d38      	adds	r0, r7, #4
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80006cc:	2164      	movs	r1, #100	@ 0x64
 80006ce:	f008 fdc5 	bl	800925c <vsniprintf>

    va_end(args); // Argüman listesini sonlandır

    // Mesajı UART üzerinden gönderin
    if (HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), 1000) != HAL_OK)
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fe03 	bl	80002e0 <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	1d39      	adds	r1, r7, #4
 80006e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <_Z4LOGuPKcz+0x44>)
 80006e6:	f005 f905 	bl	80058f4 <HAL_UART_Transmit>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
    {
        // Hata durumu yönetimi
    }
}
 80006ee:	bf00      	nop
 80006f0:	3768      	adds	r7, #104	@ 0x68
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006f8:	b004      	add	sp, #16
 80006fa:	4770      	bx	lr
 80006fc:	240004c8 	.word	0x240004c8

08000700 <_ZN19SistemYapilandiriciC1Ev>:
#include "LOG.h"
/**
 * @brief SistemYapilandirici constructor
 */

 SistemYapilandirici::SistemYapilandirici()
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
{
	 //Instance();
	islevBaslat();
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f805 	bl	8000718 <_ZN19SistemYapilandirici11islevBaslatEv>
}
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <_ZN19SistemYapilandirici11islevBaslatEv>:

/**
 * @brief Sistemde olan tasklari baslatir
 */
void SistemYapilandirici::islevBaslat()
{
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b08a      	sub	sp, #40	@ 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]


    /* definition and creation of IMUtask */
    osThreadId IMUtaskHandle;
    osThreadDef(IMUtask, IMU::vIMUtask, osPriorityNormal, 0, taskSize);
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <_ZN19SistemYapilandirici11islevBaslatEv+0x48>)
 8000722:	f107 0408 	add.w	r4, r7, #8
 8000726:	461d      	mov	r5, r3
 8000728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000730:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    IMUtaskHandle = osThreadCreate(osThread(IMUtask), NULL);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f006 fd1a 	bl	8007174 <osThreadCreate>
 8000740:	6278      	str	r0, [r7, #36]	@ 0x24
    // Task'ın başarıyla oluşturulup oluşturulmadığını kontrol et
    if (IMUtaskHandle == NULL)
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	2b00      	cmp	r3, #0
 8000746:	d002      	beq.n	800074e <_ZN19SistemYapilandirici11islevBaslatEv+0x36>
    	// Hata yönetimi

    }
    else
    {
    	LOGu("IMUtask olusturuldu \n");
 8000748:	4806      	ldr	r0, [pc, #24]	@ (8000764 <_ZN19SistemYapilandirici11islevBaslatEv+0x4c>)
 800074a:	f7ff ffb5 	bl	80006b8 <_Z4LOGuPKcz>
	    else
	    {

	    }
#endif
	    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2102      	movs	r1, #2
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <_ZN19SistemYapilandirici11islevBaslatEv+0x50>)
 8000754:	f001 fdc8 	bl	80022e8 <HAL_GPIO_WritePin>



	}
 8000758:	bf00      	nop
 800075a:	3728      	adds	r7, #40	@ 0x28
 800075c:	46bd      	mov	sp, r7
 800075e:	bdb0      	pop	{r4, r5, r7, pc}
 8000760:	08009b88 	.word	0x08009b88
 8000764:	08009b68 	.word	0x08009b68
 8000768:	58021000 	.word	0x58021000

0800076c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <vApplicationGetIdleTaskMemory+0x2c>)
 800077c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4a06      	ldr	r2, [pc, #24]	@ (800079c <vApplicationGetIdleTaskMemory+0x30>)
 8000782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2280      	movs	r2, #128	@ 0x80
 8000788:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	24000140 	.word	0x24000140
 800079c:	240001e0 	.word	0x240001e0

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b5b0      	push	{r4, r5, r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 fe3b 	bl	8001420 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f831 	bl	8000810 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f000 f9a5 	bl	8000afc <_ZL12MX_GPIO_Initv>
  MX_ETH_Init();
 80007b2:	f000 f8bb 	bl	800092c <_ZL11MX_ETH_Initv>
  MX_USART2_UART_Init();
 80007b6:	f000 f90b 	bl	80009d0 <_ZL19MX_USART2_UART_Initv>
  MX_USB_OTG_FS_PCD_Init();
 80007ba:	f000 f969 	bl	8000a90 <_ZL22MX_USB_OTG_FS_PCD_Initv>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f006 fd31 	bl	8007234 <osSemaphoreCreate>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a0b      	ldr	r2, [pc, #44]	@ (8000804 <main+0x64>)
 80007d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80007d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <main+0x68>)
 80007da:	1d3c      	adds	r4, r7, #4
 80007dc:	461d      	mov	r5, r3
 80007de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f006 fcc0 	bl	8007174 <osThreadCreate>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a05      	ldr	r2, [pc, #20]	@ (800080c <main+0x6c>)
 80007f8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007fa:	f006 fcb4 	bl	8007166 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x5e>
 8000802:	bf00      	nop
 8000804:	24000a44 	.word	0x24000a44
 8000808:	08009bb0 	.word	0x08009bb0
 800080c:	24000a40 	.word	0x24000a40

08000810 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b09c      	sub	sp, #112	@ 0x70
 8000814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081a:	224c      	movs	r2, #76	@ 0x4c
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f008 fd2a 	bl	8009278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2220      	movs	r2, #32
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f008 fd24 	bl	8009278 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000830:	2002      	movs	r0, #2
 8000832:	f001 fea3 	bl	800257c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <_Z18SystemClock_Configv+0x114>)
 800083c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800083e:	4a39      	ldr	r2, [pc, #228]	@ (8000924 <_Z18SystemClock_Configv+0x114>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000846:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <_Z18SystemClock_Configv+0x114>)
 8000848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	4b35      	ldr	r3, [pc, #212]	@ (8000928 <_Z18SystemClock_Configv+0x118>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000858:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <_Z18SystemClock_Configv+0x118>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <_Z18SystemClock_Configv+0x118>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800086c:	bf00      	nop
 800086e:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <_Z18SystemClock_Configv+0x118>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000876:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087a:	bf14      	ite	ne
 800087c:	2301      	movne	r3, #1
 800087e:	2300      	moveq	r3, #0
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f3      	bne.n	800086e <_Z18SystemClock_Configv+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000886:	2303      	movs	r3, #3
 8000888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000890:	2301      	movs	r3, #1
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000894:	2340      	movs	r3, #64	@ 0x40
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	2302      	movs	r3, #2
 800089e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a0:	2301      	movs	r3, #1
 80008a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008a4:	2318      	movs	r3, #24
 80008a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ac:	2304      	movs	r3, #4
 80008ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b4:	230c      	movs	r3, #12
 80008b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 fea3 	bl	8002610 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80008da:	f000 fa13 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008de:	233f      	movs	r3, #63	@ 0x3f
 80008e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008f2:	2340      	movs	r3, #64	@ 0x40
 80008f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2101      	movs	r1, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f002 fade 	bl	8002ec4 <HAL_RCC_ClockConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	bf14      	ite	ne
 800090e:	2301      	movne	r3, #1
 8000910:	2300      	moveq	r3, #0
 8000912:	b2db      	uxtb	r3, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000918:	f000 f9f4 	bl	8000d04 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58000400 	.word	0x58000400
 8000928:	58024800 	.word	0x58024800

0800092c <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000932:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <_ZL11MX_ETH_Initv+0x90>)
 8000934:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000936:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000942:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 8000944:	22e1      	movs	r2, #225	@ 0xe1
 8000946:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000948:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 800094a:	2200      	movs	r2, #0
 800094c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800094e:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000954:	4b1a      	ldr	r3, [pc, #104]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 800095c:	4a18      	ldr	r2, [pc, #96]	@ (80009c0 <_ZL11MX_ETH_Initv+0x94>)
 800095e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000962:	2201      	movs	r2, #1
 8000964:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000968:	4a16      	ldr	r2, [pc, #88]	@ (80009c4 <_ZL11MX_ETH_Initv+0x98>)
 800096a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 800096e:	4a16      	ldr	r2, [pc, #88]	@ (80009c8 <_ZL11MX_ETH_Initv+0x9c>)
 8000970:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000972:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 8000974:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800097a:	480f      	ldr	r0, [pc, #60]	@ (80009b8 <_ZL11MX_ETH_Initv+0x8c>)
 800097c:	f000 fed0 	bl	8001720 <HAL_ETH_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	bf14      	ite	ne
 8000986:	2301      	movne	r3, #1
 8000988:	2300      	moveq	r3, #0
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <_ZL11MX_ETH_Initv+0x68>
  {
    Error_Handler();
 8000990:	f000 f9b8 	bl	8000d04 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000994:	2238      	movs	r2, #56	@ 0x38
 8000996:	2100      	movs	r1, #0
 8000998:	480c      	ldr	r0, [pc, #48]	@ (80009cc <_ZL11MX_ETH_Initv+0xa0>)
 800099a:	f008 fc6d 	bl	8009278 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800099e:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <_ZL11MX_ETH_Initv+0xa0>)
 80009a0:	2221      	movs	r2, #33	@ 0x21
 80009a2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009a4:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <_ZL11MX_ETH_Initv+0xa0>)
 80009a6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009aa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009ac:	4b07      	ldr	r3, [pc, #28]	@ (80009cc <_ZL11MX_ETH_Initv+0xa0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	24000418 	.word	0x24000418
 80009bc:	40028000 	.word	0x40028000
 80009c0:	24000a48 	.word	0x24000a48
 80009c4:	240000c4 	.word	0x240000c4
 80009c8:	24000064 	.word	0x24000064
 80009cc:	240003e0 	.word	0x240003e0

080009d0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
	  huart2.Instance = USART2;
 80009d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009d6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a8c <_ZL19MX_USART2_UART_Initv+0xbc>)
 80009d8:	601a      	str	r2, [r3, #0]
	  huart2.Init.BaudRate = 9600;
 80009da:	4b2b      	ldr	r3, [pc, #172]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009e0:	605a      	str	r2, [r3, #4]
	  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e2:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
	  huart2.Init.StopBits = UART_STOPBITS_1;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
	  huart2.Init.Parity = UART_PARITY_NONE;
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
	  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f4:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009f6:	220c      	movs	r2, #12
 80009f8:	615a      	str	r2, [r3, #20]
	  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fa:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	619a      	str	r2, [r3, #24]
	  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a00:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	61da      	str	r2, [r3, #28]
	  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a06:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	621a      	str	r2, [r3, #32]
	  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	625a      	str	r2, [r3, #36]	@ 0x24
	  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a12:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	629a      	str	r2, [r3, #40]	@ 0x28
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a18:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a1a:	f004 ff1b 	bl	8005854 <HAL_UART_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bf14      	ite	ne
 8000a24:	2301      	movne	r3, #1
 8000a26:	2300      	moveq	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <_ZL19MX_USART2_UART_Initv+0x62>
	  {
	    Error_Handler();
 8000a2e:	f000 f969 	bl	8000d04 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a32:	2100      	movs	r1, #0
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a36:	f005 ffac 	bl	8006992 <HAL_UARTEx_SetTxFifoThreshold>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_ZL19MX_USART2_UART_Initv+0x7e>
	  {
	    Error_Handler();
 8000a4a:	f000 f95b 	bl	8000d04 <Error_Handler>
	  }
	  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a52:	f005 ffdc 	bl	8006a0e <HAL_UARTEx_SetRxFifoThreshold>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	bf14      	ite	ne
 8000a5c:	2301      	movne	r3, #1
 8000a5e:	2300      	moveq	r3, #0
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <_ZL19MX_USART2_UART_Initv+0x9a>
	  {
	    Error_Handler();
 8000a66:	f000 f94d 	bl	8000d04 <Error_Handler>
	  }
	  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a6a:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000a6c:	f005 ff58 	bl	8006920 <HAL_UARTEx_DisableFifoMode>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <_ZL19MX_USART2_UART_Initv+0xb4>
	  {
	    Error_Handler();
 8000a80:	f000 f940 	bl	8000d04 <Error_Handler>

  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240004c8 	.word	0x240004c8
 8000a8c:	40004400 	.word	0x40004400

08000a90 <_ZL22MX_USB_OTG_FS_PCD_Initv>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a96:	4a18      	ldr	r2, [pc, #96]	@ (8000af8 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000a9c:	2209      	movs	r2, #9
 8000a9e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000aca:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ad6:	4807      	ldr	r0, [pc, #28]	@ (8000af4 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x64>)
 8000ad8:	f001 fc1f 	bl	800231a <HAL_PCD_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	bf14      	ite	ne
 8000ae2:	2301      	movne	r3, #1
 8000ae4:	2300      	moveq	r3, #0
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <_ZL22MX_USB_OTG_FS_PCD_Initv+0x60>
  {
    Error_Handler();
 8000aec:	f000 f90a 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	2400055c 	.word	0x2400055c
 8000af8:	40080000 	.word	0x40080000

08000afc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	@ 0x30
 8000b00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
 8000b10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b62      	ldr	r3, [pc, #392]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b18:	4a60      	ldr	r2, [pc, #384]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b1a:	f043 0304 	orr.w	r3, r3, #4
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b22:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b30:	4b5a      	ldr	r3, [pc, #360]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b36:	4a59      	ldr	r2, [pc, #356]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b40:	4b56      	ldr	r3, [pc, #344]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	4b53      	ldr	r3, [pc, #332]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b54:	4a51      	ldr	r2, [pc, #324]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b72:	4a4a      	ldr	r2, [pc, #296]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7c:	4b47      	ldr	r3, [pc, #284]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	4a42      	ldr	r2, [pc, #264]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b92:	f043 0308 	orr.w	r3, r3, #8
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9a:	4b40      	ldr	r3, [pc, #256]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba0:	f003 0308 	and.w	r3, r3, #8
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a3b      	ldr	r2, [pc, #236]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b38      	ldr	r3, [pc, #224]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	4a33      	ldr	r2, [pc, #204]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd6:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <_ZL12MX_GPIO_Initv+0x1a0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000bea:	482d      	ldr	r0, [pc, #180]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000bec:	f001 fb7c 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bf6:	482b      	ldr	r0, [pc, #172]	@ (8000ca4 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000bf8:	f001 fb76 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4829      	ldr	r0, [pc, #164]	@ (8000ca8 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000c02:	f001 fb71 	bl	80022e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4824      	ldr	r0, [pc, #144]	@ (8000cac <_ZL12MX_GPIO_Initv+0x1b0>)
 8000c1c:	f001 f9b4 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c20:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4819      	ldr	r0, [pc, #100]	@ (8000ca0 <_ZL12MX_GPIO_Initv+0x1a4>)
 8000c3a:	f001 f9a5 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <_ZL12MX_GPIO_Initv+0x1a8>)
 8000c58:	f001 f996 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480f      	ldr	r0, [pc, #60]	@ (8000cb0 <_ZL12MX_GPIO_Initv+0x1b4>)
 8000c72:	f001 f989 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <_ZL12MX_GPIO_Initv+0x1ac>)
 8000c8e:	f001 f97b 	bl	8001f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	@ 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58020400 	.word	0x58020400
 8000ca4:	58020c00 	.word	0x58020c00
 8000ca8:	58021000 	.word	0x58021000
 8000cac:	58020800 	.word	0x58020800
 8000cb0:	58021800 	.word	0x58021800

08000cb4 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */



	LOGu("Sistem Yapilandirici Basliyor\n");
 8000cbc:	4807      	ldr	r0, [pc, #28]	@ (8000cdc <_Z16StartDefaultTaskPKv+0x28>)
 8000cbe:	f7ff fcfb 	bl	80006b8 <_Z4LOGuPKcz>
	SistemYapilandirici *p_SistemYapilandirici = new SistemYapilandirici();
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f008 f9c6 	bl	8009054 <_Znwj>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461c      	mov	r4, r3
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff fd17 	bl	8000700 <_ZN19SistemYapilandiriciC1Ev>
 8000cd2:	60fc      	str	r4, [r7, #12]



  /* USER CODE END 5 */
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	08009bcc 	.word	0x08009bcc

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cf2:	f000 fbd1 	bl	8001498 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010000 	.word	0x40010000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <HAL_MspInit+0x38>)
 8000d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_MspInit+0x38>)
 8000d1e:	f043 0302 	orr.w	r3, r3, #2
 8000d22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d26:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_MspInit+0x38>)
 8000d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	607b      	str	r3, [r7, #4]
 8000d32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	210f      	movs	r1, #15
 8000d38:	f06f 0001 	mvn.w	r0, #1
 8000d3c:	f000 fcc8 	bl	80016d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58024400 	.word	0x58024400

08000d4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08e      	sub	sp, #56	@ 0x38
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a59      	ldr	r2, [pc, #356]	@ (8000ed0 <HAL_ETH_MspInit+0x184>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	f040 80ab 	bne.w	8000ec6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d70:	4b58      	ldr	r3, [pc, #352]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d76:	4a57      	ldr	r2, [pc, #348]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d80:	4b54      	ldr	r3, [pc, #336]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d8a:	623b      	str	r3, [r7, #32]
 8000d8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d8e:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d94:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000da0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000da8:	61fb      	str	r3, [r7, #28]
 8000daa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dac:	4b49      	ldr	r3, [pc, #292]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db2:	4a48      	ldr	r2, [pc, #288]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dbc:	4b45      	ldr	r3, [pc, #276]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	61bb      	str	r3, [r7, #24]
 8000dc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b42      	ldr	r3, [pc, #264]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd0:	4a40      	ldr	r2, [pc, #256]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dda:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	f003 0304 	and.w	r3, r3, #4
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dee:	4a39      	ldr	r2, [pc, #228]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df8:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	4a31      	ldr	r2, [pc, #196]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e0e:	f043 0302 	orr.w	r3, r3, #2
 8000e12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1c:	f003 0302 	and.w	r3, r3, #2
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e34:	4b27      	ldr	r3, [pc, #156]	@ (8000ed4 <HAL_ETH_MspInit+0x188>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e42:	2332      	movs	r3, #50	@ 0x32
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e52:	230b      	movs	r3, #11
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481e      	ldr	r0, [pc, #120]	@ (8000ed8 <HAL_ETH_MspInit+0x18c>)
 8000e5e:	f001 f893 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e62:	2386      	movs	r3, #134	@ 0x86
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e72:	230b      	movs	r3, #11
 8000e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4817      	ldr	r0, [pc, #92]	@ (8000edc <HAL_ETH_MspInit+0x190>)
 8000e7e:	f001 f883 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4810      	ldr	r0, [pc, #64]	@ (8000ee0 <HAL_ETH_MspInit+0x194>)
 8000ea0:	f001 f872 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ea4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4808      	ldr	r0, [pc, #32]	@ (8000ee4 <HAL_ETH_MspInit+0x198>)
 8000ec2:	f001 f861 	bl	8001f88 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3738      	adds	r7, #56	@ 0x38
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40028000 	.word	0x40028000
 8000ed4:	58024400 	.word	0x58024400
 8000ed8:	58020800 	.word	0x58020800
 8000edc:	58020000 	.word	0x58020000
 8000ee0:	58020400 	.word	0x58020400
 8000ee4:	58021800 	.word	0x58021800

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0bc      	sub	sp, #240	@ 0xf0
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0318 	add.w	r3, r7, #24
 8000f04:	22c0      	movs	r2, #192	@ 0xc0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 f9b5 	bl	8009278 <memset>
  if(huart->Instance==USART2)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a38      	ldr	r2, [pc, #224]	@ (8000ff4 <HAL_UART_MspInit+0x10c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d169      	bne.n	8000fec <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f18:	f04f 0202 	mov.w	r2, #2
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0318 	add.w	r3, r7, #24
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fb96 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f3a:	f7ff fee3 	bl	8000d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f44:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <HAL_UART_MspInit+0x110>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <HAL_UART_MspInit+0x114>)
 8000fbe:	f000 ffe3 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fe0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	@ (8001000 <HAL_UART_MspInit+0x118>)
 8000fe8:	f000 ffce 	bl	8001f88 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fec:	bf00      	nop
 8000fee:	37f0      	adds	r7, #240	@ 0xf0
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020000 	.word	0x58020000
 8001000:	58020c00 	.word	0x58020c00

08001004 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0ba      	sub	sp, #232	@ 0xe8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	22c0      	movs	r2, #192	@ 0xc0
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f008 f927 	bl	8009278 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <HAL_PCD_MspInit+0xec>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d159      	bne.n	80010e8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001034:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001040:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0310 	add.w	r3, r7, #16
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fb07 	bl	8003660 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001058:	f7ff fe54 	bl	8000d04 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800105c:	f001 fac8 	bl	80025f0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b24      	ldr	r3, [pc, #144]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a23      	ldr	r2, [pc, #140]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b20      	ldr	r3, [pc, #128]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800107e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001082:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001098:	230a      	movs	r3, #10
 800109a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <HAL_PCD_MspInit+0xf4>)
 80010a6:	f000 ff6f 	bl	8001f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <HAL_PCD_MspInit+0xf4>)
 80010c6:	f000 ff5f 	bl	8001f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010ca:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d0:	4a08      	ldr	r2, [pc, #32]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80010d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_PCD_MspInit+0xf0>)
 80010dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80010e8:	bf00      	nop
 80010ea:	37e8      	adds	r7, #232	@ 0xe8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40080000 	.word	0x40080000
 80010f4:	58024400 	.word	0x58024400
 80010f8:	58020000 	.word	0x58020000

080010fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	@ 0x38
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	d842      	bhi.n	8001190 <HAL_InitTick+0x94>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800110a:	2200      	movs	r2, #0
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	2019      	movs	r0, #25
 8001110:	f000 fade 	bl	80016d0 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001114:	2019      	movs	r0, #25
 8001116:	f000 faf5 	bl	8001704 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800111a:	4a23      	ldr	r2, [pc, #140]	@ (80011a8 <HAL_InitTick+0xac>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001120:	4b22      	ldr	r3, [pc, #136]	@ (80011ac <HAL_InitTick+0xb0>)
 8001122:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001126:	4a21      	ldr	r2, [pc, #132]	@ (80011ac <HAL_InitTick+0xb0>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001130:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <HAL_InitTick+0xb0>)
 8001132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fa47 	bl	80035dc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800114e:	f002 fa2f 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8001152:	6378      	str	r0, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001156:	4a16      	ldr	r2, [pc, #88]	@ (80011b0 <HAL_InitTick+0xb4>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	3b01      	subs	r3, #1
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_InitTick+0xb8>)
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <HAL_InitTick+0xbc>)
 8001166:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_InitTick+0xb8>)
 800116a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800116e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001170:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <HAL_InitTick+0xb8>)
 8001172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001174:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001176:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <HAL_InitTick+0xb8>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_InitTick+0xb8>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001182:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <HAL_InitTick+0xb8>)
 8001184:	f004 f898 	bl	80052b8 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d107      	bne.n	800119e <HAL_InitTick+0xa2>
 800118e:	e001      	b.n	8001194 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e005      	b.n	80011a0 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001194:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <HAL_InitTick+0xb8>)
 8001196:	f004 f8f1 	bl	800537c <HAL_TIM_Base_Start_IT>
 800119a:	4603      	mov	r3, r0
 800119c:	e000      	b.n	80011a0 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3738      	adds	r7, #56	@ 0x38
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	24000008 	.word	0x24000008
 80011ac:	58024400 	.word	0x58024400
 80011b0:	431bde83 	.word	0x431bde83
 80011b4:	24000a50 	.word	0x24000a50
 80011b8:	40010000 	.word	0x40010000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <NMI_Handler+0x4>

080011c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <HardFault_Handler+0x4>

080011cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <MemManage_Handler+0x4>

080011d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011f8:	4802      	ldr	r0, [pc, #8]	@ (8001204 <TIM1_UP_IRQHandler+0x10>)
 80011fa:	f004 f937 	bl	800546c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000a50 	.word	0x24000a50

08001208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return 1;
 800120c:	2301      	movs	r3, #1
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <_kill>:

int _kill(int pid, int sig)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001222:	f008 f8db 	bl	80093dc <__errno>
 8001226:	4603      	mov	r3, r0
 8001228:	2216      	movs	r2, #22
 800122a:	601a      	str	r2, [r3, #0]
  return -1;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_exit>:

void _exit (int status)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ffe7 	bl	8001218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800124a:	bf00      	nop
 800124c:	e7fd      	b.n	800124a <_exit+0x12>
	...

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f008 f8ac 	bl	80093dc <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	24080000 	.word	0x24080000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	24000a9c 	.word	0x24000a9c
 80012b8:	24004948 	.word	0x24004948

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012c0:	4b37      	ldr	r3, [pc, #220]	@ (80013a0 <SystemInit+0xe4>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c6:	4a36      	ldr	r2, [pc, #216]	@ (80013a0 <SystemInit+0xe4>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012d0:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <SystemInit+0xe8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d807      	bhi.n	80012ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012dc:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <SystemInit+0xe8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f023 030f 	bic.w	r3, r3, #15
 80012e4:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <SystemInit+0xe8>)
 80012e6:	f043 0307 	orr.w	r3, r3, #7
 80012ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012ec:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <SystemInit+0xec>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a2d      	ldr	r2, [pc, #180]	@ (80013a8 <SystemInit+0xec>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012f8:	4b2b      	ldr	r3, [pc, #172]	@ (80013a8 <SystemInit+0xec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <SystemInit+0xec>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4929      	ldr	r1, [pc, #164]	@ (80013a8 <SystemInit+0xec>)
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <SystemInit+0xf0>)
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800130a:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <SystemInit+0xe8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	d007      	beq.n	8001326 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001316:	4b23      	ldr	r3, [pc, #140]	@ (80013a4 <SystemInit+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 030f 	bic.w	r3, r3, #15
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <SystemInit+0xe8>)
 8001320:	f043 0307 	orr.w	r3, r3, #7
 8001324:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <SystemInit+0xec>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800132c:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <SystemInit+0xec>)
 800132e:	2200      	movs	r2, #0
 8001330:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <SystemInit+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <SystemInit+0xec>)
 800133a:	4a1d      	ldr	r2, [pc, #116]	@ (80013b0 <SystemInit+0xf4>)
 800133c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800133e:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <SystemInit+0xec>)
 8001340:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <SystemInit+0xf8>)
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001344:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <SystemInit+0xec>)
 8001346:	4a1c      	ldr	r2, [pc, #112]	@ (80013b8 <SystemInit+0xfc>)
 8001348:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800134a:	4b17      	ldr	r3, [pc, #92]	@ (80013a8 <SystemInit+0xec>)
 800134c:	2200      	movs	r2, #0
 800134e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001350:	4b15      	ldr	r3, [pc, #84]	@ (80013a8 <SystemInit+0xec>)
 8001352:	4a19      	ldr	r2, [pc, #100]	@ (80013b8 <SystemInit+0xfc>)
 8001354:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001356:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <SystemInit+0xec>)
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <SystemInit+0xec>)
 800135e:	4a16      	ldr	r2, [pc, #88]	@ (80013b8 <SystemInit+0xfc>)
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001362:	4b11      	ldr	r3, [pc, #68]	@ (80013a8 <SystemInit+0xec>)
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <SystemInit+0xec>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <SystemInit+0xec>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001372:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <SystemInit+0xec>)
 8001376:	2200      	movs	r2, #0
 8001378:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <SystemInit+0x100>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <SystemInit+0x104>)
 8001380:	4013      	ands	r3, r2
 8001382:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001386:	d202      	bcs.n	800138e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001388:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <SystemInit+0x108>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800138e:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <SystemInit+0x10c>)
 8001390:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001394:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	52002000 	.word	0x52002000
 80013a8:	58024400 	.word	0x58024400
 80013ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80013b0:	02020200 	.word	0x02020200
 80013b4:	01ff0000 	.word	0x01ff0000
 80013b8:	01010280 	.word	0x01010280
 80013bc:	5c001000 	.word	0x5c001000
 80013c0:	ffff0000 	.word	0xffff0000
 80013c4:	51008108 	.word	0x51008108
 80013c8:	52004000 	.word	0x52004000

080013cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80013cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001404 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff ff74 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	@ (8001408 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	@ (800140c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001410 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001418 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013fa:	f007 fff5 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013fe:	f7ff f9cf 	bl	80007a0 <main>
  bx  lr
 8001402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001408:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800140c:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001410:	08009c70 	.word	0x08009c70
  ldr r2, =_sbss
 8001414:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001418:	24004944 	.word	0x24004944

0800141c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC3_IRQHandler>
	...

08001420 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 f947 	bl	80016ba <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800142c:	f001 ff00 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 8001430:	4602      	mov	r2, r0
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_Init+0x68>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	f003 030f 	and.w	r3, r3, #15
 800143c:	4913      	ldr	r1, [pc, #76]	@ (800148c <HAL_Init+0x6c>)
 800143e:	5ccb      	ldrb	r3, [r1, r3]
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800144a:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <HAL_Init+0x68>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_Init+0x6c>)
 8001454:	5cd3      	ldrb	r3, [r2, r3]
 8001456:	f003 031f 	and.w	r3, r3, #31
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
 8001460:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <HAL_Init+0x70>)
 8001462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001464:	4a0b      	ldr	r2, [pc, #44]	@ (8001494 <HAL_Init+0x74>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800146a:	200f      	movs	r0, #15
 800146c:	f7ff fe46 	bl	80010fc <HAL_InitTick>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e002      	b.n	8001480 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800147a:	f7ff fc49 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024400 	.word	0x58024400
 800148c:	08009bf4 	.word	0x08009bf4
 8001490:	24000004 	.word	0x24000004
 8001494:	24000000 	.word	0x24000000

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_IncTick+0x20>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <HAL_IncTick+0x24>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <HAL_IncTick+0x24>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	2400000c 	.word	0x2400000c
 80014bc:	24000aa0 	.word	0x24000aa0

080014c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return uwTick;
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetTick+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	24000aa0 	.word	0x24000aa0

080014d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e0:	f7ff ffee 	bl	80014c0 <HAL_GetTick>
 80014e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f0:	d005      	beq.n	80014fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014f2:	4b0a      	ldr	r3, [pc, #40]	@ (800151c <HAL_Delay+0x44>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fe:	bf00      	nop
 8001500:	f7ff ffde 	bl	80014c0 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	429a      	cmp	r2, r3
 800150e:	d8f7      	bhi.n	8001500 <HAL_Delay+0x28>
  {
  }
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2400000c 	.word	0x2400000c

08001520 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <HAL_GetREVID+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0c1b      	lsrs	r3, r3, #16
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	5c001000 	.word	0x5c001000

08001538 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001548:	4904      	ldr	r1, [pc, #16]	@ (800155c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	58000400 	.word	0x58000400

08001560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800157c:	4013      	ands	r3, r2
 800157e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	4313      	orrs	r3, r2
 800158c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800158e:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	60d3      	str	r3, [r2, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	05fa0000 	.word	0x05fa0000

080015a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ac:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	f003 0307 	and.w	r3, r3, #7
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	db0b      	blt.n	80015ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	f003 021f 	and.w	r2, r3, #31
 80015dc:	4907      	ldr	r1, [pc, #28]	@ (80015fc <__NVIC_EnableIRQ+0x38>)
 80015de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e2:	095b      	lsrs	r3, r3, #5
 80015e4:	2001      	movs	r0, #1
 80015e6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100

08001600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800160c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001610:	2b00      	cmp	r3, #0
 8001612:	db0a      	blt.n	800162a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	b2da      	uxtb	r2, r3
 8001618:	490c      	ldr	r1, [pc, #48]	@ (800164c <__NVIC_SetPriority+0x4c>)
 800161a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800161e:	0112      	lsls	r2, r2, #4
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	440b      	add	r3, r1
 8001624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001628:	e00a      	b.n	8001640 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4908      	ldr	r1, [pc, #32]	@ (8001650 <__NVIC_SetPriority+0x50>)
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	f003 030f 	and.w	r3, r3, #15
 8001636:	3b04      	subs	r3, #4
 8001638:	0112      	lsls	r2, r2, #4
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	440b      	add	r3, r1
 800163e:	761a      	strb	r2, [r3, #24]
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	e000e100 	.word	0xe000e100
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	@ 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f1c3 0307 	rsb	r3, r3, #7
 800166e:	2b04      	cmp	r3, #4
 8001670:	bf28      	it	cs
 8001672:	2304      	movcs	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3304      	adds	r3, #4
 800167a:	2b06      	cmp	r3, #6
 800167c:	d902      	bls.n	8001684 <NVIC_EncodePriority+0x30>
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3b03      	subs	r3, #3
 8001682:	e000      	b.n	8001686 <NVIC_EncodePriority+0x32>
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	f04f 32ff 	mov.w	r2, #4294967295
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fa02 f303 	lsl.w	r3, r2, r3
 8001692:	43da      	mvns	r2, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	401a      	ands	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43d9      	mvns	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	4313      	orrs	r3, r2
         );
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3724      	adds	r7, #36	@ 0x24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff4c 	bl	8001560 <__NVIC_SetPriorityGrouping>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016de:	f7ff ff63 	bl	80015a8 <__NVIC_GetPriorityGrouping>
 80016e2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	6978      	ldr	r0, [r7, #20]
 80016ea:	f7ff ffb3 	bl	8001654 <NVIC_EncodePriority>
 80016ee:	4602      	mov	r2, r0
 80016f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff ff82 	bl	8001600 <__NVIC_SetPriority>
}
 80016fc:	bf00      	nop
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff56 	bl	80015c4 <__NVIC_EnableIRQ>
}
 8001718:	bf00      	nop
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e0e3      	b.n	80018fa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001738:	2b00      	cmp	r3, #0
 800173a:	d106      	bne.n	800174a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2223      	movs	r2, #35	@ 0x23
 8001740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff fb01 	bl	8000d4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174a:	4b6e      	ldr	r3, [pc, #440]	@ (8001904 <HAL_ETH_Init+0x1e4>)
 800174c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001750:	4a6c      	ldr	r2, [pc, #432]	@ (8001904 <HAL_ETH_Init+0x1e4>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800175a:	4b6a      	ldr	r3, [pc, #424]	@ (8001904 <HAL_ETH_Init+0x1e4>)
 800175c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7a1b      	ldrb	r3, [r3, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d103      	bne.n	8001778 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff fee1 	bl	8001538 <HAL_SYSCFG_ETHInterfaceSelect>
 8001776:	e003      	b.n	8001780 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001778:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800177c:	f7ff fedc 	bl	8001538 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001780:	4b61      	ldr	r3, [pc, #388]	@ (8001908 <HAL_ETH_Init+0x1e8>)
 8001782:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6812      	ldr	r2, [r2, #0]
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800179a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800179c:	f7ff fe90 	bl	80014c0 <HAL_GetTick>
 80017a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017a2:	e011      	b.n	80017c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017a4:	f7ff fe8c 	bl	80014c0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80017b2:	d909      	bls.n	80017c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	22e0      	movs	r2, #224	@ 0xe0
 80017c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e098      	b.n	80018fa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1e4      	bne.n	80017a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f89e 	bl	800191c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80017e0:	f001 fea0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a49      	ldr	r2, [pc, #292]	@ (800190c <HAL_ETH_Init+0x1ec>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	0c9a      	lsrs	r2, r3, #18
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	3a01      	subs	r2, #1
 80017f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa81 	bl	8001d00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001806:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800180a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6812      	ldr	r2, [r2, #0]
 8001812:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001816:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800181a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d009      	beq.n	800183e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	22e0      	movs	r2, #224	@ 0xe0
 8001836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e05d      	b.n	80018fa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001846:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800184a:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <HAL_ETH_Init+0x1f0>)
 800184c:	4013      	ands	r3, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6952      	ldr	r2, [r2, #20]
 8001852:	0051      	lsls	r1, r2, #1
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	430b      	orrs	r3, r1
 800185a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800185e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fae9 	bl	8001e3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fb2f 	bl	8001ecc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	3305      	adds	r3, #5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	021a      	lsls	r2, r3, #8
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	3303      	adds	r3, #3
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	061a      	lsls	r2, r3, #24
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	3302      	adds	r3, #2
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	041b      	lsls	r3, r3, #16
 80018a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	3301      	adds	r3, #1
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80018ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80018bc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b11      	ldr	r3, [pc, #68]	@ (8001914 <HAL_ETH_Init+0x1f4>)
 80018ce:	430b      	orrs	r3, r1
 80018d0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_ETH_Init+0x1f8>)
 80018e2:	430b      	orrs	r3, r1
 80018e4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2210      	movs	r2, #16
 80018f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	58024400 	.word	0x58024400
 8001908:	58000400 	.word	0x58000400
 800190c:	431bde83 	.word	0x431bde83
 8001910:	ffff8001 	.word	0xffff8001
 8001914:	0c020060 	.word	0x0c020060
 8001918:	0c20c000 	.word	0x0c20c000

0800191c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800192c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001934:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001936:	f001 fdf5 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800193a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	4a1a      	ldr	r2, [pc, #104]	@ (80019a8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d804      	bhi.n	800194e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e022      	b.n	8001994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4a16      	ldr	r2, [pc, #88]	@ (80019ac <HAL_ETH_SetMDIOClockRange+0x90>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d204      	bcs.n	8001960 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	e019      	b.n	8001994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4a13      	ldr	r2, [pc, #76]	@ (80019b0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d915      	bls.n	8001994 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a12      	ldr	r2, [pc, #72]	@ (80019b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d804      	bhi.n	800197a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e00c      	b.n	8001994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d804      	bhi.n	800198c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e003      	b.n	8001994 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001992:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68fa      	ldr	r2, [r7, #12]
 800199a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	02160ebf 	.word	0x02160ebf
 80019ac:	03938700 	.word	0x03938700
 80019b0:	05f5e0ff 	.word	0x05f5e0ff
 80019b4:	08f0d17f 	.word	0x08f0d17f
 80019b8:	0ee6b27f 	.word	0x0ee6b27f

080019bc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80019ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	791b      	ldrb	r3, [r3, #4]
 80019d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80019d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	7b1b      	ldrb	r3, [r3, #12]
 80019dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80019de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	7b5b      	ldrb	r3, [r3, #13]
 80019e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80019e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	7b9b      	ldrb	r3, [r3, #14]
 80019ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80019ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	7bdb      	ldrb	r3, [r3, #15]
 80019f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80019f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	7c12      	ldrb	r2, [r2, #16]
 80019fc:	2a00      	cmp	r2, #0
 80019fe:	d102      	bne.n	8001a06 <ETH_SetMACConfig+0x4a>
 8001a00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a04:	e000      	b.n	8001a08 <ETH_SetMACConfig+0x4c>
 8001a06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001a08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	7c52      	ldrb	r2, [r2, #17]
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d102      	bne.n	8001a18 <ETH_SetMACConfig+0x5c>
 8001a12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001a16:	e000      	b.n	8001a1a <ETH_SetMACConfig+0x5e>
 8001a18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001a1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	7c9b      	ldrb	r3, [r3, #18]
 8001a20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001a22:	431a      	orrs	r2, r3
               macconf->Speed |
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001a28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	7f1b      	ldrb	r3, [r3, #28]
 8001a34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	7f5b      	ldrb	r3, [r3, #29]
 8001a3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001a3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	7f92      	ldrb	r2, [r2, #30]
 8001a44:	2a00      	cmp	r2, #0
 8001a46:	d102      	bne.n	8001a4e <ETH_SetMACConfig+0x92>
 8001a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a4c:	e000      	b.n	8001a50 <ETH_SetMACConfig+0x94>
 8001a4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001a50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	7fdb      	ldrb	r3, [r3, #31]
 8001a56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001a58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001a60:	2a00      	cmp	r2, #0
 8001a62:	d102      	bne.n	8001a6a <ETH_SetMACConfig+0xae>
 8001a64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a68:	e000      	b.n	8001a6c <ETH_SetMACConfig+0xb0>
 8001a6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001a6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001a7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001a7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b56      	ldr	r3, [pc, #344]	@ (8001be8 <ETH_SetMACConfig+0x22c>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6812      	ldr	r2, [r2, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	430b      	orrs	r3, r1
 8001a98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001aa6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001aa8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ab0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001aba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001abc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d102      	bne.n	8001ace <ETH_SetMACConfig+0x112>
 8001ac8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x114>
 8001ace:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001ad0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <ETH_SetMACConfig+0x230>)
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	430b      	orrs	r3, r1
 8001aec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001af4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68da      	ldr	r2, [r3, #12]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <ETH_SetMACConfig+0x234>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	68f9      	ldr	r1, [r7, #12]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001b18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001b26:	2a00      	cmp	r2, #0
 8001b28:	d101      	bne.n	8001b2e <ETH_SetMACConfig+0x172>
 8001b2a:	2280      	movs	r2, #128	@ 0x80
 8001b2c:	e000      	b.n	8001b30 <ETH_SetMACConfig+0x174>
 8001b2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001b30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b42:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001b46:	4013      	ands	r3, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	430b      	orrs	r3, r1
 8001b50:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001b58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001b60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001b62:	4313      	orrs	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6e:	f023 0103 	bic.w	r1, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001b86:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001ba2:	2a00      	cmp	r2, #0
 8001ba4:	d101      	bne.n	8001baa <ETH_SetMACConfig+0x1ee>
 8001ba6:	2240      	movs	r2, #64	@ 0x40
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0x1f0>
 8001baa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001bac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001bb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001bb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001bbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001bcc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	00048083 	.word	0x00048083
 8001bec:	c0f88000 	.word	0xc0f88000
 8001bf0:	fffffef0 	.word	0xfffffef0

08001bf4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <ETH_SetDMAConfig+0xf8>)
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6811      	ldr	r1, [r2, #0]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c1a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	791b      	ldrb	r3, [r3, #4]
 8001c20:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c26:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	7b1b      	ldrb	r3, [r3, #12]
 8001c2c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf0 <ETH_SetDMAConfig+0xfc>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c4c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	7b5b      	ldrb	r3, [r3, #13]
 8001c52:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c64:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <ETH_SetDMAConfig+0x100>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c78:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	7d1b      	ldrb	r3, [r3, #20]
 8001c84:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c86:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	7f5b      	ldrb	r3, [r3, #29]
 8001c8c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001c9e:	4b16      	ldr	r3, [pc, #88]	@ (8001cf8 <ETH_SetDMAConfig+0x104>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	68f9      	ldr	r1, [r7, #12]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	7f1b      	ldrb	r3, [r3, #28]
 8001cb6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cc8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <ETH_SetDMAConfig+0x108>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001cdc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	ffff87fd 	.word	0xffff87fd
 8001cf0:	ffff2ffe 	.word	0xffff2ffe
 8001cf4:	fffec000 	.word	0xfffec000
 8001cf8:	ffc0efef 	.word	0xffc0efef
 8001cfc:	7fc0ffff 	.word	0x7fc0ffff

08001d00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b0a4      	sub	sp, #144	@ 0x90
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d40:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001d58:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001d5c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001d82:	2300      	movs	r3, #0
 8001d84:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d92:	2301      	movs	r3, #1
 8001d94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001daa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001db0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001db4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001de4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001de8:	4619      	mov	r1, r3
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fde6 	bl	80019bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001df4:	2301      	movs	r3, #1
 8001df6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001e0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001e10:	2300      	movs	r3, #0
 8001e12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001e14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001e18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001e20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff fee1 	bl	8001bf4 <ETH_SetDMAConfig>
}
 8001e32:	bf00      	nop
 8001e34:	3790      	adds	r7, #144	@ 0x90
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	e01d      	b.n	8001e84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	3206      	adds	r2, #6
 8001e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d9de      	bls.n	8001e48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e98:	461a      	mov	r2, r3
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ebc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ec0:	bf00      	nop
 8001ec2:	3714      	adds	r7, #20
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	e023      	b.n	8001f22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6919      	ldr	r1, [r3, #16]
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2200      	movs	r2, #0
 8001f08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	3212      	adds	r2, #18
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d9d8      	bls.n	8001eda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f4e:	461a      	mov	r2, r3
 8001f50:	2303      	movs	r3, #3
 8001f52:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691a      	ldr	r2, [r3, #16]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f62:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001f76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	@ 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_GPIO_Init+0x234>)
 8001f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f9a:	e194      	b.n	80022c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	4013      	ands	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 8186 	beq.w	80022c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d005      	beq.n	8001fcc <HAL_GPIO_Init+0x44>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d130      	bne.n	800202e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002002:	2201      	movs	r2, #1
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	091b      	lsrs	r3, r3, #4
 8002018:	f003 0201 	and.w	r2, r3, #1
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b03      	cmp	r3, #3
 8002038:	d017      	beq.n	800206a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d123      	bne.n	80020be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691a      	ldr	r2, [r3, #16]
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	08da      	lsrs	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3208      	adds	r2, #8
 80020b8:	69b9      	ldr	r1, [r7, #24]
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	2203      	movs	r2, #3
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 80e0 	beq.w	80022c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002100:	4b2f      	ldr	r3, [pc, #188]	@ (80021c0 <HAL_GPIO_Init+0x238>)
 8002102:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002106:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_GPIO_Init+0x238>)
 8002108:	f043 0302 	orr.w	r3, r3, #2
 800210c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002110:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <HAL_GPIO_Init+0x238>)
 8002112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800211e:	4a29      	ldr	r2, [pc, #164]	@ (80021c4 <HAL_GPIO_Init+0x23c>)
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	3302      	adds	r3, #2
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	220f      	movs	r2, #15
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4013      	ands	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a20      	ldr	r2, [pc, #128]	@ (80021c8 <HAL_GPIO_Init+0x240>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d052      	beq.n	80021f0 <HAL_GPIO_Init+0x268>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a1f      	ldr	r2, [pc, #124]	@ (80021cc <HAL_GPIO_Init+0x244>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d031      	beq.n	80021b6 <HAL_GPIO_Init+0x22e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_GPIO_Init+0x248>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <HAL_GPIO_Init+0x22a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_GPIO_Init+0x24c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d025      	beq.n	80021ae <HAL_GPIO_Init+0x226>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <HAL_GPIO_Init+0x250>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d01f      	beq.n	80021aa <HAL_GPIO_Init+0x222>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a1b      	ldr	r2, [pc, #108]	@ (80021dc <HAL_GPIO_Init+0x254>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d019      	beq.n	80021a6 <HAL_GPIO_Init+0x21e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <HAL_GPIO_Init+0x258>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_GPIO_Init+0x21a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_GPIO_Init+0x25c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d00d      	beq.n	800219e <HAL_GPIO_Init+0x216>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a18      	ldr	r2, [pc, #96]	@ (80021e8 <HAL_GPIO_Init+0x260>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d007      	beq.n	800219a <HAL_GPIO_Init+0x212>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_GPIO_Init+0x264>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_GPIO_Init+0x20e>
 8002192:	2309      	movs	r3, #9
 8002194:	e02d      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 8002196:	230a      	movs	r3, #10
 8002198:	e02b      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 800219a:	2308      	movs	r3, #8
 800219c:	e029      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 800219e:	2307      	movs	r3, #7
 80021a0:	e027      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021a2:	2306      	movs	r3, #6
 80021a4:	e025      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e023      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e021      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e01f      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e01d      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e01b      	b.n	80021f2 <HAL_GPIO_Init+0x26a>
 80021ba:	bf00      	nop
 80021bc:	58000080 	.word	0x58000080
 80021c0:	58024400 	.word	0x58024400
 80021c4:	58000400 	.word	0x58000400
 80021c8:	58020000 	.word	0x58020000
 80021cc:	58020400 	.word	0x58020400
 80021d0:	58020800 	.word	0x58020800
 80021d4:	58020c00 	.word	0x58020c00
 80021d8:	58021000 	.word	0x58021000
 80021dc:	58021400 	.word	0x58021400
 80021e0:	58021800 	.word	0x58021800
 80021e4:	58021c00 	.word	0x58021c00
 80021e8:	58022000 	.word	0x58022000
 80021ec:	58022400 	.word	0x58022400
 80021f0:	2300      	movs	r3, #0
 80021f2:	69fa      	ldr	r2, [r7, #28]
 80021f4:	f002 0203 	and.w	r2, r2, #3
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	4093      	lsls	r3, r2
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002202:	4938      	ldr	r1, [pc, #224]	@ (80022e4 <HAL_GPIO_Init+0x35c>)
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	3302      	adds	r3, #2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002236:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800223e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002264:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	3301      	adds	r3, #1
 80022c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f ae63 	bne.w	8001f9c <HAL_GPIO_Init+0x14>
  }
}
 80022d6:	bf00      	nop
 80022d8:	bf00      	nop
 80022da:	3724      	adds	r7, #36	@ 0x24
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	58000400 	.word	0x58000400

080022e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	460b      	mov	r3, r1
 80022f2:	807b      	strh	r3, [r7, #2]
 80022f4:	4613      	mov	r3, r2
 80022f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022f8:	787b      	ldrb	r3, [r7, #1]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fe:	887a      	ldrh	r2, [r7, #2]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002304:	e003      	b.n	800230e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002306:	887b      	ldrh	r3, [r7, #2]
 8002308:	041a      	lsls	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	619a      	str	r2, [r3, #24]
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0fe      	b.n	800252a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fe5f 	bl	8001004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f004 fc5a 	bl	8006c0c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7c1a      	ldrb	r2, [r3, #16]
 8002360:	f88d 2000 	strb.w	r2, [sp]
 8002364:	3304      	adds	r3, #4
 8002366:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002368:	f004 fbde 	bl	8006b28 <USB_CoreInit>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e0d5      	b.n	800252a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2100      	movs	r1, #0
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fc52 	bl	8006c2e <USB_SetCurrentMode>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0c6      	b.n	800252a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e04a      	b.n	8002438 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3315      	adds	r3, #21
 80023b2:	2201      	movs	r2, #1
 80023b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	3314      	adds	r3, #20
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	b298      	uxth	r0, r3
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	332e      	adds	r3, #46	@ 0x2e
 80023de:	4602      	mov	r2, r0
 80023e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e2:	7bfa      	ldrb	r2, [r7, #15]
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	440b      	add	r3, r1
 80023f0:	3318      	adds	r3, #24
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f6:	7bfa      	ldrb	r2, [r7, #15]
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	440b      	add	r3, r1
 8002404:	331c      	adds	r3, #28
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	3320      	adds	r3, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3324      	adds	r3, #36	@ 0x24
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	3301      	adds	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	791b      	ldrb	r3, [r3, #4]
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	429a      	cmp	r2, r3
 8002440:	d3af      	bcc.n	80023a2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e044      	b.n	80024d2 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	4413      	add	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	3301      	adds	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	7bfa      	ldrb	r2, [r7, #15]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3b5      	bcc.n	8002448 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7c1a      	ldrb	r2, [r3, #16]
 80024e4:	f88d 2000 	strb.w	r2, [sp]
 80024e8:	3304      	adds	r3, #4
 80024ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ec:	f004 fbec 	bl	8006cc8 <USB_DevInit>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2202      	movs	r2, #2
 80024fa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e013      	b.n	800252a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	7b1b      	ldrb	r3, [r3, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d102      	bne.n	800251e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f80b 	bl	8002534 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f004 fda7 	bl	8007076 <USB_DevDisconnect>

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_PCDEx_ActivateLPM+0x44>)
 8002564:	4313      	orrs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	10000003 	.word	0x10000003

0800257c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002584:	4b19      	ldr	r3, [pc, #100]	@ (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b04      	cmp	r3, #4
 800258e:	d00a      	beq.n	80025a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002590:	4b16      	ldr	r3, [pc, #88]	@ (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	429a      	cmp	r2, r3
 800259c:	d001      	beq.n	80025a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e01f      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e01d      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025a6:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	490f      	ldr	r1, [pc, #60]	@ (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025b6:	f7fe ff83 	bl	80014c0 <HAL_GetTick>
 80025ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025bc:	e009      	b.n	80025d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025be:	f7fe ff7f 	bl	80014c0 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025cc:	d901      	bls.n	80025d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e007      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_PWREx_ConfigSupply+0x70>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025de:	d1ee      	bne.n	80025be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	58024800 	.word	0x58024800

080025f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80025f4:	4b05      	ldr	r3, [pc, #20]	@ (800260c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	4a04      	ldr	r2, [pc, #16]	@ (800260c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80025fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fe:	60d3      	str	r3, [r2, #12]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	58024800 	.word	0x58024800

08002610 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f000 bc48 	b.w	8002eb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 8088 	beq.w	8002742 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002632:	4b99      	ldr	r3, [pc, #612]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800263a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800263c:	4b96      	ldr	r3, [pc, #600]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002644:	2b10      	cmp	r3, #16
 8002646:	d007      	beq.n	8002658 <HAL_RCC_OscConfig+0x48>
 8002648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800264a:	2b18      	cmp	r3, #24
 800264c:	d111      	bne.n	8002672 <HAL_RCC_OscConfig+0x62>
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	f003 0303 	and.w	r3, r3, #3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d10c      	bne.n	8002672 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002658:	4b8f      	ldr	r3, [pc, #572]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d06d      	beq.n	8002740 <HAL_RCC_OscConfig+0x130>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d169      	bne.n	8002740 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	f000 bc21 	b.w	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x7a>
 800267c:	4b86      	ldr	r3, [pc, #536]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a85      	ldr	r2, [pc, #532]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002682:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e02e      	b.n	80026e8 <HAL_RCC_OscConfig+0xd8>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10c      	bne.n	80026ac <HAL_RCC_OscConfig+0x9c>
 8002692:	4b81      	ldr	r3, [pc, #516]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a80      	ldr	r2, [pc, #512]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002698:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4b7e      	ldr	r3, [pc, #504]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e01d      	b.n	80026e8 <HAL_RCC_OscConfig+0xd8>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026b4:	d10c      	bne.n	80026d0 <HAL_RCC_OscConfig+0xc0>
 80026b6:	4b78      	ldr	r3, [pc, #480]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a77      	ldr	r2, [pc, #476]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b75      	ldr	r3, [pc, #468]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a74      	ldr	r2, [pc, #464]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	e00b      	b.n	80026e8 <HAL_RCC_OscConfig+0xd8>
 80026d0:	4b71      	ldr	r3, [pc, #452]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a70      	ldr	r2, [pc, #448]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	4b6e      	ldr	r3, [pc, #440]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a6d      	ldr	r2, [pc, #436]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80026e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d013      	beq.n	8002718 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fee6 	bl	80014c0 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026f8:	f7fe fee2 	bl	80014c0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b64      	cmp	r3, #100	@ 0x64
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e3d4      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe8>
 8002716:	e014      	b.n	8002742 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002718:	f7fe fed2 	bl	80014c0 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002720:	f7fe fece 	bl	80014c0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b64      	cmp	r3, #100	@ 0x64
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e3c0      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002732:	4b59      	ldr	r3, [pc, #356]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x110>
 800273e:	e000      	b.n	8002742 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002740:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 80ca 	beq.w	80028e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002750:	4b51      	ldr	r3, [pc, #324]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002758:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800275a:	4b4f      	ldr	r3, [pc, #316]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800275c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_RCC_OscConfig+0x166>
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b18      	cmp	r3, #24
 800276a:	d156      	bne.n	800281a <HAL_RCC_OscConfig+0x20a>
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d151      	bne.n	800281a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	4b48      	ldr	r3, [pc, #288]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x17e>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e392      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800278e:	4b42      	ldr	r3, [pc, #264]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 0219 	bic.w	r2, r3, #25
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	493f      	ldr	r1, [pc, #252]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe fe8e 	bl	80014c0 <HAL_GetTick>
 80027a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fe8a 	bl	80014c0 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e37c      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c6:	f7fe feab 	bl	8001520 <HAL_GetREVID>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d817      	bhi.n	8002804 <HAL_RCC_OscConfig+0x1f4>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b40      	cmp	r3, #64	@ 0x40
 80027da:	d108      	bne.n	80027ee <HAL_RCC_OscConfig+0x1de>
 80027dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ec:	e07a      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	031b      	lsls	r3, r3, #12
 80027fc:	4926      	ldr	r1, [pc, #152]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002802:	e06f      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	4921      	ldr	r1, [pc, #132]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002818:	e064      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d047      	beq.n	80028b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002822:	4b1d      	ldr	r3, [pc, #116]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 0219 	bic.w	r2, r3, #25
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	491a      	ldr	r1, [pc, #104]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fe44 	bl	80014c0 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800283c:	f7fe fe40 	bl	80014c0 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e332      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284e:	4b12      	ldr	r3, [pc, #72]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285a:	f7fe fe61 	bl	8001520 <HAL_GetREVID>
 800285e:	4603      	mov	r3, r0
 8002860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002864:	4293      	cmp	r3, r2
 8002866:	d819      	bhi.n	800289c <HAL_RCC_OscConfig+0x28c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b40      	cmp	r3, #64	@ 0x40
 800286e:	d108      	bne.n	8002882 <HAL_RCC_OscConfig+0x272>
 8002870:	4b09      	ldr	r3, [pc, #36]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002878:	4a07      	ldr	r2, [pc, #28]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 800287a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287e:	6053      	str	r3, [r2, #4]
 8002880:	e030      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
 8002882:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	031b      	lsls	r3, r3, #12
 8002890:	4901      	ldr	r1, [pc, #4]	@ (8002898 <HAL_RCC_OscConfig+0x288>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 8002896:	e025      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
 8002898:	58024400 	.word	0x58024400
 800289c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	061b      	lsls	r3, r3, #24
 80028aa:	4997      	ldr	r1, [pc, #604]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]
 80028b0:	e018      	b.n	80028e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b2:	4b95      	ldr	r3, [pc, #596]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a94      	ldr	r2, [pc, #592]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	f023 0301 	bic.w	r3, r3, #1
 80028bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fdff 	bl	80014c0 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c6:	f7fe fdfb 	bl	80014c0 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e2ed      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028d8:	4b8b      	ldr	r3, [pc, #556]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a9 	beq.w	8002a44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028f2:	4b85      	ldr	r3, [pc, #532]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80028fc:	4b82      	ldr	r3, [pc, #520]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002900:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d007      	beq.n	8002918 <HAL_RCC_OscConfig+0x308>
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	2b18      	cmp	r3, #24
 800290c:	d13a      	bne.n	8002984 <HAL_RCC_OscConfig+0x374>
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d135      	bne.n	8002984 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002918:	4b7b      	ldr	r3, [pc, #492]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d005      	beq.n	8002930 <HAL_RCC_OscConfig+0x320>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	2b80      	cmp	r3, #128	@ 0x80
 800292a:	d001      	beq.n	8002930 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e2c1      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002930:	f7fe fdf6 	bl	8001520 <HAL_GetREVID>
 8002934:	4603      	mov	r3, r0
 8002936:	f241 0203 	movw	r2, #4099	@ 0x1003
 800293a:	4293      	cmp	r3, r2
 800293c:	d817      	bhi.n	800296e <HAL_RCC_OscConfig+0x35e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	2b20      	cmp	r3, #32
 8002944:	d108      	bne.n	8002958 <HAL_RCC_OscConfig+0x348>
 8002946:	4b70      	ldr	r3, [pc, #448]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800294e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002954:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002956:	e075      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002958:	4b6b      	ldr	r3, [pc, #428]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	069b      	lsls	r3, r3, #26
 8002966:	4968      	ldr	r1, [pc, #416]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800296c:	e06a      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800296e:	4b66      	ldr	r3, [pc, #408]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	4962      	ldr	r1, [pc, #392]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002982:	e05f      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d042      	beq.n	8002a12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800298c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5d      	ldr	r2, [pc, #372]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fd92 	bl	80014c0 <HAL_GetTick>
 800299c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029a0:	f7fe fd8e 	bl	80014c0 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e280      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029b2:	4b55      	ldr	r3, [pc, #340]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029be:	f7fe fdaf 	bl	8001520 <HAL_GetREVID>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d817      	bhi.n	80029fc <HAL_RCC_OscConfig+0x3ec>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d108      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3d6>
 80029d4:	4b4c      	ldr	r3, [pc, #304]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029e2:	6053      	str	r3, [r2, #4]
 80029e4:	e02e      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
 80029e6:	4b48      	ldr	r3, [pc, #288]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	069b      	lsls	r3, r3, #26
 80029f4:	4944      	ldr	r1, [pc, #272]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
 80029fa:	e023      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
 80029fc:	4b42      	ldr	r3, [pc, #264]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	061b      	lsls	r3, r3, #24
 8002a0a:	493f      	ldr	r1, [pc, #252]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60cb      	str	r3, [r1, #12]
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3c      	ldr	r2, [pc, #240]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fd4f 	bl	80014c0 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a26:	f7fe fd4b 	bl	80014c0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e23d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a38:	4b33      	ldr	r3, [pc, #204]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1f0      	bne.n	8002a26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d036      	beq.n	8002abe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d019      	beq.n	8002a8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a58:	4b2b      	ldr	r3, [pc, #172]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a64:	f7fe fd2c 	bl	80014c0 <HAL_GetTick>
 8002a68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fd28 	bl	80014c0 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e21a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x45c>
 8002a8a:	e018      	b.n	8002abe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a90:	4a1d      	ldr	r2, [pc, #116]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002a92:	f023 0301 	bic.w	r3, r3, #1
 8002a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7fe fd12 	bl	80014c0 <HAL_GetTick>
 8002a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fd0e 	bl	80014c0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e200      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d039      	beq.n	8002b3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01c      	beq.n	8002b0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002adc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ade:	f7fe fcef 	bl	80014c0 <HAL_GetTick>
 8002ae2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae6:	f7fe fceb 	bl	80014c0 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e1dd      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002af8:	4b03      	ldr	r3, [pc, #12]	@ (8002b08 <HAL_RCC_OscConfig+0x4f8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4d6>
 8002b04:	e01b      	b.n	8002b3e <HAL_RCC_OscConfig+0x52e>
 8002b06:	bf00      	nop
 8002b08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b0c:	4b9b      	ldr	r3, [pc, #620]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a9a      	ldr	r2, [pc, #616]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fcd2 	bl	80014c0 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b20:	f7fe fcce 	bl	80014c0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1c0      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b32:	4b92      	ldr	r3, [pc, #584]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f000 8081 	beq.w	8002c4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002d80 <HAL_RCC_OscConfig+0x770>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a8b      	ldr	r2, [pc, #556]	@ (8002d80 <HAL_RCC_OscConfig+0x770>)
 8002b52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b58:	f7fe fcb2 	bl	80014c0 <HAL_GetTick>
 8002b5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b60:	f7fe fcae 	bl	80014c0 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1a0      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b72:	4b83      	ldr	r3, [pc, #524]	@ (8002d80 <HAL_RCC_OscConfig+0x770>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d106      	bne.n	8002b94 <HAL_RCC_OscConfig+0x584>
 8002b86:	4b7d      	ldr	r3, [pc, #500]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b92:	e02d      	b.n	8002bf0 <HAL_RCC_OscConfig+0x5e0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x5a6>
 8002b9c:	4b77      	ldr	r3, [pc, #476]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba0:	4a76      	ldr	r2, [pc, #472]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ba8:	4b74      	ldr	r3, [pc, #464]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bac:	4a73      	ldr	r2, [pc, #460]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bb4:	e01c      	b.n	8002bf0 <HAL_RCC_OscConfig+0x5e0>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b05      	cmp	r3, #5
 8002bbc:	d10c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x5c8>
 8002bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	4a6e      	ldr	r2, [pc, #440]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	f043 0304 	orr.w	r3, r3, #4
 8002bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bca:	4b6c      	ldr	r3, [pc, #432]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	4a6b      	ldr	r2, [pc, #428]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bd6:	e00b      	b.n	8002bf0 <HAL_RCC_OscConfig+0x5e0>
 8002bd8:	4b68      	ldr	r3, [pc, #416]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bdc:	4a67      	ldr	r2, [pc, #412]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be4:	4b65      	ldr	r3, [pc, #404]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be8:	4a64      	ldr	r2, [pc, #400]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002bea:	f023 0304 	bic.w	r3, r3, #4
 8002bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d015      	beq.n	8002c24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf8:	f7fe fc62 	bl	80014c0 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fe fc5e 	bl	80014c0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e14e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c16:	4b59      	ldr	r3, [pc, #356]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0ee      	beq.n	8002c00 <HAL_RCC_OscConfig+0x5f0>
 8002c22:	e014      	b.n	8002c4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe fc4c 	bl	80014c0 <HAL_GetTick>
 8002c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2c:	f7fe fc48 	bl	80014c0 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e138      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c42:	4b4e      	ldr	r3, [pc, #312]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1ee      	bne.n	8002c2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 812d 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c58:	4b48      	ldr	r3, [pc, #288]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c60:	2b18      	cmp	r3, #24
 8002c62:	f000 80bd 	beq.w	8002de0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	f040 809e 	bne.w	8002dac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c70:	4b42      	ldr	r3, [pc, #264]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a41      	ldr	r2, [pc, #260]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fc20 	bl	80014c0 <HAL_GetTick>
 8002c80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7fe fc1c 	bl	80014c0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e10e      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c96:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1f0      	bne.n	8002c84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca2:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ca6:	4b37      	ldr	r3, [pc, #220]	@ (8002d84 <HAL_RCC_OscConfig+0x774>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	4931      	ldr	r1, [pc, #196]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	628b      	str	r3, [r1, #40]	@ 0x28
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	025b      	lsls	r3, r3, #9
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	061b      	lsls	r3, r3, #24
 8002ce8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002cec:	4923      	ldr	r1, [pc, #140]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	4a21      	ldr	r2, [pc, #132]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d02:	4b21      	ldr	r3, [pc, #132]	@ (8002d88 <HAL_RCC_OscConfig+0x778>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d0a:	00d2      	lsls	r2, r2, #3
 8002d0c:	491b      	ldr	r1, [pc, #108]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d12:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d16:	f023 020c 	bic.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1e:	4917      	ldr	r1, [pc, #92]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d24:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d28:	f023 0202 	bic.w	r2, r3, #2
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	4912      	ldr	r1, [pc, #72]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d36:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3a:	4a10      	ldr	r2, [pc, #64]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d42:	4b0e      	ldr	r3, [pc, #56]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	4a0d      	ldr	r2, [pc, #52]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	4a0a      	ldr	r2, [pc, #40]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002d5a:	4b08      	ldr	r3, [pc, #32]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	4a07      	ldr	r2, [pc, #28]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a04      	ldr	r2, [pc, #16]	@ (8002d7c <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d72:	f7fe fba5 	bl	80014c0 <HAL_GetTick>
 8002d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d78:	e011      	b.n	8002d9e <HAL_RCC_OscConfig+0x78e>
 8002d7a:	bf00      	nop
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	58024800 	.word	0x58024800
 8002d84:	fffffc0c 	.word	0xfffffc0c
 8002d88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe fb98 	bl	80014c0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e08a      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d9e:	4b47      	ldr	r3, [pc, #284]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x77c>
 8002daa:	e082      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dac:	4b43      	ldr	r3, [pc, #268]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a42      	ldr	r2, [pc, #264]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002db2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe fb82 	bl	80014c0 <HAL_GetTick>
 8002dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe fb7e 	bl	80014c0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e070      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x7b0>
 8002dde:	e068      	b.n	8002eb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002de0:	4b36      	ldr	r3, [pc, #216]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002de6:	4b35      	ldr	r3, [pc, #212]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d031      	beq.n	8002e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f003 0203 	and.w	r2, r3, #3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d12a      	bne.n	8002e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d122      	bne.n	8002e58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d11a      	bne.n	8002e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	0a5b      	lsrs	r3, r3, #9
 8002e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d111      	bne.n	8002e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	0c1b      	lsrs	r3, r3, #16
 8002e38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	0e1b      	lsrs	r3, r3, #24
 8002e4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e02b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d01f      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002e72:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e76:	4a11      	ldr	r2, [pc, #68]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e7e:	f7fe fb1f 	bl	80014c0 <HAL_GetTick>
 8002e82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e84:	bf00      	nop
 8002e86:	f7fe fb1b 	bl	80014c0 <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d0f9      	beq.n	8002e86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e92:	4b0a      	ldr	r3, [pc, #40]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002e94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_RCC_OscConfig+0x8b0>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e9e:	00d2      	lsls	r2, r2, #3
 8002ea0:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ea6:	4b05      	ldr	r3, [pc, #20]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	4a04      	ldr	r2, [pc, #16]	@ (8002ebc <HAL_RCC_OscConfig+0x8ac>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3730      	adds	r7, #48	@ 0x30
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	ffff0007 	.word	0xffff0007

08002ec4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e19c      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b8a      	ldr	r3, [pc, #552]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d910      	bls.n	8002f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b87      	ldr	r3, [pc, #540]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 020f 	bic.w	r2, r3, #15
 8002eee:	4985      	ldr	r1, [pc, #532]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b83      	ldr	r3, [pc, #524]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d001      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e184      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d010      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	4b7b      	ldr	r3, [pc, #492]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d908      	bls.n	8002f36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f24:	4b78      	ldr	r3, [pc, #480]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	4975      	ldr	r1, [pc, #468]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d010      	beq.n	8002f64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	4b70      	ldr	r3, [pc, #448]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d908      	bls.n	8002f64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f52:	4b6d      	ldr	r3, [pc, #436]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	496a      	ldr	r1, [pc, #424]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699a      	ldr	r2, [r3, #24]
 8002f74:	4b64      	ldr	r3, [pc, #400]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d908      	bls.n	8002f92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f80:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	495e      	ldr	r1, [pc, #376]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d010      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	69da      	ldr	r2, [r3, #28]
 8002fa2:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d908      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002fae:	4b56      	ldr	r3, [pc, #344]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	4953      	ldr	r1, [pc, #332]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d908      	bls.n	8002fee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f023 020f 	bic.w	r2, r3, #15
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4947      	ldr	r1, [pc, #284]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d055      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ffa:	4b43      	ldr	r3, [pc, #268]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4940      	ldr	r1, [pc, #256]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003008:	4313      	orrs	r3, r2
 800300a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b02      	cmp	r3, #2
 8003012:	d107      	bne.n	8003024 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003014:	4b3c      	ldr	r3, [pc, #240]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d121      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0f6      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d107      	bne.n	800303c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800302c:	4b36      	ldr	r3, [pc, #216]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d115      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0ea      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003044:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d109      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0de      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003054:	4b2c      	ldr	r3, [pc, #176]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e0d6      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003064:	4b28      	ldr	r3, [pc, #160]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f023 0207 	bic.w	r2, r3, #7
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	4925      	ldr	r1, [pc, #148]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003072:	4313      	orrs	r3, r2
 8003074:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003076:	f7fe fa23 	bl	80014c0 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307c:	e00a      	b.n	8003094 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307e:	f7fe fa1f 	bl	80014c0 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308c:	4293      	cmp	r3, r2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0be      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003094:	4b1c      	ldr	r3, [pc, #112]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d1eb      	bne.n	800307e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d010      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b14      	ldr	r3, [pc, #80]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	429a      	cmp	r2, r3
 80030c0:	d208      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c2:	4b11      	ldr	r3, [pc, #68]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f023 020f 	bic.w	r2, r3, #15
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	490e      	ldr	r1, [pc, #56]	@ (8003108 <HAL_RCC_ClockConfig+0x244>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 030f 	and.w	r3, r3, #15
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d214      	bcs.n	800310c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b08      	ldr	r3, [pc, #32]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f023 020f 	bic.w	r2, r3, #15
 80030ea:	4906      	ldr	r1, [pc, #24]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f2:	4b04      	ldr	r3, [pc, #16]	@ (8003104 <HAL_RCC_ClockConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d005      	beq.n	800310c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e086      	b.n	8003212 <HAL_RCC_ClockConfig+0x34e>
 8003104:	52002000 	.word	0x52002000
 8003108:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d010      	beq.n	800313a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691a      	ldr	r2, [r3, #16]
 800311c:	4b3f      	ldr	r3, [pc, #252]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003124:	429a      	cmp	r2, r3
 8003126:	d208      	bcs.n	800313a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003128:	4b3c      	ldr	r3, [pc, #240]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	4939      	ldr	r1, [pc, #228]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 8003136:	4313      	orrs	r3, r2
 8003138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d010      	beq.n	8003168 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	695a      	ldr	r2, [r3, #20]
 800314a:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003152:	429a      	cmp	r2, r3
 8003154:	d208      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	492e      	ldr	r1, [pc, #184]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 8003164:	4313      	orrs	r3, r2
 8003166:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d010      	beq.n	8003196 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	4b28      	ldr	r3, [pc, #160]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003180:	429a      	cmp	r2, r3
 8003182:	d208      	bcs.n	8003196 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003184:	4b25      	ldr	r3, [pc, #148]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	4922      	ldr	r1, [pc, #136]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 8003192:	4313      	orrs	r3, r2
 8003194:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69da      	ldr	r2, [r3, #28]
 80031a6:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d208      	bcs.n	80031c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80031b2:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	4917      	ldr	r1, [pc, #92]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031c4:	f000 f834 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b14      	ldr	r3, [pc, #80]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	0a1b      	lsrs	r3, r3, #8
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	4912      	ldr	r1, [pc, #72]	@ (8003220 <HAL_RCC_ClockConfig+0x35c>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
 80031e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCC_ClockConfig+0x358>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	4a0d      	ldr	r2, [pc, #52]	@ (8003220 <HAL_RCC_ClockConfig+0x35c>)
 80031ec:	5cd3      	ldrb	r3, [r2, r3]
 80031ee:	f003 031f 	and.w	r3, r3, #31
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	4a0a      	ldr	r2, [pc, #40]	@ (8003224 <HAL_RCC_ClockConfig+0x360>)
 80031fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003228 <HAL_RCC_ClockConfig+0x364>)
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_ClockConfig+0x368>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd ff78 	bl	80010fc <HAL_InitTick>
 800320c:	4603      	mov	r3, r0
 800320e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	58024400 	.word	0x58024400
 8003220:	08009bf4 	.word	0x08009bf4
 8003224:	24000004 	.word	0x24000004
 8003228:	24000000 	.word	0x24000000
 800322c:	24000008 	.word	0x24000008

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	@ 0x24
 8003234:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003236:	4bb3      	ldr	r3, [pc, #716]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800323e:	2b18      	cmp	r3, #24
 8003240:	f200 8155 	bhi.w	80034ee <HAL_RCC_GetSysClockFreq+0x2be>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	080032b1 	.word	0x080032b1
 8003250:	080034ef 	.word	0x080034ef
 8003254:	080034ef 	.word	0x080034ef
 8003258:	080034ef 	.word	0x080034ef
 800325c:	080034ef 	.word	0x080034ef
 8003260:	080034ef 	.word	0x080034ef
 8003264:	080034ef 	.word	0x080034ef
 8003268:	080034ef 	.word	0x080034ef
 800326c:	080032d7 	.word	0x080032d7
 8003270:	080034ef 	.word	0x080034ef
 8003274:	080034ef 	.word	0x080034ef
 8003278:	080034ef 	.word	0x080034ef
 800327c:	080034ef 	.word	0x080034ef
 8003280:	080034ef 	.word	0x080034ef
 8003284:	080034ef 	.word	0x080034ef
 8003288:	080034ef 	.word	0x080034ef
 800328c:	080032dd 	.word	0x080032dd
 8003290:	080034ef 	.word	0x080034ef
 8003294:	080034ef 	.word	0x080034ef
 8003298:	080034ef 	.word	0x080034ef
 800329c:	080034ef 	.word	0x080034ef
 80032a0:	080034ef 	.word	0x080034ef
 80032a4:	080034ef 	.word	0x080034ef
 80032a8:	080034ef 	.word	0x080034ef
 80032ac:	080032e3 	.word	0x080032e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b0:	4b94      	ldr	r3, [pc, #592]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d009      	beq.n	80032d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032bc:	4b91      	ldr	r3, [pc, #580]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	4a90      	ldr	r2, [pc, #576]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80032ce:	e111      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032d0:	4b8d      	ldr	r3, [pc, #564]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d2:	61bb      	str	r3, [r7, #24]
      break;
 80032d4:	e10e      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80032d6:	4b8d      	ldr	r3, [pc, #564]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d8:	61bb      	str	r3, [r7, #24]
      break;
 80032da:	e10b      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80032dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032de:	61bb      	str	r3, [r7, #24]
      break;
 80032e0:	e108      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032e2:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80032ec:	4b85      	ldr	r3, [pc, #532]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032f8:	4b82      	ldr	r3, [pc, #520]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003302:	4b80      	ldr	r3, [pc, #512]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003306:	08db      	lsrs	r3, r3, #3
 8003308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 80e1 	beq.w	80034e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	f000 8083 	beq.w	8003434 <HAL_RCC_GetSysClockFreq+0x204>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b02      	cmp	r3, #2
 8003332:	f200 80a1 	bhi.w	8003478 <HAL_RCC_GetSysClockFreq+0x248>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x114>
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d056      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003342:	e099      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003344:	4b6f      	ldr	r3, [pc, #444]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02d      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003350:	4b6c      	ldr	r3, [pc, #432]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	4a6b      	ldr	r2, [pc, #428]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	ee07 3a90 	vmov	s15, r3
 8003368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337a:	4b62      	ldr	r3, [pc, #392]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800337e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003382:	ee07 3a90 	vmov	s15, r3
 8003386:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338a:	ed97 6a02 	vldr	s12, [r7, #8]
 800338e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003392:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003396:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800339e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80033aa:	e087      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	ee07 3a90 	vmov	s15, r3
 80033b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033be:	4b51      	ldr	r3, [pc, #324]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c6:	ee07 3a90 	vmov	s15, r3
 80033ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ee:	e065      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800351c <HAL_RCC_GetSysClockFreq+0x2ec>
 80033fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003402:	4b40      	ldr	r3, [pc, #256]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340a:	ee07 3a90 	vmov	s15, r3
 800340e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003412:	ed97 6a02 	vldr	s12, [r7, #8]
 8003416:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800341e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003432:	e043      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	ee07 3a90 	vmov	s15, r3
 800343a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800343e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003520 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003446:	4b2f      	ldr	r3, [pc, #188]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344e:	ee07 3a90 	vmov	s15, r3
 8003452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003456:	ed97 6a02 	vldr	s12, [r7, #8]
 800345a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2e4>
 800345e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800346a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800346e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003476:	e021      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	ee07 3a90 	vmov	s15, r3
 800347e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003482:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800351c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348a:	4b1e      	ldr	r3, [pc, #120]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	ee07 3a90 	vmov	s15, r3
 8003496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349a:	ed97 6a02 	vldr	s12, [r7, #8]
 800349e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80034bc:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	0a5b      	lsrs	r3, r3, #9
 80034c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034c6:	3301      	adds	r3, #1
 80034c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	ee07 3a90 	vmov	s15, r3
 80034d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80034d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e0:	ee17 3a90 	vmov	r3, s15
 80034e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80034e6:	e005      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	61bb      	str	r3, [r7, #24]
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80034ee:	4b07      	ldr	r3, [pc, #28]	@ (800350c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034f0:	61bb      	str	r3, [r7, #24]
      break;
 80034f2:	bf00      	nop
  }

  return sysclockfreq;
 80034f4:	69bb      	ldr	r3, [r7, #24]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	@ 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	58024400 	.word	0x58024400
 8003508:	03d09000 	.word	0x03d09000
 800350c:	003d0900 	.word	0x003d0900
 8003510:	007a1200 	.word	0x007a1200
 8003514:	46000000 	.word	0x46000000
 8003518:	4c742400 	.word	0x4c742400
 800351c:	4a742400 	.word	0x4a742400
 8003520:	4af42400 	.word	0x4af42400

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800352a:	f7ff fe81 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 800352e:	4602      	mov	r2, r0
 8003530:	4b10      	ldr	r3, [pc, #64]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x50>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	490f      	ldr	r1, [pc, #60]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x54>)
 800353c:	5ccb      	ldrb	r3, [r1, r3]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x50>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	4a09      	ldr	r2, [pc, #36]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x54>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a07      	ldr	r2, [pc, #28]	@ (800357c <HAL_RCC_GetHCLKFreq+0x58>)
 8003560:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003562:	4a07      	ldr	r2, [pc, #28]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003568:	4b04      	ldr	r3, [pc, #16]	@ (800357c <HAL_RCC_GetHCLKFreq+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	58024400 	.word	0x58024400
 8003578:	08009bf4 	.word	0x08009bf4
 800357c:	24000004 	.word	0x24000004
 8003580:	24000000 	.word	0x24000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003588:	f7ff ffcc 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	091b      	lsrs	r3, r3, #4
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	58024400 	.word	0x58024400
 80035ac:	08009bf4 	.word	0x08009bf4

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035b4:	f7ff ffb6 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	58024400 	.word	0x58024400
 80035d8:	08009bf4 	.word	0x08009bf4

080035dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	223f      	movs	r2, #63	@ 0x3f
 80035ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f003 0207 	and.w	r2, r3, #7
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003604:	4b14      	ldr	r3, [pc, #80]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 020f 	and.w	r2, r3, #15
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003610:	4b11      	ldr	r3, [pc, #68]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003628:	4b0b      	ldr	r3, [pc, #44]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003634:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <HAL_RCC_GetClockConfig+0x7c>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003640:	4b06      	ldr	r3, [pc, #24]	@ (800365c <HAL_RCC_GetClockConfig+0x80>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	601a      	str	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	58024400 	.word	0x58024400
 800365c:	52002000 	.word	0x52002000

08003660 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b0ca      	sub	sp, #296	@ 0x128
 8003666:	af00      	add	r7, sp, #0
 8003668:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800366c:	2300      	movs	r3, #0
 800366e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003672:	2300      	movs	r3, #0
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003684:	2500      	movs	r5, #0
 8003686:	ea54 0305 	orrs.w	r3, r4, r5
 800368a:	d049      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003692:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003696:	d02f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003698:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800369c:	d828      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800369e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036a2:	d01a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036a8:	d822      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036b2:	d007      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036b4:	e01c      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b6:	4bb8      	ldr	r3, [pc, #736]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	4ab7      	ldr	r2, [pc, #732]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036c2:	e01a      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c8:	3308      	adds	r3, #8
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f001 fc8f 	bl	8004ff0 <RCCEx_PLL2_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036de:	3328      	adds	r3, #40	@ 0x28
 80036e0:	2102      	movs	r1, #2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fd36 	bl	8005154 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003702:	4ba5      	ldr	r3, [pc, #660]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003710:	4aa1      	ldr	r2, [pc, #644]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003712:	430b      	orrs	r3, r1
 8003714:	6513      	str	r3, [r2, #80]	@ 0x50
 8003716:	e003      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800371c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800372c:	f04f 0900 	mov.w	r9, #0
 8003730:	ea58 0309 	orrs.w	r3, r8, r9
 8003734:	d047      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800373c:	2b04      	cmp	r3, #4
 800373e:	d82a      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003740:	a201      	add	r2, pc, #4	@ (adr r2, 8003748 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	0800375d 	.word	0x0800375d
 800374c:	0800376b 	.word	0x0800376b
 8003750:	08003781 	.word	0x08003781
 8003754:	0800379f 	.word	0x0800379f
 8003758:	0800379f 	.word	0x0800379f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800375c:	4b8e      	ldr	r3, [pc, #568]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	4a8d      	ldr	r2, [pc, #564]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003766:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003768:	e01a      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	3308      	adds	r3, #8
 8003770:	2100      	movs	r1, #0
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fc3c 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800377e:	e00f      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fce3 	bl	8005154 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003794:	e004      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037ac:	f023 0107 	bic.w	r1, r3, #7
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b6:	4a78      	ldr	r2, [pc, #480]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80037d2:	f04f 0b00 	mov.w	fp, #0
 80037d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80037da:	d04c      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e6:	d030      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037ec:	d829      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f0:	d02d      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80037f4:	d825      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037f6:	2b80      	cmp	r3, #128	@ 0x80
 80037f8:	d018      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80037fa:	2b80      	cmp	r3, #128	@ 0x80
 80037fc:	d821      	bhi.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003802:	2b40      	cmp	r3, #64	@ 0x40
 8003804:	d007      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003806:	e01c      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4b63      	ldr	r3, [pc, #396]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800380c:	4a62      	ldr	r2, [pc, #392]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003812:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003814:	e01c      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	3308      	adds	r3, #8
 800381c:	2100      	movs	r1, #0
 800381e:	4618      	mov	r0, r3
 8003820:	f001 fbe6 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800382a:	e011      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800382c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003830:	3328      	adds	r3, #40	@ 0x28
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f001 fc8d 	bl	8005154 <RCCEx_PLL3_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003840:	e006      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003848:	e002      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800384e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003850:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003858:	4b4f      	ldr	r3, [pc, #316]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800385a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800385c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003866:	4a4c      	ldr	r2, [pc, #304]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6513      	str	r3, [r2, #80]	@ 0x50
 800386c:	e003      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003872:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003882:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800388c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003890:	460b      	mov	r3, r1
 8003892:	4313      	orrs	r3, r2
 8003894:	d053      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800389e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038a2:	d035      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038a4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038a8:	d82e      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038ae:	d031      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038b0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038b4:	d828      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038ba:	d01a      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c0:	d822      	bhi.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038ca:	d007      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80038cc:	e01c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ce:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	4a31      	ldr	r2, [pc, #196]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038da:	e01c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e0:	3308      	adds	r3, #8
 80038e2:	2100      	movs	r1, #0
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fb83 	bl	8004ff0 <RCCEx_PLL2_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038f0:	e011      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f6:	3328      	adds	r3, #40	@ 0x28
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fc2a 	bl	8005154 <RCCEx_PLL3_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003906:	e006      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390e:	e002      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003910:	bf00      	nop
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800391e:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800392e:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003930:	430b      	orrs	r3, r1
 8003932:	6593      	str	r3, [r2, #88]	@ 0x58
 8003934:	e003      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800393e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800394a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003954:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003958:	460b      	mov	r3, r1
 800395a:	4313      	orrs	r3, r2
 800395c:	d056      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003966:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800396a:	d038      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800396c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003970:	d831      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003972:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003976:	d034      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003978:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800397c:	d82b      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800397e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003982:	d01d      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003984:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003988:	d825      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800398e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003994:	e01f      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003996:	bf00      	nop
 8003998:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399c:	4ba2      	ldr	r3, [pc, #648]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	4aa1      	ldr	r2, [pc, #644]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039a8:	e01c      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ae:	3308      	adds	r3, #8
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 fb1c 	bl	8004ff0 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039be:	e011      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c4:	3328      	adds	r3, #40	@ 0x28
 80039c6:	2100      	movs	r1, #0
 80039c8:	4618      	mov	r0, r3
 80039ca:	f001 fbc3 	bl	8005154 <RCCEx_PLL3_Config>
 80039ce:	4603      	mov	r3, r0
 80039d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039d4:	e006      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039dc:	e002      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039fc:	4a8a      	ldr	r2, [pc, #552]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a22:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	d03a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	2b30      	cmp	r3, #48	@ 0x30
 8003a34:	d01f      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a36:	2b30      	cmp	r3, #48	@ 0x30
 8003a38:	d819      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d00c      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d815      	bhi.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d019      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d111      	bne.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a4a:	4b77      	ldr	r3, [pc, #476]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	4a76      	ldr	r2, [pc, #472]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a56:	e011      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5c:	3308      	adds	r3, #8
 8003a5e:	2102      	movs	r1, #2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f001 fac5 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a6c:	e006      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a84:	4b68      	ldr	r3, [pc, #416]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a88:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a92:	4a65      	ldr	r2, [pc, #404]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a94:	430b      	orrs	r3, r1
 8003a96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a98:	e003      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003aae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d051      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003acc:	d035      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ace:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad2:	d82e      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ad4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ad8:	d031      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ada:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ade:	d828      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae4:	d01a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003ae6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aea:	d822      	bhi.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	d007      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003af6:	e01c      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afc:	4a4a      	ldr	r2, [pc, #296]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b04:	e01c      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0a:	3308      	adds	r3, #8
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f001 fa6e 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b1a:	e011      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b20:	3328      	adds	r3, #40	@ 0x28
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 fb15 	bl	8005154 <RCCEx_PLL3_Config>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b30:	e006      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b48:	4b37      	ldr	r3, [pc, #220]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b4c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b56:	4a34      	ldr	r2, [pc, #208]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b76:	2300      	movs	r3, #0
 8003b78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b80:	460b      	mov	r3, r1
 8003b82:	4313      	orrs	r3, r2
 8003b84:	d056      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b90:	d033      	beq.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b96:	d82c      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b98:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003b9c:	d02f      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ba2:	d826      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003ba8:	d02b      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bae:	d820      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bb4:	d012      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bba:	d81a      	bhi.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d022      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bc4:	d115      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	3308      	adds	r3, #8
 8003bcc:	2101      	movs	r1, #1
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f001 fa0e 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bda:	e015      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	3328      	adds	r3, #40	@ 0x28
 8003be2:	2101      	movs	r1, #1
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fab5 	bl	8005154 <RCCEx_PLL3_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00a      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bf8:	e006      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bfa:	bf00      	nop
 8003bfc:	e004      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003bfe:	bf00      	nop
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c10:	4b05      	ldr	r3, [pc, #20]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c14:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c1e:	4a02      	ldr	r2, [pc, #8]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c24:	e006      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c26:	bf00      	nop
 8003c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c44:	2300      	movs	r3, #0
 8003c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c4a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d055      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c60:	d033      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c66:	d82c      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6c:	d02f      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c72:	d826      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c78:	d02b      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c7e:	d820      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c84:	d012      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c8a:	d81a      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d022      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c94:	d115      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f9a6 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003caa:	e015      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	3328      	adds	r3, #40	@ 0x28
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 fa4d 	bl	8005154 <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00a      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cc8:	e006      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e004      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e002      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd2:	bf00      	nop
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ce0:	4ba3      	ldr	r3, [pc, #652]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cf0:	4a9f      	ldr	r2, [pc, #636]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d037      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d2a:	d00e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d30:	d816      	bhi.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d018      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d3a:	d111      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	4a8b      	ldr	r2, [pc, #556]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d48:	e00f      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	3308      	adds	r3, #8
 8003d50:	2101      	movs	r1, #1
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f94c 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d5e:	e004      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d66:	e000      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10a      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d72:	4b7f      	ldr	r3, [pc, #508]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d76:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d80:	4a7b      	ldr	r2, [pc, #492]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d82:	430b      	orrs	r3, r1
 8003d84:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d86:	e003      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d98:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003da6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4313      	orrs	r3, r2
 8003dae:	d039      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d81c      	bhi.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dba:	a201      	add	r2, pc, #4	@ (adr r2, 8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dd1 	.word	0x08003dd1
 8003dc8:	08003ddf 	.word	0x08003ddf
 8003dcc:	08003dfd 	.word	0x08003dfd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b67      	ldr	r3, [pc, #412]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd4:	4a66      	ldr	r2, [pc, #408]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de2:	3308      	adds	r3, #8
 8003de4:	2102      	movs	r1, #2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f902 	bl	8004ff0 <RCCEx_PLL2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e06:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e0a:	f023 0103 	bic.w	r1, r3, #3
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e14:	4a56      	ldr	r2, [pc, #344]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e16:	430b      	orrs	r3, r1
 8003e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e1a:	e003      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e3a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e3e:	460b      	mov	r3, r1
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f000 809f 	beq.w	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e46:	4b4b      	ldr	r3, [pc, #300]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e52:	f7fd fb35 	bl	80014c0 <HAL_GetTick>
 8003e56:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5c:	f7fd fb30 	bl	80014c0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b64      	cmp	r3, #100	@ 0x64
 8003e6a:	d903      	bls.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e72:	e005      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e74:	4b3f      	ldr	r3, [pc, #252]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0ed      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d179      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e88:	4b39      	ldr	r3, [pc, #228]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e94:	4053      	eors	r3, r2
 8003e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d015      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e9e:	4b34      	ldr	r3, [pc, #208]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eaa:	4b31      	ldr	r3, [pc, #196]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	4a30      	ldr	r2, [pc, #192]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a2d      	ldr	r2, [pc, #180]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ec8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed6:	d118      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fd faf2 	bl	80014c0 <HAL_GetTick>
 8003edc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee0:	e00d      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd faed 	bl	80014c0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003eec:	1ad2      	subs	r2, r2, r3
 8003eee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d903      	bls.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003efc:	e005      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003efe:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0eb      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d129      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f22:	d10e      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f24:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f34:	091a      	lsrs	r2, r3, #4
 8003f36:	4b10      	ldr	r3, [pc, #64]	@ (8003f78 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6113      	str	r3, [r2, #16]
 8003f40:	e005      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f42:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f4c:	6113      	str	r3, [r2, #16]
 8003f4e:	4b08      	ldr	r3, [pc, #32]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5e:	4a04      	ldr	r2, [pc, #16]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f60:	430b      	orrs	r3, r1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	e00e      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f6e:	e009      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f70:	58024400 	.word	0x58024400
 8003f74:	58024800 	.word	0x58024800
 8003f78:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8c:	f002 0301 	and.w	r3, r2, #1
 8003f90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f94:	2300      	movs	r3, #0
 8003f96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f000 8089 	beq.w	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fac:	2b28      	cmp	r3, #40	@ 0x28
 8003fae:	d86b      	bhi.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb6:	bf00      	nop
 8003fb8:	08004091 	.word	0x08004091
 8003fbc:	08004089 	.word	0x08004089
 8003fc0:	08004089 	.word	0x08004089
 8003fc4:	08004089 	.word	0x08004089
 8003fc8:	08004089 	.word	0x08004089
 8003fcc:	08004089 	.word	0x08004089
 8003fd0:	08004089 	.word	0x08004089
 8003fd4:	08004089 	.word	0x08004089
 8003fd8:	0800405d 	.word	0x0800405d
 8003fdc:	08004089 	.word	0x08004089
 8003fe0:	08004089 	.word	0x08004089
 8003fe4:	08004089 	.word	0x08004089
 8003fe8:	08004089 	.word	0x08004089
 8003fec:	08004089 	.word	0x08004089
 8003ff0:	08004089 	.word	0x08004089
 8003ff4:	08004089 	.word	0x08004089
 8003ff8:	08004073 	.word	0x08004073
 8003ffc:	08004089 	.word	0x08004089
 8004000:	08004089 	.word	0x08004089
 8004004:	08004089 	.word	0x08004089
 8004008:	08004089 	.word	0x08004089
 800400c:	08004089 	.word	0x08004089
 8004010:	08004089 	.word	0x08004089
 8004014:	08004089 	.word	0x08004089
 8004018:	08004091 	.word	0x08004091
 800401c:	08004089 	.word	0x08004089
 8004020:	08004089 	.word	0x08004089
 8004024:	08004089 	.word	0x08004089
 8004028:	08004089 	.word	0x08004089
 800402c:	08004089 	.word	0x08004089
 8004030:	08004089 	.word	0x08004089
 8004034:	08004089 	.word	0x08004089
 8004038:	08004091 	.word	0x08004091
 800403c:	08004089 	.word	0x08004089
 8004040:	08004089 	.word	0x08004089
 8004044:	08004089 	.word	0x08004089
 8004048:	08004089 	.word	0x08004089
 800404c:	08004089 	.word	0x08004089
 8004050:	08004089 	.word	0x08004089
 8004054:	08004089 	.word	0x08004089
 8004058:	08004091 	.word	0x08004091
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	3308      	adds	r3, #8
 8004062:	2101      	movs	r1, #1
 8004064:	4618      	mov	r0, r3
 8004066:	f000 ffc3 	bl	8004ff0 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004070:	e00f      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	3328      	adds	r3, #40	@ 0x28
 8004078:	2101      	movs	r1, #1
 800407a:	4618      	mov	r0, r3
 800407c:	f001 f86a 	bl	8005154 <RCCEx_PLL3_Config>
 8004080:	4603      	mov	r3, r0
 8004082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004086:	e004      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800408e:	e000      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800409a:	4bbf      	ldr	r3, [pc, #764]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80040a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a8:	4abb      	ldr	r2, [pc, #748]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040aa:	430b      	orrs	r3, r1
 80040ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80040ae:	e003      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c0:	f002 0302 	and.w	r3, r2, #2
 80040c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80040ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80040d2:	460b      	mov	r3, r1
 80040d4:	4313      	orrs	r3, r2
 80040d6:	d041      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040de:	2b05      	cmp	r3, #5
 80040e0:	d824      	bhi.n	800412c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	08004135 	.word	0x08004135
 80040ec:	08004101 	.word	0x08004101
 80040f0:	08004117 	.word	0x08004117
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004104:	3308      	adds	r3, #8
 8004106:	2101      	movs	r1, #1
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ff71 	bl	8004ff0 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004114:	e00f      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	3328      	adds	r3, #40	@ 0x28
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f001 f818 	bl	8005154 <RCCEx_PLL3_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800412a:	e004      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004132:	e000      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004134:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800413e:	4b96      	ldr	r3, [pc, #600]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	f023 0107 	bic.w	r1, r3, #7
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800414c:	4a92      	ldr	r2, [pc, #584]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800414e:	430b      	orrs	r3, r1
 8004150:	6553      	str	r3, [r2, #84]	@ 0x54
 8004152:	e003      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004154:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004158:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004164:	f002 0304 	and.w	r3, r2, #4
 8004168:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004172:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004176:	460b      	mov	r3, r1
 8004178:	4313      	orrs	r3, r2
 800417a:	d044      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800417c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004184:	2b05      	cmp	r3, #5
 8004186:	d825      	bhi.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004188:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041a9 	.word	0x080041a9
 8004198:	080041bf 	.word	0x080041bf
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041dd 	.word	0x080041dd
 80041a4:	080041dd 	.word	0x080041dd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ac:	3308      	adds	r3, #8
 80041ae:	2101      	movs	r1, #1
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 ff1d 	bl	8004ff0 <RCCEx_PLL2_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041bc:	e00f      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	3328      	adds	r3, #40	@ 0x28
 80041c4:	2101      	movs	r1, #1
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 ffc4 	bl	8005154 <RCCEx_PLL3_Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041da:	e000      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10b      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041e6:	4b6c      	ldr	r3, [pc, #432]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ea:	f023 0107 	bic.w	r1, r3, #7
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041f6:	4a68      	ldr	r2, [pc, #416]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80041fc:	e003      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f002 0320 	and.w	r3, r2, #32
 8004212:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800421c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d055      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004232:	d033      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004234:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004238:	d82c      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	d02f      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004244:	d826      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004246:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800424a:	d02b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800424c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004250:	d820      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004252:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004256:	d012      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004258:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800425c:	d81a      	bhi.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d022      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004262:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004266:	d115      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426c:	3308      	adds	r3, #8
 800426e:	2100      	movs	r1, #0
 8004270:	4618      	mov	r0, r3
 8004272:	f000 febd 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800427c:	e015      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	3328      	adds	r3, #40	@ 0x28
 8004284:	2102      	movs	r1, #2
 8004286:	4618      	mov	r0, r3
 8004288:	f000 ff64 	bl	8005154 <RCCEx_PLL3_Config>
 800428c:	4603      	mov	r3, r0
 800428e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004292:	e00a      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800429a:	e006      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800429c:	bf00      	nop
 800429e:	e004      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a0:	bf00      	nop
 80042a2:	e002      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a4:	bf00      	nop
 80042a6:	e000      	b.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10b      	bne.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b2:	4b39      	ldr	r3, [pc, #228]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	4a35      	ldr	r2, [pc, #212]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c4:	430b      	orrs	r3, r1
 80042c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042c8:	e003      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042e2:	2300      	movs	r3, #0
 80042e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4313      	orrs	r3, r2
 80042f0:	d058      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80042fe:	d033      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004300:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004304:	d82c      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430a:	d02f      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800430c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004310:	d826      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004312:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004316:	d02b      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004318:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800431c:	d820      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800431e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004322:	d012      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004328:	d81a      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800432a:	2b00      	cmp	r3, #0
 800432c:	d022      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	d115      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	3308      	adds	r3, #8
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fe57 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004348:	e015      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	3328      	adds	r3, #40	@ 0x28
 8004350:	2102      	movs	r1, #2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fefe 	bl	8005154 <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800435e:	e00a      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004366:	e006      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004368:	bf00      	nop
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10e      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004382:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800438e:	4a02      	ldr	r2, [pc, #8]	@ (8004398 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6593      	str	r3, [r2, #88]	@ 0x58
 8004394:	e006      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004396:	bf00      	nop
 8004398:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80043b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043ba:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80043be:	460b      	mov	r3, r1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	d055      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043d0:	d033      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80043d2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043d6:	d82c      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043dc:	d02f      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e2:	d826      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043e8:	d02b      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043ea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043ee:	d820      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f4:	d012      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80043f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043fa:	d81a      	bhi.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d022      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004404:	d115      	bne.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440a:	3308      	adds	r3, #8
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fdee 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800441a:	e015      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800441c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004420:	3328      	adds	r3, #40	@ 0x28
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fe95 	bl	8005154 <RCCEx_PLL3_Config>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004430:	e00a      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004438:	e006      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800443a:	bf00      	nop
 800443c:	e004      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800443e:	bf00      	nop
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004448:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004450:	4ba1      	ldr	r3, [pc, #644]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004454:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004460:	4a9d      	ldr	r2, [pc, #628]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004462:	430b      	orrs	r3, r1
 8004464:	6593      	str	r3, [r2, #88]	@ 0x58
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f002 0308 	and.w	r3, r2, #8
 800447c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004486:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800448a:	460b      	mov	r3, r1
 800448c:	4313      	orrs	r3, r2
 800448e:	d01e      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800449c:	d10c      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	3328      	adds	r3, #40	@ 0x28
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fe54 	bl	8005154 <RCCEx_PLL3_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044b8:	4b87      	ldr	r3, [pc, #540]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044bc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044c8:	4a83      	ldr	r2, [pc, #524]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d6:	f002 0310 	and.w	r3, r2, #16
 80044da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044de:	2300      	movs	r3, #0
 80044e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044e4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d01e      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80044f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fa:	d10c      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004500:	3328      	adds	r3, #40	@ 0x28
 8004502:	2102      	movs	r1, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fe25 	bl	8005154 <RCCEx_PLL3_Config>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004516:	4b70      	ldr	r3, [pc, #448]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800451a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004526:	4a6c      	ldr	r2, [pc, #432]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004528:	430b      	orrs	r3, r1
 800452a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800452c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004542:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004546:	460b      	mov	r3, r1
 8004548:	4313      	orrs	r3, r2
 800454a:	d03e      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004550:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004554:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004558:	d022      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800455a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800455e:	d81b      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004568:	d00b      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800456a:	e015      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	3308      	adds	r3, #8
 8004572:	2100      	movs	r1, #0
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fd3b 	bl	8004ff0 <RCCEx_PLL2_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	3328      	adds	r3, #40	@ 0x28
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 fde2 	bl	8005154 <RCCEx_PLL3_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045aa:	4b4b      	ldr	r3, [pc, #300]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045ba:	4a47      	ldr	r2, [pc, #284]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045bc:	430b      	orrs	r3, r1
 80045be:	6593      	str	r3, [r2, #88]	@ 0x58
 80045c0:	e003      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045d8:	2300      	movs	r3, #0
 80045da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045dc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045e0:	460b      	mov	r3, r1
 80045e2:	4313      	orrs	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045f2:	d01f      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80045f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045f8:	d818      	bhi.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80045fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004604:	d007      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004606:	e011      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004608:	4b33      	ldr	r3, [pc, #204]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460c:	4a32      	ldr	r2, [pc, #200]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800460e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004614:	e00f      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800461a:	3328      	adds	r3, #40	@ 0x28
 800461c:	2101      	movs	r1, #1
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fd98 	bl	8005154 <RCCEx_PLL3_Config>
 8004624:	4603      	mov	r3, r0
 8004626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800462a:	e004      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004632:	e000      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800463e:	4b26      	ldr	r3, [pc, #152]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004642:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464e:	4a22      	ldr	r2, [pc, #136]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004650:	430b      	orrs	r3, r1
 8004652:	6553      	str	r3, [r2, #84]	@ 0x54
 8004654:	e003      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800465e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004666:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800466a:	673b      	str	r3, [r7, #112]	@ 0x70
 800466c:	2300      	movs	r3, #0
 800466e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004670:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004674:	460b      	mov	r3, r1
 8004676:	4313      	orrs	r3, r2
 8004678:	d034      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004688:	d007      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800468a:	e011      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800468c:	4b12      	ldr	r3, [pc, #72]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800468e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004690:	4a11      	ldr	r2, [pc, #68]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004692:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004696:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004698:	e00e      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800469a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469e:	3308      	adds	r3, #8
 80046a0:	2102      	movs	r1, #2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fca4 	bl	8004ff0 <RCCEx_PLL2_Config>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046ae:	e003      	b.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10d      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046ce:	4a02      	ldr	r2, [pc, #8]	@ (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046d0:	430b      	orrs	r3, r1
 80046d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046d4:	e006      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046d6:	bf00      	nop
 80046d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f2:	2300      	movs	r3, #0
 80046f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046f6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80046fa:	460b      	mov	r3, r1
 80046fc:	4313      	orrs	r3, r2
 80046fe:	d00c      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004704:	3328      	adds	r3, #40	@ 0x28
 8004706:	2102      	movs	r1, #2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fd23 	bl	8005154 <RCCEx_PLL3_Config>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d002      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004726:	663b      	str	r3, [r7, #96]	@ 0x60
 8004728:	2300      	movs	r3, #0
 800472a:	667b      	str	r3, [r7, #100]	@ 0x64
 800472c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004730:	460b      	mov	r3, r1
 8004732:	4313      	orrs	r3, r2
 8004734:	d038      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800473e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004742:	d018      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004748:	d811      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800474a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800474e:	d014      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004754:	d80b      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004756:	2b00      	cmp	r3, #0
 8004758:	d011      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800475a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800475e:	d106      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004760:	4bc3      	ldr	r3, [pc, #780]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	4ac2      	ldr	r2, [pc, #776]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800476a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800476c:	e008      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004774:	e004      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004776:	bf00      	nop
 8004778:	e002      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800477a:	bf00      	nop
 800477c:	e000      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800477e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10b      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004788:	4bb9      	ldr	r3, [pc, #740]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800478c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004798:	4ab5      	ldr	r2, [pc, #724]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800479a:	430b      	orrs	r3, r1
 800479c:	6553      	str	r3, [r2, #84]	@ 0x54
 800479e:	e003      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80047b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047b6:	2300      	movs	r3, #0
 80047b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80047be:	460b      	mov	r3, r1
 80047c0:	4313      	orrs	r3, r2
 80047c2:	d009      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047c4:	4baa      	ldr	r3, [pc, #680]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80047cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047d2:	4aa7      	ldr	r2, [pc, #668]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80047e6:	2300      	movs	r3, #0
 80047e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047ee:	460b      	mov	r3, r1
 80047f0:	4313      	orrs	r3, r2
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047f4:	4b9e      	ldr	r3, [pc, #632]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80047fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004800:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004804:	4a9a      	ldr	r2, [pc, #616]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004818:	2300      	movs	r3, #0
 800481a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800481c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004820:	460b      	mov	r3, r1
 8004822:	4313      	orrs	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004826:	4b92      	ldr	r3, [pc, #584]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004828:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800482a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004834:	4a8e      	ldr	r2, [pc, #568]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004846:	643b      	str	r3, [r7, #64]	@ 0x40
 8004848:	2300      	movs	r3, #0
 800484a:	647b      	str	r3, [r7, #68]	@ 0x44
 800484c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004850:	460b      	mov	r3, r1
 8004852:	4313      	orrs	r3, r2
 8004854:	d00e      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004856:	4b86      	ldr	r3, [pc, #536]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	4a85      	ldr	r2, [pc, #532]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800485c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004860:	6113      	str	r3, [r2, #16]
 8004862:	4b83      	ldr	r3, [pc, #524]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004864:	6919      	ldr	r1, [r3, #16]
 8004866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800486e:	4a80      	ldr	r2, [pc, #512]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004870:	430b      	orrs	r3, r1
 8004872:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004882:	2300      	movs	r3, #0
 8004884:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004886:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800488a:	460b      	mov	r3, r1
 800488c:	4313      	orrs	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004890:	4b77      	ldr	r3, [pc, #476]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004894:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800489e:	4a74      	ldr	r2, [pc, #464]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048a0:	430b      	orrs	r3, r1
 80048a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80048b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80048b2:	2300      	movs	r3, #0
 80048b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80048ba:	460b      	mov	r3, r1
 80048bc:	4313      	orrs	r3, r2
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048c0:	4b6b      	ldr	r3, [pc, #428]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80048c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d0:	4a67      	ldr	r2, [pc, #412]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	2100      	movs	r1, #0
 80048e0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048e8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048ec:	460b      	mov	r3, r1
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d011      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f6:	3308      	adds	r3, #8
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fb78 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004900:	4603      	mov	r3, r0
 8004902:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491e:	2100      	movs	r1, #0
 8004920:	6239      	str	r1, [r7, #32]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24
 8004928:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d011      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	3308      	adds	r3, #8
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f000 fb58 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800495e:	2100      	movs	r1, #0
 8004960:	61b9      	str	r1, [r7, #24]
 8004962:	f003 0304 	and.w	r3, r3, #4
 8004966:	61fb      	str	r3, [r7, #28]
 8004968:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800496c:	460b      	mov	r3, r1
 800496e:	4313      	orrs	r3, r2
 8004970:	d011      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004976:	3308      	adds	r3, #8
 8004978:	2102      	movs	r1, #2
 800497a:	4618      	mov	r0, r3
 800497c:	f000 fb38 	bl	8004ff0 <RCCEx_PLL2_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800498e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004992:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499e:	2100      	movs	r1, #0
 80049a0:	6139      	str	r1, [r7, #16]
 80049a2:	f003 0308 	and.w	r3, r3, #8
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049ac:	460b      	mov	r3, r1
 80049ae:	4313      	orrs	r3, r2
 80049b0:	d011      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b6:	3328      	adds	r3, #40	@ 0x28
 80049b8:	2100      	movs	r1, #0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 fbca 	bl	8005154 <RCCEx_PLL3_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	2100      	movs	r1, #0
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049ec:	460b      	mov	r3, r1
 80049ee:	4313      	orrs	r3, r2
 80049f0:	d011      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f6:	3328      	adds	r3, #40	@ 0x28
 80049f8:	2101      	movs	r1, #1
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fbaa 	bl	8005154 <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	6039      	str	r1, [r7, #0]
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	d011      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3328      	adds	r3, #40	@ 0x28
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fb8a 	bl	8005154 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a56:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	e000      	b.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a70:	58024400 	.word	0x58024400

08004a74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a78:	f7fe fd54 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	091b      	lsrs	r3, r3, #4
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	4904      	ldr	r1, [pc, #16]	@ (8004a9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a8a:	5ccb      	ldrb	r3, [r1, r3]
 8004a8c:	f003 031f 	and.w	r3, r3, #31
 8004a90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	08009bf4 	.word	0x08009bf4

08004aa0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b089      	sub	sp, #36	@ 0x24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004aa8:	4ba1      	ldr	r3, [pc, #644]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aac:	f003 0303 	and.w	r3, r3, #3
 8004ab0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004ab2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab6:	0b1b      	lsrs	r3, r3, #12
 8004ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004abc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004abe:	4b9c      	ldr	r3, [pc, #624]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004aca:	4b99      	ldr	r3, [pc, #612]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	08db      	lsrs	r3, r3, #3
 8004ad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	fb02 f303 	mul.w	r3, r2, r3
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8111 	beq.w	8004d10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f000 8083 	beq.w	8004bfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	f200 80a1 	bhi.w	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d056      	beq.n	8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b0a:	e099      	b.n	8004c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b0c:	4b88      	ldr	r3, [pc, #544]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02d      	beq.n	8004b74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b18:	4b85      	ldr	r3, [pc, #532]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	08db      	lsrs	r3, r3, #3
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	4a84      	ldr	r2, [pc, #528]	@ (8004d34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b24:	fa22 f303 	lsr.w	r3, r2, r3
 8004b28:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	ee07 3a90 	vmov	s15, r3
 8004b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b42:	4b7b      	ldr	r3, [pc, #492]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b56:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b72:	e087      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b7e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b86:	4b6a      	ldr	r3, [pc, #424]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bb6:	e065      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bca:	4b59      	ldr	r3, [pc, #356]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bde:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfa:	e043      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0e:	4b48      	ldr	r3, [pc, #288]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c16:	ee07 3a90 	vmov	s15, r3
 8004c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c22:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c3e:	e021      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c4a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c52:	4b37      	ldr	r3, [pc, #220]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c5a:	ee07 3a90 	vmov	s15, r3
 8004c5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c62:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c66:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c84:	4b2a      	ldr	r3, [pc, #168]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c8e:	ee07 3a90 	vmov	s15, r3
 8004c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004caa:	ee17 2a90 	vmov	r2, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb6:	0c1b      	lsrs	r3, r3, #16
 8004cb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ccc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cd8:	ee17 2a90 	vmov	r2, s15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d06:	ee17 2a90 	vmov	r2, s15
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d0e:	e008      	b.n	8004d22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
}
 8004d22:	bf00      	nop
 8004d24:	3724      	adds	r7, #36	@ 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	58024400 	.word	0x58024400
 8004d34:	03d09000 	.word	0x03d09000
 8004d38:	46000000 	.word	0x46000000
 8004d3c:	4c742400 	.word	0x4c742400
 8004d40:	4a742400 	.word	0x4a742400
 8004d44:	4af42400 	.word	0x4af42400

08004d48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	@ 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d50:	4ba1      	ldr	r3, [pc, #644]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d5a:	4b9f      	ldr	r3, [pc, #636]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5e:	0d1b      	lsrs	r3, r3, #20
 8004d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d66:	4b9c      	ldr	r3, [pc, #624]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d72:	4b99      	ldr	r3, [pc, #612]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8111 	beq.w	8004fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f200 80a1 	bhi.w	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d056      	beq.n	8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004db2:	e099      	b.n	8004ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db4:	4b88      	ldr	r3, [pc, #544]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02d      	beq.n	8004e1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dc0:	4b85      	ldr	r3, [pc, #532]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	4a84      	ldr	r2, [pc, #528]	@ (8004fdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b7b      	ldr	r3, [pc, #492]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dfe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e1a:	e087      	b.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5e:	e065      	b.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b59      	ldr	r3, [pc, #356]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea2:	e043      	b.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b48      	ldr	r3, [pc, #288]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ee6:	e021      	b.n	8004f2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b37      	ldr	r3, [pc, #220]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f36:	ee07 3a90 	vmov	s15, r3
 8004f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f52:	ee17 2a90 	vmov	r2, s15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f80:	ee17 2a90 	vmov	r2, s15
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f88:	4b13      	ldr	r3, [pc, #76]	@ (8004fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	0e1b      	lsrs	r3, r3, #24
 8004f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f92:	ee07 3a90 	vmov	s15, r3
 8004f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fae:	ee17 2a90 	vmov	r2, s15
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fb6:	e008      	b.n	8004fca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	3724      	adds	r7, #36	@ 0x24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	58024400 	.word	0x58024400
 8004fdc:	03d09000 	.word	0x03d09000
 8004fe0:	46000000 	.word	0x46000000
 8004fe4:	4c742400 	.word	0x4c742400
 8004fe8:	4a742400 	.word	0x4a742400
 8004fec:	4af42400 	.word	0x4af42400

08004ff0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ffe:	4b53      	ldr	r3, [pc, #332]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	2b03      	cmp	r3, #3
 8005008:	d101      	bne.n	800500e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e099      	b.n	8005142 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800500e:	4b4f      	ldr	r3, [pc, #316]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a4e      	ldr	r2, [pc, #312]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005014:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800501a:	f7fc fa51 	bl	80014c0 <HAL_GetTick>
 800501e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005020:	e008      	b.n	8005034 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005022:	f7fc fa4d 	bl	80014c0 <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e086      	b.n	8005142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005034:	4b45      	ldr	r3, [pc, #276]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f0      	bne.n	8005022 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005040:	4b42      	ldr	r3, [pc, #264]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005044:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	031b      	lsls	r3, r3, #12
 800504e:	493f      	ldr	r1, [pc, #252]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005050:	4313      	orrs	r3, r2
 8005052:	628b      	str	r3, [r1, #40]	@ 0x28
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	3b01      	subs	r3, #1
 800505a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	3b01      	subs	r3, #1
 8005064:	025b      	lsls	r3, r3, #9
 8005066:	b29b      	uxth	r3, r3
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	3b01      	subs	r3, #1
 8005070:	041b      	lsls	r3, r3, #16
 8005072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	3b01      	subs	r3, #1
 800507e:	061b      	lsls	r3, r3, #24
 8005080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005084:	4931      	ldr	r1, [pc, #196]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005086:	4313      	orrs	r3, r2
 8005088:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800508a:	4b30      	ldr	r3, [pc, #192]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	492d      	ldr	r1, [pc, #180]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005098:	4313      	orrs	r3, r2
 800509a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800509c:	4b2b      	ldr	r3, [pc, #172]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 800509e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a0:	f023 0220 	bic.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	4928      	ldr	r1, [pc, #160]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ae:	4b27      	ldr	r3, [pc, #156]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b2:	4a26      	ldr	r2, [pc, #152]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050b4:	f023 0310 	bic.w	r3, r3, #16
 80050b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050ba:	4b24      	ldr	r3, [pc, #144]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050be:	4b24      	ldr	r3, [pc, #144]	@ (8005150 <RCCEx_PLL2_Config+0x160>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	69d2      	ldr	r2, [r2, #28]
 80050c6:	00d2      	lsls	r2, r2, #3
 80050c8:	4920      	ldr	r1, [pc, #128]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050ce:	4b1f      	ldr	r3, [pc, #124]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	4a1e      	ldr	r2, [pc, #120]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050d4:	f043 0310 	orr.w	r3, r3, #16
 80050d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d106      	bne.n	80050ee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050e0:	4b1a      	ldr	r3, [pc, #104]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	4a19      	ldr	r2, [pc, #100]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050e6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050ec:	e00f      	b.n	800510e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d106      	bne.n	8005102 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80050f4:	4b15      	ldr	r3, [pc, #84]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f8:	4a14      	ldr	r2, [pc, #80]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 80050fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005100:	e005      	b.n	800510e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005106:	4a11      	ldr	r2, [pc, #68]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005108:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800510c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a0e      	ldr	r2, [pc, #56]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005114:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800511a:	f7fc f9d1 	bl	80014c0 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005120:	e008      	b.n	8005134 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005122:	f7fc f9cd 	bl	80014c0 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <RCCEx_PLL2_Config+0x15c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	58024400 	.word	0x58024400
 8005150:	ffff0007 	.word	0xffff0007

08005154 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800515e:	2300      	movs	r3, #0
 8005160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005162:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b03      	cmp	r3, #3
 800516c:	d101      	bne.n	8005172 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e099      	b.n	80052a6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005172:	4b4f      	ldr	r3, [pc, #316]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a4e      	ldr	r2, [pc, #312]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800517e:	f7fc f99f 	bl	80014c0 <HAL_GetTick>
 8005182:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005184:	e008      	b.n	8005198 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005186:	f7fc f99b 	bl	80014c0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e086      	b.n	80052a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005198:	4b45      	ldr	r3, [pc, #276]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1f0      	bne.n	8005186 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051a4:	4b42      	ldr	r3, [pc, #264]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 80051a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	051b      	lsls	r3, r3, #20
 80051b2:	493f      	ldr	r1, [pc, #252]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	3b01      	subs	r3, #1
 80051be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	025b      	lsls	r3, r3, #9
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	061b      	lsls	r3, r3, #24
 80051e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051e8:	4931      	ldr	r1, [pc, #196]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051ee:	4b30      	ldr	r3, [pc, #192]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	492d      	ldr	r1, [pc, #180]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005200:	4b2b      	ldr	r3, [pc, #172]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	4928      	ldr	r1, [pc, #160]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800520e:	4313      	orrs	r3, r2
 8005210:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005212:	4b27      	ldr	r3, [pc, #156]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005216:	4a26      	ldr	r2, [pc, #152]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800521c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800521e:	4b24      	ldr	r3, [pc, #144]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <RCCEx_PLL3_Config+0x160>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	69d2      	ldr	r2, [r2, #28]
 800522a:	00d2      	lsls	r2, r2, #3
 800522c:	4920      	ldr	r1, [pc, #128]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800522e:	4313      	orrs	r3, r2
 8005230:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005232:	4b1f      	ldr	r3, [pc, #124]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005236:	4a1e      	ldr	r2, [pc, #120]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800523c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d106      	bne.n	8005252 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005244:	4b1a      	ldr	r3, [pc, #104]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	4a19      	ldr	r2, [pc, #100]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800524a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800524e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005250:	e00f      	b.n	8005272 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d106      	bne.n	8005266 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005258:	4b15      	ldr	r3, [pc, #84]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	4a14      	ldr	r2, [pc, #80]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800525e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005262:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005264:	e005      	b.n	8005272 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005266:	4b12      	ldr	r3, [pc, #72]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526a:	4a11      	ldr	r2, [pc, #68]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800526c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005270:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005272:	4b0f      	ldr	r3, [pc, #60]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a0e      	ldr	r2, [pc, #56]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527e:	f7fc f91f 	bl	80014c0 <HAL_GetTick>
 8005282:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005284:	e008      	b.n	8005298 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005286:	f7fc f91b 	bl	80014c0 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e006      	b.n	80052a6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005298:	4b05      	ldr	r3, [pc, #20]	@ (80052b0 <RCCEx_PLL3_Config+0x15c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	ffff0007 	.word	0xffff0007

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f841 	bl	8005366 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 f9e8 	bl	80056cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b01      	cmp	r3, #1
 800538e:	d001      	beq.n	8005394 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e054      	b.n	800543e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68da      	ldr	r2, [r3, #12]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a26      	ldr	r2, [pc, #152]	@ (800544c <HAL_TIM_Base_Start_IT+0xd0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d022      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053be:	d01d      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a22      	ldr	r2, [pc, #136]	@ (8005450 <HAL_TIM_Base_Start_IT+0xd4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d018      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <HAL_TIM_Base_Start_IT+0xd8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d013      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005458 <HAL_TIM_Base_Start_IT+0xdc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00e      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1e      	ldr	r2, [pc, #120]	@ (800545c <HAL_TIM_Base_Start_IT+0xe0>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d009      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <HAL_TIM_Base_Start_IT+0xe4>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIM_Base_Start_IT+0x80>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <HAL_TIM_Base_Start_IT+0xe8>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d115      	bne.n	8005428 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_TIM_Base_Start_IT+0xec>)
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b06      	cmp	r3, #6
 800540c:	d015      	beq.n	800543a <HAL_TIM_Base_Start_IT+0xbe>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005414:	d011      	beq.n	800543a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0201 	orr.w	r2, r2, #1
 8005424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	e008      	b.n	800543a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0201 	orr.w	r2, r2, #1
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e000      	b.n	800543c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800543a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	40010000 	.word	0x40010000
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40000c00 	.word	0x40000c00
 800545c:	40010400 	.word	0x40010400
 8005460:	40001800 	.word	0x40001800
 8005464:	40014000 	.word	0x40014000
 8005468:	00010007 	.word	0x00010007

0800546c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d020      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01b      	beq.n	80054d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f06f 0202 	mvn.w	r2, #2
 80054a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f8e9 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 80054bc:	e005      	b.n	80054ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f8db 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f8ec 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d020      	beq.n	800551c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d01b      	beq.n	800551c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f06f 0204 	mvn.w	r2, #4
 80054ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2202      	movs	r2, #2
 80054f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f8c3 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 8005508:	e005      	b.n	8005516 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8b5 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 f8c6 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d020      	beq.n	8005568 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01b      	beq.n	8005568 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0208 	mvn.w	r2, #8
 8005538:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2204      	movs	r2, #4
 800553e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	f003 0303 	and.w	r3, r3, #3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f89d 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 8005554:	e005      	b.n	8005562 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f88f 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f8a0 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	d020      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f003 0310 	and.w	r3, r3, #16
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f06f 0210 	mvn.w	r2, #16
 8005584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2208      	movs	r2, #8
 800558a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f877 	bl	800568e <HAL_TIM_IC_CaptureCallback>
 80055a0:	e005      	b.n	80055ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 f869 	bl	800567a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f87a 	bl	80056a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0201 	mvn.w	r2, #1
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb fb84 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00c      	beq.n	8005606 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d007      	beq.n	8005606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f913 	bl	800582c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00c      	beq.n	800562a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f90b 	bl	8005840 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00c      	beq.n	800564e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f834 	bl	80056b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f003 0320 	and.w	r3, r3, #32
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d007      	beq.n	8005672 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f06f 0220 	mvn.w	r2, #32
 800566a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f8d3 	bl	8005818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005672:	bf00      	nop
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b083      	sub	sp, #12
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056aa:	bf00      	nop
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a46      	ldr	r2, [pc, #280]	@ (80057f8 <TIM_Base_SetConfig+0x12c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d013      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ea:	d00f      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a43      	ldr	r2, [pc, #268]	@ (80057fc <TIM_Base_SetConfig+0x130>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00b      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a42      	ldr	r2, [pc, #264]	@ (8005800 <TIM_Base_SetConfig+0x134>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d007      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a41      	ldr	r2, [pc, #260]	@ (8005804 <TIM_Base_SetConfig+0x138>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0x40>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a40      	ldr	r2, [pc, #256]	@ (8005808 <TIM_Base_SetConfig+0x13c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d108      	bne.n	800571e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a35      	ldr	r2, [pc, #212]	@ (80057f8 <TIM_Base_SetConfig+0x12c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d01f      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572c:	d01b      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a32      	ldr	r2, [pc, #200]	@ (80057fc <TIM_Base_SetConfig+0x130>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d017      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a31      	ldr	r2, [pc, #196]	@ (8005800 <TIM_Base_SetConfig+0x134>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a30      	ldr	r2, [pc, #192]	@ (8005804 <TIM_Base_SetConfig+0x138>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00f      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2f      	ldr	r2, [pc, #188]	@ (8005808 <TIM_Base_SetConfig+0x13c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00b      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a2e      	ldr	r2, [pc, #184]	@ (800580c <TIM_Base_SetConfig+0x140>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2d      	ldr	r2, [pc, #180]	@ (8005810 <TIM_Base_SetConfig+0x144>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_Base_SetConfig+0x9a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2c      	ldr	r2, [pc, #176]	@ (8005814 <TIM_Base_SetConfig+0x148>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d108      	bne.n	8005778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a16      	ldr	r2, [pc, #88]	@ (80057f8 <TIM_Base_SetConfig+0x12c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a18      	ldr	r2, [pc, #96]	@ (8005808 <TIM_Base_SetConfig+0x13c>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a17      	ldr	r2, [pc, #92]	@ (800580c <TIM_Base_SetConfig+0x140>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a16      	ldr	r2, [pc, #88]	@ (8005810 <TIM_Base_SetConfig+0x144>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0xf8>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a15      	ldr	r2, [pc, #84]	@ (8005814 <TIM_Base_SetConfig+0x148>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d103      	bne.n	80057cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	611a      	str	r2, [r3, #16]
  }
}
 80057ea:	bf00      	nop
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40010400 	.word	0x40010400
 800580c:	40014000 	.word	0x40014000
 8005810:	40014400 	.word	0x40014400
 8005814:	40014800 	.word	0x40014800

08005818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e042      	b.n	80058ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fb fb35 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	@ 0x24
 8005882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fe1e 	bl	80064e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f8b3 	bl	8005a10 <UART_SetConfig>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e01b      	b.n	80058ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0201 	orr.w	r2, r2, #1
 80058e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 fe9d 	bl	8006624 <UART_CheckIdleState>
 80058ea:	4603      	mov	r3, r0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3708      	adds	r7, #8
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b08a      	sub	sp, #40	@ 0x28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	603b      	str	r3, [r7, #0]
 8005900:	4613      	mov	r3, r2
 8005902:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800590a:	2b20      	cmp	r3, #32
 800590c:	d17b      	bne.n	8005a06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <HAL_UART_Transmit+0x26>
 8005914:	88fb      	ldrh	r3, [r7, #6]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e074      	b.n	8005a08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2221      	movs	r2, #33	@ 0x21
 800592a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800592e:	f7fb fdc7 	bl	80014c0 <HAL_GetTick>
 8005932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	88fa      	ldrh	r2, [r7, #6]
 8005938:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	88fa      	ldrh	r2, [r7, #6]
 8005940:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800594c:	d108      	bne.n	8005960 <HAL_UART_Transmit+0x6c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d104      	bne.n	8005960 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e003      	b.n	8005968 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005964:	2300      	movs	r3, #0
 8005966:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005968:	e030      	b.n	80059cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2200      	movs	r2, #0
 8005972:	2180      	movs	r1, #128	@ 0x80
 8005974:	68f8      	ldr	r0, [r7, #12]
 8005976:	f000 feff 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 800597a:	4603      	mov	r3, r0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d005      	beq.n	800598c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e03d      	b.n	8005a08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10b      	bne.n	80059aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	3302      	adds	r3, #2
 80059a6:	61bb      	str	r3, [r7, #24]
 80059a8:	e007      	b.n	80059ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	781a      	ldrb	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	3301      	adds	r3, #1
 80059b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1c8      	bne.n	800596a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2200      	movs	r2, #0
 80059e0:	2140      	movs	r1, #64	@ 0x40
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fec8 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e006      	b.n	8005a08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	e000      	b.n	8005a08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005a06:	2302      	movs	r3, #2
  }
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3720      	adds	r7, #32
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a14:	b092      	sub	sp, #72	@ 0x48
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	4bbe      	ldr	r3, [pc, #760]	@ (8005d38 <UART_SetConfig+0x328>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	6812      	ldr	r2, [r2, #0]
 8005a46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4ab3      	ldr	r2, [pc, #716]	@ (8005d3c <UART_SetConfig+0x32c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d004      	beq.n	8005a7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689a      	ldr	r2, [r3, #8]
 8005a82:	4baf      	ldr	r3, [pc, #700]	@ (8005d40 <UART_SetConfig+0x330>)
 8005a84:	4013      	ands	r3, r2
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	6812      	ldr	r2, [r2, #0]
 8005a8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a8c:	430b      	orrs	r3, r1
 8005a8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a96:	f023 010f 	bic.w	r1, r3, #15
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4aa6      	ldr	r2, [pc, #664]	@ (8005d44 <UART_SetConfig+0x334>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d177      	bne.n	8005ba0 <UART_SetConfig+0x190>
 8005ab0:	4ba5      	ldr	r3, [pc, #660]	@ (8005d48 <UART_SetConfig+0x338>)
 8005ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ab8:	2b28      	cmp	r3, #40	@ 0x28
 8005aba:	d86d      	bhi.n	8005b98 <UART_SetConfig+0x188>
 8005abc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <UART_SetConfig+0xb4>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005b69 	.word	0x08005b69
 8005ac8:	08005b99 	.word	0x08005b99
 8005acc:	08005b99 	.word	0x08005b99
 8005ad0:	08005b99 	.word	0x08005b99
 8005ad4:	08005b99 	.word	0x08005b99
 8005ad8:	08005b99 	.word	0x08005b99
 8005adc:	08005b99 	.word	0x08005b99
 8005ae0:	08005b99 	.word	0x08005b99
 8005ae4:	08005b71 	.word	0x08005b71
 8005ae8:	08005b99 	.word	0x08005b99
 8005aec:	08005b99 	.word	0x08005b99
 8005af0:	08005b99 	.word	0x08005b99
 8005af4:	08005b99 	.word	0x08005b99
 8005af8:	08005b99 	.word	0x08005b99
 8005afc:	08005b99 	.word	0x08005b99
 8005b00:	08005b99 	.word	0x08005b99
 8005b04:	08005b79 	.word	0x08005b79
 8005b08:	08005b99 	.word	0x08005b99
 8005b0c:	08005b99 	.word	0x08005b99
 8005b10:	08005b99 	.word	0x08005b99
 8005b14:	08005b99 	.word	0x08005b99
 8005b18:	08005b99 	.word	0x08005b99
 8005b1c:	08005b99 	.word	0x08005b99
 8005b20:	08005b99 	.word	0x08005b99
 8005b24:	08005b81 	.word	0x08005b81
 8005b28:	08005b99 	.word	0x08005b99
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b99 	.word	0x08005b99
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005b89 	.word	0x08005b89
 8005b48:	08005b99 	.word	0x08005b99
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005b99 	.word	0x08005b99
 8005b54:	08005b99 	.word	0x08005b99
 8005b58:	08005b99 	.word	0x08005b99
 8005b5c:	08005b99 	.word	0x08005b99
 8005b60:	08005b99 	.word	0x08005b99
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e222      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b70:	2304      	movs	r3, #4
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e21e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e21a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b80:	2310      	movs	r3, #16
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e216      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b88:	2320      	movs	r3, #32
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e212      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b90:	2340      	movs	r3, #64	@ 0x40
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e20e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005b98:	2380      	movs	r3, #128	@ 0x80
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e20a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a69      	ldr	r2, [pc, #420]	@ (8005d4c <UART_SetConfig+0x33c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d130      	bne.n	8005c0c <UART_SetConfig+0x1fc>
 8005baa:	4b67      	ldr	r3, [pc, #412]	@ (8005d48 <UART_SetConfig+0x338>)
 8005bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d826      	bhi.n	8005c04 <UART_SetConfig+0x1f4>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <UART_SetConfig+0x1ac>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bd5 	.word	0x08005bd5
 8005bc0:	08005bdd 	.word	0x08005bdd
 8005bc4:	08005be5 	.word	0x08005be5
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bfd 	.word	0x08005bfd
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e1ec      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005bdc:	2304      	movs	r3, #4
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e1e8      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e1e4      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005bec:	2310      	movs	r3, #16
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e1e0      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e1dc      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005bfc:	2340      	movs	r3, #64	@ 0x40
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e1d8      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c04:	2380      	movs	r3, #128	@ 0x80
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e1d4      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a4f      	ldr	r2, [pc, #316]	@ (8005d50 <UART_SetConfig+0x340>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d130      	bne.n	8005c78 <UART_SetConfig+0x268>
 8005c16:	4b4c      	ldr	r3, [pc, #304]	@ (8005d48 <UART_SetConfig+0x338>)
 8005c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d826      	bhi.n	8005c70 <UART_SetConfig+0x260>
 8005c22:	a201      	add	r2, pc, #4	@ (adr r2, 8005c28 <UART_SetConfig+0x218>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c41 	.word	0x08005c41
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c51 	.word	0x08005c51
 8005c34:	08005c59 	.word	0x08005c59
 8005c38:	08005c61 	.word	0x08005c61
 8005c3c:	08005c69 	.word	0x08005c69
 8005c40:	2300      	movs	r3, #0
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e1b6      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e1b2      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e1ae      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e1aa      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c60:	2320      	movs	r3, #32
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e1a6      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c68:	2340      	movs	r3, #64	@ 0x40
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e1a2      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c70:	2380      	movs	r3, #128	@ 0x80
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e19e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a35      	ldr	r2, [pc, #212]	@ (8005d54 <UART_SetConfig+0x344>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d130      	bne.n	8005ce4 <UART_SetConfig+0x2d4>
 8005c82:	4b31      	ldr	r3, [pc, #196]	@ (8005d48 <UART_SetConfig+0x338>)
 8005c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	d826      	bhi.n	8005cdc <UART_SetConfig+0x2cc>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <UART_SetConfig+0x284>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005cbd 	.word	0x08005cbd
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	2300      	movs	r3, #0
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e180      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e17c      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cc2:	e178      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e174      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ccc:	2320      	movs	r3, #32
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e170      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005cd4:	2340      	movs	r3, #64	@ 0x40
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e16c      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005cdc:	2380      	movs	r3, #128	@ 0x80
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e168      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <UART_SetConfig+0x348>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d142      	bne.n	8005d74 <UART_SetConfig+0x364>
 8005cee:	4b16      	ldr	r3, [pc, #88]	@ (8005d48 <UART_SetConfig+0x338>)
 8005cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cf2:	f003 0307 	and.w	r3, r3, #7
 8005cf6:	2b05      	cmp	r3, #5
 8005cf8:	d838      	bhi.n	8005d6c <UART_SetConfig+0x35c>
 8005cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005d00 <UART_SetConfig+0x2f0>)
 8005cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d00:	08005d19 	.word	0x08005d19
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	08005d29 	.word	0x08005d29
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d5d 	.word	0x08005d5d
 8005d14:	08005d65 	.word	0x08005d65
 8005d18:	2300      	movs	r3, #0
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e14a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d20:	2304      	movs	r3, #4
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e146      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d28:	2308      	movs	r3, #8
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e142      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d30:	2310      	movs	r3, #16
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e13e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d38:	cfff69f3 	.word	0xcfff69f3
 8005d3c:	58000c00 	.word	0x58000c00
 8005d40:	11fff4ff 	.word	0x11fff4ff
 8005d44:	40011000 	.word	0x40011000
 8005d48:	58024400 	.word	0x58024400
 8005d4c:	40004400 	.word	0x40004400
 8005d50:	40004800 	.word	0x40004800
 8005d54:	40004c00 	.word	0x40004c00
 8005d58:	40005000 	.word	0x40005000
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d62:	e128      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d64:	2340      	movs	r3, #64	@ 0x40
 8005d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6a:	e124      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d6c:	2380      	movs	r3, #128	@ 0x80
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e120      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4acb      	ldr	r2, [pc, #812]	@ (80060a8 <UART_SetConfig+0x698>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d176      	bne.n	8005e6c <UART_SetConfig+0x45c>
 8005d7e:	4bcb      	ldr	r3, [pc, #812]	@ (80060ac <UART_SetConfig+0x69c>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d86:	2b28      	cmp	r3, #40	@ 0x28
 8005d88:	d86c      	bhi.n	8005e64 <UART_SetConfig+0x454>
 8005d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d90 <UART_SetConfig+0x380>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005e35 	.word	0x08005e35
 8005d94:	08005e65 	.word	0x08005e65
 8005d98:	08005e65 	.word	0x08005e65
 8005d9c:	08005e65 	.word	0x08005e65
 8005da0:	08005e65 	.word	0x08005e65
 8005da4:	08005e65 	.word	0x08005e65
 8005da8:	08005e65 	.word	0x08005e65
 8005dac:	08005e65 	.word	0x08005e65
 8005db0:	08005e3d 	.word	0x08005e3d
 8005db4:	08005e65 	.word	0x08005e65
 8005db8:	08005e65 	.word	0x08005e65
 8005dbc:	08005e65 	.word	0x08005e65
 8005dc0:	08005e65 	.word	0x08005e65
 8005dc4:	08005e65 	.word	0x08005e65
 8005dc8:	08005e65 	.word	0x08005e65
 8005dcc:	08005e65 	.word	0x08005e65
 8005dd0:	08005e45 	.word	0x08005e45
 8005dd4:	08005e65 	.word	0x08005e65
 8005dd8:	08005e65 	.word	0x08005e65
 8005ddc:	08005e65 	.word	0x08005e65
 8005de0:	08005e65 	.word	0x08005e65
 8005de4:	08005e65 	.word	0x08005e65
 8005de8:	08005e65 	.word	0x08005e65
 8005dec:	08005e65 	.word	0x08005e65
 8005df0:	08005e4d 	.word	0x08005e4d
 8005df4:	08005e65 	.word	0x08005e65
 8005df8:	08005e65 	.word	0x08005e65
 8005dfc:	08005e65 	.word	0x08005e65
 8005e00:	08005e65 	.word	0x08005e65
 8005e04:	08005e65 	.word	0x08005e65
 8005e08:	08005e65 	.word	0x08005e65
 8005e0c:	08005e65 	.word	0x08005e65
 8005e10:	08005e55 	.word	0x08005e55
 8005e14:	08005e65 	.word	0x08005e65
 8005e18:	08005e65 	.word	0x08005e65
 8005e1c:	08005e65 	.word	0x08005e65
 8005e20:	08005e65 	.word	0x08005e65
 8005e24:	08005e65 	.word	0x08005e65
 8005e28:	08005e65 	.word	0x08005e65
 8005e2c:	08005e65 	.word	0x08005e65
 8005e30:	08005e5d 	.word	0x08005e5d
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3a:	e0bc      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e42:	e0b8      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e0b4      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e0b0      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e54:	2320      	movs	r3, #32
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e0ac      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e5c:	2340      	movs	r3, #64	@ 0x40
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e0a8      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e64:	2380      	movs	r3, #128	@ 0x80
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e0a4      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a8f      	ldr	r2, [pc, #572]	@ (80060b0 <UART_SetConfig+0x6a0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d130      	bne.n	8005ed8 <UART_SetConfig+0x4c8>
 8005e76:	4b8d      	ldr	r3, [pc, #564]	@ (80060ac <UART_SetConfig+0x69c>)
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	f003 0307 	and.w	r3, r3, #7
 8005e7e:	2b05      	cmp	r3, #5
 8005e80:	d826      	bhi.n	8005ed0 <UART_SetConfig+0x4c0>
 8005e82:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x478>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ea1 	.word	0x08005ea1
 8005e8c:	08005ea9 	.word	0x08005ea9
 8005e90:	08005eb1 	.word	0x08005eb1
 8005e94:	08005eb9 	.word	0x08005eb9
 8005e98:	08005ec1 	.word	0x08005ec1
 8005e9c:	08005ec9 	.word	0x08005ec9
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea6:	e086      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ea8:	2304      	movs	r3, #4
 8005eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eae:	e082      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb6:	e07e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e07a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e076      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ec8:	2340      	movs	r3, #64	@ 0x40
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e072      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ed0:	2380      	movs	r3, #128	@ 0x80
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e06e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a75      	ldr	r2, [pc, #468]	@ (80060b4 <UART_SetConfig+0x6a4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d130      	bne.n	8005f44 <UART_SetConfig+0x534>
 8005ee2:	4b72      	ldr	r3, [pc, #456]	@ (80060ac <UART_SetConfig+0x69c>)
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee6:	f003 0307 	and.w	r3, r3, #7
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d826      	bhi.n	8005f3c <UART_SetConfig+0x52c>
 8005eee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ef4 <UART_SetConfig+0x4e4>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f0d 	.word	0x08005f0d
 8005ef8:	08005f15 	.word	0x08005f15
 8005efc:	08005f1d 	.word	0x08005f1d
 8005f00:	08005f25 	.word	0x08005f25
 8005f04:	08005f2d 	.word	0x08005f2d
 8005f08:	08005f35 	.word	0x08005f35
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f12:	e050      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1a:	e04c      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f22:	e048      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e044      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f2c:	2320      	movs	r3, #32
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e040      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f34:	2340      	movs	r3, #64	@ 0x40
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e03c      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f3c:	2380      	movs	r3, #128	@ 0x80
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e038      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a5b      	ldr	r2, [pc, #364]	@ (80060b8 <UART_SetConfig+0x6a8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d130      	bne.n	8005fb0 <UART_SetConfig+0x5a0>
 8005f4e:	4b57      	ldr	r3, [pc, #348]	@ (80060ac <UART_SetConfig+0x69c>)
 8005f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	2b05      	cmp	r3, #5
 8005f58:	d826      	bhi.n	8005fa8 <UART_SetConfig+0x598>
 8005f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f60 <UART_SetConfig+0x550>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2302      	movs	r3, #2
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7e:	e01a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f86:	e016      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8e:	e012      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e00e      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e00a      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005fa0:	2340      	movs	r3, #64	@ 0x40
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e006      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005fa8:	2380      	movs	r3, #128	@ 0x80
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e002      	b.n	8005fb6 <UART_SetConfig+0x5a6>
 8005fb0:	2380      	movs	r3, #128	@ 0x80
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3f      	ldr	r2, [pc, #252]	@ (80060b8 <UART_SetConfig+0x6a8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	f040 80f8 	bne.w	80061b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	dc46      	bgt.n	8006058 <UART_SetConfig+0x648>
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	f2c0 8082 	blt.w	80060d4 <UART_SetConfig+0x6c4>
 8005fd0:	3b02      	subs	r3, #2
 8005fd2:	2b1e      	cmp	r3, #30
 8005fd4:	d87e      	bhi.n	80060d4 <UART_SetConfig+0x6c4>
 8005fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fdc <UART_SetConfig+0x5cc>)
 8005fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fdc:	0800605f 	.word	0x0800605f
 8005fe0:	080060d5 	.word	0x080060d5
 8005fe4:	08006067 	.word	0x08006067
 8005fe8:	080060d5 	.word	0x080060d5
 8005fec:	080060d5 	.word	0x080060d5
 8005ff0:	080060d5 	.word	0x080060d5
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	080060d5 	.word	0x080060d5
 8005ffc:	080060d5 	.word	0x080060d5
 8006000:	080060d5 	.word	0x080060d5
 8006004:	080060d5 	.word	0x080060d5
 8006008:	080060d5 	.word	0x080060d5
 800600c:	080060d5 	.word	0x080060d5
 8006010:	080060d5 	.word	0x080060d5
 8006014:	08006087 	.word	0x08006087
 8006018:	080060d5 	.word	0x080060d5
 800601c:	080060d5 	.word	0x080060d5
 8006020:	080060d5 	.word	0x080060d5
 8006024:	080060d5 	.word	0x080060d5
 8006028:	080060d5 	.word	0x080060d5
 800602c:	080060d5 	.word	0x080060d5
 8006030:	080060d5 	.word	0x080060d5
 8006034:	080060d5 	.word	0x080060d5
 8006038:	080060d5 	.word	0x080060d5
 800603c:	080060d5 	.word	0x080060d5
 8006040:	080060d5 	.word	0x080060d5
 8006044:	080060d5 	.word	0x080060d5
 8006048:	080060d5 	.word	0x080060d5
 800604c:	080060d5 	.word	0x080060d5
 8006050:	080060d5 	.word	0x080060d5
 8006054:	080060c7 	.word	0x080060c7
 8006058:	2b40      	cmp	r3, #64	@ 0x40
 800605a:	d037      	beq.n	80060cc <UART_SetConfig+0x6bc>
 800605c:	e03a      	b.n	80060d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800605e:	f7fe fd09 	bl	8004a74 <HAL_RCCEx_GetD3PCLK1Freq>
 8006062:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006064:	e03c      	b.n	80060e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800606a:	4618      	mov	r0, r3
 800606c:	f7fe fd18 	bl	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006074:	e034      	b.n	80060e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006076:	f107 0318 	add.w	r3, r7, #24
 800607a:	4618      	mov	r0, r3
 800607c:	f7fe fe64 	bl	8004d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006084:	e02c      	b.n	80060e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006086:	4b09      	ldr	r3, [pc, #36]	@ (80060ac <UART_SetConfig+0x69c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d016      	beq.n	80060c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006092:	4b06      	ldr	r3, [pc, #24]	@ (80060ac <UART_SetConfig+0x69c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	08db      	lsrs	r3, r3, #3
 8006098:	f003 0303 	and.w	r3, r3, #3
 800609c:	4a07      	ldr	r2, [pc, #28]	@ (80060bc <UART_SetConfig+0x6ac>)
 800609e:	fa22 f303 	lsr.w	r3, r2, r3
 80060a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060a4:	e01c      	b.n	80060e0 <UART_SetConfig+0x6d0>
 80060a6:	bf00      	nop
 80060a8:	40011400 	.word	0x40011400
 80060ac:	58024400 	.word	0x58024400
 80060b0:	40007800 	.word	0x40007800
 80060b4:	40007c00 	.word	0x40007c00
 80060b8:	58000c00 	.word	0x58000c00
 80060bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060c0:	4b9d      	ldr	r3, [pc, #628]	@ (8006338 <UART_SetConfig+0x928>)
 80060c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060c4:	e00c      	b.n	80060e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060c6:	4b9d      	ldr	r3, [pc, #628]	@ (800633c <UART_SetConfig+0x92c>)
 80060c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ca:	e009      	b.n	80060e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060d2:	e005      	b.n	80060e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 81de 	beq.w	80064a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	4a94      	ldr	r2, [pc, #592]	@ (8006340 <UART_SetConfig+0x930>)
 80060ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	685a      	ldr	r2, [r3, #4]
 8006100:	4613      	mov	r3, r2
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4413      	add	r3, r2
 8006106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006108:	429a      	cmp	r2, r3
 800610a:	d305      	bcc.n	8006118 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006114:	429a      	cmp	r2, r3
 8006116:	d903      	bls.n	8006120 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800611e:	e1c1      	b.n	80064a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006120:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006122:	2200      	movs	r2, #0
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	60fa      	str	r2, [r7, #12]
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	4a84      	ldr	r2, [pc, #528]	@ (8006340 <UART_SetConfig+0x930>)
 800612e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006132:	b29b      	uxth	r3, r3
 8006134:	2200      	movs	r2, #0
 8006136:	603b      	str	r3, [r7, #0]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006142:	f7fa f925 	bl	8000390 <__aeabi_uldivmod>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4610      	mov	r0, r2
 800614c:	4619      	mov	r1, r3
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f04f 0300 	mov.w	r3, #0
 8006156:	020b      	lsls	r3, r1, #8
 8006158:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800615c:	0202      	lsls	r2, r0, #8
 800615e:	6979      	ldr	r1, [r7, #20]
 8006160:	6849      	ldr	r1, [r1, #4]
 8006162:	0849      	lsrs	r1, r1, #1
 8006164:	2000      	movs	r0, #0
 8006166:	460c      	mov	r4, r1
 8006168:	4605      	mov	r5, r0
 800616a:	eb12 0804 	adds.w	r8, r2, r4
 800616e:	eb43 0905 	adc.w	r9, r3, r5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	469a      	mov	sl, r3
 800617a:	4693      	mov	fp, r2
 800617c:	4652      	mov	r2, sl
 800617e:	465b      	mov	r3, fp
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa f904 	bl	8000390 <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4613      	mov	r3, r2
 800618e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006192:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006196:	d308      	bcc.n	80061aa <UART_SetConfig+0x79a>
 8006198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800619e:	d204      	bcs.n	80061aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e17c      	b.n	80064a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061b0:	e178      	b.n	80064a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ba:	f040 80c5 	bne.w	8006348 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061c2:	2b20      	cmp	r3, #32
 80061c4:	dc48      	bgt.n	8006258 <UART_SetConfig+0x848>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	db7b      	blt.n	80062c2 <UART_SetConfig+0x8b2>
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d879      	bhi.n	80062c2 <UART_SetConfig+0x8b2>
 80061ce:	a201      	add	r2, pc, #4	@ (adr r2, 80061d4 <UART_SetConfig+0x7c4>)
 80061d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d4:	0800625f 	.word	0x0800625f
 80061d8:	08006267 	.word	0x08006267
 80061dc:	080062c3 	.word	0x080062c3
 80061e0:	080062c3 	.word	0x080062c3
 80061e4:	0800626f 	.word	0x0800626f
 80061e8:	080062c3 	.word	0x080062c3
 80061ec:	080062c3 	.word	0x080062c3
 80061f0:	080062c3 	.word	0x080062c3
 80061f4:	0800627f 	.word	0x0800627f
 80061f8:	080062c3 	.word	0x080062c3
 80061fc:	080062c3 	.word	0x080062c3
 8006200:	080062c3 	.word	0x080062c3
 8006204:	080062c3 	.word	0x080062c3
 8006208:	080062c3 	.word	0x080062c3
 800620c:	080062c3 	.word	0x080062c3
 8006210:	080062c3 	.word	0x080062c3
 8006214:	0800628f 	.word	0x0800628f
 8006218:	080062c3 	.word	0x080062c3
 800621c:	080062c3 	.word	0x080062c3
 8006220:	080062c3 	.word	0x080062c3
 8006224:	080062c3 	.word	0x080062c3
 8006228:	080062c3 	.word	0x080062c3
 800622c:	080062c3 	.word	0x080062c3
 8006230:	080062c3 	.word	0x080062c3
 8006234:	080062c3 	.word	0x080062c3
 8006238:	080062c3 	.word	0x080062c3
 800623c:	080062c3 	.word	0x080062c3
 8006240:	080062c3 	.word	0x080062c3
 8006244:	080062c3 	.word	0x080062c3
 8006248:	080062c3 	.word	0x080062c3
 800624c:	080062c3 	.word	0x080062c3
 8006250:	080062c3 	.word	0x080062c3
 8006254:	080062b5 	.word	0x080062b5
 8006258:	2b40      	cmp	r3, #64	@ 0x40
 800625a:	d02e      	beq.n	80062ba <UART_SetConfig+0x8aa>
 800625c:	e031      	b.n	80062c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800625e:	f7fd f991 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8006262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006264:	e033      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006266:	f7fd f9a3 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 800626a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800626c:	e02f      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800626e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fc14 	bl	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	e027      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800627e:	f107 0318 	add.w	r3, r7, #24
 8006282:	4618      	mov	r0, r3
 8006284:	f7fe fd60 	bl	8004d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800628c:	e01f      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800628e:	4b2d      	ldr	r3, [pc, #180]	@ (8006344 <UART_SetConfig+0x934>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800629a:	4b2a      	ldr	r3, [pc, #168]	@ (8006344 <UART_SetConfig+0x934>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	08db      	lsrs	r3, r3, #3
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	4a24      	ldr	r2, [pc, #144]	@ (8006338 <UART_SetConfig+0x928>)
 80062a6:	fa22 f303 	lsr.w	r3, r2, r3
 80062aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ac:	e00f      	b.n	80062ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062ae:	4b22      	ldr	r3, [pc, #136]	@ (8006338 <UART_SetConfig+0x928>)
 80062b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b2:	e00c      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062b4:	4b21      	ldr	r3, [pc, #132]	@ (800633c <UART_SetConfig+0x92c>)
 80062b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062b8:	e009      	b.n	80062ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062c0:	e005      	b.n	80062ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80e7 	beq.w	80064a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062da:	4a19      	ldr	r2, [pc, #100]	@ (8006340 <UART_SetConfig+0x930>)
 80062dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e0:	461a      	mov	r2, r3
 80062e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e8:	005a      	lsls	r2, r3, #1
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	085b      	lsrs	r3, r3, #1
 80062f0:	441a      	add	r2, r3
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	2b0f      	cmp	r3, #15
 8006300:	d916      	bls.n	8006330 <UART_SetConfig+0x920>
 8006302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006308:	d212      	bcs.n	8006330 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800630c:	b29b      	uxth	r3, r3
 800630e:	f023 030f 	bic.w	r3, r3, #15
 8006312:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	085b      	lsrs	r3, r3, #1
 8006318:	b29b      	uxth	r3, r3
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	b29a      	uxth	r2, r3
 8006320:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006322:	4313      	orrs	r3, r2
 8006324:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800632c:	60da      	str	r2, [r3, #12]
 800632e:	e0b9      	b.n	80064a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006336:	e0b5      	b.n	80064a4 <UART_SetConfig+0xa94>
 8006338:	03d09000 	.word	0x03d09000
 800633c:	003d0900 	.word	0x003d0900
 8006340:	08009c04 	.word	0x08009c04
 8006344:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006348:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800634c:	2b20      	cmp	r3, #32
 800634e:	dc49      	bgt.n	80063e4 <UART_SetConfig+0x9d4>
 8006350:	2b00      	cmp	r3, #0
 8006352:	db7c      	blt.n	800644e <UART_SetConfig+0xa3e>
 8006354:	2b20      	cmp	r3, #32
 8006356:	d87a      	bhi.n	800644e <UART_SetConfig+0xa3e>
 8006358:	a201      	add	r2, pc, #4	@ (adr r2, 8006360 <UART_SetConfig+0x950>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	080063eb 	.word	0x080063eb
 8006364:	080063f3 	.word	0x080063f3
 8006368:	0800644f 	.word	0x0800644f
 800636c:	0800644f 	.word	0x0800644f
 8006370:	080063fb 	.word	0x080063fb
 8006374:	0800644f 	.word	0x0800644f
 8006378:	0800644f 	.word	0x0800644f
 800637c:	0800644f 	.word	0x0800644f
 8006380:	0800640b 	.word	0x0800640b
 8006384:	0800644f 	.word	0x0800644f
 8006388:	0800644f 	.word	0x0800644f
 800638c:	0800644f 	.word	0x0800644f
 8006390:	0800644f 	.word	0x0800644f
 8006394:	0800644f 	.word	0x0800644f
 8006398:	0800644f 	.word	0x0800644f
 800639c:	0800644f 	.word	0x0800644f
 80063a0:	0800641b 	.word	0x0800641b
 80063a4:	0800644f 	.word	0x0800644f
 80063a8:	0800644f 	.word	0x0800644f
 80063ac:	0800644f 	.word	0x0800644f
 80063b0:	0800644f 	.word	0x0800644f
 80063b4:	0800644f 	.word	0x0800644f
 80063b8:	0800644f 	.word	0x0800644f
 80063bc:	0800644f 	.word	0x0800644f
 80063c0:	0800644f 	.word	0x0800644f
 80063c4:	0800644f 	.word	0x0800644f
 80063c8:	0800644f 	.word	0x0800644f
 80063cc:	0800644f 	.word	0x0800644f
 80063d0:	0800644f 	.word	0x0800644f
 80063d4:	0800644f 	.word	0x0800644f
 80063d8:	0800644f 	.word	0x0800644f
 80063dc:	0800644f 	.word	0x0800644f
 80063e0:	08006441 	.word	0x08006441
 80063e4:	2b40      	cmp	r3, #64	@ 0x40
 80063e6:	d02e      	beq.n	8006446 <UART_SetConfig+0xa36>
 80063e8:	e031      	b.n	800644e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ea:	f7fd f8cb 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 80063ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063f0:	e033      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f2:	f7fd f8dd 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 80063f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063f8:	e02f      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063fe:	4618      	mov	r0, r3
 8006400:	f7fe fb4e 	bl	8004aa0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006408:	e027      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800640a:	f107 0318 	add.w	r3, r7, #24
 800640e:	4618      	mov	r0, r3
 8006410:	f7fe fc9a 	bl	8004d48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006418:	e01f      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641a:	4b2d      	ldr	r3, [pc, #180]	@ (80064d0 <UART_SetConfig+0xac0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d009      	beq.n	800643a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <UART_SetConfig+0xac0>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	08db      	lsrs	r3, r3, #3
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	4a28      	ldr	r2, [pc, #160]	@ (80064d4 <UART_SetConfig+0xac4>)
 8006432:	fa22 f303 	lsr.w	r3, r2, r3
 8006436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006438:	e00f      	b.n	800645a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800643a:	4b26      	ldr	r3, [pc, #152]	@ (80064d4 <UART_SetConfig+0xac4>)
 800643c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800643e:	e00c      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006440:	4b25      	ldr	r3, [pc, #148]	@ (80064d8 <UART_SetConfig+0xac8>)
 8006442:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006444:	e009      	b.n	800645a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800644a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800644c:	e005      	b.n	800645a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006458:	bf00      	nop
    }

    if (pclk != 0U)
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	d021      	beq.n	80064a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006464:	4a1d      	ldr	r2, [pc, #116]	@ (80064dc <UART_SetConfig+0xacc>)
 8006466:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800646a:	461a      	mov	r2, r3
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	441a      	add	r2, r3
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006482:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d909      	bls.n	800649e <UART_SetConfig+0xa8e>
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006490:	d205      	bcs.n	800649e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006494:	b29a      	uxth	r2, r3
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e002      	b.n	80064a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3748      	adds	r7, #72	@ 0x48
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	58024400 	.word	0x58024400
 80064d4:	03d09000 	.word	0x03d09000
 80064d8:	003d0900 	.word	0x003d0900
 80064dc:	08009c04 	.word	0x08009c04

080064e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00a      	beq.n	800650a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	430a      	orrs	r2, r1
 8006508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00a      	beq.n	800654e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d01a      	beq.n	80065f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065de:	d10a      	bne.n	80065f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	430a      	orrs	r2, r1
 80065f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	430a      	orrs	r2, r1
 8006616:	605a      	str	r2, [r3, #4]
  }
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b098      	sub	sp, #96	@ 0x60
 8006628:	af02      	add	r7, sp, #8
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006634:	f7fa ff44 	bl	80014c0 <HAL_GetTick>
 8006638:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b08      	cmp	r3, #8
 8006646:	d12f      	bne.n	80066a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f88e 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d022      	beq.n	80066a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006676:	653b      	str	r3, [r7, #80]	@ 0x50
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006680:	647b      	str	r3, [r7, #68]	@ 0x44
 8006682:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800668e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e6      	bne.n	8006662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e063      	b.n	8006770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d149      	bne.n	800674a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066be:	2200      	movs	r2, #0
 80066c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f857 	bl	8006778 <UART_WaitOnFlagUntilTimeout>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d03c      	beq.n	800674a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	623b      	str	r3, [r7, #32]
   return(result);
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e6      	bne.n	80066d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3308      	adds	r3, #8
 8006708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	60fb      	str	r3, [r7, #12]
   return(result);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006722:	61fa      	str	r2, [r7, #28]
 8006724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006726:	69b9      	ldr	r1, [r7, #24]
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	e841 2300 	strex	r3, r2, [r1]
 800672e:	617b      	str	r3, [r7, #20]
   return(result);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d1e5      	bne.n	8006702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2220      	movs	r2, #32
 800673a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e012      	b.n	8006770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3758      	adds	r7, #88	@ 0x58
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006788:	e04f      	b.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d04b      	beq.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fa fe95 	bl	80014c0 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e04e      	b.n	800684a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d037      	beq.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b80      	cmp	r3, #128	@ 0x80
 80067be:	d034      	beq.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b40      	cmp	r3, #64	@ 0x40
 80067c4:	d031      	beq.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69db      	ldr	r3, [r3, #28]
 80067cc:	f003 0308 	and.w	r3, r3, #8
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d110      	bne.n	80067f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2208      	movs	r2, #8
 80067da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f839 	bl	8006854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2208      	movs	r2, #8
 80067e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e029      	b.n	800684a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006804:	d111      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800680e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f81f 	bl	8006854 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e00f      	b.n	800684a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69da      	ldr	r2, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	4013      	ands	r3, r2
 8006834:	68ba      	ldr	r2, [r7, #8]
 8006836:	429a      	cmp	r2, r3
 8006838:	bf0c      	ite	eq
 800683a:	2301      	moveq	r3, #1
 800683c:	2300      	movne	r3, #0
 800683e:	b2db      	uxtb	r3, r3
 8006840:	461a      	mov	r2, r3
 8006842:	79fb      	ldrb	r3, [r7, #7]
 8006844:	429a      	cmp	r2, r3
 8006846:	d0a0      	beq.n	800678a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b095      	sub	sp, #84	@ 0x54
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006870:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	461a      	mov	r2, r3
 8006878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800687a:	643b      	str	r3, [r7, #64]	@ 0x40
 800687c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006880:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006882:	e841 2300 	strex	r3, r2, [r1]
 8006886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1e6      	bne.n	800685c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	61fb      	str	r3, [r7, #28]
   return(result);
 800689e:	69fa      	ldr	r2, [r7, #28]
 80068a0:	4b1e      	ldr	r3, [pc, #120]	@ (800691c <UART_EndRxTransfer+0xc8>)
 80068a2:	4013      	ands	r3, r2
 80068a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e5      	bne.n	800688e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d118      	bne.n	80068fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	e853 3f00 	ldrex	r3, [r3]
 80068d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f023 0310 	bic.w	r3, r3, #16
 80068de:	647b      	str	r3, [r7, #68]	@ 0x44
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	e841 2300 	strex	r3, r2, [r1]
 80068f4:	613b      	str	r3, [r7, #16]
   return(result);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1e6      	bne.n	80068ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006910:	bf00      	nop
 8006912:	3754      	adds	r7, #84	@ 0x54
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	effffffe 	.word	0xeffffffe

08006920 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <HAL_UARTEx_DisableFifoMode+0x16>
 8006932:	2302      	movs	r3, #2
 8006934:	e027      	b.n	8006986 <HAL_UARTEx_DisableFifoMode+0x66>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2224      	movs	r2, #36	@ 0x24
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f022 0201 	bic.w	r2, r2, #1
 800695c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006964:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d101      	bne.n	80069aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069a6:	2302      	movs	r3, #2
 80069a8:	e02d      	b.n	8006a06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2224      	movs	r2, #36	@ 0x24
 80069b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 0201 	bic.w	r2, r2, #1
 80069d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f850 	bl	8006a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
 8006a16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d101      	bne.n	8006a26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a22:	2302      	movs	r3, #2
 8006a24:	e02d      	b.n	8006a82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2224      	movs	r2, #36	@ 0x24
 8006a32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f022 0201 	bic.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f812 	bl	8006a8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d108      	bne.n	8006aae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aac:	e031      	b.n	8006b12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aae:	2310      	movs	r3, #16
 8006ab0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ab2:	2310      	movs	r3, #16
 8006ab4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	0e5b      	lsrs	r3, r3, #25
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	f003 0307 	and.w	r3, r3, #7
 8006ac4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	0f5b      	lsrs	r3, r3, #29
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	7b3a      	ldrb	r2, [r7, #12]
 8006ada:	4911      	ldr	r1, [pc, #68]	@ (8006b20 <UARTEx_SetNbDataToProcess+0x94>)
 8006adc:	5c8a      	ldrb	r2, [r1, r2]
 8006ade:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ae2:	7b3a      	ldrb	r2, [r7, #12]
 8006ae4:	490f      	ldr	r1, [pc, #60]	@ (8006b24 <UARTEx_SetNbDataToProcess+0x98>)
 8006ae6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
 8006af6:	7b7a      	ldrb	r2, [r7, #13]
 8006af8:	4909      	ldr	r1, [pc, #36]	@ (8006b20 <UARTEx_SetNbDataToProcess+0x94>)
 8006afa:	5c8a      	ldrb	r2, [r1, r2]
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b00:	7b7a      	ldrb	r2, [r7, #13]
 8006b02:	4908      	ldr	r1, [pc, #32]	@ (8006b24 <UARTEx_SetNbDataToProcess+0x98>)
 8006b04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b06:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	08009c1c 	.word	0x08009c1c
 8006b24:	08009c24 	.word	0x08009c24

08006b28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b28:	b084      	sub	sp, #16
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	f107 001c 	add.w	r0, r7, #28
 8006b36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d121      	bne.n	8006b86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	68da      	ldr	r2, [r3, #12]
 8006b52:	4b2c      	ldr	r3, [pc, #176]	@ (8006c04 <USB_CoreInit+0xdc>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d105      	bne.n	8006b7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 faaa 	bl	80070d4 <USB_CoreReset>
 8006b80:	4603      	mov	r3, r0
 8006b82:	73fb      	strb	r3, [r7, #15]
 8006b84:	e01b      	b.n	8006bbe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa9e 	bl	80070d4 <USB_CoreReset>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bb0:	e005      	b.n	8006bbe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bbe:	7fbb      	ldrb	r3, [r7, #30]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d116      	bne.n	8006bf2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <USB_CoreInit+0xe0>)
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f043 0206 	orr.w	r2, r3, #6
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f043 0220 	orr.w	r2, r3, #32
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bfe:	b004      	add	sp, #16
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	ffbdffbf 	.word	0xffbdffbf
 8006c08:	03ee0000 	.word	0x03ee0000

08006c0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f023 0201 	bic.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	460b      	mov	r3, r1
 8006c38:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d115      	bne.n	8006c7c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c5c:	200a      	movs	r0, #10
 8006c5e:	f7fa fc3b 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	330a      	adds	r3, #10
 8006c66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 fa25 	bl	80070b8 <USB_GetMode>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d01e      	beq.n	8006cb2 <USB_SetCurrentMode+0x84>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c78:	d9f0      	bls.n	8006c5c <USB_SetCurrentMode+0x2e>
 8006c7a:	e01a      	b.n	8006cb2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d115      	bne.n	8006cae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c8e:	200a      	movs	r0, #10
 8006c90:	f7fa fc22 	bl	80014d8 <HAL_Delay>
      ms += 10U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	330a      	adds	r3, #10
 8006c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fa0c 	bl	80070b8 <USB_GetMode>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d005      	beq.n	8006cb2 <USB_SetCurrentMode+0x84>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006caa:	d9f0      	bls.n	8006c8e <USB_SetCurrentMode+0x60>
 8006cac:	e001      	b.n	8006cb2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e005      	b.n	8006cbe <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2bc8      	cmp	r3, #200	@ 0xc8
 8006cb6:	d101      	bne.n	8006cbc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e000      	b.n	8006cbe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006cc8:	b084      	sub	sp, #16
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	e009      	b.n	8006cfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3340      	adds	r3, #64	@ 0x40
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	2b0e      	cmp	r3, #14
 8006d00:	d9f2      	bls.n	8006ce8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d11c      	bne.n	8006d44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d18:	f043 0302 	orr.w	r3, r3, #2
 8006d1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e005      	b.n	8006d50 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d56:	461a      	mov	r2, r3
 8006d58:	2300      	movs	r3, #0
 8006d5a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d5c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d10d      	bne.n	8006d80 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d104      	bne.n	8006d76 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f968 	bl	8007044 <USB_SetDevSpeed>
 8006d74:	e008      	b.n	8006d88 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d76:	2101      	movs	r1, #1
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f963 	bl	8007044 <USB_SetDevSpeed>
 8006d7e:	e003      	b.n	8006d88 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d80:	2103      	movs	r1, #3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f95e 	bl	8007044 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d88:	2110      	movs	r1, #16
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f8fa 	bl	8006f84 <USB_FlushTxFifo>
 8006d90:	4603      	mov	r3, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f924 	bl	8006fe8 <USB_FlushRxFifo>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	461a      	mov	r2, r3
 8006dca:	2300      	movs	r3, #0
 8006dcc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dce:	2300      	movs	r3, #0
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	e043      	b.n	8006e5c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006de6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dea:	d118      	bne.n	8006e1e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	015a      	lsls	r2, r3, #5
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4413      	add	r3, r2
 8006dfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	e013      	b.n	8006e30 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	461a      	mov	r2, r3
 8006e16:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e1a:	6013      	str	r3, [r2, #0]
 8006e1c:	e008      	b.n	8006e30 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e60:	461a      	mov	r2, r3
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d3b5      	bcc.n	8006dd4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e68:	2300      	movs	r3, #0
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	e043      	b.n	8006ef6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	015a      	lsls	r2, r3, #5
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4413      	add	r3, r2
 8006e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e84:	d118      	bne.n	8006eb8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e98:	461a      	mov	r2, r3
 8006e9a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	e013      	b.n	8006eca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	e008      	b.n	8006eca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	015a      	lsls	r2, r3, #5
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee8:	461a      	mov	r2, r3
 8006eea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006eee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006efa:	461a      	mov	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d3b5      	bcc.n	8006e6e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f14:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006f22:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006f24:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	f043 0210 	orr.w	r2, r3, #16
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	699a      	ldr	r2, [r3, #24]
 8006f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f7c <USB_DevInit+0x2b4>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f44:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	699b      	ldr	r3, [r3, #24]
 8006f50:	f043 0208 	orr.w	r2, r3, #8
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d105      	bne.n	8006f6c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <USB_DevInit+0x2b8>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f78:	b004      	add	sp, #16
 8006f7a:	4770      	bx	lr
 8006f7c:	803c3800 	.word	0x803c3800
 8006f80:	40000004 	.word	0x40000004

08006f84 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f9e:	d901      	bls.n	8006fa4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e01b      	b.n	8006fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	daf2      	bge.n	8006f92 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	019b      	lsls	r3, r3, #6
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fc8:	d901      	bls.n	8006fce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e006      	b.n	8006fdc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d0f0      	beq.n	8006fbc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007000:	d901      	bls.n	8007006 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e018      	b.n	8007038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	daf2      	bge.n	8006ff4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2210      	movs	r2, #16
 8007016:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007024:	d901      	bls.n	800702a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e006      	b.n	8007038 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f003 0310 	and.w	r3, r3, #16
 8007032:	2b10      	cmp	r3, #16
 8007034:	d0f0      	beq.n	8007018 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007064:	4313      	orrs	r3, r2
 8007066:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007076:	b480      	push	{r7}
 8007078:	b085      	sub	sp, #20
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007090:	f023 0303 	bic.w	r3, r3, #3
 8007094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070a4:	f043 0302 	orr.w	r3, r3, #2
 80070a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b083      	sub	sp, #12
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	f003 0301 	and.w	r3, r3, #1
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ec:	d901      	bls.n	80070f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070ee:	2303      	movs	r3, #3
 80070f0:	e01b      	b.n	800712a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	daf2      	bge.n	80070e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	f043 0201 	orr.w	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007116:	d901      	bls.n	800711c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e006      	b.n	800712a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	f003 0301 	and.w	r3, r3, #1
 8007124:	2b01      	cmp	r3, #1
 8007126:	d0f0      	beq.n	800710a <USB_CoreReset+0x36>

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr

08007136 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007136:	b480      	push	{r7}
 8007138:	b085      	sub	sp, #20
 800713a:	af00      	add	r7, sp, #0
 800713c:	4603      	mov	r3, r0
 800713e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007140:	2300      	movs	r3, #0
 8007142:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007148:	2b84      	cmp	r3, #132	@ 0x84
 800714a:	d005      	beq.n	8007158 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800714c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	4413      	add	r3, r2
 8007154:	3303      	adds	r3, #3
 8007156:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007158:	68fb      	ldr	r3, [r7, #12]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr

08007166 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800716a:	f000 fe47 	bl	8007dfc <vTaskStartScheduler>
  
  return osOK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	bd80      	pop	{r7, pc}

08007174 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007176:	b089      	sub	sp, #36	@ 0x24
 8007178:	af04      	add	r7, sp, #16
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d020      	beq.n	80071c8 <osThreadCreate+0x54>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01c      	beq.n	80071c8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685c      	ldr	r4, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	691e      	ldr	r6, [r3, #16]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff ffc8 	bl	8007136 <makeFreeRtosPriority>
 80071a6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071b0:	9202      	str	r2, [sp, #8]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	9100      	str	r1, [sp, #0]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	4632      	mov	r2, r6
 80071ba:	4629      	mov	r1, r5
 80071bc:	4620      	mov	r0, r4
 80071be:	f000 fc37 	bl	8007a30 <xTaskCreateStatic>
 80071c2:	4603      	mov	r3, r0
 80071c4:	60fb      	str	r3, [r7, #12]
 80071c6:	e01c      	b.n	8007202 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685c      	ldr	r4, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071d4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff ffaa 	bl	8007136 <makeFreeRtosPriority>
 80071e2:	4602      	mov	r2, r0
 80071e4:	f107 030c 	add.w	r3, r7, #12
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	9200      	str	r2, [sp, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	4632      	mov	r2, r6
 80071f0:	4629      	mov	r1, r5
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fc7c 	bl	8007af0 <xTaskCreate>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d001      	beq.n	8007202 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	e000      	b.n	8007204 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007202:	68fb      	ldr	r3, [r7, #12]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3714      	adds	r7, #20
 8007208:	46bd      	mov	sp, r7
 800720a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800720c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <osDelay+0x16>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	e000      	b.n	8007224 <osDelay+0x18>
 8007222:	2301      	movs	r3, #1
 8007224:	4618      	mov	r0, r3
 8007226:	f000 fdb3 	bl	8007d90 <vTaskDelay>
  
  return osOK;
 800722a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af02      	add	r7, sp, #8
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00f      	beq.n	8007266 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10a      	bne.n	8007262 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2203      	movs	r2, #3
 8007252:	9200      	str	r2, [sp, #0]
 8007254:	2200      	movs	r2, #0
 8007256:	2100      	movs	r1, #0
 8007258:	2001      	movs	r0, #1
 800725a:	f000 f93b 	bl	80074d4 <xQueueGenericCreateStatic>
 800725e:	4603      	mov	r3, r0
 8007260:	e016      	b.n	8007290 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	e014      	b.n	8007290 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d110      	bne.n	800728e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800726c:	2203      	movs	r2, #3
 800726e:	2100      	movs	r1, #0
 8007270:	2001      	movs	r0, #1
 8007272:	f000 f9ac 	bl	80075ce <xQueueGenericCreate>
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d005      	beq.n	800728a <osSemaphoreCreate+0x56>
 800727e:	2300      	movs	r3, #0
 8007280:	2200      	movs	r2, #0
 8007282:	2100      	movs	r1, #0
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f9fd 	bl	8007684 <xQueueGenericSend>
      return sema;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	e000      	b.n	8007290 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800728e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f103 0208 	add.w	r2, r3, #8
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f04f 32ff 	mov.w	r2, #4294967295
 80072b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f103 0208 	add.w	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f103 0208 	add.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072e6:	bf00      	nop
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr

080072f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072f2:	b480      	push	{r7}
 80072f4:	b085      	sub	sp, #20
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
 80072fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800733a:	b480      	push	{r7}
 800733c:	b085      	sub	sp, #20
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	60fb      	str	r3, [r7, #12]
 8007358:	e00c      	b.n	8007374 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3308      	adds	r3, #8
 800735e:	60fb      	str	r3, [r7, #12]
 8007360:	e002      	b.n	8007368 <vListInsert+0x2e>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68ba      	ldr	r2, [r7, #8]
 8007370:	429a      	cmp	r2, r3
 8007372:	d2f6      	bcs.n	8007362 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	685a      	ldr	r2, [r3, #4]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1c5a      	adds	r2, r3, #1
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	601a      	str	r2, [r3, #0]
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6892      	ldr	r2, [r2, #8]
 80073c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6852      	ldr	r2, [r2, #4]
 80073cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d103      	bne.n	80073e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689a      	ldr	r2, [r3, #8]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	1e5a      	subs	r2, r3, #1
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10b      	bne.n	800742c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007426:	bf00      	nop
 8007428:	bf00      	nop
 800742a:	e7fd      	b.n	8007428 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800742c:	f001 fb44 	bl	8008ab8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800743c:	fb01 f303 	mul.w	r3, r1, r3
 8007440:	441a      	add	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745c:	3b01      	subs	r3, #1
 800745e:	68f9      	ldr	r1, [r7, #12]
 8007460:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007462:	fb01 f303 	mul.w	r3, r1, r3
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	22ff      	movs	r2, #255	@ 0xff
 8007470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	22ff      	movs	r2, #255	@ 0xff
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d114      	bne.n	80074ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01a      	beq.n	80074c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3310      	adds	r3, #16
 800748e:	4618      	mov	r0, r3
 8007490:	f000 ff0e 	bl	80082b0 <xTaskRemoveFromEventList>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800749a:	4b0d      	ldr	r3, [pc, #52]	@ (80074d0 <xQueueGenericReset+0xd0>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	e009      	b.n	80074c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3310      	adds	r3, #16
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7ff fef1 	bl	8007298 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3324      	adds	r3, #36	@ 0x24
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff feec 	bl	8007298 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074c0:	f001 fb2c 	bl	8008b1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074c4:	2301      	movs	r3, #1
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	@ 0x38
 80074d8:	af02      	add	r7, sp, #8
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d10b      	bne.n	800751e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8007506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800750a:	f383 8811 	msr	BASEPRI, r3
 800750e:	f3bf 8f6f 	isb	sy
 8007512:	f3bf 8f4f 	dsb	sy
 8007516:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007518:	bf00      	nop
 800751a:	bf00      	nop
 800751c:	e7fd      	b.n	800751a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <xQueueGenericCreateStatic+0x56>
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <xQueueGenericCreateStatic+0x5a>
 800752a:	2301      	movs	r3, #1
 800752c:	e000      	b.n	8007530 <xQueueGenericCreateStatic+0x5c>
 800752e:	2300      	movs	r3, #0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <xQueueGenericCreateStatic+0x84>
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <xQueueGenericCreateStatic+0x88>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <xQueueGenericCreateStatic+0x8a>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10b      	bne.n	800757a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	61fb      	str	r3, [r7, #28]
}
 8007574:	bf00      	nop
 8007576:	bf00      	nop
 8007578:	e7fd      	b.n	8007576 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800757a:	2348      	movs	r3, #72	@ 0x48
 800757c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2b48      	cmp	r3, #72	@ 0x48
 8007582:	d00b      	beq.n	800759c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800759c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80075a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f840 	bl	8007644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3730      	adds	r7, #48	@ 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b08a      	sub	sp, #40	@ 0x28
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d10b      	bne.n	80075fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	613b      	str	r3, [r7, #16]
}
 80075f4:	bf00      	nop
 80075f6:	bf00      	nop
 80075f8:	e7fd      	b.n	80075f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007604:	69fb      	ldr	r3, [r7, #28]
 8007606:	3348      	adds	r3, #72	@ 0x48
 8007608:	4618      	mov	r0, r3
 800760a:	f001 fb35 	bl	8008c78 <pvPortMalloc>
 800760e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d011      	beq.n	800763a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	3348      	adds	r3, #72	@ 0x48
 800761e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007628:	79fa      	ldrb	r2, [r7, #7]
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	4613      	mov	r3, r2
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	68b9      	ldr	r1, [r7, #8]
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f805 	bl	8007644 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800763a:	69bb      	ldr	r3, [r7, #24]
	}
 800763c:	4618      	mov	r0, r3
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	60b9      	str	r1, [r7, #8]
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d103      	bne.n	8007660 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	e002      	b.n	8007666 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	68ba      	ldr	r2, [r7, #8]
 8007670:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007672:	2101      	movs	r1, #1
 8007674:	69b8      	ldr	r0, [r7, #24]
 8007676:	f7ff fec3 	bl	8007400 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
	...

08007684 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	@ 0x38
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007692:	2300      	movs	r3, #0
 8007694:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d10b      	bne.n	80076b8 <xQueueGenericSend+0x34>
	__asm volatile
 80076a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a4:	f383 8811 	msr	BASEPRI, r3
 80076a8:	f3bf 8f6f 	isb	sy
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076b2:	bf00      	nop
 80076b4:	bf00      	nop
 80076b6:	e7fd      	b.n	80076b4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <xQueueGenericSend+0x42>
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d101      	bne.n	80076ca <xQueueGenericSend+0x46>
 80076c6:	2301      	movs	r3, #1
 80076c8:	e000      	b.n	80076cc <xQueueGenericSend+0x48>
 80076ca:	2300      	movs	r3, #0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <xQueueGenericSend+0x64>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d103      	bne.n	80076f6 <xQueueGenericSend+0x72>
 80076ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d101      	bne.n	80076fa <xQueueGenericSend+0x76>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <xQueueGenericSend+0x78>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10b      	bne.n	8007718 <xQueueGenericSend+0x94>
	__asm volatile
 8007700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007704:	f383 8811 	msr	BASEPRI, r3
 8007708:	f3bf 8f6f 	isb	sy
 800770c:	f3bf 8f4f 	dsb	sy
 8007710:	623b      	str	r3, [r7, #32]
}
 8007712:	bf00      	nop
 8007714:	bf00      	nop
 8007716:	e7fd      	b.n	8007714 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007718:	f000 ff90 	bl	800863c <xTaskGetSchedulerState>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d102      	bne.n	8007728 <xQueueGenericSend+0xa4>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d101      	bne.n	800772c <xQueueGenericSend+0xa8>
 8007728:	2301      	movs	r3, #1
 800772a:	e000      	b.n	800772e <xQueueGenericSend+0xaa>
 800772c:	2300      	movs	r3, #0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10b      	bne.n	800774a <xQueueGenericSend+0xc6>
	__asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61fb      	str	r3, [r7, #28]
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800774a:	f001 f9b5 	bl	8008ab8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007756:	429a      	cmp	r2, r3
 8007758:	d302      	bcc.n	8007760 <xQueueGenericSend+0xdc>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d129      	bne.n	80077b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007766:	f000 f88f 	bl	8007888 <prvCopyDataToQueue>
 800776a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007770:	2b00      	cmp	r3, #0
 8007772:	d010      	beq.n	8007796 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	3324      	adds	r3, #36	@ 0x24
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fd99 	bl	80082b0 <xTaskRemoveFromEventList>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d013      	beq.n	80077ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007784:	4b3f      	ldr	r3, [pc, #252]	@ (8007884 <xQueueGenericSend+0x200>)
 8007786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800778a:	601a      	str	r2, [r3, #0]
 800778c:	f3bf 8f4f 	dsb	sy
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	e00a      	b.n	80077ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d007      	beq.n	80077ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <xQueueGenericSend+0x200>)
 800779e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077ac:	f001 f9b6 	bl	8008b1c <vPortExitCritical>
				return pdPASS;
 80077b0:	2301      	movs	r3, #1
 80077b2:	e063      	b.n	800787c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ba:	f001 f9af 	bl	8008b1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	e05c      	b.n	800787c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d106      	bne.n	80077d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077c8:	f107 0314 	add.w	r3, r7, #20
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fdd3 	bl	8008378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077d6:	f001 f9a1 	bl	8008b1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077da:	f000 fb79 	bl	8007ed0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077de:	f001 f96b 	bl	8008ab8 <vPortEnterCritical>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077e8:	b25b      	sxtb	r3, r3
 80077ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ee:	d103      	bne.n	80077f8 <xQueueGenericSend+0x174>
 80077f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077fe:	b25b      	sxtb	r3, r3
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d103      	bne.n	800780e <xQueueGenericSend+0x18a>
 8007806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800780e:	f001 f985 	bl	8008b1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007812:	1d3a      	adds	r2, r7, #4
 8007814:	f107 0314 	add.w	r3, r7, #20
 8007818:	4611      	mov	r1, r2
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fdc2 	bl	80083a4 <xTaskCheckForTimeOut>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d124      	bne.n	8007870 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007826:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007828:	f000 f8ea 	bl	8007a00 <prvIsQueueFull>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007834:	3310      	adds	r3, #16
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f000 fd12 	bl	8008264 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007840:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007842:	f000 f88b 	bl	800795c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007846:	f000 fb51 	bl	8007eec <xTaskResumeAll>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f47f af7c 	bne.w	800774a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007852:	4b0c      	ldr	r3, [pc, #48]	@ (8007884 <xQueueGenericSend+0x200>)
 8007854:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	e772      	b.n	800774a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007866:	f000 f879 	bl	800795c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800786a:	f000 fb3f 	bl	8007eec <xTaskResumeAll>
 800786e:	e76c      	b.n	800774a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007872:	f000 f873 	bl	800795c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007876:	f000 fb39 	bl	8007eec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800787a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800787c:	4618      	mov	r0, r3
 800787e:	3738      	adds	r7, #56	@ 0x38
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d14d      	bne.n	800794a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fee0 	bl	8008678 <xTaskPriorityDisinherit>
 80078b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	609a      	str	r2, [r3, #8]
 80078c0:	e043      	b.n	800794a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d119      	bne.n	80078fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6858      	ldr	r0, [r3, #4]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d0:	461a      	mov	r2, r3
 80078d2:	68b9      	ldr	r1, [r7, #8]
 80078d4:	f001 fdae 	bl	8009434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e0:	441a      	add	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d32b      	bcc.n	800794a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	605a      	str	r2, [r3, #4]
 80078fa:	e026      	b.n	800794a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68d8      	ldr	r0, [r3, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007904:	461a      	mov	r2, r3
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	f001 fd94 	bl	8009434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007914:	425b      	negs	r3, r3
 8007916:	441a      	add	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	429a      	cmp	r2, r3
 8007926:	d207      	bcs.n	8007938 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007930:	425b      	negs	r3, r3
 8007932:	441a      	add	r2, r3
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b02      	cmp	r3, #2
 800793c:	d105      	bne.n	800794a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	3b01      	subs	r3, #1
 8007948:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1c5a      	adds	r2, r3, #1
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007952:	697b      	ldr	r3, [r7, #20]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007964:	f001 f8a8 	bl	8008ab8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800796e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007970:	e011      	b.n	8007996 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007976:	2b00      	cmp	r3, #0
 8007978:	d012      	beq.n	80079a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3324      	adds	r3, #36	@ 0x24
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fc96 	bl	80082b0 <xTaskRemoveFromEventList>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800798a:	f000 fd6f 	bl	800846c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	3b01      	subs	r3, #1
 8007992:	b2db      	uxtb	r3, r3
 8007994:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800799a:	2b00      	cmp	r3, #0
 800799c:	dce9      	bgt.n	8007972 <prvUnlockQueue+0x16>
 800799e:	e000      	b.n	80079a2 <prvUnlockQueue+0x46>
					break;
 80079a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	22ff      	movs	r2, #255	@ 0xff
 80079a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80079aa:	f001 f8b7 	bl	8008b1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079ae:	f001 f883 	bl	8008ab8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80079b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ba:	e011      	b.n	80079e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d012      	beq.n	80079ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3310      	adds	r3, #16
 80079c8:	4618      	mov	r0, r3
 80079ca:	f000 fc71 	bl	80082b0 <xTaskRemoveFromEventList>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80079d4:	f000 fd4a 	bl	800846c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	3b01      	subs	r3, #1
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	dce9      	bgt.n	80079bc <prvUnlockQueue+0x60>
 80079e8:	e000      	b.n	80079ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80079ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	22ff      	movs	r2, #255	@ 0xff
 80079f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80079f4:	f001 f892 	bl	8008b1c <vPortExitCritical>
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a08:	f001 f856 	bl	8008ab8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d102      	bne.n	8007a1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	e001      	b.n	8007a22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a22:	f001 f87b 	bl	8008b1c <vPortExitCritical>

	return xReturn;
 8007a26:	68fb      	ldr	r3, [r7, #12]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08e      	sub	sp, #56	@ 0x38
 8007a34:	af04      	add	r7, sp, #16
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
 8007a3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10b      	bne.n	8007a5c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	623b      	str	r3, [r7, #32]
}
 8007a56:	bf00      	nop
 8007a58:	bf00      	nop
 8007a5a:	e7fd      	b.n	8007a58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	61fb      	str	r3, [r7, #28]
}
 8007a74:	bf00      	nop
 8007a76:	bf00      	nop
 8007a78:	e7fd      	b.n	8007a76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a7a:	23a0      	movs	r3, #160	@ 0xa0
 8007a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a82:	d00b      	beq.n	8007a9c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	61bb      	str	r3, [r7, #24]
}
 8007a96:	bf00      	nop
 8007a98:	bf00      	nop
 8007a9a:	e7fd      	b.n	8007a98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d01e      	beq.n	8007ae2 <xTaskCreateStatic+0xb2>
 8007aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d01b      	beq.n	8007ae2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ab2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007abc:	2300      	movs	r3, #0
 8007abe:	9303      	str	r3, [sp, #12]
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac2:	9302      	str	r3, [sp, #8]
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	9301      	str	r3, [sp, #4]
 8007aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f000 f851 	bl	8007b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007adc:	f000 f8ee 	bl	8007cbc <prvAddNewTaskToReadyList>
 8007ae0:	e001      	b.n	8007ae6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ae6:	697b      	ldr	r3, [r7, #20]
	}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	@ 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b08c      	sub	sp, #48	@ 0x30
 8007af4:	af04      	add	r7, sp, #16
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	4613      	mov	r3, r2
 8007afe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b00:	88fb      	ldrh	r3, [r7, #6]
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4618      	mov	r0, r3
 8007b06:	f001 f8b7 	bl	8008c78 <pvPortMalloc>
 8007b0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00e      	beq.n	8007b30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b12:	20a0      	movs	r0, #160	@ 0xa0
 8007b14:	f001 f8b0 	bl	8008c78 <pvPortMalloc>
 8007b18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d003      	beq.n	8007b28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b26:	e005      	b.n	8007b34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b28:	6978      	ldr	r0, [r7, #20]
 8007b2a:	f001 f973 	bl	8008e14 <vPortFree>
 8007b2e:	e001      	b.n	8007b34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b30:	2300      	movs	r3, #0
 8007b32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d017      	beq.n	8007b6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b42:	88fa      	ldrh	r2, [r7, #6]
 8007b44:	2300      	movs	r3, #0
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	9302      	str	r3, [sp, #8]
 8007b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f80f 	bl	8007b7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b5e:	69f8      	ldr	r0, [r7, #28]
 8007b60:	f000 f8ac 	bl	8007cbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b64:	2301      	movs	r3, #1
 8007b66:	61bb      	str	r3, [r7, #24]
 8007b68:	e002      	b.n	8007b70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007b6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b70:	69bb      	ldr	r3, [r7, #24]
	}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3720      	adds	r7, #32
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b088      	sub	sp, #32
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	607a      	str	r2, [r7, #4]
 8007b88:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007b94:	440b      	add	r3, r1
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f023 0307 	bic.w	r3, r3, #7
 8007ba2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00b      	beq.n	8007bc6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	bf00      	nop
 8007bc4:	e7fd      	b.n	8007bc2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01f      	beq.n	8007c0c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bcc:	2300      	movs	r3, #0
 8007bce:	61fb      	str	r3, [r7, #28]
 8007bd0:	e012      	b.n	8007bf8 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bd2:	68ba      	ldr	r2, [r7, #8]
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	4413      	add	r3, r2
 8007bd8:	7819      	ldrb	r1, [r3, #0]
 8007bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	4413      	add	r3, r2
 8007be0:	3334      	adds	r3, #52	@ 0x34
 8007be2:	460a      	mov	r2, r1
 8007be4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	4413      	add	r3, r2
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d006      	beq.n	8007c00 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2b0f      	cmp	r3, #15
 8007bfc:	d9e9      	bls.n	8007bd2 <prvInitialiseNewTask+0x56>
 8007bfe:	e000      	b.n	8007c02 <prvInitialiseNewTask+0x86>
			{
				break;
 8007c00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c0a:	e003      	b.n	8007c14 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c16:	2b06      	cmp	r3, #6
 8007c18:	d901      	bls.n	8007c1e <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c1a:	2306      	movs	r3, #6
 8007c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c32:	3304      	adds	r3, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff fb4f 	bl	80072d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c3c:	3318      	adds	r3, #24
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fb4a 	bl	80072d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4c:	f1c3 0207 	rsb	r2, r3, #7
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6c:	334c      	adds	r3, #76	@ 0x4c
 8007c6e:	224c      	movs	r2, #76	@ 0x4c
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f001 fb00 	bl	8009278 <memset>
 8007c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007cb0 <prvInitialiseNewTask+0x134>)
 8007c7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb4 <prvInitialiseNewTask+0x138>)
 8007c82:	655a      	str	r2, [r3, #84]	@ 0x54
 8007c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c86:	4a0c      	ldr	r2, [pc, #48]	@ (8007cb8 <prvInitialiseNewTask+0x13c>)
 8007c88:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	68f9      	ldr	r1, [r7, #12]
 8007c8e:	69b8      	ldr	r0, [r7, #24]
 8007c90:	f000 fde0 	bl	8008854 <pxPortInitialiseStack>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ca6:	bf00      	nop
 8007ca8:	3720      	adds	r7, #32
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	24004804 	.word	0x24004804
 8007cb4:	2400486c 	.word	0x2400486c
 8007cb8:	240048d4 	.word	0x240048d4

08007cbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cc4:	f000 fef8 	bl	8008ab8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8007d74 <prvAddNewTaskToReadyList+0xb8>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	4a29      	ldr	r2, [pc, #164]	@ (8007d74 <prvAddNewTaskToReadyList+0xb8>)
 8007cd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cd2:	4b29      	ldr	r3, [pc, #164]	@ (8007d78 <prvAddNewTaskToReadyList+0xbc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007cda:	4a27      	ldr	r2, [pc, #156]	@ (8007d78 <prvAddNewTaskToReadyList+0xbc>)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ce0:	4b24      	ldr	r3, [pc, #144]	@ (8007d74 <prvAddNewTaskToReadyList+0xb8>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d110      	bne.n	8007d0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ce8:	f000 fbe4 	bl	80084b4 <prvInitialiseTaskLists>
 8007cec:	e00d      	b.n	8007d0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007cee:	4b23      	ldr	r3, [pc, #140]	@ (8007d7c <prvAddNewTaskToReadyList+0xc0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d109      	bne.n	8007d0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007cf6:	4b20      	ldr	r3, [pc, #128]	@ (8007d78 <prvAddNewTaskToReadyList+0xbc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d802      	bhi.n	8007d0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d04:	4a1c      	ldr	r2, [pc, #112]	@ (8007d78 <prvAddNewTaskToReadyList+0xbc>)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007d80 <prvAddNewTaskToReadyList+0xc4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	4a1b      	ldr	r2, [pc, #108]	@ (8007d80 <prvAddNewTaskToReadyList+0xc4>)
 8007d12:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	2201      	movs	r2, #1
 8007d1a:	409a      	lsls	r2, r3
 8007d1c:	4b19      	ldr	r3, [pc, #100]	@ (8007d84 <prvAddNewTaskToReadyList+0xc8>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	4a18      	ldr	r2, [pc, #96]	@ (8007d84 <prvAddNewTaskToReadyList+0xc8>)
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	009b      	lsls	r3, r3, #2
 8007d2e:	4413      	add	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4a15      	ldr	r2, [pc, #84]	@ (8007d88 <prvAddNewTaskToReadyList+0xcc>)
 8007d34:	441a      	add	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	f7ff fad8 	bl	80072f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d42:	f000 feeb 	bl	8008b1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d46:	4b0d      	ldr	r3, [pc, #52]	@ (8007d7c <prvAddNewTaskToReadyList+0xc0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00e      	beq.n	8007d6c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007d78 <prvAddNewTaskToReadyList+0xbc>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d207      	bcs.n	8007d6c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <prvAddNewTaskToReadyList+0xd0>)
 8007d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d62:	601a      	str	r2, [r3, #0]
 8007d64:	f3bf 8f4f 	dsb	sy
 8007d68:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	24000ba4 	.word	0x24000ba4
 8007d78:	24000aa4 	.word	0x24000aa4
 8007d7c:	24000bb0 	.word	0x24000bb0
 8007d80:	24000bc0 	.word	0x24000bc0
 8007d84:	24000bac 	.word	0x24000bac
 8007d88:	24000aa8 	.word	0x24000aa8
 8007d8c:	e000ed04 	.word	0xe000ed04

08007d90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d018      	beq.n	8007dd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007da2:	4b14      	ldr	r3, [pc, #80]	@ (8007df4 <vTaskDelay+0x64>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00b      	beq.n	8007dc2 <vTaskDelay+0x32>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	f383 8811 	msr	BASEPRI, r3
 8007db2:	f3bf 8f6f 	isb	sy
 8007db6:	f3bf 8f4f 	dsb	sy
 8007dba:	60bb      	str	r3, [r7, #8]
}
 8007dbc:	bf00      	nop
 8007dbe:	bf00      	nop
 8007dc0:	e7fd      	b.n	8007dbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007dc2:	f000 f885 	bl	8007ed0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 fcdd 	bl	8008788 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007dce:	f000 f88d 	bl	8007eec <xTaskResumeAll>
 8007dd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d107      	bne.n	8007dea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007dda:	4b07      	ldr	r3, [pc, #28]	@ (8007df8 <vTaskDelay+0x68>)
 8007ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	24000bcc 	.word	0x24000bcc
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	@ 0x28
 8007e00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e0a:	463a      	mov	r2, r7
 8007e0c:	1d39      	adds	r1, r7, #4
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7f8 fcaa 	bl	800076c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e18:	6839      	ldr	r1, [r7, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	9202      	str	r2, [sp, #8]
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	2300      	movs	r3, #0
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	2300      	movs	r3, #0
 8007e28:	460a      	mov	r2, r1
 8007e2a:	4921      	ldr	r1, [pc, #132]	@ (8007eb0 <vTaskStartScheduler+0xb4>)
 8007e2c:	4821      	ldr	r0, [pc, #132]	@ (8007eb4 <vTaskStartScheduler+0xb8>)
 8007e2e:	f7ff fdff 	bl	8007a30 <xTaskCreateStatic>
 8007e32:	4603      	mov	r3, r0
 8007e34:	4a20      	ldr	r2, [pc, #128]	@ (8007eb8 <vTaskStartScheduler+0xbc>)
 8007e36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e38:	4b1f      	ldr	r3, [pc, #124]	@ (8007eb8 <vTaskStartScheduler+0xbc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e40:	2301      	movs	r3, #1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	e001      	b.n	8007e4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d11b      	bne.n	8007e88 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	613b      	str	r3, [r7, #16]
}
 8007e62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e64:	4b15      	ldr	r3, [pc, #84]	@ (8007ebc <vTaskStartScheduler+0xc0>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	334c      	adds	r3, #76	@ 0x4c
 8007e6a:	4a15      	ldr	r2, [pc, #84]	@ (8007ec0 <vTaskStartScheduler+0xc4>)
 8007e6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007e6e:	4b15      	ldr	r3, [pc, #84]	@ (8007ec4 <vTaskStartScheduler+0xc8>)
 8007e70:	f04f 32ff 	mov.w	r2, #4294967295
 8007e74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007e76:	4b14      	ldr	r3, [pc, #80]	@ (8007ec8 <vTaskStartScheduler+0xcc>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007e7c:	4b13      	ldr	r3, [pc, #76]	@ (8007ecc <vTaskStartScheduler+0xd0>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007e82:	f000 fd75 	bl	8008970 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007e86:	e00f      	b.n	8007ea8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8e:	d10b      	bne.n	8007ea8 <vTaskStartScheduler+0xac>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e94:	f383 8811 	msr	BASEPRI, r3
 8007e98:	f3bf 8f6f 	isb	sy
 8007e9c:	f3bf 8f4f 	dsb	sy
 8007ea0:	60fb      	str	r3, [r7, #12]
}
 8007ea2:	bf00      	nop
 8007ea4:	bf00      	nop
 8007ea6:	e7fd      	b.n	8007ea4 <vTaskStartScheduler+0xa8>
}
 8007ea8:	bf00      	nop
 8007eaa:	3718      	adds	r7, #24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	08009bec 	.word	0x08009bec
 8007eb4:	08008485 	.word	0x08008485
 8007eb8:	24000bc8 	.word	0x24000bc8
 8007ebc:	24000aa4 	.word	0x24000aa4
 8007ec0:	24000014 	.word	0x24000014
 8007ec4:	24000bc4 	.word	0x24000bc4
 8007ec8:	24000bb0 	.word	0x24000bb0
 8007ecc:	24000ba8 	.word	0x24000ba8

08007ed0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ed4:	4b04      	ldr	r3, [pc, #16]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	4a03      	ldr	r2, [pc, #12]	@ (8007ee8 <vTaskSuspendAll+0x18>)
 8007edc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007ede:	bf00      	nop
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	24000bcc 	.word	0x24000bcc

08007eec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007efa:	4b42      	ldr	r3, [pc, #264]	@ (8008004 <xTaskResumeAll+0x118>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d10b      	bne.n	8007f1a <xTaskResumeAll+0x2e>
	__asm volatile
 8007f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f06:	f383 8811 	msr	BASEPRI, r3
 8007f0a:	f3bf 8f6f 	isb	sy
 8007f0e:	f3bf 8f4f 	dsb	sy
 8007f12:	603b      	str	r3, [r7, #0]
}
 8007f14:	bf00      	nop
 8007f16:	bf00      	nop
 8007f18:	e7fd      	b.n	8007f16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f1a:	f000 fdcd 	bl	8008ab8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f1e:	4b39      	ldr	r3, [pc, #228]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	4a37      	ldr	r2, [pc, #220]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f28:	4b36      	ldr	r3, [pc, #216]	@ (8008004 <xTaskResumeAll+0x118>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d161      	bne.n	8007ff4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f30:	4b35      	ldr	r3, [pc, #212]	@ (8008008 <xTaskResumeAll+0x11c>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d05d      	beq.n	8007ff4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f38:	e02e      	b.n	8007f98 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3a:	4b34      	ldr	r3, [pc, #208]	@ (800800c <xTaskResumeAll+0x120>)
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	3318      	adds	r3, #24
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fa30 	bl	80073ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3304      	adds	r3, #4
 8007f50:	4618      	mov	r0, r3
 8007f52:	f7ff fa2b 	bl	80073ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	409a      	lsls	r2, r3
 8007f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <xTaskResumeAll+0x124>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4a27      	ldr	r2, [pc, #156]	@ (8008014 <xTaskResumeAll+0x128>)
 8007f76:	441a      	add	r2, r3
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f7ff f9b7 	bl	80072f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f88:	4b23      	ldr	r3, [pc, #140]	@ (8008018 <xTaskResumeAll+0x12c>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007f92:	4b22      	ldr	r3, [pc, #136]	@ (800801c <xTaskResumeAll+0x130>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f98:	4b1c      	ldr	r3, [pc, #112]	@ (800800c <xTaskResumeAll+0x120>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1cc      	bne.n	8007f3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fa6:	f000 fb29 	bl	80085fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007faa:	4b1d      	ldr	r3, [pc, #116]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d010      	beq.n	8007fd8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007fb6:	f000 f837 	bl	8008028 <xTaskIncrementTick>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007fc0:	4b16      	ldr	r3, [pc, #88]	@ (800801c <xTaskResumeAll+0x130>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d1f1      	bne.n	8007fb6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007fd2:	4b13      	ldr	r3, [pc, #76]	@ (8008020 <xTaskResumeAll+0x134>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <xTaskResumeAll+0x130>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007fe4:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <xTaskResumeAll+0x138>)
 8007fe6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ff4:	f000 fd92 	bl	8008b1c <vPortExitCritical>

	return xAlreadyYielded;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	24000bcc 	.word	0x24000bcc
 8008008:	24000ba4 	.word	0x24000ba4
 800800c:	24000b64 	.word	0x24000b64
 8008010:	24000bac 	.word	0x24000bac
 8008014:	24000aa8 	.word	0x24000aa8
 8008018:	24000aa4 	.word	0x24000aa4
 800801c:	24000bb8 	.word	0x24000bb8
 8008020:	24000bb4 	.word	0x24000bb4
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800802e:	2300      	movs	r3, #0
 8008030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008032:	4b4f      	ldr	r3, [pc, #316]	@ (8008170 <xTaskIncrementTick+0x148>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	f040 808f 	bne.w	800815a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800803c:	4b4d      	ldr	r3, [pc, #308]	@ (8008174 <xTaskIncrementTick+0x14c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3301      	adds	r3, #1
 8008042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008044:	4a4b      	ldr	r2, [pc, #300]	@ (8008174 <xTaskIncrementTick+0x14c>)
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d121      	bne.n	8008094 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008050:	4b49      	ldr	r3, [pc, #292]	@ (8008178 <xTaskIncrementTick+0x150>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00b      	beq.n	8008072 <xTaskIncrementTick+0x4a>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	603b      	str	r3, [r7, #0]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <xTaskIncrementTick+0x46>
 8008072:	4b41      	ldr	r3, [pc, #260]	@ (8008178 <xTaskIncrementTick+0x150>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
 8008078:	4b40      	ldr	r3, [pc, #256]	@ (800817c <xTaskIncrementTick+0x154>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a3e      	ldr	r2, [pc, #248]	@ (8008178 <xTaskIncrementTick+0x150>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	4a3e      	ldr	r2, [pc, #248]	@ (800817c <xTaskIncrementTick+0x154>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	4b3e      	ldr	r3, [pc, #248]	@ (8008180 <xTaskIncrementTick+0x158>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3301      	adds	r3, #1
 800808c:	4a3c      	ldr	r2, [pc, #240]	@ (8008180 <xTaskIncrementTick+0x158>)
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	f000 fab4 	bl	80085fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008094:	4b3b      	ldr	r3, [pc, #236]	@ (8008184 <xTaskIncrementTick+0x15c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	429a      	cmp	r2, r3
 800809c:	d348      	bcc.n	8008130 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800809e:	4b36      	ldr	r3, [pc, #216]	@ (8008178 <xTaskIncrementTick+0x150>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d104      	bne.n	80080b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080a8:	4b36      	ldr	r3, [pc, #216]	@ (8008184 <xTaskIncrementTick+0x15c>)
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	601a      	str	r2, [r3, #0]
					break;
 80080b0:	e03e      	b.n	8008130 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b2:	4b31      	ldr	r3, [pc, #196]	@ (8008178 <xTaskIncrementTick+0x150>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d203      	bcs.n	80080d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80080ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008184 <xTaskIncrementTick+0x15c>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80080d0:	e02e      	b.n	8008130 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff f968 	bl	80073ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3318      	adds	r3, #24
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff f95f 	bl	80073ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080f2:	2201      	movs	r2, #1
 80080f4:	409a      	lsls	r2, r3
 80080f6:	4b24      	ldr	r3, [pc, #144]	@ (8008188 <xTaskIncrementTick+0x160>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	4a22      	ldr	r2, [pc, #136]	@ (8008188 <xTaskIncrementTick+0x160>)
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4a1f      	ldr	r2, [pc, #124]	@ (800818c <xTaskIncrementTick+0x164>)
 800810e:	441a      	add	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3304      	adds	r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7ff f8eb 	bl	80072f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008120:	4b1b      	ldr	r3, [pc, #108]	@ (8008190 <xTaskIncrementTick+0x168>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	429a      	cmp	r2, r3
 8008128:	d3b9      	bcc.n	800809e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800812a:	2301      	movs	r3, #1
 800812c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800812e:	e7b6      	b.n	800809e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008130:	4b17      	ldr	r3, [pc, #92]	@ (8008190 <xTaskIncrementTick+0x168>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	4915      	ldr	r1, [pc, #84]	@ (800818c <xTaskIncrementTick+0x164>)
 8008138:	4613      	mov	r3, r2
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	4413      	add	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	440b      	add	r3, r1
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d901      	bls.n	800814c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008148:	2301      	movs	r3, #1
 800814a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800814c:	4b11      	ldr	r3, [pc, #68]	@ (8008194 <xTaskIncrementTick+0x16c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d007      	beq.n	8008164 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008154:	2301      	movs	r3, #1
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e004      	b.n	8008164 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800815a:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <xTaskIncrementTick+0x170>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	4a0d      	ldr	r2, [pc, #52]	@ (8008198 <xTaskIncrementTick+0x170>)
 8008162:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008164:	697b      	ldr	r3, [r7, #20]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	24000bcc 	.word	0x24000bcc
 8008174:	24000ba8 	.word	0x24000ba8
 8008178:	24000b5c 	.word	0x24000b5c
 800817c:	24000b60 	.word	0x24000b60
 8008180:	24000bbc 	.word	0x24000bbc
 8008184:	24000bc4 	.word	0x24000bc4
 8008188:	24000bac 	.word	0x24000bac
 800818c:	24000aa8 	.word	0x24000aa8
 8008190:	24000aa4 	.word	0x24000aa4
 8008194:	24000bb8 	.word	0x24000bb8
 8008198:	24000bb4 	.word	0x24000bb4

0800819c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081a2:	4b2a      	ldr	r3, [pc, #168]	@ (800824c <vTaskSwitchContext+0xb0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d003      	beq.n	80081b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80081aa:	4b29      	ldr	r3, [pc, #164]	@ (8008250 <vTaskSwitchContext+0xb4>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80081b0:	e045      	b.n	800823e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80081b2:	4b27      	ldr	r3, [pc, #156]	@ (8008250 <vTaskSwitchContext+0xb4>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b8:	4b26      	ldr	r3, [pc, #152]	@ (8008254 <vTaskSwitchContext+0xb8>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	fab3 f383 	clz	r3, r3
 80081c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	f1c3 031f 	rsb	r3, r3, #31
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	4922      	ldr	r1, [pc, #136]	@ (8008258 <vTaskSwitchContext+0xbc>)
 80081d0:	697a      	ldr	r2, [r7, #20]
 80081d2:	4613      	mov	r3, r2
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	4413      	add	r3, r2
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	440b      	add	r3, r1
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <vTaskSwitchContext+0x5e>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	607b      	str	r3, [r7, #4]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <vTaskSwitchContext+0x5a>
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4613      	mov	r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4a14      	ldr	r2, [pc, #80]	@ (8008258 <vTaskSwitchContext+0xbc>)
 8008206:	4413      	add	r3, r2
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	605a      	str	r2, [r3, #4]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	3308      	adds	r3, #8
 800821c:	429a      	cmp	r2, r3
 800821e:	d104      	bne.n	800822a <vTaskSwitchContext+0x8e>
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	4a0a      	ldr	r2, [pc, #40]	@ (800825c <vTaskSwitchContext+0xc0>)
 8008232:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008234:	4b09      	ldr	r3, [pc, #36]	@ (800825c <vTaskSwitchContext+0xc0>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	334c      	adds	r3, #76	@ 0x4c
 800823a:	4a09      	ldr	r2, [pc, #36]	@ (8008260 <vTaskSwitchContext+0xc4>)
 800823c:	6013      	str	r3, [r2, #0]
}
 800823e:	bf00      	nop
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	24000bcc 	.word	0x24000bcc
 8008250:	24000bb8 	.word	0x24000bb8
 8008254:	24000bac 	.word	0x24000bac
 8008258:	24000aa8 	.word	0x24000aa8
 800825c:	24000aa4 	.word	0x24000aa4
 8008260:	24000014 	.word	0x24000014

08008264 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	60fb      	str	r3, [r7, #12]
}
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800828c:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <vTaskPlaceOnEventList+0x48>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3318      	adds	r3, #24
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7ff f850 	bl	800733a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800829a:	2101      	movs	r1, #1
 800829c:	6838      	ldr	r0, [r7, #0]
 800829e:	f000 fa73 	bl	8008788 <prvAddCurrentTaskToDelayedList>
}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	24000aa4 	.word	0x24000aa4

080082b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	60fb      	str	r3, [r7, #12]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3318      	adds	r3, #24
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7ff f862 	bl	80073ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082e8:	4b1d      	ldr	r3, [pc, #116]	@ (8008360 <xTaskRemoveFromEventList+0xb0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11c      	bne.n	800832a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff f859 	bl	80073ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	2201      	movs	r2, #1
 8008300:	409a      	lsls	r2, r3
 8008302:	4b18      	ldr	r3, [pc, #96]	@ (8008364 <xTaskRemoveFromEventList+0xb4>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4313      	orrs	r3, r2
 8008308:	4a16      	ldr	r2, [pc, #88]	@ (8008364 <xTaskRemoveFromEventList+0xb4>)
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008310:	4613      	mov	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	4a13      	ldr	r2, [pc, #76]	@ (8008368 <xTaskRemoveFromEventList+0xb8>)
 800831a:	441a      	add	r2, r3
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	3304      	adds	r3, #4
 8008320:	4619      	mov	r1, r3
 8008322:	4610      	mov	r0, r2
 8008324:	f7fe ffe5 	bl	80072f2 <vListInsertEnd>
 8008328:	e005      	b.n	8008336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	3318      	adds	r3, #24
 800832e:	4619      	mov	r1, r3
 8008330:	480e      	ldr	r0, [pc, #56]	@ (800836c <xTaskRemoveFromEventList+0xbc>)
 8008332:	f7fe ffde 	bl	80072f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800833a:	4b0d      	ldr	r3, [pc, #52]	@ (8008370 <xTaskRemoveFromEventList+0xc0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	429a      	cmp	r2, r3
 8008342:	d905      	bls.n	8008350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008344:	2301      	movs	r3, #1
 8008346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008348:	4b0a      	ldr	r3, [pc, #40]	@ (8008374 <xTaskRemoveFromEventList+0xc4>)
 800834a:	2201      	movs	r2, #1
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	e001      	b.n	8008354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008350:	2300      	movs	r3, #0
 8008352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008354:	697b      	ldr	r3, [r7, #20]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3718      	adds	r7, #24
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop
 8008360:	24000bcc 	.word	0x24000bcc
 8008364:	24000bac 	.word	0x24000bac
 8008368:	24000aa8 	.word	0x24000aa8
 800836c:	24000b64 	.word	0x24000b64
 8008370:	24000aa4 	.word	0x24000aa4
 8008374:	24000bb8 	.word	0x24000bb8

08008378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008380:	4b06      	ldr	r3, [pc, #24]	@ (800839c <vTaskInternalSetTimeOutState+0x24>)
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008388:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <vTaskInternalSetTimeOutState+0x28>)
 800838a:	681a      	ldr	r2, [r3, #0]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	605a      	str	r2, [r3, #4]
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	24000bbc 	.word	0x24000bbc
 80083a0:	24000ba8 	.word	0x24000ba8

080083a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10b      	bne.n	80083cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80083b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	613b      	str	r3, [r7, #16]
}
 80083c6:	bf00      	nop
 80083c8:	bf00      	nop
 80083ca:	e7fd      	b.n	80083c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d10b      	bne.n	80083ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	60fb      	str	r3, [r7, #12]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80083ea:	f000 fb65 	bl	8008ab8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008464 <xTaskCheckForTimeOut+0xc0>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	69ba      	ldr	r2, [r7, #24]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008406:	d102      	bne.n	800840e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	61fb      	str	r3, [r7, #28]
 800840c:	e023      	b.n	8008456 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b15      	ldr	r3, [pc, #84]	@ (8008468 <xTaskCheckForTimeOut+0xc4>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d007      	beq.n	800842a <xTaskCheckForTimeOut+0x86>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	69ba      	ldr	r2, [r7, #24]
 8008420:	429a      	cmp	r2, r3
 8008422:	d302      	bcc.n	800842a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008424:	2301      	movs	r3, #1
 8008426:	61fb      	str	r3, [r7, #28]
 8008428:	e015      	b.n	8008456 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	697a      	ldr	r2, [r7, #20]
 8008430:	429a      	cmp	r2, r3
 8008432:	d20b      	bcs.n	800844c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	1ad2      	subs	r2, r2, r3
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f7ff ff99 	bl	8008378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	61fb      	str	r3, [r7, #28]
 800844a:	e004      	b.n	8008456 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	2200      	movs	r2, #0
 8008450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008452:	2301      	movs	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008456:	f000 fb61 	bl	8008b1c <vPortExitCritical>

	return xReturn;
 800845a:	69fb      	ldr	r3, [r7, #28]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	24000ba8 	.word	0x24000ba8
 8008468:	24000bbc 	.word	0x24000bbc

0800846c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800846c:	b480      	push	{r7}
 800846e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008470:	4b03      	ldr	r3, [pc, #12]	@ (8008480 <vTaskMissedYield+0x14>)
 8008472:	2201      	movs	r2, #1
 8008474:	601a      	str	r2, [r3, #0]
}
 8008476:	bf00      	nop
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr
 8008480:	24000bb8 	.word	0x24000bb8

08008484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800848c:	f000 f852 	bl	8008534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008490:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <prvIdleTask+0x28>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d9f9      	bls.n	800848c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008498:	4b05      	ldr	r3, [pc, #20]	@ (80084b0 <prvIdleTask+0x2c>)
 800849a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80084a8:	e7f0      	b.n	800848c <prvIdleTask+0x8>
 80084aa:	bf00      	nop
 80084ac:	24000aa8 	.word	0x24000aa8
 80084b0:	e000ed04 	.word	0xe000ed04

080084b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	e00c      	b.n	80084da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	4613      	mov	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4413      	add	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4a12      	ldr	r2, [pc, #72]	@ (8008514 <prvInitialiseTaskLists+0x60>)
 80084cc:	4413      	add	r3, r2
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fe fee2 	bl	8007298 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3301      	adds	r3, #1
 80084d8:	607b      	str	r3, [r7, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b06      	cmp	r3, #6
 80084de:	d9ef      	bls.n	80084c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80084e0:	480d      	ldr	r0, [pc, #52]	@ (8008518 <prvInitialiseTaskLists+0x64>)
 80084e2:	f7fe fed9 	bl	8007298 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084e6:	480d      	ldr	r0, [pc, #52]	@ (800851c <prvInitialiseTaskLists+0x68>)
 80084e8:	f7fe fed6 	bl	8007298 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084ec:	480c      	ldr	r0, [pc, #48]	@ (8008520 <prvInitialiseTaskLists+0x6c>)
 80084ee:	f7fe fed3 	bl	8007298 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084f2:	480c      	ldr	r0, [pc, #48]	@ (8008524 <prvInitialiseTaskLists+0x70>)
 80084f4:	f7fe fed0 	bl	8007298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084f8:	480b      	ldr	r0, [pc, #44]	@ (8008528 <prvInitialiseTaskLists+0x74>)
 80084fa:	f7fe fecd 	bl	8007298 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084fe:	4b0b      	ldr	r3, [pc, #44]	@ (800852c <prvInitialiseTaskLists+0x78>)
 8008500:	4a05      	ldr	r2, [pc, #20]	@ (8008518 <prvInitialiseTaskLists+0x64>)
 8008502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008504:	4b0a      	ldr	r3, [pc, #40]	@ (8008530 <prvInitialiseTaskLists+0x7c>)
 8008506:	4a05      	ldr	r2, [pc, #20]	@ (800851c <prvInitialiseTaskLists+0x68>)
 8008508:	601a      	str	r2, [r3, #0]
}
 800850a:	bf00      	nop
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	24000aa8 	.word	0x24000aa8
 8008518:	24000b34 	.word	0x24000b34
 800851c:	24000b48 	.word	0x24000b48
 8008520:	24000b64 	.word	0x24000b64
 8008524:	24000b78 	.word	0x24000b78
 8008528:	24000b90 	.word	0x24000b90
 800852c:	24000b5c 	.word	0x24000b5c
 8008530:	24000b60 	.word	0x24000b60

08008534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800853a:	e019      	b.n	8008570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800853c:	f000 fabc 	bl	8008ab8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008540:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <prvCheckTasksWaitingTermination+0x50>)
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	68db      	ldr	r3, [r3, #12]
 8008546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	3304      	adds	r3, #4
 800854c:	4618      	mov	r0, r3
 800854e:	f7fe ff2d 	bl	80073ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008552:	4b0d      	ldr	r3, [pc, #52]	@ (8008588 <prvCheckTasksWaitingTermination+0x54>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3b01      	subs	r3, #1
 8008558:	4a0b      	ldr	r2, [pc, #44]	@ (8008588 <prvCheckTasksWaitingTermination+0x54>)
 800855a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800855c:	4b0b      	ldr	r3, [pc, #44]	@ (800858c <prvCheckTasksWaitingTermination+0x58>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3b01      	subs	r3, #1
 8008562:	4a0a      	ldr	r2, [pc, #40]	@ (800858c <prvCheckTasksWaitingTermination+0x58>)
 8008564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008566:	f000 fad9 	bl	8008b1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f810 	bl	8008590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008570:	4b06      	ldr	r3, [pc, #24]	@ (800858c <prvCheckTasksWaitingTermination+0x58>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e1      	bne.n	800853c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	24000b78 	.word	0x24000b78
 8008588:	24000ba4 	.word	0x24000ba4
 800858c:	24000b8c 	.word	0x24000b8c

08008590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	334c      	adds	r3, #76	@ 0x4c
 800859c:	4618      	mov	r0, r3
 800859e:	f000 fea3 	bl	80092e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d108      	bne.n	80085be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fc2f 	bl	8008e14 <vPortFree>
				vPortFree( pxTCB );
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fc2c 	bl	8008e14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80085bc:	e019      	b.n	80085f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d103      	bne.n	80085d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 fc23 	bl	8008e14 <vPortFree>
	}
 80085ce:	e010      	b.n	80085f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d00b      	beq.n	80085f2 <prvDeleteTCB+0x62>
	__asm volatile
 80085da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085de:	f383 8811 	msr	BASEPRI, r3
 80085e2:	f3bf 8f6f 	isb	sy
 80085e6:	f3bf 8f4f 	dsb	sy
 80085ea:	60fb      	str	r3, [r7, #12]
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	e7fd      	b.n	80085ee <prvDeleteTCB+0x5e>
	}
 80085f2:	bf00      	nop
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008602:	4b0c      	ldr	r3, [pc, #48]	@ (8008634 <prvResetNextTaskUnblockTime+0x38>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800860c:	4b0a      	ldr	r3, [pc, #40]	@ (8008638 <prvResetNextTaskUnblockTime+0x3c>)
 800860e:	f04f 32ff 	mov.w	r2, #4294967295
 8008612:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008614:	e008      	b.n	8008628 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008616:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <prvResetNextTaskUnblockTime+0x38>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	4a04      	ldr	r2, [pc, #16]	@ (8008638 <prvResetNextTaskUnblockTime+0x3c>)
 8008626:	6013      	str	r3, [r2, #0]
}
 8008628:	bf00      	nop
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	24000b5c 	.word	0x24000b5c
 8008638:	24000bc4 	.word	0x24000bc4

0800863c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008642:	4b0b      	ldr	r3, [pc, #44]	@ (8008670 <xTaskGetSchedulerState+0x34>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d102      	bne.n	8008650 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800864a:	2301      	movs	r3, #1
 800864c:	607b      	str	r3, [r7, #4]
 800864e:	e008      	b.n	8008662 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008650:	4b08      	ldr	r3, [pc, #32]	@ (8008674 <xTaskGetSchedulerState+0x38>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d102      	bne.n	800865e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008658:	2302      	movs	r3, #2
 800865a:	607b      	str	r3, [r7, #4]
 800865c:	e001      	b.n	8008662 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008662:	687b      	ldr	r3, [r7, #4]
	}
 8008664:	4618      	mov	r0, r3
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	24000bb0 	.word	0x24000bb0
 8008674:	24000bcc 	.word	0x24000bcc

08008678 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008684:	2300      	movs	r3, #0
 8008686:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d070      	beq.n	8008770 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800868e:	4b3b      	ldr	r3, [pc, #236]	@ (800877c <xTaskPriorityDisinherit+0x104>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	429a      	cmp	r2, r3
 8008696:	d00b      	beq.n	80086b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800869c:	f383 8811 	msr	BASEPRI, r3
 80086a0:	f3bf 8f6f 	isb	sy
 80086a4:	f3bf 8f4f 	dsb	sy
 80086a8:	60fb      	str	r3, [r7, #12]
}
 80086aa:	bf00      	nop
 80086ac:	bf00      	nop
 80086ae:	e7fd      	b.n	80086ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10b      	bne.n	80086d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	60bb      	str	r3, [r7, #8]
}
 80086ca:	bf00      	nop
 80086cc:	bf00      	nop
 80086ce:	e7fd      	b.n	80086cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086d4:	1e5a      	subs	r2, r3, #1
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d044      	beq.n	8008770 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d140      	bne.n	8008770 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe fe5a 	bl	80073ac <uxListRemove>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d115      	bne.n	800872a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008702:	491f      	ldr	r1, [pc, #124]	@ (8008780 <xTaskPriorityDisinherit+0x108>)
 8008704:	4613      	mov	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <xTaskPriorityDisinherit+0xb2>
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	2201      	movs	r2, #1
 800871a:	fa02 f303 	lsl.w	r3, r2, r3
 800871e:	43da      	mvns	r2, r3
 8008720:	4b18      	ldr	r3, [pc, #96]	@ (8008784 <xTaskPriorityDisinherit+0x10c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4013      	ands	r3, r2
 8008726:	4a17      	ldr	r2, [pc, #92]	@ (8008784 <xTaskPriorityDisinherit+0x10c>)
 8008728:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	f1c3 0207 	rsb	r2, r3, #7
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008742:	2201      	movs	r2, #1
 8008744:	409a      	lsls	r2, r3
 8008746:	4b0f      	ldr	r3, [pc, #60]	@ (8008784 <xTaskPriorityDisinherit+0x10c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4313      	orrs	r3, r2
 800874c:	4a0d      	ldr	r2, [pc, #52]	@ (8008784 <xTaskPriorityDisinherit+0x10c>)
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4a08      	ldr	r2, [pc, #32]	@ (8008780 <xTaskPriorityDisinherit+0x108>)
 800875e:	441a      	add	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fdc3 	bl	80072f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008770:	697b      	ldr	r3, [r7, #20]
	}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	24000aa4 	.word	0x24000aa4
 8008780:	24000aa8 	.word	0x24000aa8
 8008784:	24000bac 	.word	0x24000bac

08008788 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008792:	4b29      	ldr	r3, [pc, #164]	@ (8008838 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008798:	4b28      	ldr	r3, [pc, #160]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	3304      	adds	r3, #4
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fe fe04 	bl	80073ac <uxListRemove>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10b      	bne.n	80087c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80087aa:	4b24      	ldr	r3, [pc, #144]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	2201      	movs	r2, #1
 80087b2:	fa02 f303 	lsl.w	r3, r2, r3
 80087b6:	43da      	mvns	r2, r3
 80087b8:	4b21      	ldr	r3, [pc, #132]	@ (8008840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4013      	ands	r3, r2
 80087be:	4a20      	ldr	r2, [pc, #128]	@ (8008840 <prvAddCurrentTaskToDelayedList+0xb8>)
 80087c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087c8:	d10a      	bne.n	80087e0 <prvAddCurrentTaskToDelayedList+0x58>
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d007      	beq.n	80087e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087d0:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	481a      	ldr	r0, [pc, #104]	@ (8008844 <prvAddCurrentTaskToDelayedList+0xbc>)
 80087da:	f7fe fd8a 	bl	80072f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80087de:	e026      	b.n	800882e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4413      	add	r3, r2
 80087e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80087e8:	4b14      	ldr	r3, [pc, #80]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68ba      	ldr	r2, [r7, #8]
 80087ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80087f0:	68ba      	ldr	r2, [r7, #8]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d209      	bcs.n	800880c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80087f8:	4b13      	ldr	r3, [pc, #76]	@ (8008848 <prvAddCurrentTaskToDelayedList+0xc0>)
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	4b0f      	ldr	r3, [pc, #60]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	3304      	adds	r3, #4
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f7fe fd98 	bl	800733a <vListInsert>
}
 800880a:	e010      	b.n	800882e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800880c:	4b0f      	ldr	r3, [pc, #60]	@ (800884c <prvAddCurrentTaskToDelayedList+0xc4>)
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	4b0a      	ldr	r3, [pc, #40]	@ (800883c <prvAddCurrentTaskToDelayedList+0xb4>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	3304      	adds	r3, #4
 8008816:	4619      	mov	r1, r3
 8008818:	4610      	mov	r0, r2
 800881a:	f7fe fd8e 	bl	800733a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800881e:	4b0c      	ldr	r3, [pc, #48]	@ (8008850 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	429a      	cmp	r2, r3
 8008826:	d202      	bcs.n	800882e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008828:	4a09      	ldr	r2, [pc, #36]	@ (8008850 <prvAddCurrentTaskToDelayedList+0xc8>)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6013      	str	r3, [r2, #0]
}
 800882e:	bf00      	nop
 8008830:	3710      	adds	r7, #16
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	24000ba8 	.word	0x24000ba8
 800883c:	24000aa4 	.word	0x24000aa4
 8008840:	24000bac 	.word	0x24000bac
 8008844:	24000b90 	.word	0x24000b90
 8008848:	24000b60 	.word	0x24000b60
 800884c:	24000b5c 	.word	0x24000b5c
 8008850:	24000bc4 	.word	0x24000bc4

08008854 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3b04      	subs	r3, #4
 8008864:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800886c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b04      	subs	r3, #4
 8008872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3b04      	subs	r3, #4
 8008882:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008884:	4a0c      	ldr	r2, [pc, #48]	@ (80088b8 <pxPortInitialiseStack+0x64>)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	3b14      	subs	r3, #20
 800888e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3b04      	subs	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f06f 0202 	mvn.w	r2, #2
 80088a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	3b20      	subs	r3, #32
 80088a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80088aa:	68fb      	ldr	r3, [r7, #12]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	080088bd 	.word	0x080088bd

080088bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088c6:	4b13      	ldr	r3, [pc, #76]	@ (8008914 <prvTaskExitError+0x58>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ce:	d00b      	beq.n	80088e8 <prvTaskExitError+0x2c>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	60fb      	str	r3, [r7, #12]
}
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <prvTaskExitError+0x28>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60bb      	str	r3, [r7, #8]
}
 80088fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088fc:	bf00      	nop
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d0fc      	beq.n	80088fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	24000010 	.word	0x24000010
	...

08008920 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008920:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <pxCurrentTCBConst2>)
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	6808      	ldr	r0, [r1, #0]
 8008926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	f380 8809 	msr	PSP, r0
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f04f 0000 	mov.w	r0, #0
 8008936:	f380 8811 	msr	BASEPRI, r0
 800893a:	4770      	bx	lr
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst2>:
 8008940:	24000aa4 	.word	0x24000aa4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008948:	4808      	ldr	r0, [pc, #32]	@ (800896c <prvPortStartFirstTask+0x24>)
 800894a:	6800      	ldr	r0, [r0, #0]
 800894c:	6800      	ldr	r0, [r0, #0]
 800894e:	f380 8808 	msr	MSP, r0
 8008952:	f04f 0000 	mov.w	r0, #0
 8008956:	f380 8814 	msr	CONTROL, r0
 800895a:	b662      	cpsie	i
 800895c:	b661      	cpsie	f
 800895e:	f3bf 8f4f 	dsb	sy
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	df00      	svc	0
 8008968:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800896a:	bf00      	nop
 800896c:	e000ed08 	.word	0xe000ed08

08008970 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b086      	sub	sp, #24
 8008974:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008976:	4b47      	ldr	r3, [pc, #284]	@ (8008a94 <xPortStartScheduler+0x124>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a47      	ldr	r2, [pc, #284]	@ (8008a98 <xPortStartScheduler+0x128>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10b      	bne.n	8008998 <xPortStartScheduler+0x28>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	613b      	str	r3, [r7, #16]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008998:	4b3e      	ldr	r3, [pc, #248]	@ (8008a94 <xPortStartScheduler+0x124>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a9c <xPortStartScheduler+0x12c>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10b      	bne.n	80089ba <xPortStartScheduler+0x4a>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	60fb      	str	r3, [r7, #12]
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	e7fd      	b.n	80089b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80089ba:	4b39      	ldr	r3, [pc, #228]	@ (8008aa0 <xPortStartScheduler+0x130>)
 80089bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	22ff      	movs	r2, #255	@ 0xff
 80089ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	781b      	ldrb	r3, [r3, #0]
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089d4:	78fb      	ldrb	r3, [r7, #3]
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	4b31      	ldr	r3, [pc, #196]	@ (8008aa4 <xPortStartScheduler+0x134>)
 80089e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089e2:	4b31      	ldr	r3, [pc, #196]	@ (8008aa8 <xPortStartScheduler+0x138>)
 80089e4:	2207      	movs	r2, #7
 80089e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089e8:	e009      	b.n	80089fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80089ea:	4b2f      	ldr	r3, [pc, #188]	@ (8008aa8 <xPortStartScheduler+0x138>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa8 <xPortStartScheduler+0x138>)
 80089f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	005b      	lsls	r3, r3, #1
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089fe:	78fb      	ldrb	r3, [r7, #3]
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a06:	2b80      	cmp	r3, #128	@ 0x80
 8008a08:	d0ef      	beq.n	80089ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a0a:	4b27      	ldr	r3, [pc, #156]	@ (8008aa8 <xPortStartScheduler+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1c3 0307 	rsb	r3, r3, #7
 8008a12:	2b04      	cmp	r3, #4
 8008a14:	d00b      	beq.n	8008a2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60bb      	str	r3, [r7, #8]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008aa8 <xPortStartScheduler+0x138>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	021b      	lsls	r3, r3, #8
 8008a34:	4a1c      	ldr	r2, [pc, #112]	@ (8008aa8 <xPortStartScheduler+0x138>)
 8008a36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a38:	4b1b      	ldr	r3, [pc, #108]	@ (8008aa8 <xPortStartScheduler+0x138>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a40:	4a19      	ldr	r2, [pc, #100]	@ (8008aa8 <xPortStartScheduler+0x138>)
 8008a42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	b2da      	uxtb	r2, r3
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a4c:	4b17      	ldr	r3, [pc, #92]	@ (8008aac <xPortStartScheduler+0x13c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a16      	ldr	r2, [pc, #88]	@ (8008aac <xPortStartScheduler+0x13c>)
 8008a52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008a56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a58:	4b14      	ldr	r3, [pc, #80]	@ (8008aac <xPortStartScheduler+0x13c>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a13      	ldr	r2, [pc, #76]	@ (8008aac <xPortStartScheduler+0x13c>)
 8008a5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008a62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a64:	f000 f8da 	bl	8008c1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a68:	4b11      	ldr	r3, [pc, #68]	@ (8008ab0 <xPortStartScheduler+0x140>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a6e:	f000 f8f9 	bl	8008c64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a72:	4b10      	ldr	r3, [pc, #64]	@ (8008ab4 <xPortStartScheduler+0x144>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a0f      	ldr	r2, [pc, #60]	@ (8008ab4 <xPortStartScheduler+0x144>)
 8008a78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a7e:	f7ff ff63 	bl	8008948 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a82:	f7ff fb8b 	bl	800819c <vTaskSwitchContext>
	prvTaskExitError();
 8008a86:	f7ff ff19 	bl	80088bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	e000ed00 	.word	0xe000ed00
 8008a98:	410fc271 	.word	0x410fc271
 8008a9c:	410fc270 	.word	0x410fc270
 8008aa0:	e000e400 	.word	0xe000e400
 8008aa4:	24000bd0 	.word	0x24000bd0
 8008aa8:	24000bd4 	.word	0x24000bd4
 8008aac:	e000ed20 	.word	0xe000ed20
 8008ab0:	24000010 	.word	0x24000010
 8008ab4:	e000ef34 	.word	0xe000ef34

08008ab8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
	__asm volatile
 8008abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	607b      	str	r3, [r7, #4]
}
 8008ad0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ad2:	4b10      	ldr	r3, [pc, #64]	@ (8008b14 <vPortEnterCritical+0x5c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	4a0e      	ldr	r2, [pc, #56]	@ (8008b14 <vPortEnterCritical+0x5c>)
 8008ada:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008adc:	4b0d      	ldr	r3, [pc, #52]	@ (8008b14 <vPortEnterCritical+0x5c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d110      	bne.n	8008b06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <vPortEnterCritical+0x60>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	603b      	str	r3, [r7, #0]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <vPortEnterCritical+0x4a>
	}
}
 8008b06:	bf00      	nop
 8008b08:	370c      	adds	r7, #12
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	24000010 	.word	0x24000010
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b22:	4b12      	ldr	r3, [pc, #72]	@ (8008b6c <vPortExitCritical+0x50>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10b      	bne.n	8008b42 <vPortExitCritical+0x26>
	__asm volatile
 8008b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2e:	f383 8811 	msr	BASEPRI, r3
 8008b32:	f3bf 8f6f 	isb	sy
 8008b36:	f3bf 8f4f 	dsb	sy
 8008b3a:	607b      	str	r3, [r7, #4]
}
 8008b3c:	bf00      	nop
 8008b3e:	bf00      	nop
 8008b40:	e7fd      	b.n	8008b3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b42:	4b0a      	ldr	r3, [pc, #40]	@ (8008b6c <vPortExitCritical+0x50>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	4a08      	ldr	r2, [pc, #32]	@ (8008b6c <vPortExitCritical+0x50>)
 8008b4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b4c:	4b07      	ldr	r3, [pc, #28]	@ (8008b6c <vPortExitCritical+0x50>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d105      	bne.n	8008b60 <vPortExitCritical+0x44>
 8008b54:	2300      	movs	r3, #0
 8008b56:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr
 8008b6c:	24000010 	.word	0x24000010

08008b70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b70:	f3ef 8009 	mrs	r0, PSP
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4b15      	ldr	r3, [pc, #84]	@ (8008bd0 <pxCurrentTCBConst>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	f01e 0f10 	tst.w	lr, #16
 8008b80:	bf08      	it	eq
 8008b82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8a:	6010      	str	r0, [r2, #0]
 8008b8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008b94:	f380 8811 	msr	BASEPRI, r0
 8008b98:	f3bf 8f4f 	dsb	sy
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f7ff fafc 	bl	800819c <vTaskSwitchContext>
 8008ba4:	f04f 0000 	mov.w	r0, #0
 8008ba8:	f380 8811 	msr	BASEPRI, r0
 8008bac:	bc09      	pop	{r0, r3}
 8008bae:	6819      	ldr	r1, [r3, #0]
 8008bb0:	6808      	ldr	r0, [r1, #0]
 8008bb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb6:	f01e 0f10 	tst.w	lr, #16
 8008bba:	bf08      	it	eq
 8008bbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008bc0:	f380 8809 	msr	PSP, r0
 8008bc4:	f3bf 8f6f 	isb	sy
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	f3af 8000 	nop.w

08008bd0 <pxCurrentTCBConst>:
 8008bd0:	24000aa4 	.word	0x24000aa4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bd4:	bf00      	nop
 8008bd6:	bf00      	nop

08008bd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008be2:	f383 8811 	msr	BASEPRI, r3
 8008be6:	f3bf 8f6f 	isb	sy
 8008bea:	f3bf 8f4f 	dsb	sy
 8008bee:	607b      	str	r3, [r7, #4]
}
 8008bf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bf2:	f7ff fa19 	bl	8008028 <xTaskIncrementTick>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d003      	beq.n	8008c04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bfc:	4b06      	ldr	r3, [pc, #24]	@ (8008c18 <SysTick_Handler+0x40>)
 8008bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c02:	601a      	str	r2, [r3, #0]
 8008c04:	2300      	movs	r3, #0
 8008c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f383 8811 	msr	BASEPRI, r3
}
 8008c0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c10:	bf00      	nop
 8008c12:	3708      	adds	r7, #8
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	e000ed04 	.word	0xe000ed04

08008c1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c20:	4b0b      	ldr	r3, [pc, #44]	@ (8008c50 <vPortSetupTimerInterrupt+0x34>)
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c26:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <vPortSetupTimerInterrupt+0x38>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8008c58 <vPortSetupTimerInterrupt+0x3c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a0a      	ldr	r2, [pc, #40]	@ (8008c5c <vPortSetupTimerInterrupt+0x40>)
 8008c32:	fba2 2303 	umull	r2, r3, r2, r3
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	4a09      	ldr	r2, [pc, #36]	@ (8008c60 <vPortSetupTimerInterrupt+0x44>)
 8008c3a:	3b01      	subs	r3, #1
 8008c3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c3e:	4b04      	ldr	r3, [pc, #16]	@ (8008c50 <vPortSetupTimerInterrupt+0x34>)
 8008c40:	2207      	movs	r2, #7
 8008c42:	601a      	str	r2, [r3, #0]
}
 8008c44:	bf00      	nop
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
 8008c4e:	bf00      	nop
 8008c50:	e000e010 	.word	0xe000e010
 8008c54:	e000e018 	.word	0xe000e018
 8008c58:	24000000 	.word	0x24000000
 8008c5c:	10624dd3 	.word	0x10624dd3
 8008c60:	e000e014 	.word	0xe000e014

08008c64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c74 <vPortEnableVFP+0x10>
 8008c68:	6801      	ldr	r1, [r0, #0]
 8008c6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c6e:	6001      	str	r1, [r0, #0]
 8008c70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c72:	bf00      	nop
 8008c74:	e000ed88 	.word	0xe000ed88

08008c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	@ 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c84:	f7ff f924 	bl	8007ed0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c88:	4b5c      	ldr	r3, [pc, #368]	@ (8008dfc <pvPortMalloc+0x184>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c90:	f000 f924 	bl	8008edc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c94:	4b5a      	ldr	r3, [pc, #360]	@ (8008e00 <pvPortMalloc+0x188>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8095 	bne.w	8008dcc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01e      	beq.n	8008ce6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ca8:	2208      	movs	r2, #8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d015      	beq.n	8008ce6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00b      	beq.n	8008ce6 <pvPortMalloc+0x6e>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	617b      	str	r3, [r7, #20]
}
 8008ce0:	bf00      	nop
 8008ce2:	bf00      	nop
 8008ce4:	e7fd      	b.n	8008ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d06f      	beq.n	8008dcc <pvPortMalloc+0x154>
 8008cec:	4b45      	ldr	r3, [pc, #276]	@ (8008e04 <pvPortMalloc+0x18c>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d86a      	bhi.n	8008dcc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cf6:	4b44      	ldr	r3, [pc, #272]	@ (8008e08 <pvPortMalloc+0x190>)
 8008cf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cfa:	4b43      	ldr	r3, [pc, #268]	@ (8008e08 <pvPortMalloc+0x190>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d00:	e004      	b.n	8008d0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d903      	bls.n	8008d1e <pvPortMalloc+0xa6>
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1f1      	bne.n	8008d02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d1e:	4b37      	ldr	r3, [pc, #220]	@ (8008dfc <pvPortMalloc+0x184>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d051      	beq.n	8008dcc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d28:	6a3b      	ldr	r3, [r7, #32]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	2208      	movs	r2, #8
 8008d2e:	4413      	add	r3, r2
 8008d30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	1ad2      	subs	r2, r2, r3
 8008d42:	2308      	movs	r3, #8
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d920      	bls.n	8008d8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4413      	add	r3, r2
 8008d50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00b      	beq.n	8008d74 <pvPortMalloc+0xfc>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	613b      	str	r3, [r7, #16]
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	e7fd      	b.n	8008d70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d86:	69b8      	ldr	r0, [r7, #24]
 8008d88:	f000 f90a 	bl	8008fa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8008e04 <pvPortMalloc+0x18c>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a1b      	ldr	r2, [pc, #108]	@ (8008e04 <pvPortMalloc+0x18c>)
 8008d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8008e04 <pvPortMalloc+0x18c>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8008e0c <pvPortMalloc+0x194>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d203      	bcs.n	8008dae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da6:	4b17      	ldr	r3, [pc, #92]	@ (8008e04 <pvPortMalloc+0x18c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a18      	ldr	r2, [pc, #96]	@ (8008e0c <pvPortMalloc+0x194>)
 8008dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4b13      	ldr	r3, [pc, #76]	@ (8008e00 <pvPortMalloc+0x188>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dc2:	4b13      	ldr	r3, [pc, #76]	@ (8008e10 <pvPortMalloc+0x198>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	4a11      	ldr	r2, [pc, #68]	@ (8008e10 <pvPortMalloc+0x198>)
 8008dca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dcc:	f7ff f88e 	bl	8007eec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00b      	beq.n	8008df2 <pvPortMalloc+0x17a>
	__asm volatile
 8008dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dde:	f383 8811 	msr	BASEPRI, r3
 8008de2:	f3bf 8f6f 	isb	sy
 8008de6:	f3bf 8f4f 	dsb	sy
 8008dea:	60fb      	str	r3, [r7, #12]
}
 8008dec:	bf00      	nop
 8008dee:	bf00      	nop
 8008df0:	e7fd      	b.n	8008dee <pvPortMalloc+0x176>
	return pvReturn;
 8008df2:	69fb      	ldr	r3, [r7, #28]
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3728      	adds	r7, #40	@ 0x28
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}
 8008dfc:	240047e0 	.word	0x240047e0
 8008e00:	240047f4 	.word	0x240047f4
 8008e04:	240047e4 	.word	0x240047e4
 8008e08:	240047d8 	.word	0x240047d8
 8008e0c:	240047e8 	.word	0x240047e8
 8008e10:	240047ec 	.word	0x240047ec

08008e14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d04f      	beq.n	8008ec6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e26:	2308      	movs	r3, #8
 8008e28:	425b      	negs	r3, r3
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	4b25      	ldr	r3, [pc, #148]	@ (8008ed0 <vPortFree+0xbc>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d10b      	bne.n	8008e5a <vPortFree+0x46>
	__asm volatile
 8008e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	60fb      	str	r3, [r7, #12]
}
 8008e54:	bf00      	nop
 8008e56:	bf00      	nop
 8008e58:	e7fd      	b.n	8008e56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00b      	beq.n	8008e7a <vPortFree+0x66>
	__asm volatile
 8008e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e66:	f383 8811 	msr	BASEPRI, r3
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	f3bf 8f4f 	dsb	sy
 8008e72:	60bb      	str	r3, [r7, #8]
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	e7fd      	b.n	8008e76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	4b14      	ldr	r3, [pc, #80]	@ (8008ed0 <vPortFree+0xbc>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4013      	ands	r3, r2
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01e      	beq.n	8008ec6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d11a      	bne.n	8008ec6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	4b0e      	ldr	r3, [pc, #56]	@ (8008ed0 <vPortFree+0xbc>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	43db      	mvns	r3, r3
 8008e9a:	401a      	ands	r2, r3
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ea0:	f7ff f816 	bl	8007ed0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed4 <vPortFree+0xc0>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4413      	add	r3, r2
 8008eae:	4a09      	ldr	r2, [pc, #36]	@ (8008ed4 <vPortFree+0xc0>)
 8008eb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eb2:	6938      	ldr	r0, [r7, #16]
 8008eb4:	f000 f874 	bl	8008fa0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008eb8:	4b07      	ldr	r3, [pc, #28]	@ (8008ed8 <vPortFree+0xc4>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	4a06      	ldr	r2, [pc, #24]	@ (8008ed8 <vPortFree+0xc4>)
 8008ec0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ec2:	f7ff f813 	bl	8007eec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ec6:	bf00      	nop
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	240047f4 	.word	0x240047f4
 8008ed4:	240047e4 	.word	0x240047e4
 8008ed8:	240047f0 	.word	0x240047f0

08008edc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ee2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008ee6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ee8:	4b27      	ldr	r3, [pc, #156]	@ (8008f88 <prvHeapInit+0xac>)
 8008eea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3307      	adds	r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <prvHeapInit+0xac>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f14:	4a1d      	ldr	r2, [pc, #116]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f28:	2208      	movs	r2, #8
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a0a      	ldr	r2, [pc, #40]	@ (8008f94 <prvHeapInit+0xb8>)
 8008f6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <prvHeapInit+0xbc>)
 8008f72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f74:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <prvHeapInit+0xc0>)
 8008f76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	24000bd8 	.word	0x24000bd8
 8008f8c:	240047d8 	.word	0x240047d8
 8008f90:	240047e0 	.word	0x240047e0
 8008f94:	240047e8 	.word	0x240047e8
 8008f98:	240047e4 	.word	0x240047e4
 8008f9c:	240047f4 	.word	0x240047f4

08008fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa8:	4b28      	ldr	r3, [pc, #160]	@ (800904c <prvInsertBlockIntoFreeList+0xac>)
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e002      	b.n	8008fb4 <prvInsertBlockIntoFreeList+0x14>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d8f7      	bhi.n	8008fae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d108      	bne.n	8008fe2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	441a      	add	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d118      	bne.n	8009028 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d00d      	beq.n	800901e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e008      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800901e:	4b0c      	ldr	r3, [pc, #48]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e003      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d002      	beq.n	800903e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	240047d8 	.word	0x240047d8
 8009050:	240047e0 	.word	0x240047e0

08009054 <_Znwj>:
 8009054:	2801      	cmp	r0, #1
 8009056:	bf38      	it	cc
 8009058:	2001      	movcc	r0, #1
 800905a:	b510      	push	{r4, lr}
 800905c:	4604      	mov	r4, r0
 800905e:	4620      	mov	r0, r4
 8009060:	f000 f81a 	bl	8009098 <malloc>
 8009064:	b100      	cbz	r0, 8009068 <_Znwj+0x14>
 8009066:	bd10      	pop	{r4, pc}
 8009068:	f000 f806 	bl	8009078 <_ZSt15get_new_handlerv>
 800906c:	b908      	cbnz	r0, 8009072 <_Znwj+0x1e>
 800906e:	f000 f80b 	bl	8009088 <abort>
 8009072:	4780      	blx	r0
 8009074:	e7f3      	b.n	800905e <_Znwj+0xa>
	...

08009078 <_ZSt15get_new_handlerv>:
 8009078:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <_ZSt15get_new_handlerv+0xc>)
 800907a:	6818      	ldr	r0, [r3, #0]
 800907c:	f3bf 8f5b 	dmb	ish
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	240047f8 	.word	0x240047f8

08009088 <abort>:
 8009088:	b508      	push	{r3, lr}
 800908a:	2006      	movs	r0, #6
 800908c:	f000 f924 	bl	80092d8 <raise>
 8009090:	2001      	movs	r0, #1
 8009092:	f7f8 f8d1 	bl	8001238 <_exit>
	...

08009098 <malloc>:
 8009098:	4b02      	ldr	r3, [pc, #8]	@ (80090a4 <malloc+0xc>)
 800909a:	4601      	mov	r1, r0
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f000 b825 	b.w	80090ec <_malloc_r>
 80090a2:	bf00      	nop
 80090a4:	24000014 	.word	0x24000014

080090a8 <sbrk_aligned>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	4e0f      	ldr	r6, [pc, #60]	@ (80090e8 <sbrk_aligned+0x40>)
 80090ac:	460c      	mov	r4, r1
 80090ae:	6831      	ldr	r1, [r6, #0]
 80090b0:	4605      	mov	r5, r0
 80090b2:	b911      	cbnz	r1, 80090ba <sbrk_aligned+0x12>
 80090b4:	f000 f982 	bl	80093bc <_sbrk_r>
 80090b8:	6030      	str	r0, [r6, #0]
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f97d 	bl	80093bc <_sbrk_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d103      	bne.n	80090ce <sbrk_aligned+0x26>
 80090c6:	f04f 34ff 	mov.w	r4, #4294967295
 80090ca:	4620      	mov	r0, r4
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	1cc4      	adds	r4, r0, #3
 80090d0:	f024 0403 	bic.w	r4, r4, #3
 80090d4:	42a0      	cmp	r0, r4
 80090d6:	d0f8      	beq.n	80090ca <sbrk_aligned+0x22>
 80090d8:	1a21      	subs	r1, r4, r0
 80090da:	4628      	mov	r0, r5
 80090dc:	f000 f96e 	bl	80093bc <_sbrk_r>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d1f2      	bne.n	80090ca <sbrk_aligned+0x22>
 80090e4:	e7ef      	b.n	80090c6 <sbrk_aligned+0x1e>
 80090e6:	bf00      	nop
 80090e8:	240047fc 	.word	0x240047fc

080090ec <_malloc_r>:
 80090ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090f0:	1ccd      	adds	r5, r1, #3
 80090f2:	f025 0503 	bic.w	r5, r5, #3
 80090f6:	3508      	adds	r5, #8
 80090f8:	2d0c      	cmp	r5, #12
 80090fa:	bf38      	it	cc
 80090fc:	250c      	movcc	r5, #12
 80090fe:	2d00      	cmp	r5, #0
 8009100:	4606      	mov	r6, r0
 8009102:	db01      	blt.n	8009108 <_malloc_r+0x1c>
 8009104:	42a9      	cmp	r1, r5
 8009106:	d904      	bls.n	8009112 <_malloc_r+0x26>
 8009108:	230c      	movs	r3, #12
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	2000      	movs	r0, #0
 800910e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091e8 <_malloc_r+0xfc>
 8009116:	f000 f869 	bl	80091ec <__malloc_lock>
 800911a:	f8d8 3000 	ldr.w	r3, [r8]
 800911e:	461c      	mov	r4, r3
 8009120:	bb44      	cbnz	r4, 8009174 <_malloc_r+0x88>
 8009122:	4629      	mov	r1, r5
 8009124:	4630      	mov	r0, r6
 8009126:	f7ff ffbf 	bl	80090a8 <sbrk_aligned>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	4604      	mov	r4, r0
 800912e:	d158      	bne.n	80091e2 <_malloc_r+0xf6>
 8009130:	f8d8 4000 	ldr.w	r4, [r8]
 8009134:	4627      	mov	r7, r4
 8009136:	2f00      	cmp	r7, #0
 8009138:	d143      	bne.n	80091c2 <_malloc_r+0xd6>
 800913a:	2c00      	cmp	r4, #0
 800913c:	d04b      	beq.n	80091d6 <_malloc_r+0xea>
 800913e:	6823      	ldr	r3, [r4, #0]
 8009140:	4639      	mov	r1, r7
 8009142:	4630      	mov	r0, r6
 8009144:	eb04 0903 	add.w	r9, r4, r3
 8009148:	f000 f938 	bl	80093bc <_sbrk_r>
 800914c:	4581      	cmp	r9, r0
 800914e:	d142      	bne.n	80091d6 <_malloc_r+0xea>
 8009150:	6821      	ldr	r1, [r4, #0]
 8009152:	1a6d      	subs	r5, r5, r1
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ffa6 	bl	80090a8 <sbrk_aligned>
 800915c:	3001      	adds	r0, #1
 800915e:	d03a      	beq.n	80091d6 <_malloc_r+0xea>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	442b      	add	r3, r5
 8009164:	6023      	str	r3, [r4, #0]
 8009166:	f8d8 3000 	ldr.w	r3, [r8]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	bb62      	cbnz	r2, 80091c8 <_malloc_r+0xdc>
 800916e:	f8c8 7000 	str.w	r7, [r8]
 8009172:	e00f      	b.n	8009194 <_malloc_r+0xa8>
 8009174:	6822      	ldr	r2, [r4, #0]
 8009176:	1b52      	subs	r2, r2, r5
 8009178:	d420      	bmi.n	80091bc <_malloc_r+0xd0>
 800917a:	2a0b      	cmp	r2, #11
 800917c:	d917      	bls.n	80091ae <_malloc_r+0xc2>
 800917e:	1961      	adds	r1, r4, r5
 8009180:	42a3      	cmp	r3, r4
 8009182:	6025      	str	r5, [r4, #0]
 8009184:	bf18      	it	ne
 8009186:	6059      	strne	r1, [r3, #4]
 8009188:	6863      	ldr	r3, [r4, #4]
 800918a:	bf08      	it	eq
 800918c:	f8c8 1000 	streq.w	r1, [r8]
 8009190:	5162      	str	r2, [r4, r5]
 8009192:	604b      	str	r3, [r1, #4]
 8009194:	4630      	mov	r0, r6
 8009196:	f000 f82f 	bl	80091f8 <__malloc_unlock>
 800919a:	f104 000b 	add.w	r0, r4, #11
 800919e:	1d23      	adds	r3, r4, #4
 80091a0:	f020 0007 	bic.w	r0, r0, #7
 80091a4:	1ac2      	subs	r2, r0, r3
 80091a6:	bf1c      	itt	ne
 80091a8:	1a1b      	subne	r3, r3, r0
 80091aa:	50a3      	strne	r3, [r4, r2]
 80091ac:	e7af      	b.n	800910e <_malloc_r+0x22>
 80091ae:	6862      	ldr	r2, [r4, #4]
 80091b0:	42a3      	cmp	r3, r4
 80091b2:	bf0c      	ite	eq
 80091b4:	f8c8 2000 	streq.w	r2, [r8]
 80091b8:	605a      	strne	r2, [r3, #4]
 80091ba:	e7eb      	b.n	8009194 <_malloc_r+0xa8>
 80091bc:	4623      	mov	r3, r4
 80091be:	6864      	ldr	r4, [r4, #4]
 80091c0:	e7ae      	b.n	8009120 <_malloc_r+0x34>
 80091c2:	463c      	mov	r4, r7
 80091c4:	687f      	ldr	r7, [r7, #4]
 80091c6:	e7b6      	b.n	8009136 <_malloc_r+0x4a>
 80091c8:	461a      	mov	r2, r3
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	d1fb      	bne.n	80091c8 <_malloc_r+0xdc>
 80091d0:	2300      	movs	r3, #0
 80091d2:	6053      	str	r3, [r2, #4]
 80091d4:	e7de      	b.n	8009194 <_malloc_r+0xa8>
 80091d6:	230c      	movs	r3, #12
 80091d8:	6033      	str	r3, [r6, #0]
 80091da:	4630      	mov	r0, r6
 80091dc:	f000 f80c 	bl	80091f8 <__malloc_unlock>
 80091e0:	e794      	b.n	800910c <_malloc_r+0x20>
 80091e2:	6005      	str	r5, [r0, #0]
 80091e4:	e7d6      	b.n	8009194 <_malloc_r+0xa8>
 80091e6:	bf00      	nop
 80091e8:	24004800 	.word	0x24004800

080091ec <__malloc_lock>:
 80091ec:	4801      	ldr	r0, [pc, #4]	@ (80091f4 <__malloc_lock+0x8>)
 80091ee:	f000 b91f 	b.w	8009430 <__retarget_lock_acquire_recursive>
 80091f2:	bf00      	nop
 80091f4:	24004940 	.word	0x24004940

080091f8 <__malloc_unlock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	@ (8009200 <__malloc_unlock+0x8>)
 80091fa:	f000 b91a 	b.w	8009432 <__retarget_lock_release_recursive>
 80091fe:	bf00      	nop
 8009200:	24004940 	.word	0x24004940

08009204 <_vsniprintf_r>:
 8009204:	b530      	push	{r4, r5, lr}
 8009206:	4614      	mov	r4, r2
 8009208:	2c00      	cmp	r4, #0
 800920a:	b09b      	sub	sp, #108	@ 0x6c
 800920c:	4605      	mov	r5, r0
 800920e:	461a      	mov	r2, r3
 8009210:	da05      	bge.n	800921e <_vsniprintf_r+0x1a>
 8009212:	238b      	movs	r3, #139	@ 0x8b
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	f04f 30ff 	mov.w	r0, #4294967295
 800921a:	b01b      	add	sp, #108	@ 0x6c
 800921c:	bd30      	pop	{r4, r5, pc}
 800921e:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009222:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009226:	bf14      	ite	ne
 8009228:	f104 33ff 	addne.w	r3, r4, #4294967295
 800922c:	4623      	moveq	r3, r4
 800922e:	9302      	str	r3, [sp, #8]
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009236:	9100      	str	r1, [sp, #0]
 8009238:	9104      	str	r1, [sp, #16]
 800923a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800923e:	4669      	mov	r1, sp
 8009240:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009242:	f000 f9ab 	bl	800959c <_svfiprintf_r>
 8009246:	1c43      	adds	r3, r0, #1
 8009248:	bfbc      	itt	lt
 800924a:	238b      	movlt	r3, #139	@ 0x8b
 800924c:	602b      	strlt	r3, [r5, #0]
 800924e:	2c00      	cmp	r4, #0
 8009250:	d0e3      	beq.n	800921a <_vsniprintf_r+0x16>
 8009252:	9b00      	ldr	r3, [sp, #0]
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	e7df      	b.n	800921a <_vsniprintf_r+0x16>
	...

0800925c <vsniprintf>:
 800925c:	b507      	push	{r0, r1, r2, lr}
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	460a      	mov	r2, r1
 8009264:	4601      	mov	r1, r0
 8009266:	4803      	ldr	r0, [pc, #12]	@ (8009274 <vsniprintf+0x18>)
 8009268:	6800      	ldr	r0, [r0, #0]
 800926a:	f7ff ffcb 	bl	8009204 <_vsniprintf_r>
 800926e:	b003      	add	sp, #12
 8009270:	f85d fb04 	ldr.w	pc, [sp], #4
 8009274:	24000014 	.word	0x24000014

08009278 <memset>:
 8009278:	4402      	add	r2, r0
 800927a:	4603      	mov	r3, r0
 800927c:	4293      	cmp	r3, r2
 800927e:	d100      	bne.n	8009282 <memset+0xa>
 8009280:	4770      	bx	lr
 8009282:	f803 1b01 	strb.w	r1, [r3], #1
 8009286:	e7f9      	b.n	800927c <memset+0x4>

08009288 <_raise_r>:
 8009288:	291f      	cmp	r1, #31
 800928a:	b538      	push	{r3, r4, r5, lr}
 800928c:	4605      	mov	r5, r0
 800928e:	460c      	mov	r4, r1
 8009290:	d904      	bls.n	800929c <_raise_r+0x14>
 8009292:	2316      	movs	r3, #22
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	f04f 30ff 	mov.w	r0, #4294967295
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800929e:	b112      	cbz	r2, 80092a6 <_raise_r+0x1e>
 80092a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a4:	b94b      	cbnz	r3, 80092ba <_raise_r+0x32>
 80092a6:	4628      	mov	r0, r5
 80092a8:	f000 f886 	bl	80093b8 <_getpid_r>
 80092ac:	4622      	mov	r2, r4
 80092ae:	4601      	mov	r1, r0
 80092b0:	4628      	mov	r0, r5
 80092b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092b6:	f000 b86d 	b.w	8009394 <_kill_r>
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d00a      	beq.n	80092d4 <_raise_r+0x4c>
 80092be:	1c59      	adds	r1, r3, #1
 80092c0:	d103      	bne.n	80092ca <_raise_r+0x42>
 80092c2:	2316      	movs	r3, #22
 80092c4:	6003      	str	r3, [r0, #0]
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7e7      	b.n	800929a <_raise_r+0x12>
 80092ca:	2100      	movs	r1, #0
 80092cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092d0:	4620      	mov	r0, r4
 80092d2:	4798      	blx	r3
 80092d4:	2000      	movs	r0, #0
 80092d6:	e7e0      	b.n	800929a <_raise_r+0x12>

080092d8 <raise>:
 80092d8:	4b02      	ldr	r3, [pc, #8]	@ (80092e4 <raise+0xc>)
 80092da:	4601      	mov	r1, r0
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f7ff bfd3 	b.w	8009288 <_raise_r>
 80092e2:	bf00      	nop
 80092e4:	24000014 	.word	0x24000014

080092e8 <_reclaim_reent>:
 80092e8:	4b29      	ldr	r3, [pc, #164]	@ (8009390 <_reclaim_reent+0xa8>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4283      	cmp	r3, r0
 80092ee:	b570      	push	{r4, r5, r6, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	d04b      	beq.n	800938c <_reclaim_reent+0xa4>
 80092f4:	69c3      	ldr	r3, [r0, #28]
 80092f6:	b1ab      	cbz	r3, 8009324 <_reclaim_reent+0x3c>
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	b16b      	cbz	r3, 8009318 <_reclaim_reent+0x30>
 80092fc:	2500      	movs	r5, #0
 80092fe:	69e3      	ldr	r3, [r4, #28]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	5959      	ldr	r1, [r3, r5]
 8009304:	2900      	cmp	r1, #0
 8009306:	d13b      	bne.n	8009380 <_reclaim_reent+0x98>
 8009308:	3504      	adds	r5, #4
 800930a:	2d80      	cmp	r5, #128	@ 0x80
 800930c:	d1f7      	bne.n	80092fe <_reclaim_reent+0x16>
 800930e:	69e3      	ldr	r3, [r4, #28]
 8009310:	4620      	mov	r0, r4
 8009312:	68d9      	ldr	r1, [r3, #12]
 8009314:	f000 f89c 	bl	8009450 <_free_r>
 8009318:	69e3      	ldr	r3, [r4, #28]
 800931a:	6819      	ldr	r1, [r3, #0]
 800931c:	b111      	cbz	r1, 8009324 <_reclaim_reent+0x3c>
 800931e:	4620      	mov	r0, r4
 8009320:	f000 f896 	bl	8009450 <_free_r>
 8009324:	6961      	ldr	r1, [r4, #20]
 8009326:	b111      	cbz	r1, 800932e <_reclaim_reent+0x46>
 8009328:	4620      	mov	r0, r4
 800932a:	f000 f891 	bl	8009450 <_free_r>
 800932e:	69e1      	ldr	r1, [r4, #28]
 8009330:	b111      	cbz	r1, 8009338 <_reclaim_reent+0x50>
 8009332:	4620      	mov	r0, r4
 8009334:	f000 f88c 	bl	8009450 <_free_r>
 8009338:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800933a:	b111      	cbz	r1, 8009342 <_reclaim_reent+0x5a>
 800933c:	4620      	mov	r0, r4
 800933e:	f000 f887 	bl	8009450 <_free_r>
 8009342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009344:	b111      	cbz	r1, 800934c <_reclaim_reent+0x64>
 8009346:	4620      	mov	r0, r4
 8009348:	f000 f882 	bl	8009450 <_free_r>
 800934c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800934e:	b111      	cbz	r1, 8009356 <_reclaim_reent+0x6e>
 8009350:	4620      	mov	r0, r4
 8009352:	f000 f87d 	bl	8009450 <_free_r>
 8009356:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009358:	b111      	cbz	r1, 8009360 <_reclaim_reent+0x78>
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f878 	bl	8009450 <_free_r>
 8009360:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009362:	b111      	cbz	r1, 800936a <_reclaim_reent+0x82>
 8009364:	4620      	mov	r0, r4
 8009366:	f000 f873 	bl	8009450 <_free_r>
 800936a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800936c:	b111      	cbz	r1, 8009374 <_reclaim_reent+0x8c>
 800936e:	4620      	mov	r0, r4
 8009370:	f000 f86e 	bl	8009450 <_free_r>
 8009374:	6a23      	ldr	r3, [r4, #32]
 8009376:	b14b      	cbz	r3, 800938c <_reclaim_reent+0xa4>
 8009378:	4620      	mov	r0, r4
 800937a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800937e:	4718      	bx	r3
 8009380:	680e      	ldr	r6, [r1, #0]
 8009382:	4620      	mov	r0, r4
 8009384:	f000 f864 	bl	8009450 <_free_r>
 8009388:	4631      	mov	r1, r6
 800938a:	e7bb      	b.n	8009304 <_reclaim_reent+0x1c>
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	bf00      	nop
 8009390:	24000014 	.word	0x24000014

08009394 <_kill_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_kill_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f7 ff39 	bl	8001218 <_kill>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_kill_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_kill_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	2400493c 	.word	0x2400493c

080093b8 <_getpid_r>:
 80093b8:	f7f7 bf26 	b.w	8001208 <_getpid>

080093bc <_sbrk_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	4d06      	ldr	r5, [pc, #24]	@ (80093d8 <_sbrk_r+0x1c>)
 80093c0:	2300      	movs	r3, #0
 80093c2:	4604      	mov	r4, r0
 80093c4:	4608      	mov	r0, r1
 80093c6:	602b      	str	r3, [r5, #0]
 80093c8:	f7f7 ff42 	bl	8001250 <_sbrk>
 80093cc:	1c43      	adds	r3, r0, #1
 80093ce:	d102      	bne.n	80093d6 <_sbrk_r+0x1a>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b103      	cbz	r3, 80093d6 <_sbrk_r+0x1a>
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	2400493c 	.word	0x2400493c

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	@ (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	24000014 	.word	0x24000014

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	@ (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	@ (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	@ (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	@ (800942c <__libc_init_array+0x44>)
 80093fc:	f000 fba8 	bl	8009b50 <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	08009c68 	.word	0x08009c68
 8009424:	08009c68 	.word	0x08009c68
 8009428:	08009c68 	.word	0x08009c68
 800942c:	08009c6c 	.word	0x08009c6c

08009430 <__retarget_lock_acquire_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_release_recursive>:
 8009432:	4770      	bx	lr

08009434 <memcpy>:
 8009434:	440a      	add	r2, r1
 8009436:	4291      	cmp	r1, r2
 8009438:	f100 33ff 	add.w	r3, r0, #4294967295
 800943c:	d100      	bne.n	8009440 <memcpy+0xc>
 800943e:	4770      	bx	lr
 8009440:	b510      	push	{r4, lr}
 8009442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009446:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944a:	4291      	cmp	r1, r2
 800944c:	d1f9      	bne.n	8009442 <memcpy+0xe>
 800944e:	bd10      	pop	{r4, pc}

08009450 <_free_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4605      	mov	r5, r0
 8009454:	2900      	cmp	r1, #0
 8009456:	d041      	beq.n	80094dc <_free_r+0x8c>
 8009458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945c:	1f0c      	subs	r4, r1, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	18e4      	addlt	r4, r4, r3
 8009464:	f7ff fec2 	bl	80091ec <__malloc_lock>
 8009468:	4a1d      	ldr	r2, [pc, #116]	@ (80094e0 <_free_r+0x90>)
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	b933      	cbnz	r3, 800947c <_free_r+0x2c>
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	6014      	str	r4, [r2, #0]
 8009472:	4628      	mov	r0, r5
 8009474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009478:	f7ff bebe 	b.w	80091f8 <__malloc_unlock>
 800947c:	42a3      	cmp	r3, r4
 800947e:	d908      	bls.n	8009492 <_free_r+0x42>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	1821      	adds	r1, r4, r0
 8009484:	428b      	cmp	r3, r1
 8009486:	bf01      	itttt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	1809      	addeq	r1, r1, r0
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	e7ed      	b.n	800946e <_free_r+0x1e>
 8009492:	461a      	mov	r2, r3
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b10b      	cbz	r3, 800949c <_free_r+0x4c>
 8009498:	42a3      	cmp	r3, r4
 800949a:	d9fa      	bls.n	8009492 <_free_r+0x42>
 800949c:	6811      	ldr	r1, [r2, #0]
 800949e:	1850      	adds	r0, r2, r1
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d10b      	bne.n	80094bc <_free_r+0x6c>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	4401      	add	r1, r0
 80094a8:	1850      	adds	r0, r2, r1
 80094aa:	4283      	cmp	r3, r0
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	d1e0      	bne.n	8009472 <_free_r+0x22>
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	6053      	str	r3, [r2, #4]
 80094b6:	4408      	add	r0, r1
 80094b8:	6010      	str	r0, [r2, #0]
 80094ba:	e7da      	b.n	8009472 <_free_r+0x22>
 80094bc:	d902      	bls.n	80094c4 <_free_r+0x74>
 80094be:	230c      	movs	r3, #12
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	e7d6      	b.n	8009472 <_free_r+0x22>
 80094c4:	6820      	ldr	r0, [r4, #0]
 80094c6:	1821      	adds	r1, r4, r0
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf04      	itt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	6063      	str	r3, [r4, #4]
 80094d2:	bf04      	itt	eq
 80094d4:	1809      	addeq	r1, r1, r0
 80094d6:	6021      	streq	r1, [r4, #0]
 80094d8:	6054      	str	r4, [r2, #4]
 80094da:	e7ca      	b.n	8009472 <_free_r+0x22>
 80094dc:	bd38      	pop	{r3, r4, r5, pc}
 80094de:	bf00      	nop
 80094e0:	24004800 	.word	0x24004800

080094e4 <__ssputs_r>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	688e      	ldr	r6, [r1, #8]
 80094ea:	461f      	mov	r7, r3
 80094ec:	42be      	cmp	r6, r7
 80094ee:	680b      	ldr	r3, [r1, #0]
 80094f0:	4682      	mov	sl, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	4690      	mov	r8, r2
 80094f6:	d82d      	bhi.n	8009554 <__ssputs_r+0x70>
 80094f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009500:	d026      	beq.n	8009550 <__ssputs_r+0x6c>
 8009502:	6965      	ldr	r5, [r4, #20]
 8009504:	6909      	ldr	r1, [r1, #16]
 8009506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800950a:	eba3 0901 	sub.w	r9, r3, r1
 800950e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009512:	1c7b      	adds	r3, r7, #1
 8009514:	444b      	add	r3, r9
 8009516:	106d      	asrs	r5, r5, #1
 8009518:	429d      	cmp	r5, r3
 800951a:	bf38      	it	cc
 800951c:	461d      	movcc	r5, r3
 800951e:	0553      	lsls	r3, r2, #21
 8009520:	d527      	bpl.n	8009572 <__ssputs_r+0x8e>
 8009522:	4629      	mov	r1, r5
 8009524:	f7ff fde2 	bl	80090ec <_malloc_r>
 8009528:	4606      	mov	r6, r0
 800952a:	b360      	cbz	r0, 8009586 <__ssputs_r+0xa2>
 800952c:	6921      	ldr	r1, [r4, #16]
 800952e:	464a      	mov	r2, r9
 8009530:	f7ff ff80 	bl	8009434 <memcpy>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800953a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953e:	81a3      	strh	r3, [r4, #12]
 8009540:	6126      	str	r6, [r4, #16]
 8009542:	6165      	str	r5, [r4, #20]
 8009544:	444e      	add	r6, r9
 8009546:	eba5 0509 	sub.w	r5, r5, r9
 800954a:	6026      	str	r6, [r4, #0]
 800954c:	60a5      	str	r5, [r4, #8]
 800954e:	463e      	mov	r6, r7
 8009550:	42be      	cmp	r6, r7
 8009552:	d900      	bls.n	8009556 <__ssputs_r+0x72>
 8009554:	463e      	mov	r6, r7
 8009556:	6820      	ldr	r0, [r4, #0]
 8009558:	4632      	mov	r2, r6
 800955a:	4641      	mov	r1, r8
 800955c:	f000 faa8 	bl	8009ab0 <memmove>
 8009560:	68a3      	ldr	r3, [r4, #8]
 8009562:	1b9b      	subs	r3, r3, r6
 8009564:	60a3      	str	r3, [r4, #8]
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	4433      	add	r3, r6
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	2000      	movs	r0, #0
 800956e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009572:	462a      	mov	r2, r5
 8009574:	f000 fab6 	bl	8009ae4 <_realloc_r>
 8009578:	4606      	mov	r6, r0
 800957a:	2800      	cmp	r0, #0
 800957c:	d1e0      	bne.n	8009540 <__ssputs_r+0x5c>
 800957e:	6921      	ldr	r1, [r4, #16]
 8009580:	4650      	mov	r0, sl
 8009582:	f7ff ff65 	bl	8009450 <_free_r>
 8009586:	230c      	movs	r3, #12
 8009588:	f8ca 3000 	str.w	r3, [sl]
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	f04f 30ff 	mov.w	r0, #4294967295
 8009598:	e7e9      	b.n	800956e <__ssputs_r+0x8a>
	...

0800959c <_svfiprintf_r>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	4698      	mov	r8, r3
 80095a2:	898b      	ldrh	r3, [r1, #12]
 80095a4:	061b      	lsls	r3, r3, #24
 80095a6:	b09d      	sub	sp, #116	@ 0x74
 80095a8:	4607      	mov	r7, r0
 80095aa:	460d      	mov	r5, r1
 80095ac:	4614      	mov	r4, r2
 80095ae:	d510      	bpl.n	80095d2 <_svfiprintf_r+0x36>
 80095b0:	690b      	ldr	r3, [r1, #16]
 80095b2:	b973      	cbnz	r3, 80095d2 <_svfiprintf_r+0x36>
 80095b4:	2140      	movs	r1, #64	@ 0x40
 80095b6:	f7ff fd99 	bl	80090ec <_malloc_r>
 80095ba:	6028      	str	r0, [r5, #0]
 80095bc:	6128      	str	r0, [r5, #16]
 80095be:	b930      	cbnz	r0, 80095ce <_svfiprintf_r+0x32>
 80095c0:	230c      	movs	r3, #12
 80095c2:	603b      	str	r3, [r7, #0]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	b01d      	add	sp, #116	@ 0x74
 80095ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ce:	2340      	movs	r3, #64	@ 0x40
 80095d0:	616b      	str	r3, [r5, #20]
 80095d2:	2300      	movs	r3, #0
 80095d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d6:	2320      	movs	r3, #32
 80095d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e0:	2330      	movs	r3, #48	@ 0x30
 80095e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009780 <_svfiprintf_r+0x1e4>
 80095e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ea:	f04f 0901 	mov.w	r9, #1
 80095ee:	4623      	mov	r3, r4
 80095f0:	469a      	mov	sl, r3
 80095f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f6:	b10a      	cbz	r2, 80095fc <_svfiprintf_r+0x60>
 80095f8:	2a25      	cmp	r2, #37	@ 0x25
 80095fa:	d1f9      	bne.n	80095f0 <_svfiprintf_r+0x54>
 80095fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009600:	d00b      	beq.n	800961a <_svfiprintf_r+0x7e>
 8009602:	465b      	mov	r3, fp
 8009604:	4622      	mov	r2, r4
 8009606:	4629      	mov	r1, r5
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ff6b 	bl	80094e4 <__ssputs_r>
 800960e:	3001      	adds	r0, #1
 8009610:	f000 80a7 	beq.w	8009762 <_svfiprintf_r+0x1c6>
 8009614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009616:	445a      	add	r2, fp
 8009618:	9209      	str	r2, [sp, #36]	@ 0x24
 800961a:	f89a 3000 	ldrb.w	r3, [sl]
 800961e:	2b00      	cmp	r3, #0
 8009620:	f000 809f 	beq.w	8009762 <_svfiprintf_r+0x1c6>
 8009624:	2300      	movs	r3, #0
 8009626:	f04f 32ff 	mov.w	r2, #4294967295
 800962a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800962e:	f10a 0a01 	add.w	sl, sl, #1
 8009632:	9304      	str	r3, [sp, #16]
 8009634:	9307      	str	r3, [sp, #28]
 8009636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800963a:	931a      	str	r3, [sp, #104]	@ 0x68
 800963c:	4654      	mov	r4, sl
 800963e:	2205      	movs	r2, #5
 8009640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009644:	484e      	ldr	r0, [pc, #312]	@ (8009780 <_svfiprintf_r+0x1e4>)
 8009646:	f7f6 fe53 	bl	80002f0 <memchr>
 800964a:	9a04      	ldr	r2, [sp, #16]
 800964c:	b9d8      	cbnz	r0, 8009686 <_svfiprintf_r+0xea>
 800964e:	06d0      	lsls	r0, r2, #27
 8009650:	bf44      	itt	mi
 8009652:	2320      	movmi	r3, #32
 8009654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009658:	0711      	lsls	r1, r2, #28
 800965a:	bf44      	itt	mi
 800965c:	232b      	movmi	r3, #43	@ 0x2b
 800965e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009662:	f89a 3000 	ldrb.w	r3, [sl]
 8009666:	2b2a      	cmp	r3, #42	@ 0x2a
 8009668:	d015      	beq.n	8009696 <_svfiprintf_r+0xfa>
 800966a:	9a07      	ldr	r2, [sp, #28]
 800966c:	4654      	mov	r4, sl
 800966e:	2000      	movs	r0, #0
 8009670:	f04f 0c0a 	mov.w	ip, #10
 8009674:	4621      	mov	r1, r4
 8009676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967a:	3b30      	subs	r3, #48	@ 0x30
 800967c:	2b09      	cmp	r3, #9
 800967e:	d94b      	bls.n	8009718 <_svfiprintf_r+0x17c>
 8009680:	b1b0      	cbz	r0, 80096b0 <_svfiprintf_r+0x114>
 8009682:	9207      	str	r2, [sp, #28]
 8009684:	e014      	b.n	80096b0 <_svfiprintf_r+0x114>
 8009686:	eba0 0308 	sub.w	r3, r0, r8
 800968a:	fa09 f303 	lsl.w	r3, r9, r3
 800968e:	4313      	orrs	r3, r2
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	46a2      	mov	sl, r4
 8009694:	e7d2      	b.n	800963c <_svfiprintf_r+0xa0>
 8009696:	9b03      	ldr	r3, [sp, #12]
 8009698:	1d19      	adds	r1, r3, #4
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	9103      	str	r1, [sp, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	bfbb      	ittet	lt
 80096a2:	425b      	neglt	r3, r3
 80096a4:	f042 0202 	orrlt.w	r2, r2, #2
 80096a8:	9307      	strge	r3, [sp, #28]
 80096aa:	9307      	strlt	r3, [sp, #28]
 80096ac:	bfb8      	it	lt
 80096ae:	9204      	strlt	r2, [sp, #16]
 80096b0:	7823      	ldrb	r3, [r4, #0]
 80096b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b4:	d10a      	bne.n	80096cc <_svfiprintf_r+0x130>
 80096b6:	7863      	ldrb	r3, [r4, #1]
 80096b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80096ba:	d132      	bne.n	8009722 <_svfiprintf_r+0x186>
 80096bc:	9b03      	ldr	r3, [sp, #12]
 80096be:	1d1a      	adds	r2, r3, #4
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	9203      	str	r2, [sp, #12]
 80096c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096c8:	3402      	adds	r4, #2
 80096ca:	9305      	str	r3, [sp, #20]
 80096cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009790 <_svfiprintf_r+0x1f4>
 80096d0:	7821      	ldrb	r1, [r4, #0]
 80096d2:	2203      	movs	r2, #3
 80096d4:	4650      	mov	r0, sl
 80096d6:	f7f6 fe0b 	bl	80002f0 <memchr>
 80096da:	b138      	cbz	r0, 80096ec <_svfiprintf_r+0x150>
 80096dc:	9b04      	ldr	r3, [sp, #16]
 80096de:	eba0 000a 	sub.w	r0, r0, sl
 80096e2:	2240      	movs	r2, #64	@ 0x40
 80096e4:	4082      	lsls	r2, r0
 80096e6:	4313      	orrs	r3, r2
 80096e8:	3401      	adds	r4, #1
 80096ea:	9304      	str	r3, [sp, #16]
 80096ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f0:	4824      	ldr	r0, [pc, #144]	@ (8009784 <_svfiprintf_r+0x1e8>)
 80096f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f6:	2206      	movs	r2, #6
 80096f8:	f7f6 fdfa 	bl	80002f0 <memchr>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d036      	beq.n	800976e <_svfiprintf_r+0x1d2>
 8009700:	4b21      	ldr	r3, [pc, #132]	@ (8009788 <_svfiprintf_r+0x1ec>)
 8009702:	bb1b      	cbnz	r3, 800974c <_svfiprintf_r+0x1b0>
 8009704:	9b03      	ldr	r3, [sp, #12]
 8009706:	3307      	adds	r3, #7
 8009708:	f023 0307 	bic.w	r3, r3, #7
 800970c:	3308      	adds	r3, #8
 800970e:	9303      	str	r3, [sp, #12]
 8009710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009712:	4433      	add	r3, r6
 8009714:	9309      	str	r3, [sp, #36]	@ 0x24
 8009716:	e76a      	b.n	80095ee <_svfiprintf_r+0x52>
 8009718:	fb0c 3202 	mla	r2, ip, r2, r3
 800971c:	460c      	mov	r4, r1
 800971e:	2001      	movs	r0, #1
 8009720:	e7a8      	b.n	8009674 <_svfiprintf_r+0xd8>
 8009722:	2300      	movs	r3, #0
 8009724:	3401      	adds	r4, #1
 8009726:	9305      	str	r3, [sp, #20]
 8009728:	4619      	mov	r1, r3
 800972a:	f04f 0c0a 	mov.w	ip, #10
 800972e:	4620      	mov	r0, r4
 8009730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009734:	3a30      	subs	r2, #48	@ 0x30
 8009736:	2a09      	cmp	r2, #9
 8009738:	d903      	bls.n	8009742 <_svfiprintf_r+0x1a6>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0c6      	beq.n	80096cc <_svfiprintf_r+0x130>
 800973e:	9105      	str	r1, [sp, #20]
 8009740:	e7c4      	b.n	80096cc <_svfiprintf_r+0x130>
 8009742:	fb0c 2101 	mla	r1, ip, r1, r2
 8009746:	4604      	mov	r4, r0
 8009748:	2301      	movs	r3, #1
 800974a:	e7f0      	b.n	800972e <_svfiprintf_r+0x192>
 800974c:	ab03      	add	r3, sp, #12
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	462a      	mov	r2, r5
 8009752:	4b0e      	ldr	r3, [pc, #56]	@ (800978c <_svfiprintf_r+0x1f0>)
 8009754:	a904      	add	r1, sp, #16
 8009756:	4638      	mov	r0, r7
 8009758:	f3af 8000 	nop.w
 800975c:	1c42      	adds	r2, r0, #1
 800975e:	4606      	mov	r6, r0
 8009760:	d1d6      	bne.n	8009710 <_svfiprintf_r+0x174>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	065b      	lsls	r3, r3, #25
 8009766:	f53f af2d 	bmi.w	80095c4 <_svfiprintf_r+0x28>
 800976a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800976c:	e72c      	b.n	80095c8 <_svfiprintf_r+0x2c>
 800976e:	ab03      	add	r3, sp, #12
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	462a      	mov	r2, r5
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <_svfiprintf_r+0x1f0>)
 8009776:	a904      	add	r1, sp, #16
 8009778:	4638      	mov	r0, r7
 800977a:	f000 f879 	bl	8009870 <_printf_i>
 800977e:	e7ed      	b.n	800975c <_svfiprintf_r+0x1c0>
 8009780:	08009c2c 	.word	0x08009c2c
 8009784:	08009c36 	.word	0x08009c36
 8009788:	00000000 	.word	0x00000000
 800978c:	080094e5 	.word	0x080094e5
 8009790:	08009c32 	.word	0x08009c32

08009794 <_printf_common>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	4616      	mov	r6, r2
 800979a:	4698      	mov	r8, r3
 800979c:	688a      	ldr	r2, [r1, #8]
 800979e:	690b      	ldr	r3, [r1, #16]
 80097a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097a4:	4293      	cmp	r3, r2
 80097a6:	bfb8      	it	lt
 80097a8:	4613      	movlt	r3, r2
 80097aa:	6033      	str	r3, [r6, #0]
 80097ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80097b0:	4607      	mov	r7, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	b10a      	cbz	r2, 80097ba <_printf_common+0x26>
 80097b6:	3301      	adds	r3, #1
 80097b8:	6033      	str	r3, [r6, #0]
 80097ba:	6823      	ldr	r3, [r4, #0]
 80097bc:	0699      	lsls	r1, r3, #26
 80097be:	bf42      	ittt	mi
 80097c0:	6833      	ldrmi	r3, [r6, #0]
 80097c2:	3302      	addmi	r3, #2
 80097c4:	6033      	strmi	r3, [r6, #0]
 80097c6:	6825      	ldr	r5, [r4, #0]
 80097c8:	f015 0506 	ands.w	r5, r5, #6
 80097cc:	d106      	bne.n	80097dc <_printf_common+0x48>
 80097ce:	f104 0a19 	add.w	sl, r4, #25
 80097d2:	68e3      	ldr	r3, [r4, #12]
 80097d4:	6832      	ldr	r2, [r6, #0]
 80097d6:	1a9b      	subs	r3, r3, r2
 80097d8:	42ab      	cmp	r3, r5
 80097da:	dc26      	bgt.n	800982a <_printf_common+0x96>
 80097dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80097e0:	6822      	ldr	r2, [r4, #0]
 80097e2:	3b00      	subs	r3, #0
 80097e4:	bf18      	it	ne
 80097e6:	2301      	movne	r3, #1
 80097e8:	0692      	lsls	r2, r2, #26
 80097ea:	d42b      	bmi.n	8009844 <_printf_common+0xb0>
 80097ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80097f0:	4641      	mov	r1, r8
 80097f2:	4638      	mov	r0, r7
 80097f4:	47c8      	blx	r9
 80097f6:	3001      	adds	r0, #1
 80097f8:	d01e      	beq.n	8009838 <_printf_common+0xa4>
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	6922      	ldr	r2, [r4, #16]
 80097fe:	f003 0306 	and.w	r3, r3, #6
 8009802:	2b04      	cmp	r3, #4
 8009804:	bf02      	ittt	eq
 8009806:	68e5      	ldreq	r5, [r4, #12]
 8009808:	6833      	ldreq	r3, [r6, #0]
 800980a:	1aed      	subeq	r5, r5, r3
 800980c:	68a3      	ldr	r3, [r4, #8]
 800980e:	bf0c      	ite	eq
 8009810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009814:	2500      	movne	r5, #0
 8009816:	4293      	cmp	r3, r2
 8009818:	bfc4      	itt	gt
 800981a:	1a9b      	subgt	r3, r3, r2
 800981c:	18ed      	addgt	r5, r5, r3
 800981e:	2600      	movs	r6, #0
 8009820:	341a      	adds	r4, #26
 8009822:	42b5      	cmp	r5, r6
 8009824:	d11a      	bne.n	800985c <_printf_common+0xc8>
 8009826:	2000      	movs	r0, #0
 8009828:	e008      	b.n	800983c <_printf_common+0xa8>
 800982a:	2301      	movs	r3, #1
 800982c:	4652      	mov	r2, sl
 800982e:	4641      	mov	r1, r8
 8009830:	4638      	mov	r0, r7
 8009832:	47c8      	blx	r9
 8009834:	3001      	adds	r0, #1
 8009836:	d103      	bne.n	8009840 <_printf_common+0xac>
 8009838:	f04f 30ff 	mov.w	r0, #4294967295
 800983c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009840:	3501      	adds	r5, #1
 8009842:	e7c6      	b.n	80097d2 <_printf_common+0x3e>
 8009844:	18e1      	adds	r1, r4, r3
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	2030      	movs	r0, #48	@ 0x30
 800984a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800984e:	4422      	add	r2, r4
 8009850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009858:	3302      	adds	r3, #2
 800985a:	e7c7      	b.n	80097ec <_printf_common+0x58>
 800985c:	2301      	movs	r3, #1
 800985e:	4622      	mov	r2, r4
 8009860:	4641      	mov	r1, r8
 8009862:	4638      	mov	r0, r7
 8009864:	47c8      	blx	r9
 8009866:	3001      	adds	r0, #1
 8009868:	d0e6      	beq.n	8009838 <_printf_common+0xa4>
 800986a:	3601      	adds	r6, #1
 800986c:	e7d9      	b.n	8009822 <_printf_common+0x8e>
	...

08009870 <_printf_i>:
 8009870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	7e0f      	ldrb	r7, [r1, #24]
 8009876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009878:	2f78      	cmp	r7, #120	@ 0x78
 800987a:	4691      	mov	r9, r2
 800987c:	4680      	mov	r8, r0
 800987e:	460c      	mov	r4, r1
 8009880:	469a      	mov	sl, r3
 8009882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009886:	d807      	bhi.n	8009898 <_printf_i+0x28>
 8009888:	2f62      	cmp	r7, #98	@ 0x62
 800988a:	d80a      	bhi.n	80098a2 <_printf_i+0x32>
 800988c:	2f00      	cmp	r7, #0
 800988e:	f000 80d2 	beq.w	8009a36 <_printf_i+0x1c6>
 8009892:	2f58      	cmp	r7, #88	@ 0x58
 8009894:	f000 80b9 	beq.w	8009a0a <_printf_i+0x19a>
 8009898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800989c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80098a0:	e03a      	b.n	8009918 <_printf_i+0xa8>
 80098a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80098a6:	2b15      	cmp	r3, #21
 80098a8:	d8f6      	bhi.n	8009898 <_printf_i+0x28>
 80098aa:	a101      	add	r1, pc, #4	@ (adr r1, 80098b0 <_printf_i+0x40>)
 80098ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098b0:	08009909 	.word	0x08009909
 80098b4:	0800991d 	.word	0x0800991d
 80098b8:	08009899 	.word	0x08009899
 80098bc:	08009899 	.word	0x08009899
 80098c0:	08009899 	.word	0x08009899
 80098c4:	08009899 	.word	0x08009899
 80098c8:	0800991d 	.word	0x0800991d
 80098cc:	08009899 	.word	0x08009899
 80098d0:	08009899 	.word	0x08009899
 80098d4:	08009899 	.word	0x08009899
 80098d8:	08009899 	.word	0x08009899
 80098dc:	08009a1d 	.word	0x08009a1d
 80098e0:	08009947 	.word	0x08009947
 80098e4:	080099d7 	.word	0x080099d7
 80098e8:	08009899 	.word	0x08009899
 80098ec:	08009899 	.word	0x08009899
 80098f0:	08009a3f 	.word	0x08009a3f
 80098f4:	08009899 	.word	0x08009899
 80098f8:	08009947 	.word	0x08009947
 80098fc:	08009899 	.word	0x08009899
 8009900:	08009899 	.word	0x08009899
 8009904:	080099df 	.word	0x080099df
 8009908:	6833      	ldr	r3, [r6, #0]
 800990a:	1d1a      	adds	r2, r3, #4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	6032      	str	r2, [r6, #0]
 8009910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009918:	2301      	movs	r3, #1
 800991a:	e09d      	b.n	8009a58 <_printf_i+0x1e8>
 800991c:	6833      	ldr	r3, [r6, #0]
 800991e:	6820      	ldr	r0, [r4, #0]
 8009920:	1d19      	adds	r1, r3, #4
 8009922:	6031      	str	r1, [r6, #0]
 8009924:	0606      	lsls	r6, r0, #24
 8009926:	d501      	bpl.n	800992c <_printf_i+0xbc>
 8009928:	681d      	ldr	r5, [r3, #0]
 800992a:	e003      	b.n	8009934 <_printf_i+0xc4>
 800992c:	0645      	lsls	r5, r0, #25
 800992e:	d5fb      	bpl.n	8009928 <_printf_i+0xb8>
 8009930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009934:	2d00      	cmp	r5, #0
 8009936:	da03      	bge.n	8009940 <_printf_i+0xd0>
 8009938:	232d      	movs	r3, #45	@ 0x2d
 800993a:	426d      	negs	r5, r5
 800993c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009940:	4859      	ldr	r0, [pc, #356]	@ (8009aa8 <_printf_i+0x238>)
 8009942:	230a      	movs	r3, #10
 8009944:	e011      	b.n	800996a <_printf_i+0xfa>
 8009946:	6821      	ldr	r1, [r4, #0]
 8009948:	6833      	ldr	r3, [r6, #0]
 800994a:	0608      	lsls	r0, r1, #24
 800994c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009950:	d402      	bmi.n	8009958 <_printf_i+0xe8>
 8009952:	0649      	lsls	r1, r1, #25
 8009954:	bf48      	it	mi
 8009956:	b2ad      	uxthmi	r5, r5
 8009958:	2f6f      	cmp	r7, #111	@ 0x6f
 800995a:	4853      	ldr	r0, [pc, #332]	@ (8009aa8 <_printf_i+0x238>)
 800995c:	6033      	str	r3, [r6, #0]
 800995e:	bf14      	ite	ne
 8009960:	230a      	movne	r3, #10
 8009962:	2308      	moveq	r3, #8
 8009964:	2100      	movs	r1, #0
 8009966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800996a:	6866      	ldr	r6, [r4, #4]
 800996c:	60a6      	str	r6, [r4, #8]
 800996e:	2e00      	cmp	r6, #0
 8009970:	bfa2      	ittt	ge
 8009972:	6821      	ldrge	r1, [r4, #0]
 8009974:	f021 0104 	bicge.w	r1, r1, #4
 8009978:	6021      	strge	r1, [r4, #0]
 800997a:	b90d      	cbnz	r5, 8009980 <_printf_i+0x110>
 800997c:	2e00      	cmp	r6, #0
 800997e:	d04b      	beq.n	8009a18 <_printf_i+0x1a8>
 8009980:	4616      	mov	r6, r2
 8009982:	fbb5 f1f3 	udiv	r1, r5, r3
 8009986:	fb03 5711 	mls	r7, r3, r1, r5
 800998a:	5dc7      	ldrb	r7, [r0, r7]
 800998c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009990:	462f      	mov	r7, r5
 8009992:	42bb      	cmp	r3, r7
 8009994:	460d      	mov	r5, r1
 8009996:	d9f4      	bls.n	8009982 <_printf_i+0x112>
 8009998:	2b08      	cmp	r3, #8
 800999a:	d10b      	bne.n	80099b4 <_printf_i+0x144>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	07df      	lsls	r7, r3, #31
 80099a0:	d508      	bpl.n	80099b4 <_printf_i+0x144>
 80099a2:	6923      	ldr	r3, [r4, #16]
 80099a4:	6861      	ldr	r1, [r4, #4]
 80099a6:	4299      	cmp	r1, r3
 80099a8:	bfde      	ittt	le
 80099aa:	2330      	movle	r3, #48	@ 0x30
 80099ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80099b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80099b4:	1b92      	subs	r2, r2, r6
 80099b6:	6122      	str	r2, [r4, #16]
 80099b8:	f8cd a000 	str.w	sl, [sp]
 80099bc:	464b      	mov	r3, r9
 80099be:	aa03      	add	r2, sp, #12
 80099c0:	4621      	mov	r1, r4
 80099c2:	4640      	mov	r0, r8
 80099c4:	f7ff fee6 	bl	8009794 <_printf_common>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d14a      	bne.n	8009a62 <_printf_i+0x1f2>
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	b004      	add	sp, #16
 80099d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099d6:	6823      	ldr	r3, [r4, #0]
 80099d8:	f043 0320 	orr.w	r3, r3, #32
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	4833      	ldr	r0, [pc, #204]	@ (8009aac <_printf_i+0x23c>)
 80099e0:	2778      	movs	r7, #120	@ 0x78
 80099e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	6831      	ldr	r1, [r6, #0]
 80099ea:	061f      	lsls	r7, r3, #24
 80099ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80099f0:	d402      	bmi.n	80099f8 <_printf_i+0x188>
 80099f2:	065f      	lsls	r7, r3, #25
 80099f4:	bf48      	it	mi
 80099f6:	b2ad      	uxthmi	r5, r5
 80099f8:	6031      	str	r1, [r6, #0]
 80099fa:	07d9      	lsls	r1, r3, #31
 80099fc:	bf44      	itt	mi
 80099fe:	f043 0320 	orrmi.w	r3, r3, #32
 8009a02:	6023      	strmi	r3, [r4, #0]
 8009a04:	b11d      	cbz	r5, 8009a0e <_printf_i+0x19e>
 8009a06:	2310      	movs	r3, #16
 8009a08:	e7ac      	b.n	8009964 <_printf_i+0xf4>
 8009a0a:	4827      	ldr	r0, [pc, #156]	@ (8009aa8 <_printf_i+0x238>)
 8009a0c:	e7e9      	b.n	80099e2 <_printf_i+0x172>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	f023 0320 	bic.w	r3, r3, #32
 8009a14:	6023      	str	r3, [r4, #0]
 8009a16:	e7f6      	b.n	8009a06 <_printf_i+0x196>
 8009a18:	4616      	mov	r6, r2
 8009a1a:	e7bd      	b.n	8009998 <_printf_i+0x128>
 8009a1c:	6833      	ldr	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	6961      	ldr	r1, [r4, #20]
 8009a22:	1d18      	adds	r0, r3, #4
 8009a24:	6030      	str	r0, [r6, #0]
 8009a26:	062e      	lsls	r6, r5, #24
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	d501      	bpl.n	8009a30 <_printf_i+0x1c0>
 8009a2c:	6019      	str	r1, [r3, #0]
 8009a2e:	e002      	b.n	8009a36 <_printf_i+0x1c6>
 8009a30:	0668      	lsls	r0, r5, #25
 8009a32:	d5fb      	bpl.n	8009a2c <_printf_i+0x1bc>
 8009a34:	8019      	strh	r1, [r3, #0]
 8009a36:	2300      	movs	r3, #0
 8009a38:	6123      	str	r3, [r4, #16]
 8009a3a:	4616      	mov	r6, r2
 8009a3c:	e7bc      	b.n	80099b8 <_printf_i+0x148>
 8009a3e:	6833      	ldr	r3, [r6, #0]
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	6032      	str	r2, [r6, #0]
 8009a44:	681e      	ldr	r6, [r3, #0]
 8009a46:	6862      	ldr	r2, [r4, #4]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7f6 fc50 	bl	80002f0 <memchr>
 8009a50:	b108      	cbz	r0, 8009a56 <_printf_i+0x1e6>
 8009a52:	1b80      	subs	r0, r0, r6
 8009a54:	6060      	str	r0, [r4, #4]
 8009a56:	6863      	ldr	r3, [r4, #4]
 8009a58:	6123      	str	r3, [r4, #16]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a60:	e7aa      	b.n	80099b8 <_printf_i+0x148>
 8009a62:	6923      	ldr	r3, [r4, #16]
 8009a64:	4632      	mov	r2, r6
 8009a66:	4649      	mov	r1, r9
 8009a68:	4640      	mov	r0, r8
 8009a6a:	47d0      	blx	sl
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d0ad      	beq.n	80099cc <_printf_i+0x15c>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	079b      	lsls	r3, r3, #30
 8009a74:	d413      	bmi.n	8009a9e <_printf_i+0x22e>
 8009a76:	68e0      	ldr	r0, [r4, #12]
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	4298      	cmp	r0, r3
 8009a7c:	bfb8      	it	lt
 8009a7e:	4618      	movlt	r0, r3
 8009a80:	e7a6      	b.n	80099d0 <_printf_i+0x160>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4632      	mov	r2, r6
 8009a86:	4649      	mov	r1, r9
 8009a88:	4640      	mov	r0, r8
 8009a8a:	47d0      	blx	sl
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d09d      	beq.n	80099cc <_printf_i+0x15c>
 8009a90:	3501      	adds	r5, #1
 8009a92:	68e3      	ldr	r3, [r4, #12]
 8009a94:	9903      	ldr	r1, [sp, #12]
 8009a96:	1a5b      	subs	r3, r3, r1
 8009a98:	42ab      	cmp	r3, r5
 8009a9a:	dcf2      	bgt.n	8009a82 <_printf_i+0x212>
 8009a9c:	e7eb      	b.n	8009a76 <_printf_i+0x206>
 8009a9e:	2500      	movs	r5, #0
 8009aa0:	f104 0619 	add.w	r6, r4, #25
 8009aa4:	e7f5      	b.n	8009a92 <_printf_i+0x222>
 8009aa6:	bf00      	nop
 8009aa8:	08009c3d 	.word	0x08009c3d
 8009aac:	08009c4e 	.word	0x08009c4e

08009ab0 <memmove>:
 8009ab0:	4288      	cmp	r0, r1
 8009ab2:	b510      	push	{r4, lr}
 8009ab4:	eb01 0402 	add.w	r4, r1, r2
 8009ab8:	d902      	bls.n	8009ac0 <memmove+0x10>
 8009aba:	4284      	cmp	r4, r0
 8009abc:	4623      	mov	r3, r4
 8009abe:	d807      	bhi.n	8009ad0 <memmove+0x20>
 8009ac0:	1e43      	subs	r3, r0, #1
 8009ac2:	42a1      	cmp	r1, r4
 8009ac4:	d008      	beq.n	8009ad8 <memmove+0x28>
 8009ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ace:	e7f8      	b.n	8009ac2 <memmove+0x12>
 8009ad0:	4402      	add	r2, r0
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	428a      	cmp	r2, r1
 8009ad6:	d100      	bne.n	8009ada <memmove+0x2a>
 8009ad8:	bd10      	pop	{r4, pc}
 8009ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ae2:	e7f7      	b.n	8009ad4 <memmove+0x24>

08009ae4 <_realloc_r>:
 8009ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ae8:	4680      	mov	r8, r0
 8009aea:	4615      	mov	r5, r2
 8009aec:	460c      	mov	r4, r1
 8009aee:	b921      	cbnz	r1, 8009afa <_realloc_r+0x16>
 8009af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009af4:	4611      	mov	r1, r2
 8009af6:	f7ff baf9 	b.w	80090ec <_malloc_r>
 8009afa:	b92a      	cbnz	r2, 8009b08 <_realloc_r+0x24>
 8009afc:	f7ff fca8 	bl	8009450 <_free_r>
 8009b00:	2400      	movs	r4, #0
 8009b02:	4620      	mov	r0, r4
 8009b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b08:	f000 f81a 	bl	8009b40 <_malloc_usable_size_r>
 8009b0c:	4285      	cmp	r5, r0
 8009b0e:	4606      	mov	r6, r0
 8009b10:	d802      	bhi.n	8009b18 <_realloc_r+0x34>
 8009b12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b16:	d8f4      	bhi.n	8009b02 <_realloc_r+0x1e>
 8009b18:	4629      	mov	r1, r5
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f7ff fae6 	bl	80090ec <_malloc_r>
 8009b20:	4607      	mov	r7, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d0ec      	beq.n	8009b00 <_realloc_r+0x1c>
 8009b26:	42b5      	cmp	r5, r6
 8009b28:	462a      	mov	r2, r5
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	bf28      	it	cs
 8009b2e:	4632      	movcs	r2, r6
 8009b30:	f7ff fc80 	bl	8009434 <memcpy>
 8009b34:	4621      	mov	r1, r4
 8009b36:	4640      	mov	r0, r8
 8009b38:	f7ff fc8a 	bl	8009450 <_free_r>
 8009b3c:	463c      	mov	r4, r7
 8009b3e:	e7e0      	b.n	8009b02 <_realloc_r+0x1e>

08009b40 <_malloc_usable_size_r>:
 8009b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b44:	1f18      	subs	r0, r3, #4
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	bfbc      	itt	lt
 8009b4a:	580b      	ldrlt	r3, [r1, r0]
 8009b4c:	18c0      	addlt	r0, r0, r3
 8009b4e:	4770      	bx	lr

08009b50 <_init>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	bf00      	nop
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr

08009b5c <_fini>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr
